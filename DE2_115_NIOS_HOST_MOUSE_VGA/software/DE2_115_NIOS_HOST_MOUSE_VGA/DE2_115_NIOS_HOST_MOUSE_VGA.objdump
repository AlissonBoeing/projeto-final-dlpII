
DE2_115_NIOS_HOST_MOUSE_VGA.elf:     file format elf32-littlenios2
DE2_115_NIOS_HOST_MOUSE_VGA.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000154c0 memsz 0x000154c0 flags r-x
    LOAD off    0x000164e0 vaddr 0x000154e0 paddr 0x00017104 align 2**12
         filesz 0x00001c24 memsz 0x00001c24 flags rw-
    LOAD off    0x00018d28 vaddr 0x00018d28 paddr 0x00018d28 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000145f0  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d30  000147b0  000147b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c24  000154e0  00017104  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00018d28  00018d28  00018d28  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00018e88  00018e88  00018104  2**0
                  CONTENTS
  7 .sram         00000000  08200000  08200000  00018104  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018104  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fd8  00000000  00000000  00018128  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024beb  00000000  00000000  00019100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000983c  00000000  00000000  0003dceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c441  00000000  00000000  00047527  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002598  00000000  00000000  00053968  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a32  00000000  00000000  00055f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b7c  00000000  00000000  00059932  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000714b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f0  00000000  00000000  00071510  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00076478  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007647b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007647e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007647f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00076480  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00076484  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00076488  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007648c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00076495  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007649e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  000764a7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003b  00000000  00000000  000764b3  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e61  00000000  00000000  000764ee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
000147b0 l    d  .rodata	00000000 .rodata
000154e0 l    d  .rwdata	00000000 .rwdata
00018d28 l    d  .bss	00000000 .bss
00018e88 l    d  .sdram	00000000 .sdram
08200000 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE2_115_NIOS_HOST_MOUSE_VGA_bsp//obj/HAL/src/crt0.o
00000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 DE2_115_NIOS_HOST_MOUSE_VGA.c
00018d28 l     O .bss	00000002 ctl_reg.3627
00018d2a l     O .bss	00000002 no_device.3628
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 SEG7.c
000154e0 l     O .rwdata	00000010 szMap
00000000 l    df *ABS*	00000000 VGA.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014fa2 l     O .rodata	00000010 zeroes.4404
00006ca0 l     F .text	000000bc __sbprintf
00014fb2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006eb0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000089e0 l     F .text	00000008 __fp_unlock
000089f4 l     F .text	0000019c __sinit.part.1
00008b90 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000154f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00015934 l     O .rwdata	00000020 lc_ctype_charset
00015914 l     O .rwdata	00000020 lc_message_charset
00015954 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00014fe4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000bf8c l     F .text	000000fc __sprint_r.part.0
00015118 l     O .rodata	00000010 blanks.4348
00015108 l     O .rodata	00000010 zeroes.4349
0000d518 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00011020 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001112c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011158 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011244 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00011324 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00011410 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000115e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000170ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00011860 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011994 l     F .text	00000034 alt_dev_reg
00015f3c l     O .rwdata	00001060 jtag_uart
00016f9c l     O .rwdata	00000120 lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011ca0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00011eac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
000170f0 l     O .rwdata	00000004 colstart
000124e4 l     F .text	000000b8 lcd_write_command
0001259c l     F .text	000000d8 lcd_write_data
00012674 l     F .text	000000d0 lcd_clear_screen
00012744 l     F .text	000001ec lcd_repaint_screen
00012930 l     F .text	000000cc lcd_scroll_up
000129fc l     F .text	000002ac lcd_handle_escape
00013180 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000133c0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00013780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013bf4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013d34 l     F .text	0000003c alt_get_errno
00013d70 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0001535e l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b5d0 g     F .text	00000074 _mprec_log10
0000b6bc g     F .text	0000008c __any_on
0000dab4 g     F .text	00000054 _isatty_r
00014ff0 g     O .rodata	00000028 __mprec_tinytens
00011520 g     F .text	0000007c alt_main
000047c4 g     F .text	000000c0 _puts_r
00018d88 g     O .bss	00000100 alt_irq
0000db08 g     F .text	00000060 _lseek_r
00017104 g       *ABS*	00000000 __flash_rwdata_start
0000fb4c g     F .text	00000088 .hidden __eqdf2
00018e88 g       *ABS*	00000000 __alt_heap_start
00004788 g     F .text	0000003c printf
0000dd20 g     F .text	0000009c _wcrtomb_r
08200000 g       *ABS*	00000000 __alt_mem_sram
0000be4c g     F .text	0000005c __sseek
00008d30 g     F .text	00000010 __sinit
0000dbc8 g     F .text	00000140 __swbuf_r
000097f8 g     F .text	0000007c _setlocale_r
00008b98 g     F .text	00000068 __sfmoreglue
000115c0 g     F .text	00000024 __malloc_unlock
0000a4c8 g     F .text	0000015c memmove
00008d18 g     F .text	00000018 _cleanup
0000a74c g     F .text	000000a8 _Balloc
0000408c g     F .text	00000060 LCD_Test
0000fbd4 g     F .text	000000dc .hidden __gtdf2
00004480 g     F .text	0000005c Set_Pixel_On_Color
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000da58 g     F .text	0000005c _fstat_r
00018d44 g     O .bss	00000004 errno
0000bdc8 g     F .text	00000008 __seofread
00018d4c g     O .bss	00000004 alt_argv
0001f0bc g       *ABS*	00000000 _gp
00011830 g     F .text	00000030 usleep
00015dbc g     O .rwdata	00000180 alt_fd_list
00000260 g     F .text	00000090 Vga_clear_screen
00014150 g     F .text	00000090 alt_find_dev
0000a380 g     F .text	00000148 memcpy
000089e8 g     F .text	0000000c _cleanup_r
00010e38 g     F .text	000000dc .hidden __floatsidf
00013cb8 g     F .text	0000007c alt_io_redirect
0000fcb0 g     F .text	000000f4 .hidden __ltdf2
000147b0 g       *ABS*	00000000 __DTOR_END__
00004884 g     F .text	00000014 puts
0000bcac g     F .text	00000074 __fpclassifyd
0000b52c g     F .text	000000a4 __ratio
0000d4fc g     F .text	0000001c __vfiprintf_internal
000120a4 g     F .text	0000021c altera_avalon_jtag_uart_read
00004758 g     F .text	00000030 _printf_r
00004630 g     F .text	00000064 .hidden __udivsi3
00011280 g     F .text	000000a4 isatty
00015040 g     O .rodata	000000c8 __mprec_tens
00009874 g     F .text	0000000c __locale_charset
0001438c g     F .text	00000090 alt_icache_flush
00018d40 g     O .bss	00000004 __malloc_top_pad
000170c4 g     O .rwdata	00000004 __mb_cur_max
00004754 g     F .text	00000004 itoa
000098a4 g     F .text	0000000c _localeconv_r
0000ab58 g     F .text	0000003c __i2b
000091b4 g     F .text	000004bc __sfvwrite_r
000040ec g     F .text	00000060 SEG7_Clear
0000bd20 g     F .text	00000054 _sbrk_r
0000db68 g     F .text	00000060 _read_r
000170e4 g     O .rwdata	00000004 alt_max_fd
0000d74c g     F .text	000000f0 _fclose_r
000089b0 g     F .text	00000030 fflush
00018d3c g     O .bss	00000004 __malloc_max_sbrked_mem
0000e9b8 g     F .text	000008ac .hidden __adddf3
0000b2d4 g     F .text	0000010c __b2d
0000e480 g     F .text	00000538 .hidden __umoddi3
0001144c g     F .text	000000d4 lseek
000170bc g     O .rwdata	00000004 _global_impure_ptr
0000b748 g     F .text	00000564 _realloc_r
00018e88 g       *ABS*	00000000 __bss_end
00013b04 g     F .text	000000f0 alt_iic_isr_register
00014024 g     F .text	00000108 alt_tick
0000df08 g     F .text	00000578 .hidden __udivdi3
0000d9b4 g     F .text	00000024 _fputwc_r
00015018 g     O .rodata	00000028 __mprec_bigtens
0000a93c g     F .text	00000104 __s2b
00010f14 g     F .text	000000a8 .hidden __floatunsidf
0000b014 g     F .text	00000060 __mcmp
00008d50 g     F .text	00000018 __fp_lock_all
00013ab8 g     F .text	0000004c alt_ic_irq_enabled
000041ac g     F .text	00000074 SEG7_Number
00013f88 g     F .text	0000009c alt_alarm_stop
00018d54 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d4 alt_irq_handler
00015d94 g     O .rwdata	00000028 alt_dev_null
000043dc g     F .text	00000048 Set_Cursor_XY
00013738 g     F .text	00000048 alt_dcache_flush_all
0000aa40 g     F .text	00000068 __hi0bits
00004a88 g     F .text	00000004 utoa
00010db8 g     F .text	00000080 .hidden __fixdfsi
00017104 g       *ABS*	00000000 __ram_rwdata_end
000170dc g     O .rwdata	00000008 alt_dev_list
0001189c g     F .text	000000f8 write
000154e0 g       *ABS*	00000000 __ram_rodata_end
00011194 g     F .text	000000b0 fstat
0000fcb0 g     F .text	000000f4 .hidden __ledf2
0000ad8c g     F .text	00000140 __pow5mult
0000c0a0 g     F .text	0000145c ___vfiprintf_internal_r
00018d34 g     O .bss	00000004 __nlocale_changed
00004694 g     F .text	00000058 .hidden __umodsi3
00018e88 g       *ABS*	00000000 end
00012ca8 g     F .text	000004d8 altera_avalon_lcd_16207_write
000046ec g     F .text	00000068 __itoa
00011be0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000147b0 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00013438 g     F .text	0000007c alt_avalon_timer_sc_init
00010fbc g     F .text	00000064 .hidden __clzsi2
000122c0 g     F .text	00000224 altera_avalon_jtag_uart_write
00008d40 g     F .text	00000004 __sfp_lock_acquire
0000a29c g     F .text	000000e4 memchr
00004a8c g     F .text	000021f8 ___vfprintf_internal_r
00008ea4 g     F .text	00000310 _free_r
00009880 g     F .text	00000010 __locale_mb_cur_max
000145fc g     F .text	00000180 __call_exitprocs
00018d30 g     O .bss	00000004 __mlocale_changed
000170c8 g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000004c _start
00018d58 g     O .bss	00000004 _alt_tick_rate
0000aecc g     F .text	00000148 __lshift
00018d5c g     O .bss	00000004 _alt_nticks
00011620 g     F .text	000000fc read
00011a00 g     F .text	0000007c alt_sys_init
000144e4 g     F .text	00000118 __register_exitproc
0000ab94 g     F .text	000001f8 __multiply
00011f4c g     F .text	00000068 altera_avalon_jtag_uart_close
000154e0 g       *ABS*	00000000 __ram_rwdata_start
000147b0 g       *ABS*	00000000 __ram_rodata_start
00018d60 g     O .bss	00000028 __malloc_current_mallinfo
0000b3e0 g     F .text	0000014c __d2b
00011a7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000142e8 g     F .text	000000a4 alt_get_fd
000135e0 g     F .text	00000158 alt_busy_sleep
0000d634 g     F .text	00000054 _close_r
00014468 g     F .text	0000007c memcmp
00011b3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018e88 g       *ABS*	00000000 __alt_stack_base
00011b8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00006d5c g     F .text	00000154 __swsetup_r
0000f264 g     F .text	000008e8 .hidden __divdf3
00008c00 g     F .text	00000118 __sfp
0000b644 g     F .text	00000078 __copybits
0001598c g     O .rwdata	00000408 __malloc_av_
00008d4c g     F .text	00000004 __sinit_lock_release
0000fda4 g     F .text	00000718 .hidden __muldf3
0000bd74 g     F .text	00000054 __sread
0000414c g     F .text	00000060 SEG7_Full
000141e0 g     F .text	00000108 alt_find_file
000042f0 g     F .text	000000ec SEG7_Decimal
000137bc g     F .text	000000a4 alt_dev_llist_insert
0001159c g     F .text	00000024 __malloc_lock
00011780 g     F .text	000000b0 sbrk
00008954 g     F .text	0000005c _fflush_r
0000d688 g     F .text	000000c4 _calloc_r
00004930 g     F .text	00000158 __utoa
00018d28 g       *ABS*	00000000 __bss_start
00003f28 g     F .text	000000a0 LCD_Init
0000a624 g     F .text	00000128 memset
000002f0 g     F .text	00003ae8 main
00018d50 g     O .bss	00000004 alt_envp
00018d38 g     O .bss	00000004 __malloc_max_total_mem
00011adc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000dd08 g     F .text	00000018 __swbuf
00004424 g     F .text	0000005c Set_Cursor_Color
0001322c g     F .text	00000134 altera_avalon_lcd_16207_init
0000404c g     F .text	00000040 LCD_Line2
0000bea8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000d83c g     F .text	00000014 fclose
000070b0 g     F .text	00001688 _dtoa_r
00009a90 g     F .text	0000080c _malloc_r
0000de7c g     F .text	00000030 __ascii_wctomb
000170e8 g     O .rwdata	00000004 alt_errno
00009670 g     F .text	000000c4 _fwalk
00004538 g     F .text	00000084 .hidden __divsi3
00008d80 g     F .text	00000124 _malloc_trim_r
000147b0 g       *ABS*	00000000 __CTOR_END__
0000beb0 g     F .text	000000dc strcmp
000147b0 g       *ABS*	00000000 __flash_rodata_start
000147b0 g       *ABS*	00000000 __DTOR_LIST__
0000fb4c g     F .text	00000088 .hidden __nedf2
00003e28 g     F .text	00000040 UsbRead
000119c8 g     F .text	00000038 alt_irq_init
00003fc8 g     F .text	00000084 LCD_Show_Text
0001171c g     F .text	00000064 alt_release_fd
0000020c g     F .text	00000054 maxmin
00015128 g     O .rodata	00000100 .hidden __clz_tab
00004220 g     F .text	000000d0 SEG7_Hex
00018d2c g     O .bss	00000004 _PathLocale
0001441c g     F .text	00000014 atexit
0000d5d4 g     F .text	00000060 _write_r
000098b0 g     F .text	00000018 setlocale
000170c0 g     O .rwdata	00000004 _impure_ptr
00018d48 g     O .bss	00000004 alt_argc
00008738 g     F .text	0000021c __sflush_r
000138c0 g     F .text	00000060 _do_dtors
0000989c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000b270 g     F .text	00000064 __ulp
00008d68 g     F .text	00000018 __fp_unlock_all
00013360 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
000170d4 g     O .rwdata	00000008 alt_fs_list
000044dc g     F .text	0000005c Set_Pixel_Off_Color
00000020 g       *ABS*	00000000 __ram_exceptions_start
000098c8 g     F .text	0000000c localeconv
00013954 g     F .text	00000050 alt_ic_isr_register
00017104 g       *ABS*	00000000 _edata
00018e88 g       *ABS*	00000000 _end
00003dd8 g     F .text	00000050 UsbWrite
0000d850 g     F .text	00000164 __fputwc
000001c0 g       *ABS*	00000000 __ram_exceptions_end
00011fb4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00013a2c g     F .text	0000008c alt_ic_irq_disable
0000bdd0 g     F .text	0000007c __swrite
000170cc g     O .rwdata	00000004 __malloc_trim_threshold
0001412c g     F .text	00000024 altera_nios2_qsys_irq_init
00009890 g     F .text	0000000c __locale_msgcharset
00014430 g     F .text	00000038 exit
00009734 g     F .text	000000c4 _fwalk_reent
0000b074 g     F .text	000001fc __mdiff
000045bc g     F .text	00000074 .hidden __modsi3
00017100 g     O .rwdata	00000004 __ctype_ptr__
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008d44 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0001525d g     O .rodata	00000101 _ctype_
0001477c g     F .text	00000034 _exit
000134b4 g     F .text	0000012c alt_alarm_start
000098d4 g     F .text	000001bc __smakebuf_r
00004898 g     F .text	00000098 strlen
00013e34 g     F .text	00000154 open
0000fbd4 g     F .text	000000dc .hidden __gedf2
000170d0 g     O .rwdata	00000004 __wctomb
0000c088 g     F .text	00000018 __sprint_r
00013920 g     F .text	00000034 alt_icache_flush_all
000170f4 g     O .rwdata	00000004 alt_priority_mask
000139a4 g     F .text	00000088 alt_ic_irq_enable
00006c84 g     F .text	0000001c __vfprintf_internal
0000deac g     F .text	0000005c _wctomb_r
000104bc g     F .text	000008fc .hidden __subdf3
0000aaa8 g     F .text	000000b0 __lo0bits
000170f8 g     O .rwdata	00000008 alt_alarm_list
00013860 g     F .text	00000060 _do_ctors
00003e68 g     F .text	000000c0 UsbSoftReset
0000ddbc g     F .text	000000c0 wcrtomb
0001105c g     F .text	000000d0 close
0001138c g     F .text	00000084 alt_load
0000d9d8 g     F .text	00000080 fputwc
00008d48 g     F .text	00000004 __sinit_lock_acquire
0000a81c g     F .text	00000120 __multadd
0000a7f4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407014 	ori	at,at,448
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	008000b4 	movhi	r2,2
 130:	10a36204 	addi	r2,r2,-29304
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	008000b4 	movhi	r2,2
 148:	10a36204 	addi	r2,r2,-29304
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1cc:	00bffd16 	blt	zero,r2,1c4 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1dc:	d6bc2f14 	ori	gp,gp,61628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e4:	10a34a14 	ori	r2,r2,36136

    movhi r3, %hi(__bss_end)
     1e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1ec:	18e3a214 	ori	r3,r3,36488

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x40>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	001138c0 	call	1138c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	00115200 	call	11520 <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <alt_after_alt_main>

0000020c <maxmin>:
*
******************************************************************************/
void UsbSoftReset();
//--------------------------------------
int maxmin(int no, int max, int min)
{
     20c:	defffc04 	addi	sp,sp,-16
     210:	df000315 	stw	fp,12(sp)
     214:	df000304 	addi	fp,sp,12
     218:	e13ffd15 	stw	r4,-12(fp)
     21c:	e17ffe15 	stw	r5,-8(fp)
     220:	e1bfff15 	stw	r6,-4(fp)
 if(no>max) {no=max;}
     224:	e0bffd17 	ldw	r2,-12(fp)
     228:	e0fffe17 	ldw	r3,-8(fp)
     22c:	1880020e 	bge	r3,r2,238 <maxmin+0x2c>
     230:	e0bffe17 	ldw	r2,-8(fp)
     234:	e0bffd15 	stw	r2,-12(fp)
 if(no<min) {no=min;}
     238:	e0fffd17 	ldw	r3,-12(fp)
     23c:	e0bfff17 	ldw	r2,-4(fp)
     240:	1880020e 	bge	r3,r2,24c <maxmin+0x40>
     244:	e0bfff17 	ldw	r2,-4(fp)
     248:	e0bffd15 	stw	r2,-12(fp)

 return(no);
     24c:	e0bffd17 	ldw	r2,-12(fp)
}
     250:	e037883a 	mov	sp,fp
     254:	df000017 	ldw	fp,0(sp)
     258:	dec00104 	addi	sp,sp,4
     25c:	f800283a 	ret

00000260 <Vga_clear_screen>:
//--------------------------------------
//----------clear screen----------------
void Vga_clear_screen(base)
{
     260:	defffd04 	addi	sp,sp,-12
     264:	df000215 	stw	fp,8(sp)
     268:	df000204 	addi	fp,sp,8
     26c:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
     270:	e03ffe8d 	sth	zero,-6(fp)
     274:	00001606 	br	2d0 <Vga_clear_screen+0x70>
      {
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
     278:	e03ffe0d 	sth	zero,-8(fp)
     27c:	00000e06 	br	2b8 <Vga_clear_screen+0x58>
        {
            Vga_Clr_Pixel(base,x_col,y_col);
     280:	e0bffe8b 	ldhu	r2,-6(fp)
     284:	10c0a024 	muli	r3,r2,640
     288:	e0bffe0b 	ldhu	r2,-8(fp)
     28c:	1885883a 	add	r2,r3,r2
     290:	1085883a 	add	r2,r2,r2
     294:	1085883a 	add	r2,r2,r2
     298:	1007883a 	mov	r3,r2
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	1885883a 	add	r2,r3,r2
     2a4:	0007883a 	mov	r3,zero
     2a8:	10c00035 	stwio	r3,0(r2)
void Vga_clear_screen(base)
{
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
      {
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
     2ac:	e0bffe0b 	ldhu	r2,-8(fp)
     2b0:	10800044 	addi	r2,r2,1
     2b4:	e0bffe0d 	sth	r2,-8(fp)
     2b8:	e0bffe0b 	ldhu	r2,-8(fp)
     2bc:	1080a030 	cmpltui	r2,r2,640
     2c0:	103fef1e 	bne	r2,zero,280 <Vga_clear_screen+0x20>
//--------------------------------------
//----------clear screen----------------
void Vga_clear_screen(base)
{
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
     2c4:	e0bffe8b 	ldhu	r2,-6(fp)
     2c8:	10800044 	addi	r2,r2,1
     2cc:	e0bffe8d 	sth	r2,-6(fp)
     2d0:	e0bffe8b 	ldhu	r2,-6(fp)
     2d4:	10807830 	cmpltui	r2,r2,480
     2d8:	103fe71e 	bne	r2,zero,278 <Vga_clear_screen+0x18>
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
        {
            Vga_Clr_Pixel(base,x_col,y_col);
        }
      }
}
     2dc:	0001883a 	nop
     2e0:	e037883a 	mov	sp,fp
     2e4:	df000017 	ldw	fp,0(sp)
     2e8:	dec00104 	addi	sp,sp,4
     2ec:	f800283a 	ret

000002f0 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     2f0:	defff604 	addi	sp,sp,-40
     2f4:	dfc00915 	stw	ra,36(sp)
     2f8:	df000815 	stw	fp,32(sp)
     2fc:	df000804 	addi	fp,sp,32
    alt_u16 intStat;
    alt_u16 usb_ctl_val;
    static alt_u16 ctl_reg = 0;
    static alt_u16 no_device = 0;
    alt_u16 fs_device = 0;
     300:	e03ffa8d 	sth	zero,-22(fp)
    int button_value;
    alt_u16 px = 320;
     304:	00805004 	movi	r2,320
     308:	e0bff88d 	sth	r2,-30(fp)
    alt_u16 py = 240; 
     30c:	00803c04 	movi	r2,240
     310:	e0bff90d 	sth	r2,-28(fp)
    signed char  dx = 0;
     314:	e03ff985 	stb	zero,-26(fp)
    signed char  dy = 0; 
     318:	e03ff9c5 	stb	zero,-25(fp)
    alt_u8  pbutton = 0;
     31c:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 toggle=0;
     320:	e03ffa45 	stb	zero,-23(fp)
    
    //VGA display initial
    
    VGA_Ctrl_Reg vga_ctrl_set;

    vga_ctrl_set.VGA_Ctrl_Flags.RED_ON    = 1;
     324:	e0bffd03 	ldbu	r2,-12(fp)
     328:	10800054 	ori	r2,r2,1
     32c:	e0bffd05 	stb	r2,-12(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.GREEN_ON  = 1;
     330:	e0bffd03 	ldbu	r2,-12(fp)
     334:	10800094 	ori	r2,r2,2
     338:	e0bffd05 	stb	r2,-12(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.BLUE_ON   = 1;
     33c:	e0bffd03 	ldbu	r2,-12(fp)
     340:	10800114 	ori	r2,r2,4
     344:	e0bffd05 	stb	r2,-12(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.CURSOR_ON = 1;
     348:	e0bffd03 	ldbu	r2,-12(fp)
     34c:	10800214 	ori	r2,r2,8
     350:	e0bffd05 	stb	r2,-12(fp)

    Vga_Write_Ctrl(VPG_BASE, vga_ctrl_set.Value);
     354:	e0bffd03 	ldbu	r2,-12(fp)
     358:	10c03fcc 	andi	r3,r2,255
     35c:	008244f4 	movhi	r2,2323
     360:	10b00004 	addi	r2,r2,-16384
     364:	10c00035 	stwio	r3,0(r2)
    Vga_clear_screen(VPG_BASE); //clear the screen
     368:	01024034 	movhi	r4,2304
     36c:	00002600 	call	260 <Vga_clear_screen>
    Set_Pixel_On_Color(512,512,512);
     370:	01808004 	movi	r6,512
     374:	01408004 	movi	r5,512
     378:	01008004 	movi	r4,512
     37c:	00044800 	call	4480 <Set_Pixel_On_Color>
    Set_Pixel_Off_Color(0,0,0);
     380:	000d883a 	mov	r6,zero
     384:	000b883a 	mov	r5,zero
     388:	0009883a 	mov	r4,zero
     38c:	00044dc0 	call	44dc <Set_Pixel_Off_Color>
    Set_Cursor_Color(0,1023,0);
     390:	000d883a 	mov	r6,zero
     394:	0140ffc4 	movi	r5,1023
     398:	0009883a 	mov	r4,zero
     39c:	00044240 	call	4424 <Set_Cursor_Color>
    
    //----------------------------------------SIE1 initial---------------------------------------------------//
USB_HOT_PLUG:
    UsbSoftReset();
     3a0:	0003e680 	call	3e68 <UsbSoftReset>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
     3a4:	000b883a 	mov	r5,zero
     3a8:	01005104 	movi	r4,324
     3ac:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite (HOST1_STAT_REG, 0xFFFF);
     3b0:	017fffd4 	movui	r5,65535
     3b4:	01302414 	movui	r4,49296
     3b8:	0003dd80 	call	3dd8 <UsbWrite>
              
    /* Set HUSB_pEOT time */
    UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     3bc:	01409604 	movi	r5,600
     3c0:	01006d04 	movi	r4,436
     3c4:	0003dd80 	call	3dd8 <UsbWrite>
     
    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     3c8:	00811004 	movi	r2,1088
     3cc:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     3d0:	e0bff80b 	ldhu	r2,-32(fp)
     3d4:	100b883a 	mov	r5,r2
     3d8:	01005084 	movi	r4,322
     3dc:	0003dd80 	call	3dd8 <UsbWrite>
    
    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     3e0:	00808404 	movi	r2,528
     3e4:	e0bffb0d 	sth	r2,-20(fp)
    UsbWrite(HOST1_IRQ_EN_REG, intStat); 
     3e8:	e0bffb0b 	ldhu	r2,-20(fp)
     3ec:	100b883a 	mov	r5,r2
     3f0:	01302314 	movui	r4,49292
     3f4:	0003dd80 	call	3dd8 <UsbWrite>

    UsbWrite(COMM_R0,0x0000);//reset time 
     3f8:	000b883a 	mov	r5,zero
     3fc:	01007104 	movi	r4,452
     400:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     404:	000b883a 	mov	r5,zero
     408:	01007184 	movi	r4,454
     40c:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     410:	000b883a 	mov	r5,zero
     414:	01007204 	movi	r4,456
     418:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     41c:	000b883a 	mov	r5,zero
     420:	01007284 	movi	r4,458
     424:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     428:	000b883a 	mov	r5,zero
     42c:	01007304 	movi	r4,460
     430:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     434:	000b883a 	mov	r5,zero
     438:	01007384 	movi	r4,462
     43c:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     440:	000b883a 	mov	r5,zero
     444:	01007404 	movi	r4,464
     448:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     44c:	000b883a 	mov	r5,zero
     450:	01007484 	movi	r4,466
     454:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     458:	000b883a 	mov	r5,zero
     45c:	01007504 	movi	r4,468
     460:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     464:	000b883a 	mov	r5,zero
     468:	01007584 	movi	r4,470
     46c:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     470:	000b883a 	mov	r5,zero
     474:	01007604 	movi	r4,472
     478:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     47c:	000b883a 	mov	r5,zero
     480:	01007684 	movi	r4,474
     484:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     488:	000b883a 	mov	r5,zero
     48c:	01007704 	movi	r4,476
     490:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     494:	000b883a 	mov	r5,zero
     498:	01007784 	movi	r4,478
     49c:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     4a0:	01401c84 	movi	r5,114
     4a4:	01007084 	movi	r4,450
     4a8:	0003dd80 	call	3dd8 <UsbWrite>
    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     4ac:	00f38054 	movui	r3,52737
     4b0:	00824834 	movhi	r2,2336
     4b4:	10801d04 	addi	r2,r2,116
     4b8:	10c00035 	stwio	r3,0(r2)
     
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     4bc:	0001883a 	nop
     4c0:	00824834 	movhi	r2,2336
     4c4:	10801f04 	addi	r2,r2,124
     4c8:	10800037 	ldwio	r2,0(r2)
     4cc:	10bfffcc 	andi	r2,r2,65535
     4d0:	103ffb26 	beq	r2,zero,4c0 <main+0x1d0>
    {
    }
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     4d4:	00000806 	br	4f8 <main+0x208>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     4d8:	00824834 	movhi	r2,2336
     4dc:	10801d04 	addi	r2,r2,116
     4e0:	10800037 	ldwio	r2,0(r2)
     4e4:	100b883a 	mov	r5,r2
     4e8:	01000074 	movhi	r4,1
     4ec:	2111ec04 	addi	r4,r4,18352
     4f0:	00047880 	call	4788 <printf>
        goto USB_HOT_PLUG;
     4f4:	003faa06 	br	3a0 <main+0xb0>
    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
    {
    }
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     4f8:	00824834 	movhi	r2,2336
     4fc:	10801d04 	addi	r2,r2,116
     500:	10800037 	ldwio	r2,0(r2)
     504:	1083fb58 	cmpnei	r2,r2,4077
     508:	103ff31e 	bne	r2,zero,4d8 <main+0x1e8>
        goto USB_HOT_PLUG;
    }
    
  
    //usleep(30*1000);    
    UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     50c:	01401d04 	movi	r5,116
     510:	01007084 	movi	r4,450
     514:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R0,0x003c);//reset time 
     518:	01400f04 	movi	r5,60
     51c:	01007104 	movi	r4,452
     520:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     524:	000b883a 	mov	r5,zero
     528:	01007184 	movi	r4,454
     52c:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     530:	000b883a 	mov	r5,zero
     534:	01007204 	movi	r4,456
     538:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     53c:	000b883a 	mov	r5,zero
     540:	01007284 	movi	r4,458
     544:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     548:	000b883a 	mov	r5,zero
     54c:	01007304 	movi	r4,460
     550:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     554:	000b883a 	mov	r5,zero
     558:	01007384 	movi	r4,462
     55c:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     560:	000b883a 	mov	r5,zero
     564:	01007404 	movi	r4,464
     568:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     56c:	000b883a 	mov	r5,zero
     570:	01007484 	movi	r4,466
     574:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     578:	000b883a 	mov	r5,zero
     57c:	01007504 	movi	r4,468
     580:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     584:	000b883a 	mov	r5,zero
     588:	01007584 	movi	r4,470
     58c:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     590:	000b883a 	mov	r5,zero
     594:	01007604 	movi	r4,472
     598:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     59c:	000b883a 	mov	r5,zero
     5a0:	01007684 	movi	r4,474
     5a4:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     5a8:	000b883a 	mov	r5,zero
     5ac:	01007704 	movi	r4,476
     5b0:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     5b4:	000b883a 	mov	r5,zero
     5b8:	01007784 	movi	r4,478
     5bc:	0003dd80 	call	3dd8 <UsbWrite>

    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     5c0:	00f38054 	movui	r3,52737
     5c4:	00824834 	movhi	r2,2336
     5c8:	10801d04 	addi	r2,r2,116
     5cc:	10c00035 	stwio	r3,0(r2)
  
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     5d0:	0001883a 	nop
     5d4:	00824834 	movhi	r2,2336
     5d8:	10801d04 	addi	r2,r2,116
     5dc:	10800037 	ldwio	r2,0(r2)
     5e0:	1083fb58 	cmpnei	r2,r2,4077
     5e4:	10000826 	beq	r2,zero,608 <main+0x318>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     5e8:	00824834 	movhi	r2,2336
     5ec:	10801d04 	addi	r2,r2,116
     5f0:	10800037 	ldwio	r2,0(r2)
     5f4:	100b883a 	mov	r5,r2
     5f8:	01000074 	movhi	r4,1
     5fc:	2111ec04 	addi	r4,r4,18352
     600:	00047880 	call	4788 <printf>
        goto USB_HOT_PLUG;
     604:	003f6606 	br	3a0 <main+0xb0>
    }

    //usleep(30*1000);    
    ctl_reg = USB1_CTL_REG;
     608:	00b02284 	movi	r2,-16246
     60c:	d0a71b0d 	sth	r2,-25492(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
     610:	008c0004 	movi	r2,12288
     614:	d0a71b8d 	sth	r2,-25490(gp)
    fs_device = A_DP_STAT;
     618:	00880004 	movi	r2,8192
     61c:	e0bffa8d 	sth	r2,-22(fp)
    
    usb_ctl_val = UsbRead(ctl_reg);
     620:	d0a71b0b 	ldhu	r2,-25492(gp)
     624:	10bfffcc 	andi	r2,r2,65535
     628:	1009883a 	mov	r4,r2
     62c:	0003e280 	call	3e28 <UsbRead>
     630:	e0bff80d 	sth	r2,-32(fp)
   
    if (!(usb_ctl_val & no_device))
     634:	d0a71b8b 	ldhu	r2,-25490(gp)
     638:	e0fff80b 	ldhu	r3,-32(fp)
     63c:	1884703a 	and	r2,r3,r2
     640:	10bfffcc 	andi	r2,r2,65535
     644:	10001a1e 	bne	r2,zero,6b0 <main+0x3c0>
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
     648:	01000074 	movhi	r4,1
     64c:	2111f504 	addi	r4,r4,18388
     650:	00048840 	call	4884 <puts>
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
     654:	01000074 	movhi	r4,1
     658:	2111ff04 	addi	r4,r4,18428
     65c:	00048840 	call	4884 <puts>
      while (!(usb_ctl_val & no_device))
     660:	00000d06 	br	698 <main+0x3a8>
      {
       
         usb_ctl_val = UsbRead(ctl_reg);
     664:	d0a71b0b 	ldhu	r2,-25492(gp)
     668:	10bfffcc 	andi	r2,r2,65535
     66c:	1009883a 	mov	r4,r2
     670:	0003e280 	call	3e28 <UsbRead>
     674:	e0bff80d 	sth	r2,-32(fp)
         if(usb_ctl_val & no_device)
     678:	d0a71b8b 	ldhu	r2,-25490(gp)
     67c:	e0fff80b 	ldhu	r3,-32(fp)
     680:	1884703a 	and	r2,r3,r2
     684:	10bfffcc 	andi	r2,r2,65535
     688:	10000126 	beq	r2,zero,690 <main+0x3a0>
           goto USB_HOT_PLUG;
     68c:	003f4406 	br	3a0 <main+0xb0>
       
         usleep(2000);
     690:	0101f404 	movi	r4,2000
     694:	00118300 	call	11830 <usleep>
   
    if (!(usb_ctl_val & no_device))
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
      while (!(usb_ctl_val & no_device))
     698:	d0a71b8b 	ldhu	r2,-25490(gp)
     69c:	e0fff80b 	ldhu	r3,-32(fp)
     6a0:	1884703a 	and	r2,r3,r2
     6a4:	10bfffcc 	andi	r2,r2,65535
     6a8:	103fee26 	beq	r2,zero,664 <main+0x374>
     6ac:	00000c06 	br	6e0 <main+0x3f0>
      }
    }
    else
    {
        /* check for low speed or full speed by reading D+ and D- lines */    
        if (usb_ctl_val & fs_device)
     6b0:	e0fff80b 	ldhu	r3,-32(fp)
     6b4:	e0bffa8b 	ldhu	r2,-22(fp)
     6b8:	1884703a 	and	r2,r3,r2
     6bc:	10bfffcc 	andi	r2,r2,65535
     6c0:	10000426 	beq	r2,zero,6d4 <main+0x3e4>
        {
            printf("[INFO]: full speed device\n");
     6c4:	01000074 	movhi	r4,1
     6c8:	21120a04 	addi	r4,r4,18472
     6cc:	00048840 	call	4884 <puts>
     6d0:	00000306 	br	6e0 <main+0x3f0>
            
        }
        else
        {
            printf("[INFO]: low speed device\n");            
     6d4:	01000074 	movhi	r4,1
     6d8:	21121104 	addi	r4,r4,18500
     6dc:	00048840 	call	4884 <puts>

    //printf("[SIE1 INIT]:USB 1 Control Register reg is %x\n",UsbRead(0xC08A));
    
    //------------------------------------------------------set address -----------------------------------------------------------------
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     6e0:	00c14004 	movi	r3,1280
     6e4:	00824834 	movhi	r2,2336
     6e8:	10801e04 	addi	r2,r2,120
     6ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     6f0:	00c14304 	movi	r3,1292
     6f4:	00824834 	movhi	r2,2336
     6f8:	10801c04 	addi	r2,r2,112
     6fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     700:	00c00204 	movi	r3,8
     704:	00824834 	movhi	r2,2336
     708:	10801c04 	addi	r2,r2,112
     70c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     710:	00c03404 	movi	r3,208
     714:	00824834 	movhi	r2,2336
     718:	10801c04 	addi	r2,r2,112
     71c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     720:	00c00044 	movi	r3,1
     724:	00824834 	movhi	r2,2336
     728:	10801c04 	addi	r2,r2,112
     72c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     730:	00c004c4 	movi	r3,19
     734:	00824834 	movhi	r2,2336
     738:	10801c04 	addi	r2,r2,112
     73c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     740:	00c14504 	movi	r3,1300
     744:	00824834 	movhi	r2,2336
     748:	10801c04 	addi	r2,r2,112
     74c:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     750:	00c14004 	movi	r3,1280
     754:	00824834 	movhi	r2,2336
     758:	10801c04 	addi	r2,r2,112
     75c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     760:	00c00084 	movi	r3,2
     764:	00824834 	movhi	r2,2336
     768:	10801c04 	addi	r2,r2,112
     76c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     770:	0007883a 	mov	r3,zero
     774:	00824834 	movhi	r2,2336
     778:	10801c04 	addi	r2,r2,112
     77c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     780:	0007883a 	mov	r3,zero
     784:	00824834 	movhi	r2,2336
     788:	10801c04 	addi	r2,r2,112
     78c:	10c00035 	stwio	r3,0(r2)
    
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     790:	0007883a 	mov	r3,zero
     794:	00824834 	movhi	r2,2336
     798:	10801c04 	addi	r2,r2,112
     79c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     7a0:	0007883a 	mov	r3,zero
     7a4:	00824834 	movhi	r2,2336
     7a8:	10801c04 	addi	r2,r2,112
     7ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     7b0:	00c02404 	movi	r3,144
     7b4:	00824834 	movhi	r2,2336
     7b8:	10801c04 	addi	r2,r2,112
     7bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     7c0:	00c01044 	movi	r3,65
     7c4:	00824834 	movhi	r2,2336
     7c8:	10801c04 	addi	r2,r2,112
     7cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     7d0:	00c004c4 	movi	r3,19
     7d4:	00824834 	movhi	r2,2336
     7d8:	10801c04 	addi	r2,r2,112
     7dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     7e0:	0007883a 	mov	r3,zero
     7e4:	00824834 	movhi	r2,2336
     7e8:	10801c04 	addi	r2,r2,112
     7ec:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     7f0:	01414004 	movi	r5,1280
     7f4:	01006c04 	movi	r4,432
     7f8:	0003dd80 	call	3dd8 <UsbWrite>
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     7fc:	00004906 	br	924 <main+0x634>
    {
        //the starting address
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     800:	00c14004 	movi	r3,1280
     804:	00824834 	movhi	r2,2336
     808:	10801e04 	addi	r2,r2,120
     80c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     810:	00c14304 	movi	r3,1292
     814:	00824834 	movhi	r2,2336
     818:	10801c04 	addi	r2,r2,112
     81c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     820:	00c00204 	movi	r3,8
     824:	00824834 	movhi	r2,2336
     828:	10801c04 	addi	r2,r2,112
     82c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     830:	00c03404 	movi	r3,208
     834:	00824834 	movhi	r2,2336
     838:	10801c04 	addi	r2,r2,112
     83c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     840:	00c00044 	movi	r3,1
     844:	00824834 	movhi	r2,2336
     848:	10801c04 	addi	r2,r2,112
     84c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     850:	00c004c4 	movi	r3,19
     854:	00824834 	movhi	r2,2336
     858:	10801c04 	addi	r2,r2,112
     85c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0514); 
     860:	00c14504 	movi	r3,1300
     864:	00824834 	movhi	r2,2336
     868:	10801c04 	addi	r2,r2,112
     86c:	10c00035 	stwio	r3,0(r2)
    
           //td content 4 bytes
           IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     870:	00c14004 	movi	r3,1280
     874:	00824834 	movhi	r2,2336
     878:	10801c04 	addi	r2,r2,112
     87c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     880:	00c00084 	movi	r3,2
     884:	00824834 	movhi	r2,2336
     888:	10801c04 	addi	r2,r2,112
     88c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     890:	0007883a 	mov	r3,zero
     894:	00824834 	movhi	r2,2336
     898:	10801c04 	addi	r2,r2,112
     89c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     8a0:	0007883a 	mov	r3,zero
     8a4:	00824834 	movhi	r2,2336
     8a8:	10801c04 	addi	r2,r2,112
     8ac:	10c00035 	stwio	r3,0(r2)
           //IN 
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     8b0:	0007883a 	mov	r3,zero
     8b4:	00824834 	movhi	r2,2336
     8b8:	10801c04 	addi	r2,r2,112
     8bc:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     8c0:	0007883a 	mov	r3,zero
     8c4:	00824834 	movhi	r2,2336
     8c8:	10801c04 	addi	r2,r2,112
     8cc:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     8d0:	00c02404 	movi	r3,144
     8d4:	00824834 	movhi	r2,2336
     8d8:	10801c04 	addi	r2,r2,112
     8dc:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     8e0:	00c01044 	movi	r3,65
     8e4:	00824834 	movhi	r2,2336
     8e8:	10801c04 	addi	r2,r2,112
     8ec:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     8f0:	00c004c4 	movi	r3,19
     8f4:	00824834 	movhi	r2,2336
     8f8:	10801c04 	addi	r2,r2,112
     8fc:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     900:	0007883a 	mov	r3,zero
     904:	00824834 	movhi	r2,2336
     908:	10801c04 	addi	r2,r2,112
     90c:	10c00035 	stwio	r3,0(r2)
        
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
     910:	01414004 	movi	r5,1280
     914:	01006c04 	movi	r4,432
     918:	0003dd80 	call	3dd8 <UsbWrite>
           usleep(10*1000);
     91c:	0109c404 	movi	r4,10000
     920:	00118300 	call	11830 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     924:	00824834 	movhi	r2,2336
     928:	10801f04 	addi	r2,r2,124
     92c:	10800037 	ldwio	r2,0(r2)
     930:	1080040c 	andi	r2,r2,16
     934:	103fb226 	beq	r2,zero,800 <main+0x510>
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
           usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     938:	01005104 	movi	r4,324
     93c:	0003e280 	call	3e28 <UsbRead>
     940:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     944:	000b883a 	mov	r5,zero
     948:	01005104 	movi	r4,324
     94c:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     950:	00000d06 	br	988 <main+0x698>
    {
       if(usb_ctl_val == 0x000)
     954:	e0bff80b 	ldhu	r2,-32(fp)
     958:	10000526 	beq	r2,zero,970 <main+0x680>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     95c:	e0bff80b 	ldhu	r2,-32(fp)
     960:	100b883a 	mov	r5,r2
     964:	01000074 	movhi	r4,1
     968:	21121804 	addi	r4,r4,18528
     96c:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     970:	01005104 	movi	r4,324
     974:	0003e280 	call	3e28 <UsbRead>
     978:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     97c:	000b883a 	mov	r5,zero
     980:	01005104 	movi	r4,324
     984:	0003dd80 	call	3dd8 <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     988:	e0bff80b 	ldhu	r2,-32(fp)
     98c:	10840018 	cmpnei	r2,r2,4096
     990:	103ff01e 	bne	r2,zero,954 <main+0x664>
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
       //goto USB_HOT_PLUG;
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     994:	00c14184 	movi	r3,1286
     998:	00824834 	movhi	r2,2336
     99c:	10801e04 	addi	r2,r2,120
     9a0:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     9a4:	00824834 	movhi	r2,2336
     9a8:	10801c04 	addi	r2,r2,112
     9ac:	10800037 	ldwio	r2,0(r2)
     9b0:	100b883a 	mov	r5,r2
     9b4:	01000074 	movhi	r4,1
     9b8:	21122004 	addi	r4,r4,18560
     9bc:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     9c0:	00c14204 	movi	r3,1288
     9c4:	00824834 	movhi	r2,2336
     9c8:	10801e04 	addi	r2,r2,120
     9cc:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     9d0:	00824834 	movhi	r2,2336
     9d4:	10801c04 	addi	r2,r2,112
     9d8:	10800037 	ldwio	r2,0(r2)
     9dc:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9e0:	e0bff80b 	ldhu	r2,-32(fp)
     9e4:	100b883a 	mov	r5,r2
     9e8:	01000074 	movhi	r4,1
     9ec:	21122b04 	addi	r4,r4,18604
     9f0:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
     9f4:	e0bff80b 	ldhu	r2,-32(fp)
     9f8:	108000e0 	cmpeqi	r2,r2,3
     9fc:	10001a1e 	bne	r2,zero,a68 <main+0x778>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     a00:	00824834 	movhi	r2,2336
     a04:	10801f04 	addi	r2,r2,124
     a08:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     a0c:	01005104 	movi	r4,324
     a10:	0003e280 	call	3e28 <UsbRead>
     a14:	10bfffcc 	andi	r2,r2,65535
     a18:	10840018 	cmpnei	r2,r2,4096
     a1c:	1000091e 	bne	r2,zero,a44 <main+0x754>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     a20:	000b883a 	mov	r5,zero
     a24:	01005104 	movi	r4,324
     a28:	0003dd80 	call	3dd8 <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a2c:	0001883a 	nop
     a30:	00824834 	movhi	r2,2336
     a34:	10801f04 	addi	r2,r2,124
     a38:	10800037 	ldwio	r2,0(r2)
     a3c:	1080040c 	andi	r2,r2,16
     a40:	103ffb26 	beq	r2,zero,a30 <main+0x740>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     a44:	00c14204 	movi	r3,1288
     a48:	00824834 	movhi	r2,2336
     a4c:	10801e04 	addi	r2,r2,120
     a50:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     a54:	00824834 	movhi	r2,2336
     a58:	10801c04 	addi	r2,r2,112
     a5c:	10800037 	ldwio	r2,0(r2)
     a60:	e0bff80d 	sth	r2,-32(fp)
           
           goto USB_HOT_PLUG;
     a64:	003e4e06 	br	3a0 <main+0xb0>
    }    
       
    printf("------------[ENUM PROCESS]:set address pass!---------------\n");
     a68:	01000074 	movhi	r4,1
     a6c:	21123704 	addi	r4,r4,18652
     a70:	00048840 	call	4884 <puts>
    
    
    //-------------------------------get device descriptor-1 -----------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     a74:	00c14004 	movi	r3,1280
     a78:	00824834 	movhi	r2,2336
     a7c:	10801e04 	addi	r2,r2,120
     a80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     a84:	00c14304 	movi	r3,1292
     a88:	00824834 	movhi	r2,2336
     a8c:	10801c04 	addi	r2,r2,112
     a90:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     a94:	00c00204 	movi	r3,8
     a98:	00824834 	movhi	r2,2336
     a9c:	10801c04 	addi	r2,r2,112
     aa0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     aa4:	00c0b404 	movi	r3,720
     aa8:	00824834 	movhi	r2,2336
     aac:	10801c04 	addi	r2,r2,112
     ab0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     ab4:	00c00044 	movi	r3,1
     ab8:	00824834 	movhi	r2,2336
     abc:	10801c04 	addi	r2,r2,112
     ac0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     ac4:	00c004c4 	movi	r3,19
     ac8:	00824834 	movhi	r2,2336
     acc:	10801c04 	addi	r2,r2,112
     ad0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     ad4:	00c14504 	movi	r3,1300
     ad8:	00824834 	movhi	r2,2336
     adc:	10801c04 	addi	r2,r2,112
     ae0:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     ae4:	00c1a004 	movi	r3,1664
     ae8:	00824834 	movhi	r2,2336
     aec:	10801c04 	addi	r2,r2,112
     af0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     af4:	00c04004 	movi	r3,256
     af8:	00824834 	movhi	r2,2336
     afc:	10801c04 	addi	r2,r2,112
     b00:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     b04:	0007883a 	mov	r3,zero
     b08:	00824834 	movhi	r2,2336
     b0c:	10801c04 	addi	r2,r2,112
     b10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     b14:	00c00204 	movi	r3,8
     b18:	00824834 	movhi	r2,2336
     b1c:	10801c04 	addi	r2,r2,112
     b20:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     b24:	00c14b04 	movi	r3,1324
     b28:	00824834 	movhi	r2,2336
     b2c:	10801c04 	addi	r2,r2,112
     b30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     b34:	00c00204 	movi	r3,8
     b38:	00824834 	movhi	r2,2336
     b3c:	10801c04 	addi	r2,r2,112
     b40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     b44:	00c0a404 	movi	r3,656
     b48:	00824834 	movhi	r2,2336
     b4c:	10801c04 	addi	r2,r2,112
     b50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     b54:	00c01044 	movi	r3,65
     b58:	00824834 	movhi	r2,2336
     b5c:	10801c04 	addi	r2,r2,112
     b60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     b64:	00c004c4 	movi	r3,19
     b68:	00824834 	movhi	r2,2336
     b6c:	10801c04 	addi	r2,r2,112
     b70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     b74:	00c14804 	movi	r3,1312
     b78:	00824834 	movhi	r2,2336
     b7c:	10801c04 	addi	r2,r2,112
     b80:	10c00035 	stwio	r3,0(r2)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     b84:	0007883a 	mov	r3,zero
     b88:	00824834 	movhi	r2,2336
     b8c:	10801c04 	addi	r2,r2,112
     b90:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     b94:	0007883a 	mov	r3,zero
     b98:	00824834 	movhi	r2,2336
     b9c:	10801c04 	addi	r2,r2,112
     ba0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     ba4:	00c08404 	movi	r3,528
     ba8:	00824834 	movhi	r2,2336
     bac:	10801c04 	addi	r2,r2,112
     bb0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     bb4:	00c01044 	movi	r3,65
     bb8:	00824834 	movhi	r2,2336
     bbc:	10801c04 	addi	r2,r2,112
     bc0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     bc4:	00c004c4 	movi	r3,19
     bc8:	00824834 	movhi	r2,2336
     bcc:	10801c04 	addi	r2,r2,112
     bd0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     bd4:	0007883a 	mov	r3,zero
     bd8:	00824834 	movhi	r2,2336
     bdc:	10801c04 	addi	r2,r2,112
     be0:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     be4:	01414004 	movi	r5,1280
     be8:	01006c04 	movi	r4,432
     bec:	0003dd80 	call	3dd8 <UsbWrite>
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bf0:	00006106 	br	d78 <main+0xa88>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     bf4:	00c14004 	movi	r3,1280
     bf8:	00824834 	movhi	r2,2336
     bfc:	10801e04 	addi	r2,r2,120
     c00:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     c04:	00c14304 	movi	r3,1292
     c08:	00824834 	movhi	r2,2336
     c0c:	10801c04 	addi	r2,r2,112
     c10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     c14:	00c00204 	movi	r3,8
     c18:	00824834 	movhi	r2,2336
     c1c:	10801c04 	addi	r2,r2,112
     c20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     c24:	00c0b404 	movi	r3,720
     c28:	00824834 	movhi	r2,2336
     c2c:	10801c04 	addi	r2,r2,112
     c30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     c34:	00c00044 	movi	r3,1
     c38:	00824834 	movhi	r2,2336
     c3c:	10801c04 	addi	r2,r2,112
     c40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     c44:	00c004c4 	movi	r3,19
     c48:	00824834 	movhi	r2,2336
     c4c:	10801c04 	addi	r2,r2,112
     c50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     c54:	00c14504 	movi	r3,1300
     c58:	00824834 	movhi	r2,2336
     c5c:	10801c04 	addi	r2,r2,112
     c60:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);
     c64:	00c1a004 	movi	r3,1664
     c68:	00824834 	movhi	r2,2336
     c6c:	10801c04 	addi	r2,r2,112
     c70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     c74:	00c04004 	movi	r3,256
     c78:	00824834 	movhi	r2,2336
     c7c:	10801c04 	addi	r2,r2,112
     c80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     c84:	0007883a 	mov	r3,zero
     c88:	00824834 	movhi	r2,2336
     c8c:	10801c04 	addi	r2,r2,112
     c90:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     c94:	00c00204 	movi	r3,8
     c98:	00824834 	movhi	r2,2336
     c9c:	10801c04 	addi	r2,r2,112
     ca0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     ca4:	00c14b04 	movi	r3,1324
     ca8:	00824834 	movhi	r2,2336
     cac:	10801c04 	addi	r2,r2,112
     cb0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     cb4:	00c00204 	movi	r3,8
     cb8:	00824834 	movhi	r2,2336
     cbc:	10801c04 	addi	r2,r2,112
     cc0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     cc4:	00c0a404 	movi	r3,656
     cc8:	00824834 	movhi	r2,2336
     ccc:	10801c04 	addi	r2,r2,112
     cd0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     cd4:	00c01044 	movi	r3,65
     cd8:	00824834 	movhi	r2,2336
     cdc:	10801c04 	addi	r2,r2,112
     ce0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     ce4:	00c004c4 	movi	r3,19
     ce8:	00824834 	movhi	r2,2336
     cec:	10801c04 	addi	r2,r2,112
     cf0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     cf4:	00c14804 	movi	r3,1312
     cf8:	00824834 	movhi	r2,2336
     cfc:	10801c04 	addi	r2,r2,112
     d00:	10c00035 	stwio	r3,0(r2)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     d04:	0007883a 	mov	r3,zero
     d08:	00824834 	movhi	r2,2336
     d0c:	10801c04 	addi	r2,r2,112
     d10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     d14:	0007883a 	mov	r3,zero
     d18:	00824834 	movhi	r2,2336
     d1c:	10801c04 	addi	r2,r2,112
     d20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     d24:	00c08404 	movi	r3,528
     d28:	00824834 	movhi	r2,2336
     d2c:	10801c04 	addi	r2,r2,112
     d30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     d34:	00c01044 	movi	r3,65
     d38:	00824834 	movhi	r2,2336
     d3c:	10801c04 	addi	r2,r2,112
     d40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     d44:	00c004c4 	movi	r3,19
     d48:	00824834 	movhi	r2,2336
     d4c:	10801c04 	addi	r2,r2,112
     d50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     d54:	0007883a 	mov	r3,zero
     d58:	00824834 	movhi	r2,2336
     d5c:	10801c04 	addi	r2,r2,112
     d60:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     d64:	01414004 	movi	r5,1280
     d68:	01006c04 	movi	r4,432
     d6c:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
     d70:	0109c404 	movi	r4,10000
     d74:	00118300 	call	11830 <usleep>
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d78:	00824834 	movhi	r2,2336
     d7c:	10801f04 	addi	r2,r2,124
     d80:	10800037 	ldwio	r2,0(r2)
     d84:	1080040c 	andi	r2,r2,16
     d88:	103f9a26 	beq	r2,zero,bf4 <main+0x904>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     d8c:	01005104 	movi	r4,324
     d90:	0003e280 	call	3e28 <UsbRead>
     d94:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     d98:	000b883a 	mov	r5,zero
     d9c:	01005104 	movi	r4,324
     da0:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     da4:	00000d06 	br	ddc <main+0xaec>
    {
       if(usb_ctl_val == 0x000)
     da8:	e0bff80b 	ldhu	r2,-32(fp)
     dac:	10000526 	beq	r2,zero,dc4 <main+0xad4>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     db0:	e0bff80b 	ldhu	r2,-32(fp)
     db4:	100b883a 	mov	r5,r2
     db8:	01000074 	movhi	r4,1
     dbc:	21121804 	addi	r4,r4,18528
     dc0:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     dc4:	01005104 	movi	r4,324
     dc8:	0003e280 	call	3e28 <UsbRead>
     dcc:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     dd0:	000b883a 	mov	r5,zero
     dd4:	01005104 	movi	r4,324
     dd8:	0003dd80 	call	3dd8 <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     ddc:	e0bff80b 	ldhu	r2,-32(fp)
     de0:	10840018 	cmpnei	r2,r2,4096
     de4:	103ff01e 	bne	r2,zero,da8 <main+0xab8>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     de8:	00c14184 	movi	r3,1286
     dec:	00824834 	movhi	r2,2336
     df0:	10801e04 	addi	r2,r2,120
     df4:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     df8:	00824834 	movhi	r2,2336
     dfc:	10801c04 	addi	r2,r2,112
     e00:	10800037 	ldwio	r2,0(r2)
     e04:	100b883a 	mov	r5,r2
     e08:	01000074 	movhi	r4,1
     e0c:	21124604 	addi	r4,r4,18712
     e10:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     e14:	00c14204 	movi	r3,1288
     e18:	00824834 	movhi	r2,2336
     e1c:	10801e04 	addi	r2,r2,120
     e20:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     e24:	00824834 	movhi	r2,2336
     e28:	10801c04 	addi	r2,r2,112
     e2c:	10800037 	ldwio	r2,0(r2)
     e30:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     e34:	e0bff80b 	ldhu	r2,-32(fp)
     e38:	100b883a 	mov	r5,r2
     e3c:	01000074 	movhi	r4,1
     e40:	21125104 	addi	r4,r4,18756
     e44:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
     e48:	00001906 	br	eb0 <main+0xbc0>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     e4c:	00824834 	movhi	r2,2336
     e50:	10801f04 	addi	r2,r2,124
     e54:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     e58:	01005104 	movi	r4,324
     e5c:	0003e280 	call	3e28 <UsbRead>
     e60:	10bfffcc 	andi	r2,r2,65535
     e64:	10840018 	cmpnei	r2,r2,4096
     e68:	1000091e 	bne	r2,zero,e90 <main+0xba0>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     e6c:	000b883a 	mov	r5,zero
     e70:	01005104 	movi	r4,324
     e74:	0003dd80 	call	3dd8 <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e78:	0001883a 	nop
     e7c:	00824834 	movhi	r2,2336
     e80:	10801f04 	addi	r2,r2,124
     e84:	10800037 	ldwio	r2,0(r2)
     e88:	1080040c 	andi	r2,r2,16
     e8c:	103ffb26 	beq	r2,zero,e7c <main+0xb8c>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     e90:	00c14204 	movi	r3,1288
     e94:	00824834 	movhi	r2,2336
     e98:	10801e04 	addi	r2,r2,120
     e9c:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     ea0:	00824834 	movhi	r2,2336
     ea4:	10801c04 	addi	r2,r2,112
     ea8:	10800037 	ldwio	r2,0(r2)
     eac:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
     eb0:	e0bff80b 	ldhu	r2,-32(fp)
     eb4:	108000d8 	cmpnei	r2,r2,3
     eb8:	103fe41e 	bne	r2,zero,e4c <main+0xb5c>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get device descriptor-1 pass!-----------------\n");
     ebc:	01000074 	movhi	r4,1
     ec0:	21125d04 	addi	r4,r4,18804
     ec4:	00048840 	call	4884 <puts>
    
    
    //--------------------------------get device descriptor-1---------------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     ec8:	00c14004 	movi	r3,1280
     ecc:	00824834 	movhi	r2,2336
     ed0:	10801e04 	addi	r2,r2,120
     ed4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     ed8:	00c14304 	movi	r3,1292
     edc:	00824834 	movhi	r2,2336
     ee0:	10801c04 	addi	r2,r2,112
     ee4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     ee8:	00c00204 	movi	r3,8
     eec:	00824834 	movhi	r2,2336
     ef0:	10801c04 	addi	r2,r2,112
     ef4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     ef8:	00c0b404 	movi	r3,720
     efc:	00824834 	movhi	r2,2336
     f00:	10801c04 	addi	r2,r2,112
     f04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     f08:	00c00044 	movi	r3,1
     f0c:	00824834 	movhi	r2,2336
     f10:	10801c04 	addi	r2,r2,112
     f14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     f18:	00c004c4 	movi	r3,19
     f1c:	00824834 	movhi	r2,2336
     f20:	10801c04 	addi	r2,r2,112
     f24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     f28:	00c14504 	movi	r3,1300
     f2c:	00824834 	movhi	r2,2336
     f30:	10801c04 	addi	r2,r2,112
     f34:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     f38:	00c1a004 	movi	r3,1664
     f3c:	00824834 	movhi	r2,2336
     f40:	10801c04 	addi	r2,r2,112
     f44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
     f48:	00c04004 	movi	r3,256
     f4c:	00824834 	movhi	r2,2336
     f50:	10801c04 	addi	r2,r2,112
     f54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
     f58:	0007883a 	mov	r3,zero
     f5c:	00824834 	movhi	r2,2336
     f60:	10801c04 	addi	r2,r2,112
     f64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
     f68:	00c00484 	movi	r3,18
     f6c:	00824834 	movhi	r2,2336
     f70:	10801c04 	addi	r2,r2,112
     f74:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
     f78:	00c15104 	movi	r3,1348
     f7c:	00824834 	movhi	r2,2336
     f80:	10801c04 	addi	r2,r2,112
     f84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
     f88:	00c00204 	movi	r3,8
     f8c:	00824834 	movhi	r2,2336
     f90:	10801c04 	addi	r2,r2,112
     f94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
     f98:	00c0a404 	movi	r3,656
     f9c:	00824834 	movhi	r2,2336
     fa0:	10801c04 	addi	r2,r2,112
     fa4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
     fa8:	00c01044 	movi	r3,65
     fac:	00824834 	movhi	r2,2336
     fb0:	10801c04 	addi	r2,r2,112
     fb4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
     fb8:	00c004c4 	movi	r3,19
     fbc:	00824834 	movhi	r2,2336
     fc0:	10801c04 	addi	r2,r2,112
     fc4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
     fc8:	00c14804 	movi	r3,1312
     fcc:	00824834 	movhi	r2,2336
     fd0:	10801c04 	addi	r2,r2,112
     fd4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
     fd8:	00c15304 	movi	r3,1356
     fdc:	00824834 	movhi	r2,2336
     fe0:	10801c04 	addi	r2,r2,112
     fe4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
     fe8:	00c00204 	movi	r3,8
     fec:	00824834 	movhi	r2,2336
     ff0:	10801c04 	addi	r2,r2,112
     ff4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
     ff8:	00c0a404 	movi	r3,656
     ffc:	00824834 	movhi	r2,2336
    1000:	10801c04 	addi	r2,r2,112
    1004:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1008:	00c00044 	movi	r3,1
    100c:	00824834 	movhi	r2,2336
    1010:	10801c04 	addi	r2,r2,112
    1014:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1018:	00c004c4 	movi	r3,19
    101c:	00824834 	movhi	r2,2336
    1020:	10801c04 	addi	r2,r2,112
    1024:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1028:	00c14b04 	movi	r3,1324
    102c:	00824834 	movhi	r2,2336
    1030:	10801c04 	addi	r2,r2,112
    1034:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
    1038:	00c15504 	movi	r3,1364
    103c:	00824834 	movhi	r2,2336
    1040:	10801c04 	addi	r2,r2,112
    1044:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
    1048:	00c00084 	movi	r3,2
    104c:	00824834 	movhi	r2,2336
    1050:	10801c04 	addi	r2,r2,112
    1054:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1058:	00c0a404 	movi	r3,656
    105c:	00824834 	movhi	r2,2336
    1060:	10801c04 	addi	r2,r2,112
    1064:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1068:	00c01044 	movi	r3,65
    106c:	00824834 	movhi	r2,2336
    1070:	10801c04 	addi	r2,r2,112
    1074:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1078:	00c004c4 	movi	r3,19
    107c:	00824834 	movhi	r2,2336
    1080:	10801c04 	addi	r2,r2,112
    1084:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1088:	00c14e04 	movi	r3,1336
    108c:	00824834 	movhi	r2,2336
    1090:	10801c04 	addi	r2,r2,112
    1094:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
    1098:	0007883a 	mov	r3,zero
    109c:	00824834 	movhi	r2,2336
    10a0:	10801c04 	addi	r2,r2,112
    10a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    10a8:	0007883a 	mov	r3,zero
    10ac:	00824834 	movhi	r2,2336
    10b0:	10801c04 	addi	r2,r2,112
    10b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
    10b8:	00c08404 	movi	r3,528
    10bc:	00824834 	movhi	r2,2336
    10c0:	10801c04 	addi	r2,r2,112
    10c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
    10c8:	00c01044 	movi	r3,65
    10cc:	00824834 	movhi	r2,2336
    10d0:	10801c04 	addi	r2,r2,112
    10d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    10d8:	00c004c4 	movi	r3,19
    10dc:	00824834 	movhi	r2,2336
    10e0:	10801c04 	addi	r2,r2,112
    10e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    10e8:	0007883a 	mov	r3,zero
    10ec:	00824834 	movhi	r2,2336
    10f0:	10801c04 	addi	r2,r2,112
    10f4:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    10f8:	01414004 	movi	r5,1280
    10fc:	01006c04 	movi	r4,432
    1100:	0003dd80 	call	3dd8 <UsbWrite>
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1104:	00009106 	br	134c <main+0x105c>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1108:	00c14004 	movi	r3,1280
    110c:	00824834 	movhi	r2,2336
    1110:	10801e04 	addi	r2,r2,120
    1114:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1118:	00c14304 	movi	r3,1292
    111c:	00824834 	movhi	r2,2336
    1120:	10801c04 	addi	r2,r2,112
    1124:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1128:	00c00204 	movi	r3,8
    112c:	00824834 	movhi	r2,2336
    1130:	10801c04 	addi	r2,r2,112
    1134:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1138:	00c0b404 	movi	r3,720
    113c:	00824834 	movhi	r2,2336
    1140:	10801c04 	addi	r2,r2,112
    1144:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1148:	00c00044 	movi	r3,1
    114c:	00824834 	movhi	r2,2336
    1150:	10801c04 	addi	r2,r2,112
    1154:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1158:	00c004c4 	movi	r3,19
    115c:	00824834 	movhi	r2,2336
    1160:	10801c04 	addi	r2,r2,112
    1164:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1168:	00c14504 	movi	r3,1300
    116c:	00824834 	movhi	r2,2336
    1170:	10801c04 	addi	r2,r2,112
    1174:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1178:	00c1a004 	movi	r3,1664
    117c:	00824834 	movhi	r2,2336
    1180:	10801c04 	addi	r2,r2,112
    1184:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
    1188:	00c04004 	movi	r3,256
    118c:	00824834 	movhi	r2,2336
    1190:	10801c04 	addi	r2,r2,112
    1194:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1198:	0007883a 	mov	r3,zero
    119c:	00824834 	movhi	r2,2336
    11a0:	10801c04 	addi	r2,r2,112
    11a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
    11a8:	00c00484 	movi	r3,18
    11ac:	00824834 	movhi	r2,2336
    11b0:	10801c04 	addi	r2,r2,112
    11b4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    11b8:	00c15104 	movi	r3,1348
    11bc:	00824834 	movhi	r2,2336
    11c0:	10801c04 	addi	r2,r2,112
    11c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    11c8:	00c00204 	movi	r3,8
    11cc:	00824834 	movhi	r2,2336
    11d0:	10801c04 	addi	r2,r2,112
    11d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    11d8:	00c0a404 	movi	r3,656
    11dc:	00824834 	movhi	r2,2336
    11e0:	10801c04 	addi	r2,r2,112
    11e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    11e8:	00c01044 	movi	r3,65
    11ec:	00824834 	movhi	r2,2336
    11f0:	10801c04 	addi	r2,r2,112
    11f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    11f8:	00c004c4 	movi	r3,19
    11fc:	00824834 	movhi	r2,2336
    1200:	10801c04 	addi	r2,r2,112
    1204:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1208:	00c14804 	movi	r3,1312
    120c:	00824834 	movhi	r2,2336
    1210:	10801c04 	addi	r2,r2,112
    1214:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    1218:	00c15304 	movi	r3,1356
    121c:	00824834 	movhi	r2,2336
    1220:	10801c04 	addi	r2,r2,112
    1224:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1228:	00c00204 	movi	r3,8
    122c:	00824834 	movhi	r2,2336
    1230:	10801c04 	addi	r2,r2,112
    1234:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1238:	00c0a404 	movi	r3,656
    123c:	00824834 	movhi	r2,2336
    1240:	10801c04 	addi	r2,r2,112
    1244:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
    1248:	00c00044 	movi	r3,1
    124c:	00824834 	movhi	r2,2336
    1250:	10801c04 	addi	r2,r2,112
    1254:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1258:	00c004c4 	movi	r3,19
    125c:	00824834 	movhi	r2,2336
    1260:	10801c04 	addi	r2,r2,112
    1264:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1268:	00c14b04 	movi	r3,1324
    126c:	00824834 	movhi	r2,2336
    1270:	10801c04 	addi	r2,r2,112
    1274:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
    1278:	00c15504 	movi	r3,1364
    127c:	00824834 	movhi	r2,2336
    1280:	10801c04 	addi	r2,r2,112
    1284:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
    1288:	00c00084 	movi	r3,2
    128c:	00824834 	movhi	r2,2336
    1290:	10801c04 	addi	r2,r2,112
    1294:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1298:	00c0a404 	movi	r3,656
    129c:	00824834 	movhi	r2,2336
    12a0:	10801c04 	addi	r2,r2,112
    12a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    12a8:	00c01044 	movi	r3,65
    12ac:	00824834 	movhi	r2,2336
    12b0:	10801c04 	addi	r2,r2,112
    12b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    12b8:	00c004c4 	movi	r3,19
    12bc:	00824834 	movhi	r2,2336
    12c0:	10801c04 	addi	r2,r2,112
    12c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    12c8:	00c14e04 	movi	r3,1336
    12cc:	00824834 	movhi	r2,2336
    12d0:	10801c04 	addi	r2,r2,112
    12d4:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
    12d8:	0007883a 	mov	r3,zero
    12dc:	00824834 	movhi	r2,2336
    12e0:	10801c04 	addi	r2,r2,112
    12e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    12e8:	0007883a 	mov	r3,zero
    12ec:	00824834 	movhi	r2,2336
    12f0:	10801c04 	addi	r2,r2,112
    12f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
    12f8:	00c08404 	movi	r3,528
    12fc:	00824834 	movhi	r2,2336
    1300:	10801c04 	addi	r2,r2,112
    1304:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
    1308:	00c01044 	movi	r3,65
    130c:	00824834 	movhi	r2,2336
    1310:	10801c04 	addi	r2,r2,112
    1314:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1318:	00c004c4 	movi	r3,19
    131c:	00824834 	movhi	r2,2336
    1320:	10801c04 	addi	r2,r2,112
    1324:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1328:	0007883a 	mov	r3,zero
    132c:	00824834 	movhi	r2,2336
    1330:	10801c04 	addi	r2,r2,112
    1334:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1338:	01414004 	movi	r5,1280
    133c:	01006c04 	movi	r4,432
    1340:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    1344:	0109c404 	movi	r4,10000
    1348:	00118300 	call	11830 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    134c:	00824834 	movhi	r2,2336
    1350:	10801f04 	addi	r2,r2,124
    1354:	10800037 	ldwio	r2,0(r2)
    1358:	1080040c 	andi	r2,r2,16
    135c:	103f6a26 	beq	r2,zero,1108 <main+0xe18>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1360:	01005104 	movi	r4,324
    1364:	0003e280 	call	3e28 <UsbRead>
    1368:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    136c:	000b883a 	mov	r5,zero
    1370:	01005104 	movi	r4,324
    1374:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1378:	00000d06 	br	13b0 <main+0x10c0>
    {
       if(usb_ctl_val == 0x000)
    137c:	e0bff80b 	ldhu	r2,-32(fp)
    1380:	10000526 	beq	r2,zero,1398 <main+0x10a8>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1384:	e0bff80b 	ldhu	r2,-32(fp)
    1388:	100b883a 	mov	r5,r2
    138c:	01000074 	movhi	r4,1
    1390:	21121804 	addi	r4,r4,18528
    1394:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1398:	01005104 	movi	r4,324
    139c:	0003e280 	call	3e28 <UsbRead>
    13a0:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    13a4:	000b883a 	mov	r5,zero
    13a8:	01005104 	movi	r4,324
    13ac:	0003dd80 	call	3dd8 <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    13b0:	e0bff80b 	ldhu	r2,-32(fp)
    13b4:	10840018 	cmpnei	r2,r2,4096
    13b8:	103ff01e 	bne	r2,zero,137c <main+0x108c>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    13bc:	00c14184 	movi	r3,1286
    13c0:	00824834 	movhi	r2,2336
    13c4:	10801e04 	addi	r2,r2,120
    13c8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    13cc:	00824834 	movhi	r2,2336
    13d0:	10801c04 	addi	r2,r2,112
    13d4:	10800037 	ldwio	r2,0(r2)
    13d8:	100b883a 	mov	r5,r2
    13dc:	01000074 	movhi	r4,1
    13e0:	21124604 	addi	r4,r4,18712
    13e4:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    13e8:	00c14204 	movi	r3,1288
    13ec:	00824834 	movhi	r2,2336
    13f0:	10801e04 	addi	r2,r2,120
    13f4:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    13f8:	00824834 	movhi	r2,2336
    13fc:	10801c04 	addi	r2,r2,112
    1400:	10800037 	ldwio	r2,0(r2)
    1404:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    1408:	e0bff80b 	ldhu	r2,-32(fp)
    140c:	100b883a 	mov	r5,r2
    1410:	01000074 	movhi	r4,1
    1414:	21125104 	addi	r4,r4,18756
    1418:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
    141c:	00001906 	br	1484 <main+0x1194>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    1420:	00824834 	movhi	r2,2336
    1424:	10801f04 	addi	r2,r2,124
    1428:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    142c:	01005104 	movi	r4,324
    1430:	0003e280 	call	3e28 <UsbRead>
    1434:	10bfffcc 	andi	r2,r2,65535
    1438:	10840018 	cmpnei	r2,r2,4096
    143c:	1000091e 	bne	r2,zero,1464 <main+0x1174>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1440:	000b883a 	mov	r5,zero
    1444:	01005104 	movi	r4,324
    1448:	0003dd80 	call	3dd8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    144c:	0001883a 	nop
    1450:	00824834 	movhi	r2,2336
    1454:	10801f04 	addi	r2,r2,124
    1458:	10800037 	ldwio	r2,0(r2)
    145c:	1080040c 	andi	r2,r2,16
    1460:	103ffb26 	beq	r2,zero,1450 <main+0x1160>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1464:	00c14204 	movi	r3,1288
    1468:	00824834 	movhi	r2,2336
    146c:	10801e04 	addi	r2,r2,120
    1470:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1474:	00824834 	movhi	r2,2336
    1478:	10801c04 	addi	r2,r2,112
    147c:	10800037 	ldwio	r2,0(r2)
    1480:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    1484:	e0bff80b 	ldhu	r2,-32(fp)
    1488:	108000d8 	cmpnei	r2,r2,3
    148c:	103fe41e 	bne	r2,zero,1420 <main+0x1130>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("------------[ENUM PROCESS]:get device descriptor-2 pass!--------------\n");
    1490:	01000074 	movhi	r4,1
    1494:	21127104 	addi	r4,r4,18884
    1498:	00048840 	call	4884 <puts>
//    printf("\n[ENUM PROCESS]:TD rec data8 is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    //-----------------------------------get configuration descriptor -1 ----------------------------------//
    //usleep(1000);
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    149c:	00c14004 	movi	r3,1280
    14a0:	00824834 	movhi	r2,2336
    14a4:	10801e04 	addi	r2,r2,120
    14a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    14ac:	00c14304 	movi	r3,1292
    14b0:	00824834 	movhi	r2,2336
    14b4:	10801c04 	addi	r2,r2,112
    14b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    14bc:	00c00204 	movi	r3,8
    14c0:	00824834 	movhi	r2,2336
    14c4:	10801c04 	addi	r2,r2,112
    14c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    14cc:	00c0b404 	movi	r3,720
    14d0:	00824834 	movhi	r2,2336
    14d4:	10801c04 	addi	r2,r2,112
    14d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    14dc:	00c00044 	movi	r3,1
    14e0:	00824834 	movhi	r2,2336
    14e4:	10801c04 	addi	r2,r2,112
    14e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    14ec:	00c004c4 	movi	r3,19
    14f0:	00824834 	movhi	r2,2336
    14f4:	10801c04 	addi	r2,r2,112
    14f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    14fc:	00c14504 	movi	r3,1300
    1500:	00824834 	movhi	r2,2336
    1504:	10801c04 	addi	r2,r2,112
    1508:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    150c:	00c1a004 	movi	r3,1664
    1510:	00824834 	movhi	r2,2336
    1514:	10801c04 	addi	r2,r2,112
    1518:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    151c:	00c08004 	movi	r3,512
    1520:	00824834 	movhi	r2,2336
    1524:	10801c04 	addi	r2,r2,112
    1528:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    152c:	0007883a 	mov	r3,zero
    1530:	00824834 	movhi	r2,2336
    1534:	10801c04 	addi	r2,r2,112
    1538:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    153c:	00c00244 	movi	r3,9
    1540:	00824834 	movhi	r2,2336
    1544:	10801c04 	addi	r2,r2,112
    1548:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    154c:	00c15104 	movi	r3,1348
    1550:	00824834 	movhi	r2,2336
    1554:	10801c04 	addi	r2,r2,112
    1558:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    155c:	00c00204 	movi	r3,8
    1560:	00824834 	movhi	r2,2336
    1564:	10801c04 	addi	r2,r2,112
    1568:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    156c:	00c0a404 	movi	r3,656
    1570:	00824834 	movhi	r2,2336
    1574:	10801c04 	addi	r2,r2,112
    1578:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    157c:	00c01044 	movi	r3,65
    1580:	00824834 	movhi	r2,2336
    1584:	10801c04 	addi	r2,r2,112
    1588:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    158c:	00c004c4 	movi	r3,19
    1590:	00824834 	movhi	r2,2336
    1594:	10801c04 	addi	r2,r2,112
    1598:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    159c:	00c14804 	movi	r3,1312
    15a0:	00824834 	movhi	r2,2336
    15a4:	10801c04 	addi	r2,r2,112
    15a8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    15ac:	00c15304 	movi	r3,1356
    15b0:	00824834 	movhi	r2,2336
    15b4:	10801c04 	addi	r2,r2,112
    15b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    15bc:	00c00044 	movi	r3,1
    15c0:	00824834 	movhi	r2,2336
    15c4:	10801c04 	addi	r2,r2,112
    15c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    15cc:	00c0a404 	movi	r3,656
    15d0:	00824834 	movhi	r2,2336
    15d4:	10801c04 	addi	r2,r2,112
    15d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    15dc:	00c00044 	movi	r3,1
    15e0:	00824834 	movhi	r2,2336
    15e4:	10801c04 	addi	r2,r2,112
    15e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    15ec:	00c004c4 	movi	r3,19
    15f0:	00824834 	movhi	r2,2336
    15f4:	10801c04 	addi	r2,r2,112
    15f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    15fc:	00c14b04 	movi	r3,1324
    1600:	00824834 	movhi	r2,2336
    1604:	10801c04 	addi	r2,r2,112
    1608:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    160c:	0007883a 	mov	r3,zero
    1610:	00824834 	movhi	r2,2336
    1614:	10801c04 	addi	r2,r2,112
    1618:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    161c:	0007883a 	mov	r3,zero
    1620:	00824834 	movhi	r2,2336
    1624:	10801c04 	addi	r2,r2,112
    1628:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    162c:	00c08404 	movi	r3,528
    1630:	00824834 	movhi	r2,2336
    1634:	10801c04 	addi	r2,r2,112
    1638:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    163c:	00c01044 	movi	r3,65
    1640:	00824834 	movhi	r2,2336
    1644:	10801c04 	addi	r2,r2,112
    1648:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    164c:	00c004c4 	movi	r3,19
    1650:	00824834 	movhi	r2,2336
    1654:	10801c04 	addi	r2,r2,112
    1658:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    165c:	0007883a 	mov	r3,zero
    1660:	00824834 	movhi	r2,2336
    1664:	10801c04 	addi	r2,r2,112
    1668:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    166c:	01414004 	movi	r5,1280
    1670:	01006c04 	movi	r4,432
    1674:	0003dd80 	call	3dd8 <UsbWrite>
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1678:	00007906 	br	1860 <main+0x1570>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    167c:	00c14004 	movi	r3,1280
    1680:	00824834 	movhi	r2,2336
    1684:	10801e04 	addi	r2,r2,120
    1688:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    168c:	00c14304 	movi	r3,1292
    1690:	00824834 	movhi	r2,2336
    1694:	10801c04 	addi	r2,r2,112
    1698:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    169c:	00c00204 	movi	r3,8
    16a0:	00824834 	movhi	r2,2336
    16a4:	10801c04 	addi	r2,r2,112
    16a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    16ac:	00c0b404 	movi	r3,720
    16b0:	00824834 	movhi	r2,2336
    16b4:	10801c04 	addi	r2,r2,112
    16b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    16bc:	00c00044 	movi	r3,1
    16c0:	00824834 	movhi	r2,2336
    16c4:	10801c04 	addi	r2,r2,112
    16c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    16cc:	00c004c4 	movi	r3,19
    16d0:	00824834 	movhi	r2,2336
    16d4:	10801c04 	addi	r2,r2,112
    16d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    16dc:	00c14504 	movi	r3,1300
    16e0:	00824834 	movhi	r2,2336
    16e4:	10801c04 	addi	r2,r2,112
    16e8:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    16ec:	00c1a004 	movi	r3,1664
    16f0:	00824834 	movhi	r2,2336
    16f4:	10801c04 	addi	r2,r2,112
    16f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    16fc:	00c08004 	movi	r3,512
    1700:	00824834 	movhi	r2,2336
    1704:	10801c04 	addi	r2,r2,112
    1708:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    170c:	0007883a 	mov	r3,zero
    1710:	00824834 	movhi	r2,2336
    1714:	10801c04 	addi	r2,r2,112
    1718:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    171c:	00c00244 	movi	r3,9
    1720:	00824834 	movhi	r2,2336
    1724:	10801c04 	addi	r2,r2,112
    1728:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    172c:	00c15104 	movi	r3,1348
    1730:	00824834 	movhi	r2,2336
    1734:	10801c04 	addi	r2,r2,112
    1738:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    173c:	00c00204 	movi	r3,8
    1740:	00824834 	movhi	r2,2336
    1744:	10801c04 	addi	r2,r2,112
    1748:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    174c:	00c0a404 	movi	r3,656
    1750:	00824834 	movhi	r2,2336
    1754:	10801c04 	addi	r2,r2,112
    1758:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    175c:	00c01044 	movi	r3,65
    1760:	00824834 	movhi	r2,2336
    1764:	10801c04 	addi	r2,r2,112
    1768:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    176c:	00c004c4 	movi	r3,19
    1770:	00824834 	movhi	r2,2336
    1774:	10801c04 	addi	r2,r2,112
    1778:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    177c:	00c14804 	movi	r3,1312
    1780:	00824834 	movhi	r2,2336
    1784:	10801c04 	addi	r2,r2,112
    1788:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    178c:	00c15304 	movi	r3,1356
    1790:	00824834 	movhi	r2,2336
    1794:	10801c04 	addi	r2,r2,112
    1798:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    179c:	00c00044 	movi	r3,1
    17a0:	00824834 	movhi	r2,2336
    17a4:	10801c04 	addi	r2,r2,112
    17a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    17ac:	00c0a404 	movi	r3,656
    17b0:	00824834 	movhi	r2,2336
    17b4:	10801c04 	addi	r2,r2,112
    17b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    17bc:	00c00044 	movi	r3,1
    17c0:	00824834 	movhi	r2,2336
    17c4:	10801c04 	addi	r2,r2,112
    17c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    17cc:	00c004c4 	movi	r3,19
    17d0:	00824834 	movhi	r2,2336
    17d4:	10801c04 	addi	r2,r2,112
    17d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    17dc:	00c14b04 	movi	r3,1324
    17e0:	00824834 	movhi	r2,2336
    17e4:	10801c04 	addi	r2,r2,112
    17e8:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    17ec:	0007883a 	mov	r3,zero
    17f0:	00824834 	movhi	r2,2336
    17f4:	10801c04 	addi	r2,r2,112
    17f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    17fc:	0007883a 	mov	r3,zero
    1800:	00824834 	movhi	r2,2336
    1804:	10801c04 	addi	r2,r2,112
    1808:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    180c:	00c08404 	movi	r3,528
    1810:	00824834 	movhi	r2,2336
    1814:	10801c04 	addi	r2,r2,112
    1818:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    181c:	00c01044 	movi	r3,65
    1820:	00824834 	movhi	r2,2336
    1824:	10801c04 	addi	r2,r2,112
    1828:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    182c:	00c004c4 	movi	r3,19
    1830:	00824834 	movhi	r2,2336
    1834:	10801c04 	addi	r2,r2,112
    1838:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    183c:	0007883a 	mov	r3,zero
    1840:	00824834 	movhi	r2,2336
    1844:	10801c04 	addi	r2,r2,112
    1848:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    184c:	01414004 	movi	r5,1280
    1850:	01006c04 	movi	r4,432
    1854:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    1858:	0109c404 	movi	r4,10000
    185c:	00118300 	call	11830 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1860:	00824834 	movhi	r2,2336
    1864:	10801f04 	addi	r2,r2,124
    1868:	10800037 	ldwio	r2,0(r2)
    186c:	1080040c 	andi	r2,r2,16
    1870:	103f8226 	beq	r2,zero,167c <main+0x138c>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1874:	01005104 	movi	r4,324
    1878:	0003e280 	call	3e28 <UsbRead>
    187c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1880:	000b883a 	mov	r5,zero
    1884:	01005104 	movi	r4,324
    1888:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    188c:	00000d06 	br	18c4 <main+0x15d4>
    {
       if(usb_ctl_val == 0x000)
    1890:	e0bff80b 	ldhu	r2,-32(fp)
    1894:	10000526 	beq	r2,zero,18ac <main+0x15bc>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1898:	e0bff80b 	ldhu	r2,-32(fp)
    189c:	100b883a 	mov	r5,r2
    18a0:	01000074 	movhi	r4,1
    18a4:	21121804 	addi	r4,r4,18528
    18a8:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    18ac:	01005104 	movi	r4,324
    18b0:	0003e280 	call	3e28 <UsbRead>
    18b4:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    18b8:	000b883a 	mov	r5,zero
    18bc:	01005104 	movi	r4,324
    18c0:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    18c4:	e0bff80b 	ldhu	r2,-32(fp)
    18c8:	10840018 	cmpnei	r2,r2,4096
    18cc:	103ff01e 	bne	r2,zero,1890 <main+0x15a0>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    18d0:	00c14184 	movi	r3,1286
    18d4:	00824834 	movhi	r2,2336
    18d8:	10801e04 	addi	r2,r2,120
    18dc:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    18e0:	00824834 	movhi	r2,2336
    18e4:	10801c04 	addi	r2,r2,112
    18e8:	10800037 	ldwio	r2,0(r2)
    18ec:	100b883a 	mov	r5,r2
    18f0:	01000074 	movhi	r4,1
    18f4:	21128304 	addi	r4,r4,18956
    18f8:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    18fc:	00c14204 	movi	r3,1288
    1900:	00824834 	movhi	r2,2336
    1904:	10801e04 	addi	r2,r2,120
    1908:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    190c:	00824834 	movhi	r2,2336
    1910:	10801c04 	addi	r2,r2,112
    1914:	10800037 	ldwio	r2,0(r2)
    1918:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    191c:	e0bff80b 	ldhu	r2,-32(fp)
    1920:	100b883a 	mov	r5,r2
    1924:	01000074 	movhi	r4,1
    1928:	21128e04 	addi	r4,r4,19000
    192c:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
    1930:	00001906 	br	1998 <main+0x16a8>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    1934:	00824834 	movhi	r2,2336
    1938:	10801f04 	addi	r2,r2,124
    193c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1940:	01005104 	movi	r4,324
    1944:	0003e280 	call	3e28 <UsbRead>
    1948:	10bfffcc 	andi	r2,r2,65535
    194c:	10840018 	cmpnei	r2,r2,4096
    1950:	1000091e 	bne	r2,zero,1978 <main+0x1688>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1954:	000b883a 	mov	r5,zero
    1958:	01005104 	movi	r4,324
    195c:	0003dd80 	call	3dd8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1960:	0001883a 	nop
    1964:	00824834 	movhi	r2,2336
    1968:	10801f04 	addi	r2,r2,124
    196c:	10800037 	ldwio	r2,0(r2)
    1970:	1080040c 	andi	r2,r2,16
    1974:	103ffb26 	beq	r2,zero,1964 <main+0x1674>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1978:	00c14204 	movi	r3,1288
    197c:	00824834 	movhi	r2,2336
    1980:	10801e04 	addi	r2,r2,120
    1984:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1988:	00824834 	movhi	r2,2336
    198c:	10801c04 	addi	r2,r2,112
    1990:	10800037 	ldwio	r2,0(r2)
    1994:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    1998:	e0bff80b 	ldhu	r2,-32(fp)
    199c:	108000d8 	cmpnei	r2,r2,3
    19a0:	103fe41e 	bne	r2,zero,1934 <main+0x1644>
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
    19a4:	01000074 	movhi	r4,1
    19a8:	21129a04 	addi	r4,r4,19048
    19ac:	00048840 	call	4884 <puts>
    
    //-----------------------------------get configuration descriptor-2------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    19b0:	00c14004 	movi	r3,1280
    19b4:	00824834 	movhi	r2,2336
    19b8:	10801e04 	addi	r2,r2,120
    19bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    19c0:	00c14304 	movi	r3,1292
    19c4:	00824834 	movhi	r2,2336
    19c8:	10801c04 	addi	r2,r2,112
    19cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    19d0:	00c00204 	movi	r3,8
    19d4:	00824834 	movhi	r2,2336
    19d8:	10801c04 	addi	r2,r2,112
    19dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    19e0:	00c0b404 	movi	r3,720
    19e4:	00824834 	movhi	r2,2336
    19e8:	10801c04 	addi	r2,r2,112
    19ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    19f0:	00c00044 	movi	r3,1
    19f4:	00824834 	movhi	r2,2336
    19f8:	10801c04 	addi	r2,r2,112
    19fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1a00:	00c004c4 	movi	r3,19
    1a04:	00824834 	movhi	r2,2336
    1a08:	10801c04 	addi	r2,r2,112
    1a0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1a10:	00c14504 	movi	r3,1300
    1a14:	00824834 	movhi	r2,2336
    1a18:	10801c04 	addi	r2,r2,112
    1a1c:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1a20:	00c1a004 	movi	r3,1664
    1a24:	00824834 	movhi	r2,2336
    1a28:	10801c04 	addi	r2,r2,112
    1a2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    1a30:	00c08004 	movi	r3,512
    1a34:	00824834 	movhi	r2,2336
    1a38:	10801c04 	addi	r2,r2,112
    1a3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1a40:	0007883a 	mov	r3,zero
    1a44:	00824834 	movhi	r2,2336
    1a48:	10801c04 	addi	r2,r2,112
    1a4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    1a50:	00c03fc4 	movi	r3,255
    1a54:	00824834 	movhi	r2,2336
    1a58:	10801c04 	addi	r2,r2,112
    1a5c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    1a60:	00c15704 	movi	r3,1372
    1a64:	00824834 	movhi	r2,2336
    1a68:	10801c04 	addi	r2,r2,112
    1a6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1a70:	00c00204 	movi	r3,8
    1a74:	00824834 	movhi	r2,2336
    1a78:	10801c04 	addi	r2,r2,112
    1a7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1a80:	00c0a404 	movi	r3,656
    1a84:	00824834 	movhi	r2,2336
    1a88:	10801c04 	addi	r2,r2,112
    1a8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1a90:	00c01044 	movi	r3,65
    1a94:	00824834 	movhi	r2,2336
    1a98:	10801c04 	addi	r2,r2,112
    1a9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1aa0:	00c004c4 	movi	r3,19
    1aa4:	00824834 	movhi	r2,2336
    1aa8:	10801c04 	addi	r2,r2,112
    1aac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1ab0:	00c14804 	movi	r3,1312
    1ab4:	00824834 	movhi	r2,2336
    1ab8:	10801c04 	addi	r2,r2,112
    1abc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    1ac0:	00c15904 	movi	r3,1380
    1ac4:	00824834 	movhi	r2,2336
    1ac8:	10801c04 	addi	r2,r2,112
    1acc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1ad0:	00c00204 	movi	r3,8
    1ad4:	00824834 	movhi	r2,2336
    1ad8:	10801c04 	addi	r2,r2,112
    1adc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1ae0:	00c0a404 	movi	r3,656
    1ae4:	00824834 	movhi	r2,2336
    1ae8:	10801c04 	addi	r2,r2,112
    1aec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1af0:	00c00044 	movi	r3,1
    1af4:	00824834 	movhi	r2,2336
    1af8:	10801c04 	addi	r2,r2,112
    1afc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1b00:	00c004c4 	movi	r3,19
    1b04:	00824834 	movhi	r2,2336
    1b08:	10801c04 	addi	r2,r2,112
    1b0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1b10:	00c14b04 	movi	r3,1324
    1b14:	00824834 	movhi	r2,2336
    1b18:	10801c04 	addi	r2,r2,112
    1b1c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    1b20:	00c15b04 	movi	r3,1388
    1b24:	00824834 	movhi	r2,2336
    1b28:	10801c04 	addi	r2,r2,112
    1b2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    1b30:	00c00204 	movi	r3,8
    1b34:	00824834 	movhi	r2,2336
    1b38:	10801c04 	addi	r2,r2,112
    1b3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1b40:	00c0a404 	movi	r3,656
    1b44:	00824834 	movhi	r2,2336
    1b48:	10801c04 	addi	r2,r2,112
    1b4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1b50:	00c01044 	movi	r3,65
    1b54:	00824834 	movhi	r2,2336
    1b58:	10801c04 	addi	r2,r2,112
    1b5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1b60:	00c004c4 	movi	r3,19
    1b64:	00824834 	movhi	r2,2336
    1b68:	10801c04 	addi	r2,r2,112
    1b6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1b70:	00c14e04 	movi	r3,1336
    1b74:	00824834 	movhi	r2,2336
    1b78:	10801c04 	addi	r2,r2,112
    1b7c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    1b80:	00c15d04 	movi	r3,1396
    1b84:	00824834 	movhi	r2,2336
    1b88:	10801c04 	addi	r2,r2,112
    1b8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    1b90:	00c00204 	movi	r3,8
    1b94:	00824834 	movhi	r2,2336
    1b98:	10801c04 	addi	r2,r2,112
    1b9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    1ba0:	00c0a404 	movi	r3,656
    1ba4:	00824834 	movhi	r2,2336
    1ba8:	10801c04 	addi	r2,r2,112
    1bac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    1bb0:	00c00044 	movi	r3,1
    1bb4:	00824834 	movhi	r2,2336
    1bb8:	10801c04 	addi	r2,r2,112
    1bbc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1bc0:	00c004c4 	movi	r3,19
    1bc4:	00824834 	movhi	r2,2336
    1bc8:	10801c04 	addi	r2,r2,112
    1bcc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    1bd0:	00c15104 	movi	r3,1348
    1bd4:	00824834 	movhi	r2,2336
    1bd8:	10801c04 	addi	r2,r2,112
    1bdc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1be0:	00c15f04 	movi	r3,1404
    1be4:	00824834 	movhi	r2,2336
    1be8:	10801c04 	addi	r2,r2,112
    1bec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1bf0:	00c00084 	movi	r3,2
    1bf4:	00824834 	movhi	r2,2336
    1bf8:	10801c04 	addi	r2,r2,112
    1bfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1c00:	00c0a404 	movi	r3,656
    1c04:	00824834 	movhi	r2,2336
    1c08:	10801c04 	addi	r2,r2,112
    1c0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    1c10:	00c01044 	movi	r3,65
    1c14:	00824834 	movhi	r2,2336
    1c18:	10801c04 	addi	r2,r2,112
    1c1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1c20:	00c004c4 	movi	r3,19
    1c24:	00824834 	movhi	r2,2336
    1c28:	10801c04 	addi	r2,r2,112
    1c2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1c30:	00c15404 	movi	r3,1360
    1c34:	00824834 	movhi	r2,2336
    1c38:	10801c04 	addi	r2,r2,112
    1c3c:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    1c40:	0007883a 	mov	r3,zero
    1c44:	00824834 	movhi	r2,2336
    1c48:	10801c04 	addi	r2,r2,112
    1c4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1c50:	0007883a 	mov	r3,zero
    1c54:	00824834 	movhi	r2,2336
    1c58:	10801c04 	addi	r2,r2,112
    1c5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    1c60:	00c08404 	movi	r3,528
    1c64:	00824834 	movhi	r2,2336
    1c68:	10801c04 	addi	r2,r2,112
    1c6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    1c70:	00c01044 	movi	r3,65
    1c74:	00824834 	movhi	r2,2336
    1c78:	10801c04 	addi	r2,r2,112
    1c7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1c80:	00c004c4 	movi	r3,19
    1c84:	00824834 	movhi	r2,2336
    1c88:	10801c04 	addi	r2,r2,112
    1c8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1c90:	0007883a 	mov	r3,zero
    1c94:	00824834 	movhi	r2,2336
    1c98:	10801c04 	addi	r2,r2,112
    1c9c:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1ca0:	01414004 	movi	r5,1280
    1ca4:	01006c04 	movi	r4,432
    1ca8:	0003dd80 	call	3dd8 <UsbWrite>
    
   usleep(100*1000);
    1cac:	010000b4 	movhi	r4,2
    1cb0:	2121a804 	addi	r4,r4,-31072
    1cb4:	00118300 	call	11830 <usleep>
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1cb8:	0000c106 	br	1fc0 <main+0x1cd0>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1cbc:	00c14004 	movi	r3,1280
    1cc0:	00824834 	movhi	r2,2336
    1cc4:	10801e04 	addi	r2,r2,120
    1cc8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1ccc:	00c14304 	movi	r3,1292
    1cd0:	00824834 	movhi	r2,2336
    1cd4:	10801c04 	addi	r2,r2,112
    1cd8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1cdc:	00c00204 	movi	r3,8
    1ce0:	00824834 	movhi	r2,2336
    1ce4:	10801c04 	addi	r2,r2,112
    1ce8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1cec:	00c0b404 	movi	r3,720
    1cf0:	00824834 	movhi	r2,2336
    1cf4:	10801c04 	addi	r2,r2,112
    1cf8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1cfc:	00c00044 	movi	r3,1
    1d00:	00824834 	movhi	r2,2336
    1d04:	10801c04 	addi	r2,r2,112
    1d08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1d0c:	00c004c4 	movi	r3,19
    1d10:	00824834 	movhi	r2,2336
    1d14:	10801c04 	addi	r2,r2,112
    1d18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1d1c:	00c14504 	movi	r3,1300
    1d20:	00824834 	movhi	r2,2336
    1d24:	10801c04 	addi	r2,r2,112
    1d28:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1d2c:	00c1a004 	movi	r3,1664
    1d30:	00824834 	movhi	r2,2336
    1d34:	10801c04 	addi	r2,r2,112
    1d38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    1d3c:	00c08004 	movi	r3,512
    1d40:	00824834 	movhi	r2,2336
    1d44:	10801c04 	addi	r2,r2,112
    1d48:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1d4c:	0007883a 	mov	r3,zero
    1d50:	00824834 	movhi	r2,2336
    1d54:	10801c04 	addi	r2,r2,112
    1d58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    1d5c:	00c03fc4 	movi	r3,255
    1d60:	00824834 	movhi	r2,2336
    1d64:	10801c04 	addi	r2,r2,112
    1d68:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    1d6c:	00c15704 	movi	r3,1372
    1d70:	00824834 	movhi	r2,2336
    1d74:	10801c04 	addi	r2,r2,112
    1d78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1d7c:	00c00204 	movi	r3,8
    1d80:	00824834 	movhi	r2,2336
    1d84:	10801c04 	addi	r2,r2,112
    1d88:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1d8c:	00c0a404 	movi	r3,656
    1d90:	00824834 	movhi	r2,2336
    1d94:	10801c04 	addi	r2,r2,112
    1d98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1d9c:	00c01044 	movi	r3,65
    1da0:	00824834 	movhi	r2,2336
    1da4:	10801c04 	addi	r2,r2,112
    1da8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1dac:	00c004c4 	movi	r3,19
    1db0:	00824834 	movhi	r2,2336
    1db4:	10801c04 	addi	r2,r2,112
    1db8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1dbc:	00c14804 	movi	r3,1312
    1dc0:	00824834 	movhi	r2,2336
    1dc4:	10801c04 	addi	r2,r2,112
    1dc8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    1dcc:	00c15904 	movi	r3,1380
    1dd0:	00824834 	movhi	r2,2336
    1dd4:	10801c04 	addi	r2,r2,112
    1dd8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1ddc:	00c00204 	movi	r3,8
    1de0:	00824834 	movhi	r2,2336
    1de4:	10801c04 	addi	r2,r2,112
    1de8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1dec:	00c0a404 	movi	r3,656
    1df0:	00824834 	movhi	r2,2336
    1df4:	10801c04 	addi	r2,r2,112
    1df8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1dfc:	00c00044 	movi	r3,1
    1e00:	00824834 	movhi	r2,2336
    1e04:	10801c04 	addi	r2,r2,112
    1e08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1e0c:	00c004c4 	movi	r3,19
    1e10:	00824834 	movhi	r2,2336
    1e14:	10801c04 	addi	r2,r2,112
    1e18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1e1c:	00c14b04 	movi	r3,1324
    1e20:	00824834 	movhi	r2,2336
    1e24:	10801c04 	addi	r2,r2,112
    1e28:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    1e2c:	00c15b04 	movi	r3,1388
    1e30:	00824834 	movhi	r2,2336
    1e34:	10801c04 	addi	r2,r2,112
    1e38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    1e3c:	00c00204 	movi	r3,8
    1e40:	00824834 	movhi	r2,2336
    1e44:	10801c04 	addi	r2,r2,112
    1e48:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1e4c:	00c0a404 	movi	r3,656
    1e50:	00824834 	movhi	r2,2336
    1e54:	10801c04 	addi	r2,r2,112
    1e58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1e5c:	00c01044 	movi	r3,65
    1e60:	00824834 	movhi	r2,2336
    1e64:	10801c04 	addi	r2,r2,112
    1e68:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1e6c:	00c004c4 	movi	r3,19
    1e70:	00824834 	movhi	r2,2336
    1e74:	10801c04 	addi	r2,r2,112
    1e78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1e7c:	00c14e04 	movi	r3,1336
    1e80:	00824834 	movhi	r2,2336
    1e84:	10801c04 	addi	r2,r2,112
    1e88:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    1e8c:	00c15d04 	movi	r3,1396
    1e90:	00824834 	movhi	r2,2336
    1e94:	10801c04 	addi	r2,r2,112
    1e98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    1e9c:	00c00204 	movi	r3,8
    1ea0:	00824834 	movhi	r2,2336
    1ea4:	10801c04 	addi	r2,r2,112
    1ea8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    1eac:	00c0a404 	movi	r3,656
    1eb0:	00824834 	movhi	r2,2336
    1eb4:	10801c04 	addi	r2,r2,112
    1eb8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    1ebc:	00c00044 	movi	r3,1
    1ec0:	00824834 	movhi	r2,2336
    1ec4:	10801c04 	addi	r2,r2,112
    1ec8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1ecc:	00c004c4 	movi	r3,19
    1ed0:	00824834 	movhi	r2,2336
    1ed4:	10801c04 	addi	r2,r2,112
    1ed8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    1edc:	00c15104 	movi	r3,1348
    1ee0:	00824834 	movhi	r2,2336
    1ee4:	10801c04 	addi	r2,r2,112
    1ee8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1eec:	00c15f04 	movi	r3,1404
    1ef0:	00824834 	movhi	r2,2336
    1ef4:	10801c04 	addi	r2,r2,112
    1ef8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1efc:	00c00084 	movi	r3,2
    1f00:	00824834 	movhi	r2,2336
    1f04:	10801c04 	addi	r2,r2,112
    1f08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1f0c:	00c0a404 	movi	r3,656
    1f10:	00824834 	movhi	r2,2336
    1f14:	10801c04 	addi	r2,r2,112
    1f18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    1f1c:	00c01044 	movi	r3,65
    1f20:	00824834 	movhi	r2,2336
    1f24:	10801c04 	addi	r2,r2,112
    1f28:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1f2c:	00c004c4 	movi	r3,19
    1f30:	00824834 	movhi	r2,2336
    1f34:	10801c04 	addi	r2,r2,112
    1f38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1f3c:	00c15404 	movi	r3,1360
    1f40:	00824834 	movhi	r2,2336
    1f44:	10801c04 	addi	r2,r2,112
    1f48:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    1f4c:	0007883a 	mov	r3,zero
    1f50:	00824834 	movhi	r2,2336
    1f54:	10801c04 	addi	r2,r2,112
    1f58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1f5c:	0007883a 	mov	r3,zero
    1f60:	00824834 	movhi	r2,2336
    1f64:	10801c04 	addi	r2,r2,112
    1f68:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    1f6c:	00c08404 	movi	r3,528
    1f70:	00824834 	movhi	r2,2336
    1f74:	10801c04 	addi	r2,r2,112
    1f78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    1f7c:	00c01044 	movi	r3,65
    1f80:	00824834 	movhi	r2,2336
    1f84:	10801c04 	addi	r2,r2,112
    1f88:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1f8c:	00c004c4 	movi	r3,19
    1f90:	00824834 	movhi	r2,2336
    1f94:	10801c04 	addi	r2,r2,112
    1f98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1f9c:	0007883a 	mov	r3,zero
    1fa0:	00824834 	movhi	r2,2336
    1fa4:	10801c04 	addi	r2,r2,112
    1fa8:	10c00035 	stwio	r3,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1fac:	01414004 	movi	r5,1280
    1fb0:	01006c04 	movi	r4,432
    1fb4:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    1fb8:	0109c404 	movi	r4,10000
    1fbc:	00118300 	call	11830 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1fc0:	00824834 	movhi	r2,2336
    1fc4:	10801f04 	addi	r2,r2,124
    1fc8:	10800037 	ldwio	r2,0(r2)
    1fcc:	1080040c 	andi	r2,r2,16
    1fd0:	103f3a26 	beq	r2,zero,1cbc <main+0x19cc>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1fd4:	01005104 	movi	r4,324
    1fd8:	0003e280 	call	3e28 <UsbRead>
    1fdc:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1fe0:	000b883a 	mov	r5,zero
    1fe4:	01005104 	movi	r4,324
    1fe8:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1fec:	00000d06 	br	2024 <main+0x1d34>
    {
       if(usb_ctl_val == 0x000)
    1ff0:	e0bff80b 	ldhu	r2,-32(fp)
    1ff4:	10000526 	beq	r2,zero,200c <main+0x1d1c>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1ff8:	e0bff80b 	ldhu	r2,-32(fp)
    1ffc:	100b883a 	mov	r5,r2
    2000:	01000074 	movhi	r4,1
    2004:	2112ad04 	addi	r4,r4,19124
    2008:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    200c:	01005104 	movi	r4,324
    2010:	0003e280 	call	3e28 <UsbRead>
    2014:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2018:	000b883a 	mov	r5,zero
    201c:	01005104 	movi	r4,324
    2020:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2024:	e0bff80b 	ldhu	r2,-32(fp)
    2028:	10840018 	cmpnei	r2,r2,4096
    202c:	103ff01e 	bne	r2,zero,1ff0 <main+0x1d00>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2030:	00c14184 	movi	r3,1286
    2034:	00824834 	movhi	r2,2336
    2038:	10801e04 	addi	r2,r2,120
    203c:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2040:	00824834 	movhi	r2,2336
    2044:	10801c04 	addi	r2,r2,112
    2048:	10800037 	ldwio	r2,0(r2)
    204c:	100b883a 	mov	r5,r2
    2050:	01000074 	movhi	r4,1
    2054:	2112b504 	addi	r4,r4,19156
    2058:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    205c:	00c14204 	movi	r3,1288
    2060:	00824834 	movhi	r2,2336
    2064:	10801e04 	addi	r2,r2,120
    2068:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    206c:	00824834 	movhi	r2,2336
    2070:	10801c04 	addi	r2,r2,112
    2074:	10800037 	ldwio	r2,0(r2)
    2078:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    207c:	e0bff80b 	ldhu	r2,-32(fp)
    2080:	100b883a 	mov	r5,r2
    2084:	01000074 	movhi	r4,1
    2088:	2112c004 	addi	r4,r4,19200
    208c:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
    2090:	00001906 	br	20f8 <main+0x1e08>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2094:	00824834 	movhi	r2,2336
    2098:	10801f04 	addi	r2,r2,124
    209c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    20a0:	01005104 	movi	r4,324
    20a4:	0003e280 	call	3e28 <UsbRead>
    20a8:	10bfffcc 	andi	r2,r2,65535
    20ac:	10840018 	cmpnei	r2,r2,4096
    20b0:	1000091e 	bne	r2,zero,20d8 <main+0x1de8>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    20b4:	000b883a 	mov	r5,zero
    20b8:	01005104 	movi	r4,324
    20bc:	0003dd80 	call	3dd8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    20c0:	0001883a 	nop
    20c4:	00824834 	movhi	r2,2336
    20c8:	10801f04 	addi	r2,r2,124
    20cc:	10800037 	ldwio	r2,0(r2)
    20d0:	1080040c 	andi	r2,r2,16
    20d4:	103ffb26 	beq	r2,zero,20c4 <main+0x1dd4>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    20d8:	00c14204 	movi	r3,1288
    20dc:	00824834 	movhi	r2,2336
    20e0:	10801e04 	addi	r2,r2,120
    20e4:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    20e8:	00824834 	movhi	r2,2336
    20ec:	10801c04 	addi	r2,r2,112
    20f0:	10800037 	ldwio	r2,0(r2)
    20f4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    20f8:	e0bff80b 	ldhu	r2,-32(fp)
    20fc:	108000d8 	cmpnei	r2,r2,3
    2100:	103fe41e 	bne	r2,zero,2094 <main+0x1da4>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
       
    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 pass!------------\n");
    2104:	01000074 	movhi	r4,1
    2108:	2112cc04 	addi	r4,r4,19248
    210c:	00048840 	call	4884 <puts>
    

    IOWR(CY7C67200_BASE,HPI_ADDR,0x056c); //the start address
    2110:	00c15b04 	movi	r3,1388
    2114:	00824834 	movhi	r2,2336
    2118:	10801e04 	addi	r2,r2,120
    211c:	10c00035 	stwio	r3,0(r2)

    if(  ( IORD(CY7C67200_BASE,HPI_DATA) & 0x0ff)  ==0x02)
    2120:	00824834 	movhi	r2,2336
    2124:	10801c04 	addi	r2,r2,112
    2128:	10800037 	ldwio	r2,0(r2)
    212c:	10803fcc 	andi	r2,r2,255
    2130:	10800098 	cmpnei	r2,r2,2
    2134:	1000041e 	bne	r2,zero,2148 <main+0x1e58>
    {
         printf("\n[INFO]:check TD rec data7 \n[INFO]:Mouse Detected!!!\n\n");
    2138:	01000074 	movhi	r4,1
    213c:	2112df04 	addi	r4,r4,19324
    2140:	00048840 	call	4884 <puts>
    2144:	00000306 	br	2154 <main+0x1e64>
    }
    else
    {
        printf("\n[INFO]:Mouse Not Detected!!! \n\n");
    2148:	01000074 	movhi	r4,1
    214c:	2112ed04 	addi	r4,r4,19380
    2150:	00048840 	call	4884 <puts>
    }
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x057a); //the start address   
    2154:	00c15e84 	movi	r3,1402
    2158:	00824834 	movhi	r2,2336
    215c:	10801e04 	addi	r2,r2,120
    2160:	10c00035 	stwio	r3,0(r2)
      
    data_size = (IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff; 
    2164:	00824834 	movhi	r2,2336
    2168:	10801c04 	addi	r2,r2,112
    216c:	10800037 	ldwio	r2,0(r2)
    2170:	1005d23a 	srai	r2,r2,8
    2174:	e0bffb85 	stb	r2,-18(fp)
    printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
    2178:	e0bffb83 	ldbu	r2,-18(fp)
    217c:	100b883a 	mov	r5,r2
    2180:	01000074 	movhi	r4,1
    2184:	2112f504 	addi	r4,r4,19412
    2188:	00047880 	call	4788 <printf>
    
    //------------------------------------set configuration -----------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    218c:	00c14004 	movi	r3,1280
    2190:	00824834 	movhi	r2,2336
    2194:	10801e04 	addi	r2,r2,120
    2198:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    219c:	00c14304 	movi	r3,1292
    21a0:	00824834 	movhi	r2,2336
    21a4:	10801c04 	addi	r2,r2,112
    21a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    21ac:	00c00204 	movi	r3,8
    21b0:	00824834 	movhi	r2,2336
    21b4:	10801c04 	addi	r2,r2,112
    21b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    21bc:	00c0b404 	movi	r3,720
    21c0:	00824834 	movhi	r2,2336
    21c4:	10801c04 	addi	r2,r2,112
    21c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    21cc:	00c00044 	movi	r3,1
    21d0:	00824834 	movhi	r2,2336
    21d4:	10801c04 	addi	r2,r2,112
    21d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    21dc:	00c004c4 	movi	r3,19
    21e0:	00824834 	movhi	r2,2336
    21e4:	10801c04 	addi	r2,r2,112
    21e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    21ec:	00c14504 	movi	r3,1300
    21f0:	00824834 	movhi	r2,2336
    21f4:	10801c04 	addi	r2,r2,112
    21f8:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    21fc:	00c24004 	movi	r3,2304
    2200:	00824834 	movhi	r2,2336
    2204:	10801c04 	addi	r2,r2,112
    2208:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    220c:	00c00044 	movi	r3,1
    2210:	00824834 	movhi	r2,2336
    2214:	10801c04 	addi	r2,r2,112
    2218:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    221c:	0007883a 	mov	r3,zero
    2220:	00824834 	movhi	r2,2336
    2224:	10801c04 	addi	r2,r2,112
    2228:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    222c:	0007883a 	mov	r3,zero
    2230:	00824834 	movhi	r2,2336
    2234:	10801c04 	addi	r2,r2,112
    2238:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    223c:	0007883a 	mov	r3,zero
    2240:	00824834 	movhi	r2,2336
    2244:	10801c04 	addi	r2,r2,112
    2248:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    224c:	0007883a 	mov	r3,zero
    2250:	00824834 	movhi	r2,2336
    2254:	10801c04 	addi	r2,r2,112
    2258:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    225c:	00c0a404 	movi	r3,656
    2260:	00824834 	movhi	r2,2336
    2264:	10801c04 	addi	r2,r2,112
    2268:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    226c:	00c01044 	movi	r3,65
    2270:	00824834 	movhi	r2,2336
    2274:	10801c04 	addi	r2,r2,112
    2278:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    227c:	00c004c4 	movi	r3,19
    2280:	00824834 	movhi	r2,2336
    2284:	10801c04 	addi	r2,r2,112
    2288:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    228c:	0007883a 	mov	r3,zero
    2290:	00824834 	movhi	r2,2336
    2294:	10801c04 	addi	r2,r2,112
    2298:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    229c:	01414004 	movi	r5,1280
    22a0:	01006c04 	movi	r4,432
    22a4:	0003dd80 	call	3dd8 <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    22a8:	00004906 	br	23d0 <main+0x20e0>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    22ac:	00c14004 	movi	r3,1280
    22b0:	00824834 	movhi	r2,2336
    22b4:	10801e04 	addi	r2,r2,120
    22b8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    22bc:	00c14304 	movi	r3,1292
    22c0:	00824834 	movhi	r2,2336
    22c4:	10801c04 	addi	r2,r2,112
    22c8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    22cc:	00c00204 	movi	r3,8
    22d0:	00824834 	movhi	r2,2336
    22d4:	10801c04 	addi	r2,r2,112
    22d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    22dc:	00c0b404 	movi	r3,720
    22e0:	00824834 	movhi	r2,2336
    22e4:	10801c04 	addi	r2,r2,112
    22e8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    22ec:	00c00044 	movi	r3,1
    22f0:	00824834 	movhi	r2,2336
    22f4:	10801c04 	addi	r2,r2,112
    22f8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    22fc:	00c004c4 	movi	r3,19
    2300:	00824834 	movhi	r2,2336
    2304:	10801c04 	addi	r2,r2,112
    2308:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    230c:	00c14504 	movi	r3,1300
    2310:	00824834 	movhi	r2,2336
    2314:	10801c04 	addi	r2,r2,112
    2318:	10c00035 	stwio	r3,0(r2)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    231c:	00c24004 	movi	r3,2304
    2320:	00824834 	movhi	r2,2336
    2324:	10801c04 	addi	r2,r2,112
    2328:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    232c:	00c00044 	movi	r3,1
    2330:	00824834 	movhi	r2,2336
    2334:	10801c04 	addi	r2,r2,112
    2338:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    233c:	0007883a 	mov	r3,zero
    2340:	00824834 	movhi	r2,2336
    2344:	10801c04 	addi	r2,r2,112
    2348:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    234c:	0007883a 	mov	r3,zero
    2350:	00824834 	movhi	r2,2336
    2354:	10801c04 	addi	r2,r2,112
    2358:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    235c:	0007883a 	mov	r3,zero
    2360:	00824834 	movhi	r2,2336
    2364:	10801c04 	addi	r2,r2,112
    2368:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    236c:	0007883a 	mov	r3,zero
    2370:	00824834 	movhi	r2,2336
    2374:	10801c04 	addi	r2,r2,112
    2378:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    237c:	00c0a404 	movi	r3,656
    2380:	00824834 	movhi	r2,2336
    2384:	10801c04 	addi	r2,r2,112
    2388:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    238c:	00c01044 	movi	r3,65
    2390:	00824834 	movhi	r2,2336
    2394:	10801c04 	addi	r2,r2,112
    2398:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    239c:	00c004c4 	movi	r3,19
    23a0:	00824834 	movhi	r2,2336
    23a4:	10801c04 	addi	r2,r2,112
    23a8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    23ac:	0007883a 	mov	r3,zero
    23b0:	00824834 	movhi	r2,2336
    23b4:	10801c04 	addi	r2,r2,112
    23b8:	10c00035 	stwio	r3,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    23bc:	01414004 	movi	r5,1280
    23c0:	01006c04 	movi	r4,432
    23c4:	0003dd80 	call	3dd8 <UsbWrite>
        usleep(10*1000);
    23c8:	0109c404 	movi	r4,10000
    23cc:	00118300 	call	11830 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    23d0:	00824834 	movhi	r2,2336
    23d4:	10801f04 	addi	r2,r2,124
    23d8:	10800037 	ldwio	r2,0(r2)
    23dc:	1080040c 	andi	r2,r2,16
    23e0:	103fb226 	beq	r2,zero,22ac <main+0x1fbc>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    23e4:	01005104 	movi	r4,324
    23e8:	0003e280 	call	3e28 <UsbRead>
    23ec:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    23f0:	000b883a 	mov	r5,zero
    23f4:	01005104 	movi	r4,324
    23f8:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    23fc:	00000d06 	br	2434 <main+0x2144>
    {
       if(usb_ctl_val == 0x000)
    2400:	e0bff80b 	ldhu	r2,-32(fp)
    2404:	10000526 	beq	r2,zero,241c <main+0x212c>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2408:	e0bff80b 	ldhu	r2,-32(fp)
    240c:	100b883a 	mov	r5,r2
    2410:	01000074 	movhi	r4,1
    2414:	21121804 	addi	r4,r4,18528
    2418:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    241c:	01005104 	movi	r4,324
    2420:	0003e280 	call	3e28 <UsbRead>
    2424:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2428:	000b883a 	mov	r5,zero
    242c:	01005104 	movi	r4,324
    2430:	0003dd80 	call	3dd8 <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2434:	e0bff80b 	ldhu	r2,-32(fp)
    2438:	10840018 	cmpnei	r2,r2,4096
    243c:	103ff01e 	bne	r2,zero,2400 <main+0x2110>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2440:	00c14184 	movi	r3,1286
    2444:	00824834 	movhi	r2,2336
    2448:	10801e04 	addi	r2,r2,120
    244c:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2450:	00824834 	movhi	r2,2336
    2454:	10801c04 	addi	r2,r2,112
    2458:	10800037 	ldwio	r2,0(r2)
    245c:	100b883a 	mov	r5,r2
    2460:	01000074 	movhi	r4,1
    2464:	2112ff04 	addi	r4,r4,19452
    2468:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    246c:	00c14204 	movi	r3,1288
    2470:	00824834 	movhi	r2,2336
    2474:	10801e04 	addi	r2,r2,120
    2478:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    247c:	00824834 	movhi	r2,2336
    2480:	10801c04 	addi	r2,r2,112
    2484:	10800037 	ldwio	r2,0(r2)
    2488:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    248c:	e0bff80b 	ldhu	r2,-32(fp)
    2490:	100b883a 	mov	r5,r2
    2494:	01000074 	movhi	r4,1
    2498:	21130a04 	addi	r4,r4,19496
    249c:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
    24a0:	00001906 	br	2508 <main+0x2218>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    24a4:	00824834 	movhi	r2,2336
    24a8:	10801f04 	addi	r2,r2,124
    24ac:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    24b0:	01005104 	movi	r4,324
    24b4:	0003e280 	call	3e28 <UsbRead>
    24b8:	10bfffcc 	andi	r2,r2,65535
    24bc:	10840018 	cmpnei	r2,r2,4096
    24c0:	1000091e 	bne	r2,zero,24e8 <main+0x21f8>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    24c4:	000b883a 	mov	r5,zero
    24c8:	01005104 	movi	r4,324
    24cc:	0003dd80 	call	3dd8 <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    24d0:	0001883a 	nop
    24d4:	00824834 	movhi	r2,2336
    24d8:	10801f04 	addi	r2,r2,124
    24dc:	10800037 	ldwio	r2,0(r2)
    24e0:	1080040c 	andi	r2,r2,16
    24e4:	103ffb26 	beq	r2,zero,24d4 <main+0x21e4>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    24e8:	00c14204 	movi	r3,1288
    24ec:	00824834 	movhi	r2,2336
    24f0:	10801e04 	addi	r2,r2,120
    24f4:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    24f8:	00824834 	movhi	r2,2336
    24fc:	10801c04 	addi	r2,r2,112
    2500:	10800037 	ldwio	r2,0(r2)
    2504:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2508:	e0bff80b 	ldhu	r2,-32(fp)
    250c:	108000d8 	cmpnei	r2,r2,3
    2510:	103fe41e 	bne	r2,zero,24a4 <main+0x21b4>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    printf("------------[ENUM PROCESS]:set configuration pass!-------------------\n");
    2514:	01000074 	movhi	r4,1
    2518:	21131604 	addi	r4,r4,19544
    251c:	00048840 	call	4884 <puts>
    
    //----------------------------------------------classe request out ------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2520:	00c14004 	movi	r3,1280
    2524:	00824834 	movhi	r2,2336
    2528:	10801e04 	addi	r2,r2,120
    252c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2530:	00c14304 	movi	r3,1292
    2534:	00824834 	movhi	r2,2336
    2538:	10801c04 	addi	r2,r2,112
    253c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2540:	00c00204 	movi	r3,8
    2544:	00824834 	movhi	r2,2336
    2548:	10801c04 	addi	r2,r2,112
    254c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    2550:	00c0b404 	movi	r3,720
    2554:	00824834 	movhi	r2,2336
    2558:	10801c04 	addi	r2,r2,112
    255c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2560:	00c00044 	movi	r3,1
    2564:	00824834 	movhi	r2,2336
    2568:	10801c04 	addi	r2,r2,112
    256c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2570:	00c004c4 	movi	r3,19
    2574:	00824834 	movhi	r2,2336
    2578:	10801c04 	addi	r2,r2,112
    257c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2580:	00c14504 	movi	r3,1300
    2584:	00824834 	movhi	r2,2336
    2588:	10801c04 	addi	r2,r2,112
    258c:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    2590:	00c28844 	movi	r3,2593
    2594:	00824834 	movhi	r2,2336
    2598:	10801c04 	addi	r2,r2,112
    259c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    25a0:	0007883a 	mov	r3,zero
    25a4:	00824834 	movhi	r2,2336
    25a8:	10801c04 	addi	r2,r2,112
    25ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    25b0:	0007883a 	mov	r3,zero
    25b4:	00824834 	movhi	r2,2336
    25b8:	10801c04 	addi	r2,r2,112
    25bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    25c0:	0007883a 	mov	r3,zero
    25c4:	00824834 	movhi	r2,2336
    25c8:	10801c04 	addi	r2,r2,112
    25cc:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    25d0:	0007883a 	mov	r3,zero
    25d4:	00824834 	movhi	r2,2336
    25d8:	10801c04 	addi	r2,r2,112
    25dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
    25e0:	0007883a 	mov	r3,zero
    25e4:	00824834 	movhi	r2,2336
    25e8:	10801c04 	addi	r2,r2,112
    25ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    25f0:	00c0a404 	movi	r3,656
    25f4:	00824834 	movhi	r2,2336
    25f8:	10801c04 	addi	r2,r2,112
    25fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2600:	00c01044 	movi	r3,65
    2604:	00824834 	movhi	r2,2336
    2608:	10801c04 	addi	r2,r2,112
    260c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2610:	00c004c4 	movi	r3,19
    2614:	00824834 	movhi	r2,2336
    2618:	10801c04 	addi	r2,r2,112
    261c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2620:	0007883a 	mov	r3,zero
    2624:	00824834 	movhi	r2,2336
    2628:	10801c04 	addi	r2,r2,112
    262c:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2630:	01414004 	movi	r5,1280
    2634:	01006c04 	movi	r4,432
    2638:	0003dd80 	call	3dd8 <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    263c:	00004906 	br	2764 <main+0x2474>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2640:	00c14004 	movi	r3,1280
    2644:	00824834 	movhi	r2,2336
    2648:	10801e04 	addi	r2,r2,120
    264c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2650:	00c14304 	movi	r3,1292
    2654:	00824834 	movhi	r2,2336
    2658:	10801c04 	addi	r2,r2,112
    265c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2660:	00c00204 	movi	r3,8
    2664:	00824834 	movhi	r2,2336
    2668:	10801c04 	addi	r2,r2,112
    266c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    2670:	00c0b404 	movi	r3,720
    2674:	00824834 	movhi	r2,2336
    2678:	10801c04 	addi	r2,r2,112
    267c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2680:	00c00044 	movi	r3,1
    2684:	00824834 	movhi	r2,2336
    2688:	10801c04 	addi	r2,r2,112
    268c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2690:	00c004c4 	movi	r3,19
    2694:	00824834 	movhi	r2,2336
    2698:	10801c04 	addi	r2,r2,112
    269c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    26a0:	00c14504 	movi	r3,1300
    26a4:	00824834 	movhi	r2,2336
    26a8:	10801c04 	addi	r2,r2,112
    26ac:	10c00035 	stwio	r3,0(r2)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    26b0:	00c28844 	movi	r3,2593
    26b4:	00824834 	movhi	r2,2336
    26b8:	10801c04 	addi	r2,r2,112
    26bc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    26c0:	0007883a 	mov	r3,zero
    26c4:	00824834 	movhi	r2,2336
    26c8:	10801c04 	addi	r2,r2,112
    26cc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    26d0:	0007883a 	mov	r3,zero
    26d4:	00824834 	movhi	r2,2336
    26d8:	10801c04 	addi	r2,r2,112
    26dc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    26e0:	0007883a 	mov	r3,zero
    26e4:	00824834 	movhi	r2,2336
    26e8:	10801c04 	addi	r2,r2,112
    26ec:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    26f0:	0007883a 	mov	r3,zero
    26f4:	00824834 	movhi	r2,2336
    26f8:	10801c04 	addi	r2,r2,112
    26fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    2700:	0007883a 	mov	r3,zero
    2704:	00824834 	movhi	r2,2336
    2708:	10801c04 	addi	r2,r2,112
    270c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    2710:	00c0a404 	movi	r3,656
    2714:	00824834 	movhi	r2,2336
    2718:	10801c04 	addi	r2,r2,112
    271c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2720:	00c01044 	movi	r3,65
    2724:	00824834 	movhi	r2,2336
    2728:	10801c04 	addi	r2,r2,112
    272c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2730:	00c004c4 	movi	r3,19
    2734:	00824834 	movhi	r2,2336
    2738:	10801c04 	addi	r2,r2,112
    273c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2740:	0007883a 	mov	r3,zero
    2744:	00824834 	movhi	r2,2336
    2748:	10801c04 	addi	r2,r2,112
    274c:	10c00035 	stwio	r3,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2750:	01414004 	movi	r5,1280
    2754:	01006c04 	movi	r4,432
    2758:	0003dd80 	call	3dd8 <UsbWrite>
        usleep(10*1000);
    275c:	0109c404 	movi	r4,10000
    2760:	00118300 	call	11830 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2764:	00824834 	movhi	r2,2336
    2768:	10801f04 	addi	r2,r2,124
    276c:	10800037 	ldwio	r2,0(r2)
    2770:	1080040c 	andi	r2,r2,16
    2774:	103fb226 	beq	r2,zero,2640 <main+0x2350>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2778:	01005104 	movi	r4,324
    277c:	0003e280 	call	3e28 <UsbRead>
    2780:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2784:	000b883a 	mov	r5,zero
    2788:	01005104 	movi	r4,324
    278c:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2790:	00000d06 	br	27c8 <main+0x24d8>
    {
       if(usb_ctl_val == 0x000)
    2794:	e0bff80b 	ldhu	r2,-32(fp)
    2798:	10000526 	beq	r2,zero,27b0 <main+0x24c0>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    279c:	e0bff80b 	ldhu	r2,-32(fp)
    27a0:	100b883a 	mov	r5,r2
    27a4:	01000074 	movhi	r4,1
    27a8:	21132804 	addi	r4,r4,19616
    27ac:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    27b0:	01005104 	movi	r4,324
    27b4:	0003e280 	call	3e28 <UsbRead>
    27b8:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    27bc:	000b883a 	mov	r5,zero
    27c0:	01005104 	movi	r4,324
    27c4:	0003dd80 	call	3dd8 <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    27c8:	e0bff80b 	ldhu	r2,-32(fp)
    27cc:	10840018 	cmpnei	r2,r2,4096
    27d0:	103ff01e 	bne	r2,zero,2794 <main+0x24a4>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    27d4:	00c14184 	movi	r3,1286
    27d8:	00824834 	movhi	r2,2336
    27dc:	10801e04 	addi	r2,r2,120
    27e0:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    27e4:	00824834 	movhi	r2,2336
    27e8:	10801c04 	addi	r2,r2,112
    27ec:	10800037 	ldwio	r2,0(r2)
    27f0:	100b883a 	mov	r5,r2
    27f4:	01000074 	movhi	r4,1
    27f8:	21133004 	addi	r4,r4,19648
    27fc:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2800:	00c14204 	movi	r3,1288
    2804:	00824834 	movhi	r2,2336
    2808:	10801e04 	addi	r2,r2,120
    280c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2810:	00824834 	movhi	r2,2336
    2814:	10801c04 	addi	r2,r2,112
    2818:	10800037 	ldwio	r2,0(r2)
    281c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    2820:	e0bff80b 	ldhu	r2,-32(fp)
    2824:	100b883a 	mov	r5,r2
    2828:	01000074 	movhi	r4,1
    282c:	21133b04 	addi	r4,r4,19692
    2830:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
    2834:	00001906 	br	289c <main+0x25ac>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2838:	00824834 	movhi	r2,2336
    283c:	10801f04 	addi	r2,r2,124
    2840:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    2844:	01005104 	movi	r4,324
    2848:	0003e280 	call	3e28 <UsbRead>
    284c:	10bfffcc 	andi	r2,r2,65535
    2850:	10840018 	cmpnei	r2,r2,4096
    2854:	1000091e 	bne	r2,zero,287c <main+0x258c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2858:	000b883a 	mov	r5,zero
    285c:	01005104 	movi	r4,324
    2860:	0003dd80 	call	3dd8 <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2864:	0001883a 	nop
    2868:	00824834 	movhi	r2,2336
    286c:	10801f04 	addi	r2,r2,124
    2870:	10800037 	ldwio	r2,0(r2)
    2874:	1080040c 	andi	r2,r2,16
    2878:	103ffb26 	beq	r2,zero,2868 <main+0x2578>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    287c:	00c14204 	movi	r3,1288
    2880:	00824834 	movhi	r2,2336
    2884:	10801e04 	addi	r2,r2,120
    2888:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    288c:	00824834 	movhi	r2,2336
    2890:	10801c04 	addi	r2,r2,112
    2894:	10800037 	ldwio	r2,0(r2)
    2898:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    289c:	e0bff80b 	ldhu	r2,-32(fp)
    28a0:	108000d8 	cmpnei	r2,r2,3
    28a4:	103fe41e 	bne	r2,zero,2838 <main+0x2548>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    printf("------------[ENUM PROCESS]:classe request out pass!-------------------\n");
    28a8:	01000074 	movhi	r4,1
    28ac:	21134704 	addi	r4,r4,19740
    28b0:	00048840 	call	4884 <puts>
    
    //----------------------------------get descriptor(class 0x21) request out --------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    28b4:	00c14004 	movi	r3,1280
    28b8:	00824834 	movhi	r2,2336
    28bc:	10801e04 	addi	r2,r2,120
    28c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    28c4:	00c14304 	movi	r3,1292
    28c8:	00824834 	movhi	r2,2336
    28cc:	10801c04 	addi	r2,r2,112
    28d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    28d4:	00c00204 	movi	r3,8
    28d8:	00824834 	movhi	r2,2336
    28dc:	10801c04 	addi	r2,r2,112
    28e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    28e4:	00c0b404 	movi	r3,720
    28e8:	00824834 	movhi	r2,2336
    28ec:	10801c04 	addi	r2,r2,112
    28f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    28f4:	00c00044 	movi	r3,1
    28f8:	00824834 	movhi	r2,2336
    28fc:	10801c04 	addi	r2,r2,112
    2900:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2904:	00c004c4 	movi	r3,19
    2908:	00824834 	movhi	r2,2336
    290c:	10801c04 	addi	r2,r2,112
    2910:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2914:	00c14504 	movi	r3,1300
    2918:	00824834 	movhi	r2,2336
    291c:	10801c04 	addi	r2,r2,112
    2920:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    2924:	00c1a044 	movi	r3,1665
    2928:	00824834 	movhi	r2,2336
    292c:	10801c04 	addi	r2,r2,112
    2930:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    2934:	00c84004 	movi	r3,8448
    2938:	00824834 	movhi	r2,2336
    293c:	10801c04 	addi	r2,r2,112
    2940:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2944:	0007883a 	mov	r3,zero
    2948:	00824834 	movhi	r2,2336
    294c:	10801c04 	addi	r2,r2,112
    2950:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    2954:	00c01ec4 	movi	r3,123
    2958:	00824834 	movhi	r2,2336
    295c:	10801c04 	addi	r2,r2,112
    2960:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    2964:	00c15104 	movi	r3,1348
    2968:	00824834 	movhi	r2,2336
    296c:	10801c04 	addi	r2,r2,112
    2970:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2974:	00c00204 	movi	r3,8
    2978:	00824834 	movhi	r2,2336
    297c:	10801c04 	addi	r2,r2,112
    2980:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2984:	00c0a404 	movi	r3,656
    2988:	00824834 	movhi	r2,2336
    298c:	10801c04 	addi	r2,r2,112
    2990:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2994:	00c01044 	movi	r3,65
    2998:	00824834 	movhi	r2,2336
    299c:	10801c04 	addi	r2,r2,112
    29a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    29a4:	00c004c4 	movi	r3,19
    29a8:	00824834 	movhi	r2,2336
    29ac:	10801c04 	addi	r2,r2,112
    29b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    29b4:	00c14804 	movi	r3,1312
    29b8:	00824834 	movhi	r2,2336
    29bc:	10801c04 	addi	r2,r2,112
    29c0:	10c00035 	stwio	r3,0(r2)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    29c4:	0007883a 	mov	r3,zero
    29c8:	00824834 	movhi	r2,2336
    29cc:	10801c04 	addi	r2,r2,112
    29d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    29d4:	0007883a 	mov	r3,zero
    29d8:	00824834 	movhi	r2,2336
    29dc:	10801c04 	addi	r2,r2,112
    29e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    29e4:	00c08404 	movi	r3,528
    29e8:	00824834 	movhi	r2,2336
    29ec:	10801c04 	addi	r2,r2,112
    29f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    29f4:	00c01044 	movi	r3,65
    29f8:	00824834 	movhi	r2,2336
    29fc:	10801c04 	addi	r2,r2,112
    2a00:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2a04:	00c004c4 	movi	r3,19
    2a08:	00824834 	movhi	r2,2336
    2a0c:	10801c04 	addi	r2,r2,112
    2a10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2a14:	0007883a 	mov	r3,zero
    2a18:	00824834 	movhi	r2,2336
    2a1c:	10801c04 	addi	r2,r2,112
    2a20:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2a24:	01414004 	movi	r5,1280
    2a28:	01006c04 	movi	r4,432
    2a2c:	0003dd80 	call	3dd8 <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2a30:	00006106 	br	2bb8 <main+0x28c8>
    {
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2a34:	00c14004 	movi	r3,1280
    2a38:	00824834 	movhi	r2,2336
    2a3c:	10801e04 	addi	r2,r2,120
    2a40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2a44:	00c14304 	movi	r3,1292
    2a48:	00824834 	movhi	r2,2336
    2a4c:	10801c04 	addi	r2,r2,112
    2a50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2a54:	00c00204 	movi	r3,8
    2a58:	00824834 	movhi	r2,2336
    2a5c:	10801c04 	addi	r2,r2,112
    2a60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    2a64:	00c0b404 	movi	r3,720
    2a68:	00824834 	movhi	r2,2336
    2a6c:	10801c04 	addi	r2,r2,112
    2a70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2a74:	00c00044 	movi	r3,1
    2a78:	00824834 	movhi	r2,2336
    2a7c:	10801c04 	addi	r2,r2,112
    2a80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2a84:	00c004c4 	movi	r3,19
    2a88:	00824834 	movhi	r2,2336
    2a8c:	10801c04 	addi	r2,r2,112
    2a90:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2a94:	00c14504 	movi	r3,1300
    2a98:	00824834 	movhi	r2,2336
    2a9c:	10801c04 	addi	r2,r2,112
    2aa0:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    2aa4:	00c1a044 	movi	r3,1665
    2aa8:	00824834 	movhi	r2,2336
    2aac:	10801c04 	addi	r2,r2,112
    2ab0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    2ab4:	00c84004 	movi	r3,8448
    2ab8:	00824834 	movhi	r2,2336
    2abc:	10801c04 	addi	r2,r2,112
    2ac0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2ac4:	0007883a 	mov	r3,zero
    2ac8:	00824834 	movhi	r2,2336
    2acc:	10801c04 	addi	r2,r2,112
    2ad0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    2ad4:	00c01ec4 	movi	r3,123
    2ad8:	00824834 	movhi	r2,2336
    2adc:	10801c04 	addi	r2,r2,112
    2ae0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    2ae4:	00c15104 	movi	r3,1348
    2ae8:	00824834 	movhi	r2,2336
    2aec:	10801c04 	addi	r2,r2,112
    2af0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2af4:	00c00204 	movi	r3,8
    2af8:	00824834 	movhi	r2,2336
    2afc:	10801c04 	addi	r2,r2,112
    2b00:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2b04:	00c0a404 	movi	r3,656
    2b08:	00824834 	movhi	r2,2336
    2b0c:	10801c04 	addi	r2,r2,112
    2b10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2b14:	00c01044 	movi	r3,65
    2b18:	00824834 	movhi	r2,2336
    2b1c:	10801c04 	addi	r2,r2,112
    2b20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2b24:	00c004c4 	movi	r3,19
    2b28:	00824834 	movhi	r2,2336
    2b2c:	10801c04 	addi	r2,r2,112
    2b30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2b34:	00c14804 	movi	r3,1312
    2b38:	00824834 	movhi	r2,2336
    2b3c:	10801c04 	addi	r2,r2,112
    2b40:	10c00035 	stwio	r3,0(r2)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    2b44:	0007883a 	mov	r3,zero
    2b48:	00824834 	movhi	r2,2336
    2b4c:	10801c04 	addi	r2,r2,112
    2b50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    2b54:	0007883a 	mov	r3,zero
    2b58:	00824834 	movhi	r2,2336
    2b5c:	10801c04 	addi	r2,r2,112
    2b60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    2b64:	00c08404 	movi	r3,528
    2b68:	00824834 	movhi	r2,2336
    2b6c:	10801c04 	addi	r2,r2,112
    2b70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    2b74:	00c01044 	movi	r3,65
    2b78:	00824834 	movhi	r2,2336
    2b7c:	10801c04 	addi	r2,r2,112
    2b80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2b84:	00c004c4 	movi	r3,19
    2b88:	00824834 	movhi	r2,2336
    2b8c:	10801c04 	addi	r2,r2,112
    2b90:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2b94:	0007883a 	mov	r3,zero
    2b98:	00824834 	movhi	r2,2336
    2b9c:	10801c04 	addi	r2,r2,112
    2ba0:	10c00035 	stwio	r3,0(r2)
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2ba4:	01414004 	movi	r5,1280
    2ba8:	01006c04 	movi	r4,432
    2bac:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    2bb0:	0109c404 	movi	r4,10000
    2bb4:	00118300 	call	11830 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2bb8:	00824834 	movhi	r2,2336
    2bbc:	10801f04 	addi	r2,r2,124
    2bc0:	10800037 	ldwio	r2,0(r2)
    2bc4:	1080040c 	andi	r2,r2,16
    2bc8:	103f9a26 	beq	r2,zero,2a34 <main+0x2744>
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2bcc:	01005104 	movi	r4,324
    2bd0:	0003e280 	call	3e28 <UsbRead>
    2bd4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2bd8:	000b883a 	mov	r5,zero
    2bdc:	01005104 	movi	r4,324
    2be0:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2be4:	00000d06 	br	2c1c <main+0x292c>
    {
       if(usb_ctl_val == 0x000)
    2be8:	e0bff80b 	ldhu	r2,-32(fp)
    2bec:	10000526 	beq	r2,zero,2c04 <main+0x2914>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    2bf0:	e0bff80b 	ldhu	r2,-32(fp)
    2bf4:	100b883a 	mov	r5,r2
    2bf8:	01000074 	movhi	r4,1
    2bfc:	21135904 	addi	r4,r4,19812
    2c00:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2c04:	01005104 	movi	r4,324
    2c08:	0003e280 	call	3e28 <UsbRead>
    2c0c:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2c10:	000b883a 	mov	r5,zero
    2c14:	01005104 	movi	r4,324
    2c18:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2c1c:	e0bff80b 	ldhu	r2,-32(fp)
    2c20:	10840018 	cmpnei	r2,r2,4096
    2c24:	103ff01e 	bne	r2,zero,2be8 <main+0x28f8>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2c28:	00c14184 	movi	r3,1286
    2c2c:	00824834 	movhi	r2,2336
    2c30:	10801e04 	addi	r2,r2,120
    2c34:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2c38:	00824834 	movhi	r2,2336
    2c3c:	10801c04 	addi	r2,r2,112
    2c40:	10800037 	ldwio	r2,0(r2)
    2c44:	100b883a 	mov	r5,r2
    2c48:	01000074 	movhi	r4,1
    2c4c:	21133004 	addi	r4,r4,19648
    2c50:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2c54:	00c14204 	movi	r3,1288
    2c58:	00824834 	movhi	r2,2336
    2c5c:	10801e04 	addi	r2,r2,120
    2c60:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2c64:	00824834 	movhi	r2,2336
    2c68:	10801c04 	addi	r2,r2,112
    2c6c:	10800037 	ldwio	r2,0(r2)
    2c70:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    2c74:	e0bff80b 	ldhu	r2,-32(fp)
    2c78:	100b883a 	mov	r5,r2
    2c7c:	01000074 	movhi	r4,1
    2c80:	21133b04 	addi	r4,r4,19692
    2c84:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
    2c88:	00001906 	br	2cf0 <main+0x2a00>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2c8c:	00824834 	movhi	r2,2336
    2c90:	10801f04 	addi	r2,r2,124
    2c94:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    2c98:	01005104 	movi	r4,324
    2c9c:	0003e280 	call	3e28 <UsbRead>
    2ca0:	10bfffcc 	andi	r2,r2,65535
    2ca4:	10840018 	cmpnei	r2,r2,4096
    2ca8:	1000091e 	bne	r2,zero,2cd0 <main+0x29e0>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2cac:	000b883a 	mov	r5,zero
    2cb0:	01005104 	movi	r4,324
    2cb4:	0003dd80 	call	3dd8 <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2cb8:	0001883a 	nop
    2cbc:	00824834 	movhi	r2,2336
    2cc0:	10801f04 	addi	r2,r2,124
    2cc4:	10800037 	ldwio	r2,0(r2)
    2cc8:	1080040c 	andi	r2,r2,16
    2ccc:	103ffb26 	beq	r2,zero,2cbc <main+0x29cc>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2cd0:	00c14204 	movi	r3,1288
    2cd4:	00824834 	movhi	r2,2336
    2cd8:	10801e04 	addi	r2,r2,120
    2cdc:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2ce0:	00824834 	movhi	r2,2336
    2ce4:	10801c04 	addi	r2,r2,112
    2ce8:	10800037 	ldwio	r2,0(r2)
    2cec:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2cf0:	e0bff80b 	ldhu	r2,-32(fp)
    2cf4:	108000d8 	cmpnei	r2,r2,3
    2cf8:	103fe41e 	bne	r2,zero,2c8c <main+0x299c>
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    
    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) pass!-------------------\n");
    2cfc:	01000074 	movhi	r4,1
    2d00:	21136104 	addi	r4,r4,19844
    2d04:	00048840 	call	4884 <puts>
    
    //-------------------------------get descriptor (class 0x22)-------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2d08:	00c14004 	movi	r3,1280
    2d0c:	00824834 	movhi	r2,2336
    2d10:	10801e04 	addi	r2,r2,120
    2d14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2d18:	00c14304 	movi	r3,1292
    2d1c:	00824834 	movhi	r2,2336
    2d20:	10801c04 	addi	r2,r2,112
    2d24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2d28:	00c00204 	movi	r3,8
    2d2c:	00824834 	movhi	r2,2336
    2d30:	10801c04 	addi	r2,r2,112
    2d34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    2d38:	00c0b404 	movi	r3,720
    2d3c:	00824834 	movhi	r2,2336
    2d40:	10801c04 	addi	r2,r2,112
    2d44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2d48:	00c00044 	movi	r3,1
    2d4c:	00824834 	movhi	r2,2336
    2d50:	10801c04 	addi	r2,r2,112
    2d54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2d58:	00c004c4 	movi	r3,19
    2d5c:	00824834 	movhi	r2,2336
    2d60:	10801c04 	addi	r2,r2,112
    2d64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2d68:	00c14504 	movi	r3,1300
    2d6c:	00824834 	movhi	r2,2336
    2d70:	10801c04 	addi	r2,r2,112
    2d74:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    2d78:	00c1a044 	movi	r3,1665
    2d7c:	00824834 	movhi	r2,2336
    2d80:	10801c04 	addi	r2,r2,112
    2d84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    2d88:	00c88004 	movi	r3,8704
    2d8c:	00824834 	movhi	r2,2336
    2d90:	10801c04 	addi	r2,r2,112
    2d94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2d98:	0007883a 	mov	r3,zero
    2d9c:	00824834 	movhi	r2,2336
    2da0:	10801c04 	addi	r2,r2,112
    2da4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    2da8:	00c01ec4 	movi	r3,123
    2dac:	00824834 	movhi	r2,2336
    2db0:	10801c04 	addi	r2,r2,112
    2db4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    2db8:	00c16004 	movi	r3,1408
    2dbc:	00824834 	movhi	r2,2336
    2dc0:	10801c04 	addi	r2,r2,112
    2dc4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2dc8:	00c00204 	movi	r3,8
    2dcc:	00824834 	movhi	r2,2336
    2dd0:	10801c04 	addi	r2,r2,112
    2dd4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2dd8:	00c0a404 	movi	r3,656
    2ddc:	00824834 	movhi	r2,2336
    2de0:	10801c04 	addi	r2,r2,112
    2de4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2de8:	00c01044 	movi	r3,65
    2dec:	00824834 	movhi	r2,2336
    2df0:	10801c04 	addi	r2,r2,112
    2df4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2df8:	00c004c4 	movi	r3,19
    2dfc:	00824834 	movhi	r2,2336
    2e00:	10801c04 	addi	r2,r2,112
    2e04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2e08:	00c14804 	movi	r3,1312
    2e0c:	00824834 	movhi	r2,2336
    2e10:	10801c04 	addi	r2,r2,112
    2e14:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    2e18:	00c16204 	movi	r3,1416
    2e1c:	00824834 	movhi	r2,2336
    2e20:	10801c04 	addi	r2,r2,112
    2e24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2e28:	00c00204 	movi	r3,8
    2e2c:	00824834 	movhi	r2,2336
    2e30:	10801c04 	addi	r2,r2,112
    2e34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2e38:	00c0a404 	movi	r3,656
    2e3c:	00824834 	movhi	r2,2336
    2e40:	10801c04 	addi	r2,r2,112
    2e44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2e48:	00c00044 	movi	r3,1
    2e4c:	00824834 	movhi	r2,2336
    2e50:	10801c04 	addi	r2,r2,112
    2e54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2e58:	00c004c4 	movi	r3,19
    2e5c:	00824834 	movhi	r2,2336
    2e60:	10801c04 	addi	r2,r2,112
    2e64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    2e68:	00c14b04 	movi	r3,1324
    2e6c:	00824834 	movhi	r2,2336
    2e70:	10801c04 	addi	r2,r2,112
    2e74:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    2e78:	00c16404 	movi	r3,1424
    2e7c:	00824834 	movhi	r2,2336
    2e80:	10801c04 	addi	r2,r2,112
    2e84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    2e88:	00c00204 	movi	r3,8
    2e8c:	00824834 	movhi	r2,2336
    2e90:	10801c04 	addi	r2,r2,112
    2e94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    2e98:	00c0a404 	movi	r3,656
    2e9c:	00824834 	movhi	r2,2336
    2ea0:	10801c04 	addi	r2,r2,112
    2ea4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    2ea8:	00c01044 	movi	r3,65
    2eac:	00824834 	movhi	r2,2336
    2eb0:	10801c04 	addi	r2,r2,112
    2eb4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2eb8:	00c004c4 	movi	r3,19
    2ebc:	00824834 	movhi	r2,2336
    2ec0:	10801c04 	addi	r2,r2,112
    2ec4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    2ec8:	00c14e04 	movi	r3,1336
    2ecc:	00824834 	movhi	r2,2336
    2ed0:	10801c04 	addi	r2,r2,112
    2ed4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    2ed8:	00c16604 	movi	r3,1432
    2edc:	00824834 	movhi	r2,2336
    2ee0:	10801c04 	addi	r2,r2,112
    2ee4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    2ee8:	00c00204 	movi	r3,8
    2eec:	00824834 	movhi	r2,2336
    2ef0:	10801c04 	addi	r2,r2,112
    2ef4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    2ef8:	00c0a404 	movi	r3,656
    2efc:	00824834 	movhi	r2,2336
    2f00:	10801c04 	addi	r2,r2,112
    2f04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    2f08:	00c00044 	movi	r3,1
    2f0c:	00824834 	movhi	r2,2336
    2f10:	10801c04 	addi	r2,r2,112
    2f14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    2f18:	00c004c4 	movi	r3,19
    2f1c:	00824834 	movhi	r2,2336
    2f20:	10801c04 	addi	r2,r2,112
    2f24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    2f28:	00c15104 	movi	r3,1348
    2f2c:	00824834 	movhi	r2,2336
    2f30:	10801c04 	addi	r2,r2,112
    2f34:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    2f38:	00c16804 	movi	r3,1440
    2f3c:	00824834 	movhi	r2,2336
    2f40:	10801c04 	addi	r2,r2,112
    2f44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2f48:	00c00204 	movi	r3,8
    2f4c:	00824834 	movhi	r2,2336
    2f50:	10801c04 	addi	r2,r2,112
    2f54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2f58:	00c0a404 	movi	r3,656
    2f5c:	00824834 	movhi	r2,2336
    2f60:	10801c04 	addi	r2,r2,112
    2f64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    2f68:	00c01044 	movi	r3,65
    2f6c:	00824834 	movhi	r2,2336
    2f70:	10801c04 	addi	r2,r2,112
    2f74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2f78:	00c004c4 	movi	r3,19
    2f7c:	00824834 	movhi	r2,2336
    2f80:	10801c04 	addi	r2,r2,112
    2f84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    2f88:	00c15404 	movi	r3,1360
    2f8c:	00824834 	movhi	r2,2336
    2f90:	10801c04 	addi	r2,r2,112
    2f94:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    2f98:	00c16a04 	movi	r3,1448
    2f9c:	00824834 	movhi	r2,2336
    2fa0:	10801c04 	addi	r2,r2,112
    2fa4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2fa8:	00c00204 	movi	r3,8
    2fac:	00824834 	movhi	r2,2336
    2fb0:	10801c04 	addi	r2,r2,112
    2fb4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2fb8:	00c0a404 	movi	r3,656
    2fbc:	00824834 	movhi	r2,2336
    2fc0:	10801c04 	addi	r2,r2,112
    2fc4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2fc8:	00c00044 	movi	r3,1
    2fcc:	00824834 	movhi	r2,2336
    2fd0:	10801c04 	addi	r2,r2,112
    2fd4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2fd8:	00c004c4 	movi	r3,19
    2fdc:	00824834 	movhi	r2,2336
    2fe0:	10801c04 	addi	r2,r2,112
    2fe4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    2fe8:	00c15704 	movi	r3,1372
    2fec:	00824834 	movhi	r2,2336
    2ff0:	10801c04 	addi	r2,r2,112
    2ff4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    2ff8:	00c16c04 	movi	r3,1456
    2ffc:	00824834 	movhi	r2,2336
    3000:	10801c04 	addi	r2,r2,112
    3004:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    3008:	00c00204 	movi	r3,8
    300c:	00824834 	movhi	r2,2336
    3010:	10801c04 	addi	r2,r2,112
    3014:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    3018:	00c0a404 	movi	r3,656
    301c:	00824834 	movhi	r2,2336
    3020:	10801c04 	addi	r2,r2,112
    3024:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    3028:	00c01044 	movi	r3,65
    302c:	00824834 	movhi	r2,2336
    3030:	10801c04 	addi	r2,r2,112
    3034:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    3038:	00c004c4 	movi	r3,19
    303c:	00824834 	movhi	r2,2336
    3040:	10801c04 	addi	r2,r2,112
    3044:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    3048:	00c15a04 	movi	r3,1384
    304c:	00824834 	movhi	r2,2336
    3050:	10801c04 	addi	r2,r2,112
    3054:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    3058:	00c16e04 	movi	r3,1464
    305c:	00824834 	movhi	r2,2336
    3060:	10801c04 	addi	r2,r2,112
    3064:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    3068:	00c000c4 	movi	r3,3
    306c:	00824834 	movhi	r2,2336
    3070:	10801c04 	addi	r2,r2,112
    3074:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    3078:	00c0a404 	movi	r3,656
    307c:	00824834 	movhi	r2,2336
    3080:	10801c04 	addi	r2,r2,112
    3084:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    3088:	00c00044 	movi	r3,1
    308c:	00824834 	movhi	r2,2336
    3090:	10801c04 	addi	r2,r2,112
    3094:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    3098:	00c004c4 	movi	r3,19
    309c:	00824834 	movhi	r2,2336
    30a0:	10801c04 	addi	r2,r2,112
    30a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    30a8:	00c15d04 	movi	r3,1396
    30ac:	00824834 	movhi	r2,2336
    30b0:	10801c04 	addi	r2,r2,112
    30b4:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    30b8:	0007883a 	mov	r3,zero
    30bc:	00824834 	movhi	r2,2336
    30c0:	10801c04 	addi	r2,r2,112
    30c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    30c8:	0007883a 	mov	r3,zero
    30cc:	00824834 	movhi	r2,2336
    30d0:	10801c04 	addi	r2,r2,112
    30d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    30d8:	00c08404 	movi	r3,528
    30dc:	00824834 	movhi	r2,2336
    30e0:	10801c04 	addi	r2,r2,112
    30e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    30e8:	00c01044 	movi	r3,65
    30ec:	00824834 	movhi	r2,2336
    30f0:	10801c04 	addi	r2,r2,112
    30f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    30f8:	00c004c4 	movi	r3,19
    30fc:	00824834 	movhi	r2,2336
    3100:	10801c04 	addi	r2,r2,112
    3104:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    3108:	0007883a 	mov	r3,zero
    310c:	00824834 	movhi	r2,2336
    3110:	10801c04 	addi	r2,r2,112
    3114:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3118:	01414004 	movi	r5,1280
    311c:	01006c04 	movi	r4,432
    3120:	0003dd80 	call	3dd8 <UsbWrite>
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    3124:	00010906 	br	354c <main+0x325c>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    3128:	00c14004 	movi	r3,1280
    312c:	00824834 	movhi	r2,2336
    3130:	10801e04 	addi	r2,r2,120
    3134:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    3138:	00c14304 	movi	r3,1292
    313c:	00824834 	movhi	r2,2336
    3140:	10801c04 	addi	r2,r2,112
    3144:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    3148:	00c00204 	movi	r3,8
    314c:	00824834 	movhi	r2,2336
    3150:	10801c04 	addi	r2,r2,112
    3154:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    3158:	00c0b404 	movi	r3,720
    315c:	00824834 	movhi	r2,2336
    3160:	10801c04 	addi	r2,r2,112
    3164:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    3168:	00c00044 	movi	r3,1
    316c:	00824834 	movhi	r2,2336
    3170:	10801c04 	addi	r2,r2,112
    3174:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    3178:	00c004c4 	movi	r3,19
    317c:	00824834 	movhi	r2,2336
    3180:	10801c04 	addi	r2,r2,112
    3184:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    3188:	00c14504 	movi	r3,1300
    318c:	00824834 	movhi	r2,2336
    3190:	10801c04 	addi	r2,r2,112
    3194:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    3198:	00c1a044 	movi	r3,1665
    319c:	00824834 	movhi	r2,2336
    31a0:	10801c04 	addi	r2,r2,112
    31a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    31a8:	00c88004 	movi	r3,8704
    31ac:	00824834 	movhi	r2,2336
    31b0:	10801c04 	addi	r2,r2,112
    31b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    31b8:	0007883a 	mov	r3,zero
    31bc:	00824834 	movhi	r2,2336
    31c0:	10801c04 	addi	r2,r2,112
    31c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    31c8:	00c01ec4 	movi	r3,123
    31cc:	00824834 	movhi	r2,2336
    31d0:	10801c04 	addi	r2,r2,112
    31d4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    31d8:	00c16004 	movi	r3,1408
    31dc:	00824834 	movhi	r2,2336
    31e0:	10801c04 	addi	r2,r2,112
    31e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    31e8:	00c00204 	movi	r3,8
    31ec:	00824834 	movhi	r2,2336
    31f0:	10801c04 	addi	r2,r2,112
    31f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    31f8:	00c0a404 	movi	r3,656
    31fc:	00824834 	movhi	r2,2336
    3200:	10801c04 	addi	r2,r2,112
    3204:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    3208:	00c01044 	movi	r3,65
    320c:	00824834 	movhi	r2,2336
    3210:	10801c04 	addi	r2,r2,112
    3214:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    3218:	00c004c4 	movi	r3,19
    321c:	00824834 	movhi	r2,2336
    3220:	10801c04 	addi	r2,r2,112
    3224:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    3228:	00c14804 	movi	r3,1312
    322c:	00824834 	movhi	r2,2336
    3230:	10801c04 	addi	r2,r2,112
    3234:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    3238:	00c16204 	movi	r3,1416
    323c:	00824834 	movhi	r2,2336
    3240:	10801c04 	addi	r2,r2,112
    3244:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    3248:	00c00204 	movi	r3,8
    324c:	00824834 	movhi	r2,2336
    3250:	10801c04 	addi	r2,r2,112
    3254:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    3258:	00c0a404 	movi	r3,656
    325c:	00824834 	movhi	r2,2336
    3260:	10801c04 	addi	r2,r2,112
    3264:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    3268:	00c00044 	movi	r3,1
    326c:	00824834 	movhi	r2,2336
    3270:	10801c04 	addi	r2,r2,112
    3274:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3278:	00c004c4 	movi	r3,19
    327c:	00824834 	movhi	r2,2336
    3280:	10801c04 	addi	r2,r2,112
    3284:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    3288:	00c14b04 	movi	r3,1324
    328c:	00824834 	movhi	r2,2336
    3290:	10801c04 	addi	r2,r2,112
    3294:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    3298:	00c16404 	movi	r3,1424
    329c:	00824834 	movhi	r2,2336
    32a0:	10801c04 	addi	r2,r2,112
    32a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    32a8:	00c00204 	movi	r3,8
    32ac:	00824834 	movhi	r2,2336
    32b0:	10801c04 	addi	r2,r2,112
    32b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    32b8:	00c0a404 	movi	r3,656
    32bc:	00824834 	movhi	r2,2336
    32c0:	10801c04 	addi	r2,r2,112
    32c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    32c8:	00c01044 	movi	r3,65
    32cc:	00824834 	movhi	r2,2336
    32d0:	10801c04 	addi	r2,r2,112
    32d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    32d8:	00c004c4 	movi	r3,19
    32dc:	00824834 	movhi	r2,2336
    32e0:	10801c04 	addi	r2,r2,112
    32e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    32e8:	00c14e04 	movi	r3,1336
    32ec:	00824834 	movhi	r2,2336
    32f0:	10801c04 	addi	r2,r2,112
    32f4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    32f8:	00c16604 	movi	r3,1432
    32fc:	00824834 	movhi	r2,2336
    3300:	10801c04 	addi	r2,r2,112
    3304:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    3308:	00c00204 	movi	r3,8
    330c:	00824834 	movhi	r2,2336
    3310:	10801c04 	addi	r2,r2,112
    3314:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    3318:	00c0a404 	movi	r3,656
    331c:	00824834 	movhi	r2,2336
    3320:	10801c04 	addi	r2,r2,112
    3324:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    3328:	00c00044 	movi	r3,1
    332c:	00824834 	movhi	r2,2336
    3330:	10801c04 	addi	r2,r2,112
    3334:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    3338:	00c004c4 	movi	r3,19
    333c:	00824834 	movhi	r2,2336
    3340:	10801c04 	addi	r2,r2,112
    3344:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    3348:	00c15104 	movi	r3,1348
    334c:	00824834 	movhi	r2,2336
    3350:	10801c04 	addi	r2,r2,112
    3354:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    3358:	00c16804 	movi	r3,1440
    335c:	00824834 	movhi	r2,2336
    3360:	10801c04 	addi	r2,r2,112
    3364:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    3368:	00c00204 	movi	r3,8
    336c:	00824834 	movhi	r2,2336
    3370:	10801c04 	addi	r2,r2,112
    3374:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    3378:	00c0a404 	movi	r3,656
    337c:	00824834 	movhi	r2,2336
    3380:	10801c04 	addi	r2,r2,112
    3384:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    3388:	00c01044 	movi	r3,65
    338c:	00824834 	movhi	r2,2336
    3390:	10801c04 	addi	r2,r2,112
    3394:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    3398:	00c004c4 	movi	r3,19
    339c:	00824834 	movhi	r2,2336
    33a0:	10801c04 	addi	r2,r2,112
    33a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    33a8:	00c15404 	movi	r3,1360
    33ac:	00824834 	movhi	r2,2336
    33b0:	10801c04 	addi	r2,r2,112
    33b4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    33b8:	00c16a04 	movi	r3,1448
    33bc:	00824834 	movhi	r2,2336
    33c0:	10801c04 	addi	r2,r2,112
    33c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    33c8:	00c00204 	movi	r3,8
    33cc:	00824834 	movhi	r2,2336
    33d0:	10801c04 	addi	r2,r2,112
    33d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    33d8:	00c0a404 	movi	r3,656
    33dc:	00824834 	movhi	r2,2336
    33e0:	10801c04 	addi	r2,r2,112
    33e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    33e8:	00c00044 	movi	r3,1
    33ec:	00824834 	movhi	r2,2336
    33f0:	10801c04 	addi	r2,r2,112
    33f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    33f8:	00c004c4 	movi	r3,19
    33fc:	00824834 	movhi	r2,2336
    3400:	10801c04 	addi	r2,r2,112
    3404:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    3408:	00c15704 	movi	r3,1372
    340c:	00824834 	movhi	r2,2336
    3410:	10801c04 	addi	r2,r2,112
    3414:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    3418:	00c16c04 	movi	r3,1456
    341c:	00824834 	movhi	r2,2336
    3420:	10801c04 	addi	r2,r2,112
    3424:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    3428:	00c00204 	movi	r3,8
    342c:	00824834 	movhi	r2,2336
    3430:	10801c04 	addi	r2,r2,112
    3434:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    3438:	00c0a404 	movi	r3,656
    343c:	00824834 	movhi	r2,2336
    3440:	10801c04 	addi	r2,r2,112
    3444:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    3448:	00c01044 	movi	r3,65
    344c:	00824834 	movhi	r2,2336
    3450:	10801c04 	addi	r2,r2,112
    3454:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    3458:	00c004c4 	movi	r3,19
    345c:	00824834 	movhi	r2,2336
    3460:	10801c04 	addi	r2,r2,112
    3464:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    3468:	00c15a04 	movi	r3,1384
    346c:	00824834 	movhi	r2,2336
    3470:	10801c04 	addi	r2,r2,112
    3474:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    3478:	00c16e04 	movi	r3,1464
    347c:	00824834 	movhi	r2,2336
    3480:	10801c04 	addi	r2,r2,112
    3484:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    3488:	00c000c4 	movi	r3,3
    348c:	00824834 	movhi	r2,2336
    3490:	10801c04 	addi	r2,r2,112
    3494:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    3498:	00c0a404 	movi	r3,656
    349c:	00824834 	movhi	r2,2336
    34a0:	10801c04 	addi	r2,r2,112
    34a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data1
    34a8:	00c00044 	movi	r3,1
    34ac:	00824834 	movhi	r2,2336
    34b0:	10801c04 	addi	r2,r2,112
    34b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    34b8:	00c004c4 	movi	r3,19
    34bc:	00824834 	movhi	r2,2336
    34c0:	10801c04 	addi	r2,r2,112
    34c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    34c8:	00c15d04 	movi	r3,1396
    34cc:	00824834 	movhi	r2,2336
    34d0:	10801c04 	addi	r2,r2,112
    34d4:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    34d8:	0007883a 	mov	r3,zero
    34dc:	00824834 	movhi	r2,2336
    34e0:	10801c04 	addi	r2,r2,112
    34e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    34e8:	0007883a 	mov	r3,zero
    34ec:	00824834 	movhi	r2,2336
    34f0:	10801c04 	addi	r2,r2,112
    34f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    34f8:	00c08404 	movi	r3,528
    34fc:	00824834 	movhi	r2,2336
    3500:	10801c04 	addi	r2,r2,112
    3504:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    3508:	00c01044 	movi	r3,65
    350c:	00824834 	movhi	r2,2336
    3510:	10801c04 	addi	r2,r2,112
    3514:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    3518:	00c004c4 	movi	r3,19
    351c:	00824834 	movhi	r2,2336
    3520:	10801c04 	addi	r2,r2,112
    3524:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    3528:	0007883a 	mov	r3,zero
    352c:	00824834 	movhi	r2,2336
    3530:	10801c04 	addi	r2,r2,112
    3534:	10c00035 	stwio	r3,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3538:	01414004 	movi	r5,1280
    353c:	01006c04 	movi	r4,432
    3540:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    3544:	0109c404 	movi	r4,10000
    3548:	00118300 	call	11830 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    354c:	00824834 	movhi	r2,2336
    3550:	10801f04 	addi	r2,r2,124
    3554:	10800037 	ldwio	r2,0(r2)
    3558:	1080040c 	andi	r2,r2,16
    355c:	103ef226 	beq	r2,zero,3128 <main+0x2e38>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3560:	01005104 	movi	r4,324
    3564:	0003e280 	call	3e28 <UsbRead>
    3568:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    356c:	000b883a 	mov	r5,zero
    3570:	01005104 	movi	r4,324
    3574:	0003dd80 	call	3dd8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    3578:	00000d06 	br	35b0 <main+0x32c0>
    {
       if(usb_ctl_val == 0x000)
    357c:	e0bff80b 	ldhu	r2,-32(fp)
    3580:	10000526 	beq	r2,zero,3598 <main+0x32a8>
       {
       }
       else
       {
        printf("[SIE1 MSG]: SIE 1 msg reg is %x\n",usb_ctl_val);
    3584:	e0bff80b 	ldhu	r2,-32(fp)
    3588:	100b883a 	mov	r5,r2
    358c:	01000074 	movhi	r4,1
    3590:	21137504 	addi	r4,r4,19924
    3594:	00047880 	call	4788 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3598:	01005104 	movi	r4,324
    359c:	0003e280 	call	3e28 <UsbRead>
    35a0:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    35a4:	000b883a 	mov	r5,zero
    35a8:	01005104 	movi	r4,324
    35ac:	0003dd80 	call	3dd8 <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    35b0:	e0bff80b 	ldhu	r2,-32(fp)
    35b4:	10840018 	cmpnei	r2,r2,4096
    35b8:	103ff01e 	bne	r2,zero,357c <main+0x328c>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    35bc:	00c14184 	movi	r3,1286
    35c0:	00824834 	movhi	r2,2336
    35c4:	10801e04 	addi	r2,r2,120
    35c8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    35cc:	00824834 	movhi	r2,2336
    35d0:	10801c04 	addi	r2,r2,112
    35d4:	10800037 	ldwio	r2,0(r2)
    35d8:	100b883a 	mov	r5,r2
    35dc:	01000074 	movhi	r4,1
    35e0:	21137e04 	addi	r4,r4,19960
    35e4:	00047880 	call	4788 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    35e8:	00c14204 	movi	r3,1288
    35ec:	00824834 	movhi	r2,2336
    35f0:	10801e04 	addi	r2,r2,120
    35f4:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    35f8:	00824834 	movhi	r2,2336
    35fc:	10801c04 	addi	r2,r2,112
    3600:	10800037 	ldwio	r2,0(r2)
    3604:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    3608:	e0bff80b 	ldhu	r2,-32(fp)
    360c:	100b883a 	mov	r5,r2
    3610:	01000074 	movhi	r4,1
    3614:	21138a04 	addi	r4,r4,20008
    3618:	00047880 	call	4788 <printf>
    while (usb_ctl_val != 0x03) 
    361c:	00001906 	br	3684 <main+0x3394>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    3620:	00824834 	movhi	r2,2336
    3624:	10801f04 	addi	r2,r2,124
    3628:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    362c:	01005104 	movi	r4,324
    3630:	0003e280 	call	3e28 <UsbRead>
    3634:	10bfffcc 	andi	r2,r2,65535
    3638:	10840018 	cmpnei	r2,r2,4096
    363c:	1000091e 	bne	r2,zero,3664 <main+0x3374>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3640:	000b883a 	mov	r5,zero
    3644:	01005104 	movi	r4,324
    3648:	0003dd80 	call	3dd8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    364c:	0001883a 	nop
    3650:	00824834 	movhi	r2,2336
    3654:	10801f04 	addi	r2,r2,124
    3658:	10800037 	ldwio	r2,0(r2)
    365c:	1080040c 	andi	r2,r2,16
    3660:	103ffb26 	beq	r2,zero,3650 <main+0x3360>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    3664:	00c14204 	movi	r3,1288
    3668:	00824834 	movhi	r2,2336
    366c:	10801e04 	addi	r2,r2,120
    3670:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    3674:	00824834 	movhi	r2,2336
    3678:	10801c04 	addi	r2,r2,112
    367c:	10800037 	ldwio	r2,0(r2)
    3680:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    3684:	e0bff80b 	ldhu	r2,-32(fp)
    3688:	108000d8 	cmpnei	r2,r2,3
    368c:	103fe41e 	bne	r2,zero,3620 <main+0x3330>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) pass!----------------\n");
    3690:	01000074 	movhi	r4,1
    3694:	21139604 	addi	r4,r4,20056
    3698:	00048840 	call	4884 <puts>
    

    
    //-----------------------------------get mouse x y button value------------------------------------------------//
    usleep(10000);
    369c:	0109c404 	movi	r4,10000
    36a0:	00118300 	call	11830 <usleep>
    while(1)
    {
      toggle++;
    36a4:	e0bffa43 	ldbu	r2,-23(fp)
    36a8:	10800044 	addi	r2,r2,1
    36ac:	e0bffa45 	stb	r2,-23(fp)
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    36b0:	00c14004 	movi	r3,1280
    36b4:	00824834 	movhi	r2,2336
    36b8:	10801e04 	addi	r2,r2,120
    36bc:	10c00035 	stwio	r3,0(r2)
      //data phase IN-1
      IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    36c0:	00c14704 	movi	r3,1308
    36c4:	00824834 	movhi	r2,2336
    36c8:	10801c04 	addi	r2,r2,112
    36cc:	10c00035 	stwio	r3,0(r2)
      if(data_size ==8)
    36d0:	e0bffb83 	ldbu	r2,-18(fp)
    36d4:	10800218 	cmpnei	r2,r2,8
    36d8:	1000051e 	bne	r2,zero,36f0 <main+0x3400>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    36dc:	00c00184 	movi	r3,6
    36e0:	00824834 	movhi	r2,2336
    36e4:	10801c04 	addi	r2,r2,112
    36e8:	10c00035 	stwio	r3,0(r2)
    36ec:	00000506 	br	3704 <main+0x3414>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    36f0:	e0bffb83 	ldbu	r2,-18(fp)
    36f4:	10c003cc 	andi	r3,r2,15
    36f8:	00824834 	movhi	r2,2336
    36fc:	10801c04 	addi	r2,r2,112
    3700:	10c00035 	stwio	r3,0(r2)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    3704:	00c0a444 	movi	r3,657
    3708:	00824834 	movhi	r2,2336
    370c:	10801c04 	addi	r2,r2,112
    3710:	10c00035 	stwio	r3,0(r2)
      if(toggle%2)
    3714:	e0bffa43 	ldbu	r2,-23(fp)
    3718:	1080004c 	andi	r2,r2,1
    371c:	10803fcc 	andi	r2,r2,255
    3720:	10000526 	beq	r2,zero,3738 <main+0x3448>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    3724:	00c00044 	movi	r3,1
    3728:	00824834 	movhi	r2,2336
    372c:	10801c04 	addi	r2,r2,112
    3730:	10c00035 	stwio	r3,0(r2)
    3734:	00000406 	br	3748 <main+0x3458>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    3738:	00c01044 	movi	r3,65
    373c:	00824834 	movhi	r2,2336
    3740:	10801c04 	addi	r2,r2,112
    3744:	10c00035 	stwio	r3,0(r2)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3748:	00c004c4 	movi	r3,19
    374c:	00824834 	movhi	r2,2336
    3750:	10801c04 	addi	r2,r2,112
    3754:	10c00035 	stwio	r3,0(r2)
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    3758:	0007883a 	mov	r3,zero
    375c:	00824834 	movhi	r2,2336
    3760:	10801c04 	addi	r2,r2,112
    3764:	10c00035 	stwio	r3,0(r2)
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3768:	01414004 	movi	r5,1280
    376c:	01006c04 	movi	r4,432
    3770:	0003dd80 	call	3dd8 <UsbWrite>
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    3774:	00003306 	br	3844 <main+0x3554>
      {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    3778:	00c14004 	movi	r3,1280
    377c:	00824834 	movhi	r2,2336
    3780:	10801e04 	addi	r2,r2,120
    3784:	10c00035 	stwio	r3,0(r2)
          //data phase IN-1
          IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    3788:	00c14704 	movi	r3,1308
    378c:	00824834 	movhi	r2,2336
    3790:	10801c04 	addi	r2,r2,112
    3794:	10c00035 	stwio	r3,0(r2)
          if(data_size ==8)
    3798:	e0bffb83 	ldbu	r2,-18(fp)
    379c:	10800218 	cmpnei	r2,r2,8
    37a0:	1000051e 	bne	r2,zero,37b8 <main+0x34c8>
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    37a4:	00c00184 	movi	r3,6
    37a8:	00824834 	movhi	r2,2336
    37ac:	10801c04 	addi	r2,r2,112
    37b0:	10c00035 	stwio	r3,0(r2)
    37b4:	00000506 	br	37cc <main+0x34dc>
          }
          else
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    37b8:	e0bffb83 	ldbu	r2,-18(fp)
    37bc:	10c003cc 	andi	r3,r2,15
    37c0:	00824834 	movhi	r2,2336
    37c4:	10801c04 	addi	r2,r2,112
    37c8:	10c00035 	stwio	r3,0(r2)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    37cc:	00c0a444 	movi	r3,657
    37d0:	00824834 	movhi	r2,2336
    37d4:	10801c04 	addi	r2,r2,112
    37d8:	10c00035 	stwio	r3,0(r2)
          if(toggle%2)
    37dc:	e0bffa43 	ldbu	r2,-23(fp)
    37e0:	1080004c 	andi	r2,r2,1
    37e4:	10803fcc 	andi	r2,r2,255
    37e8:	10000526 	beq	r2,zero,3800 <main+0x3510>
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    37ec:	00c00044 	movi	r3,1
    37f0:	00824834 	movhi	r2,2336
    37f4:	10801c04 	addi	r2,r2,112
    37f8:	10c00035 	stwio	r3,0(r2)
    37fc:	00000406 	br	3810 <main+0x3520>
          }
          else
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    3800:	00c01044 	movi	r3,65
    3804:	00824834 	movhi	r2,2336
    3808:	10801c04 	addi	r2,r2,112
    380c:	10c00035 	stwio	r3,0(r2)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3810:	00c004c4 	movi	r3,19
    3814:	00824834 	movhi	r2,2336
    3818:	10801c04 	addi	r2,r2,112
    381c:	10c00035 	stwio	r3,0(r2)
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    3820:	0007883a 	mov	r3,zero
    3824:	00824834 	movhi	r2,2336
    3828:	10801c04 	addi	r2,r2,112
    382c:	10c00035 	stwio	r3,0(r2)
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3830:	01414004 	movi	r5,1280
    3834:	01006c04 	movi	r4,432
    3838:	0003dd80 	call	3dd8 <UsbWrite>
          usleep(10*1000);
    383c:	0109c404 	movi	r4,10000
    3840:	00118300 	call	11830 <usleep>
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    3844:	00824834 	movhi	r2,2336
    3848:	10801f04 	addi	r2,r2,124
    384c:	10800037 	ldwio	r2,0(r2)
    3850:	1080040c 	andi	r2,r2,16
    3854:	103fc826 	beq	r2,zero,3778 <main+0x3488>
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3858:	01005104 	movi	r4,324
    385c:	0003e280 	call	3e28 <UsbRead>
    3860:	e0bff80d 	sth	r2,-32(fp)
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3864:	000b883a 	mov	r5,zero
    3868:	01005104 	movi	r4,324
    386c:	0003dd80 	call	3dd8 <UsbWrite>
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    3870:	00000d06 	br	38a8 <main+0x35b8>
      {
         if(usb_ctl_val == 0x000)
    3874:	e0bff80b 	ldhu	r2,-32(fp)
    3878:	10000526 	beq	r2,zero,3890 <main+0x35a0>
         {}
         else
         {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    387c:	e0bff80b 	ldhu	r2,-32(fp)
    3880:	100b883a 	mov	r5,r2
    3884:	01000074 	movhi	r4,1
    3888:	21121804 	addi	r4,r4,18528
    388c:	00047880 	call	4788 <printf>
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3890:	01005104 	movi	r4,324
    3894:	0003e280 	call	3e28 <UsbRead>
    3898:	e0bff80d 	sth	r2,-32(fp)
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
    389c:	000b883a 	mov	r5,zero
    38a0:	01005104 	movi	r4,324
    38a4:	0003dd80 	call	3dd8 <UsbWrite>
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    38a8:	e0bff80b 	ldhu	r2,-32(fp)
    38ac:	10840018 	cmpnei	r2,r2,4096
    38b0:	103ff01e 	bne	r2,zero,3874 <main+0x3584>
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
      }
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    38b4:	00c14204 	movi	r3,1288
    38b8:	00824834 	movhi	r2,2336
    38bc:	10801e04 	addi	r2,r2,120
    38c0:	10c00035 	stwio	r3,0(r2)
      usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    38c4:	00824834 	movhi	r2,2336
    38c8:	10801c04 	addi	r2,r2,112
    38cc:	10800037 	ldwio	r2,0(r2)
    38d0:	e0bff80d 	sth	r2,-32(fp)

      if (usb_ctl_val != 0x03) 
    38d4:	e0bff80b 	ldhu	r2,-32(fp)
    38d8:	108000e0 	cmpeqi	r2,r2,3
    38dc:	1000051e 	bne	r2,zero,38f4 <main+0x3604>
      {
         pbutton = 0;
    38e0:	e03ffa05 	stb	zero,-24(fp)
         dx = 0;
    38e4:	e03ff985 	stb	zero,-26(fp)
         dy = 0;
    38e8:	e03ff9c5 	stb	zero,-25(fp)
         button_value = 0;
    38ec:	e03ffc15 	stw	zero,-16(fp)
    38f0:	00007a06 	br	3adc <main+0x37ec>
      }
    
      else
     {
        if(data_size != 8 )  
    38f4:	e0bffb83 	ldbu	r2,-18(fp)
    38f8:	10800220 	cmpeqi	r2,r2,8
    38fc:	10003b1e 	bne	r2,zero,39ec <main+0x36fc>
        {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    3900:	00c14704 	movi	r3,1308
    3904:	00824834 	movhi	r2,2336
    3908:	10801e04 	addi	r2,r2,120
    390c:	10c00035 	stwio	r3,0(r2)
          button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3910:	00824834 	movhi	r2,2336
    3914:	10801c04 	addi	r2,r2,112
    3918:	10800037 	ldwio	r2,0(r2)
    391c:	e0bffc15 	stw	r2,-16(fp)
          if((button_value & 0x00ff) ==0x0001)
    3920:	e0bffc17 	ldw	r2,-16(fp)
    3924:	10803fcc 	andi	r2,r2,255
    3928:	10800058 	cmpnei	r2,r2,1
    392c:	1000031e 	bne	r2,zero,393c <main+0x364c>
          {
           //printf("left button\n");
            pbutton = 1;
    3930:	00800044 	movi	r2,1
    3934:	e0bffa05 	stb	r2,-24(fp)
    3938:	00000806 	br	395c <main+0x366c>
          }
          else
          if((button_value& 0x00ff) ==0x0002)
    393c:	e0bffc17 	ldw	r2,-16(fp)
    3940:	10803fcc 	andi	r2,r2,255
    3944:	10800098 	cmpnei	r2,r2,2
    3948:	1000031e 	bne	r2,zero,3958 <main+0x3668>
          {
           //printf("right button\n");
           pbutton = 2;    
    394c:	00800084 	movi	r2,2
    3950:	e0bffa05 	stb	r2,-24(fp)
    3954:	00000106 	br	395c <main+0x366c>
          }
          else
          {
           pbutton = 0;
    3958:	e03ffa05 	stb	zero,-24(fp)
          }
          if((signed char)((button_value>>8)&0x00ff) != 0)
    395c:	e0bffc17 	ldw	r2,-16(fp)
    3960:	1005d23a 	srai	r2,r2,8
    3964:	10803fcc 	andi	r2,r2,255
    3968:	1080201c 	xori	r2,r2,128
    396c:	10bfe004 	addi	r2,r2,-128
    3970:	10000c26 	beq	r2,zero,39a4 <main+0x36b4>
          {
       
             if((signed char)((button_value>>8)&0x00ff )==dx)
    3974:	e0bffc17 	ldw	r2,-16(fp)
    3978:	1005d23a 	srai	r2,r2,8
    397c:	10c03fcc 	andi	r3,r2,255
    3980:	18c0201c 	xori	r3,r3,128
    3984:	18ffe004 	addi	r3,r3,-128
    3988:	e0bff987 	ldb	r2,-26(fp)
    398c:	1880021e 	bne	r3,r2,3998 <main+0x36a8>
             {
                dx = 0;
    3990:	e03ff985 	stb	zero,-26(fp)
    3994:	00000306 	br	39a4 <main+0x36b4>
             }
              else
             {
                dx = (signed char)((button_value>>8)&0x00ff);
    3998:	e0bffc17 	ldw	r2,-16(fp)
    399c:	1005d23a 	srai	r2,r2,8
    39a0:	e0bff985 	stb	r2,-26(fp)
             }
       
          }
       
       button_value = IORD(CY7C67200_BASE,HPI_DATA);
    39a4:	00824834 	movhi	r2,2336
    39a8:	10801c04 	addi	r2,r2,112
    39ac:	10800037 	ldwio	r2,0(r2)
    39b0:	e0bffc15 	stw	r2,-16(fp)
    
       if(button_value&0xff)
    39b4:	e0bffc17 	ldw	r2,-16(fp)
    39b8:	10803fcc 	andi	r2,r2,255
    39bc:	10004726 	beq	r2,zero,3adc <main+0x37ec>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dy)
    39c0:	e0bffc17 	ldw	r2,-16(fp)
    39c4:	10c03fcc 	andi	r3,r2,255
    39c8:	18c0201c 	xori	r3,r3,128
    39cc:	18ffe004 	addi	r3,r3,-128
    39d0:	e0bff9c7 	ldb	r2,-25(fp)
    39d4:	1880021e 	bne	r3,r2,39e0 <main+0x36f0>
          {
             dy = 0;
    39d8:	e03ff9c5 	stb	zero,-25(fp)
    39dc:	00003f06 	br	3adc <main+0x37ec>
          }
          else
          {
             dy = (signed char)(button_value&0xff);
    39e0:	e0bffc17 	ldw	r2,-16(fp)
    39e4:	e0bff9c5 	stb	r2,-25(fp)
    39e8:	00003c06 	br	3adc <main+0x37ec>
        
        }
      }
      else //>8
      {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    39ec:	00c14704 	movi	r3,1308
    39f0:	00824834 	movhi	r2,2336
    39f4:	10801e04 	addi	r2,r2,120
    39f8:	10c00035 	stwio	r3,0(r2)
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    39fc:	00824834 	movhi	r2,2336
    3a00:	10801c04 	addi	r2,r2,112
    3a04:	10800037 	ldwio	r2,0(r2)
    3a08:	e0bffc15 	stw	r2,-16(fp)
         if(((button_value>>8) & 0x00ff) ==0x0001)
    3a0c:	e0bffc17 	ldw	r2,-16(fp)
    3a10:	1005d23a 	srai	r2,r2,8
    3a14:	10803fcc 	andi	r2,r2,255
    3a18:	10800058 	cmpnei	r2,r2,1
    3a1c:	1000031e 	bne	r2,zero,3a2c <main+0x373c>
        {
           //printf("left button\n");
           pbutton = 1;
    3a20:	00800044 	movi	r2,1
    3a24:	e0bffa05 	stb	r2,-24(fp)
    3a28:	00000906 	br	3a50 <main+0x3760>
        }
        else
        if(((button_value>>8) & 0x00ff) ==0x0002)
    3a2c:	e0bffc17 	ldw	r2,-16(fp)
    3a30:	1005d23a 	srai	r2,r2,8
    3a34:	10803fcc 	andi	r2,r2,255
    3a38:	10800098 	cmpnei	r2,r2,2
    3a3c:	1000031e 	bne	r2,zero,3a4c <main+0x375c>
        {
           //printf("right button\n");
           pbutton = 2;    
    3a40:	00800084 	movi	r2,2
    3a44:	e0bffa05 	stb	r2,-24(fp)
    3a48:	00000106 	br	3a50 <main+0x3760>
        }
        else
        {
           pbutton = 0;
    3a4c:	e03ffa05 	stb	zero,-24(fp)
        }
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3a50:	00824834 	movhi	r2,2336
    3a54:	10801c04 	addi	r2,r2,112
    3a58:	10800037 	ldwio	r2,0(r2)
    3a5c:	e0bffc15 	stw	r2,-16(fp)
        if((signed char)((button_value>>8)&0x00ff) != 0)
    3a60:	e0bffc17 	ldw	r2,-16(fp)
    3a64:	1005d23a 	srai	r2,r2,8
    3a68:	10803fcc 	andi	r2,r2,255
    3a6c:	1080201c 	xori	r2,r2,128
    3a70:	10bfe004 	addi	r2,r2,-128
    3a74:	10000c26 	beq	r2,zero,3aa8 <main+0x37b8>
        {
           if((signed char)((button_value>>8)&0x00ff )==dy)
    3a78:	e0bffc17 	ldw	r2,-16(fp)
    3a7c:	1005d23a 	srai	r2,r2,8
    3a80:	10c03fcc 	andi	r3,r2,255
    3a84:	18c0201c 	xori	r3,r3,128
    3a88:	18ffe004 	addi	r3,r3,-128
    3a8c:	e0bff9c7 	ldb	r2,-25(fp)
    3a90:	1880021e 	bne	r3,r2,3a9c <main+0x37ac>
           {
              dy = 0;
    3a94:	e03ff9c5 	stb	zero,-25(fp)
    3a98:	00000306 	br	3aa8 <main+0x37b8>
           }
           else
           {
              dy = (signed char)((button_value>>8)&0x00ff);
    3a9c:	e0bffc17 	ldw	r2,-16(fp)
    3aa0:	1005d23a 	srai	r2,r2,8
    3aa4:	e0bff9c5 	stb	r2,-25(fp)
           }
       
        }
       
       if(button_value&0x0ff)
    3aa8:	e0bffc17 	ldw	r2,-16(fp)
    3aac:	10803fcc 	andi	r2,r2,255
    3ab0:	10000a26 	beq	r2,zero,3adc <main+0x37ec>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dx)
    3ab4:	e0bffc17 	ldw	r2,-16(fp)
    3ab8:	10c03fcc 	andi	r3,r2,255
    3abc:	18c0201c 	xori	r3,r3,128
    3ac0:	18ffe004 	addi	r3,r3,-128
    3ac4:	e0bff987 	ldb	r2,-26(fp)
    3ac8:	1880021e 	bne	r3,r2,3ad4 <main+0x37e4>
          {
             dx = 0;
    3acc:	e03ff985 	stb	zero,-26(fp)
    3ad0:	00000206 	br	3adc <main+0x37ec>
          }
          else
          {
             dx = (signed char)(button_value&0xff);
    3ad4:	e0bffc17 	ldw	r2,-16(fp)
    3ad8:	e0bff985 	stb	r2,-26(fp)
        }
      }
        
    }    
     
    px = px + dx;
    3adc:	e0fff987 	ldb	r3,-26(fp)
    3ae0:	e0bff88b 	ldhu	r2,-30(fp)
    3ae4:	1885883a 	add	r2,r3,r2
    3ae8:	e0bff88d 	sth	r2,-30(fp)
    py = py + dy;
    3aec:	e0fff9c7 	ldb	r3,-25(fp)
    3af0:	e0bff90b 	ldhu	r2,-28(fp)
    3af4:	1885883a 	add	r2,r3,r2
    3af8:	e0bff90d 	sth	r2,-28(fp)
    
    px=maxmin(px,639,0);
    3afc:	e0bff88b 	ldhu	r2,-30(fp)
    3b00:	000d883a 	mov	r6,zero
    3b04:	01409fc4 	movi	r5,639
    3b08:	1009883a 	mov	r4,r2
    3b0c:	000020c0 	call	20c <maxmin>
    3b10:	e0bff88d 	sth	r2,-30(fp)
    py=maxmin(py,479,0);
    3b14:	e0bff90b 	ldhu	r2,-28(fp)
    3b18:	000d883a 	mov	r6,zero
    3b1c:	014077c4 	movi	r5,479
    3b20:	1009883a 	mov	r4,r2
    3b24:	000020c0 	call	20c <maxmin>
    3b28:	e0bff90d 	sth	r2,-28(fp)
    
    SEG7_Hex((px<<16)+py,0);
    3b2c:	e0bff88b 	ldhu	r2,-30(fp)
    3b30:	1006943a 	slli	r3,r2,16
    3b34:	e0bff90b 	ldhu	r2,-28(fp)
    3b38:	1885883a 	add	r2,r3,r2
    3b3c:	000b883a 	mov	r5,zero
    3b40:	1009883a 	mov	r4,r2
    3b44:	00042200 	call	4220 <SEG7_Hex>
    IOWR(LEDR_BASE,0,px);
    3b48:	e0fff88b 	ldhu	r3,-30(fp)
    3b4c:	00824834 	movhi	r2,2336
    3b50:	10801404 	addi	r2,r2,80
    3b54:	10c00035 	stwio	r3,0(r2)
    IOWR(LEDG_BASE,0,py);
    3b58:	e0fff90b 	ldhu	r3,-28(fp)
    3b5c:	00824834 	movhi	r2,2336
    3b60:	10801004 	addi	r2,r2,64
    3b64:	10c00035 	stwio	r3,0(r2)

    char Text1[4];
    char Text2[4];

    itoa(px, Text1, 10);
    3b68:	e0bff88b 	ldhu	r2,-30(fp)
    3b6c:	e0fffd44 	addi	r3,fp,-11
    3b70:	01800284 	movi	r6,10
    3b74:	180b883a 	mov	r5,r3
    3b78:	1009883a 	mov	r4,r2
    3b7c:	00047540 	call	4754 <itoa>
    itoa(py, Text2, 10);
    3b80:	e0bff90b 	ldhu	r2,-28(fp)
    3b84:	e0fffe44 	addi	r3,fp,-7
    3b88:	01800284 	movi	r6,10
    3b8c:	180b883a 	mov	r5,r3
    3b90:	1009883a 	mov	r4,r2
    3b94:	00047540 	call	4754 <itoa>

    LCD_Test(Text1, Text2);
    3b98:	e0fffe44 	addi	r3,fp,-7
    3b9c:	e0bffd44 	addi	r2,fp,-11
    3ba0:	180b883a 	mov	r5,r3
    3ba4:	1009883a 	mov	r4,r2
    3ba8:	000408c0 	call	408c <LCD_Test>
    //LCD_Line2();
    //  Show Text to LCD
    //LCD_Show_Text(Text2);


    Set_Cursor_XY(px,py);
    3bac:	e0bff88b 	ldhu	r2,-30(fp)
    3bb0:	e0fff90b 	ldhu	r3,-28(fp)
    3bb4:	180b883a 	mov	r5,r3
    3bb8:	1009883a 	mov	r4,r2
    3bbc:	00043dc0 	call	43dc <Set_Cursor_XY>
    if(pbutton==1)
    3bc0:	e0bffa03 	ldbu	r2,-24(fp)
    3bc4:	10800058 	cmpnei	r2,r2,1
    3bc8:	10000c1e 	bne	r2,zero,3bfc <main+0x390c>
    Vga_Set_Pixel(VPG_BASE,px,py);
    3bcc:	e0bff90b 	ldhu	r2,-28(fp)
    3bd0:	10c0a024 	muli	r3,r2,640
    3bd4:	e0bff88b 	ldhu	r2,-30(fp)
    3bd8:	1885883a 	add	r2,r3,r2
    3bdc:	1085883a 	add	r2,r2,r2
    3be0:	1085883a 	add	r2,r2,r2
    3be4:	1007883a 	mov	r3,r2
    3be8:	00824034 	movhi	r2,2304
    3bec:	1885883a 	add	r2,r3,r2
    3bf0:	00c00044 	movi	r3,1
    3bf4:	10c00035 	stwio	r3,0(r2)
    3bf8:	00000e06 	br	3c34 <main+0x3944>
    else if(pbutton==2)
    3bfc:	e0bffa03 	ldbu	r2,-24(fp)
    3c00:	10800098 	cmpnei	r2,r2,2
    3c04:	10000b1e 	bne	r2,zero,3c34 <main+0x3944>
    Vga_Clr_Pixel(VPG_BASE,px,py);
    3c08:	e0bff90b 	ldhu	r2,-28(fp)
    3c0c:	10c0a024 	muli	r3,r2,640
    3c10:	e0bff88b 	ldhu	r2,-30(fp)
    3c14:	1885883a 	add	r2,r3,r2
    3c18:	1085883a 	add	r2,r2,r2
    3c1c:	1085883a 	add	r2,r2,r2
    3c20:	1007883a 	mov	r3,r2
    3c24:	00824034 	movhi	r2,2304
    3c28:	1885883a 	add	r2,r3,r2
    3c2c:	0007883a 	mov	r3,zero
    3c30:	10c00035 	stwio	r3,0(r2)
    
    printf("\n[MOUSE XY]:%d, %d", px, py);
    3c34:	e0bff88b 	ldhu	r2,-30(fp)
    3c38:	e0fff90b 	ldhu	r3,-28(fp)
    3c3c:	180d883a 	mov	r6,r3
    3c40:	100b883a 	mov	r5,r2
    3c44:	01000074 	movhi	r4,1
    3c48:	2113aa04 	addi	r4,r4,20136
    3c4c:	00047880 	call	4788 <printf>
    usleep(5*1000);
    3c50:	0104e204 	movi	r4,5000
    3c54:	00118300 	call	11830 <usleep>
    //USB hot plug routine
    usb_ctl_val = UsbRead(ctl_reg);
    3c58:	d0a71b0b 	ldhu	r2,-25492(gp)
    3c5c:	10bfffcc 	andi	r2,r2,65535
    3c60:	1009883a 	mov	r4,r2
    3c64:	0003e280 	call	3e28 <UsbRead>
    3c68:	e0bff80d 	sth	r2,-32(fp)
    usleep(5*1000);
    3c6c:	0104e204 	movi	r4,5000
    3c70:	00118300 	call	11830 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3c74:	d0a71b0b 	ldhu	r2,-25492(gp)
    3c78:	10bfffcc 	andi	r2,r2,65535
    3c7c:	1009883a 	mov	r4,r2
    3c80:	0003e280 	call	3e28 <UsbRead>
    3c84:	e0bff80d 	sth	r2,-32(fp)
    usleep(5*1000);
    3c88:	0104e204 	movi	r4,5000
    3c8c:	00118300 	call	11830 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3c90:	d0a71b0b 	ldhu	r2,-25492(gp)
    3c94:	10bfffcc 	andi	r2,r2,65535
    3c98:	1009883a 	mov	r4,r2
    3c9c:	0003e280 	call	3e28 <UsbRead>
    3ca0:	e0bff80d 	sth	r2,-32(fp)
    usleep(5*1000);
    3ca4:	0104e204 	movi	r4,5000
    3ca8:	00118300 	call	11830 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3cac:	d0a71b0b 	ldhu	r2,-25492(gp)
    3cb0:	10bfffcc 	andi	r2,r2,65535
    3cb4:	1009883a 	mov	r4,r2
    3cb8:	0003e280 	call	3e28 <UsbRead>
    3cbc:	e0bff80d 	sth	r2,-32(fp)
    usleep(5*1000);
    3cc0:	0104e204 	movi	r4,5000
    3cc4:	00118300 	call	11830 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3cc8:	d0a71b0b 	ldhu	r2,-25492(gp)
    3ccc:	10bfffcc 	andi	r2,r2,65535
    3cd0:	1009883a 	mov	r4,r2
    3cd4:	0003e280 	call	3e28 <UsbRead>
    3cd8:	e0bff80d 	sth	r2,-32(fp)
    usleep(5*1000);
    3cdc:	0104e204 	movi	r4,5000
    3ce0:	00118300 	call	11830 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3ce4:	d0a71b0b 	ldhu	r2,-25492(gp)
    3ce8:	10bfffcc 	andi	r2,r2,65535
    3cec:	1009883a 	mov	r4,r2
    3cf0:	0003e280 	call	3e28 <UsbRead>
    3cf4:	e0bff80d 	sth	r2,-32(fp)
    usleep(5*1000);
    3cf8:	0104e204 	movi	r4,5000
    3cfc:	00118300 	call	11830 <usleep>

    if(!(usb_ctl_val & no_device))
    3d00:	d0a71b8b 	ldhu	r2,-25490(gp)
    3d04:	e0fff80b 	ldhu	r3,-32(fp)
    3d08:	1884703a 	and	r2,r3,r2
    3d0c:	10bfffcc 	andi	r2,r2,65535
    3d10:	1000061e 	bne	r2,zero,3d2c <main+0x3a3c>
    {
       printf("\n[INFO]: the mouse has been removed!!! \n");
    3d14:	01000074 	movhi	r4,1
    3d18:	2113af04 	addi	r4,r4,20156
    3d1c:	00048840 	call	4884 <puts>
       printf("[INFO]: please insert again!!! \n");
    3d20:	01000074 	movhi	r4,1
    3d24:	2113b904 	addi	r4,r4,20196
    3d28:	00048840 	call	4884 <puts>
    };
    usleep(5000);
    3d2c:	0104e204 	movi	r4,5000
    3d30:	00118300 	call	11830 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3d34:	d0a71b0b 	ldhu	r2,-25492(gp)
    3d38:	10bfffcc 	andi	r2,r2,65535
    3d3c:	1009883a 	mov	r4,r2
    3d40:	0003e280 	call	3e28 <UsbRead>
    3d44:	e0bff80d 	sth	r2,-32(fp)
    while (!(usb_ctl_val & no_device))
    3d48:	00001d06 	br	3dc0 <main+0x3ad0>
    {
       
       usb_ctl_val = UsbRead(ctl_reg);
    3d4c:	d0a71b0b 	ldhu	r2,-25492(gp)
    3d50:	10bfffcc 	andi	r2,r2,65535
    3d54:	1009883a 	mov	r4,r2
    3d58:	0003e280 	call	3e28 <UsbRead>
    3d5c:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3d60:	0104e204 	movi	r4,5000
    3d64:	00118300 	call	11830 <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    3d68:	d0a71b0b 	ldhu	r2,-25492(gp)
    3d6c:	10bfffcc 	andi	r2,r2,65535
    3d70:	1009883a 	mov	r4,r2
    3d74:	0003e280 	call	3e28 <UsbRead>
    3d78:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3d7c:	0104e204 	movi	r4,5000
    3d80:	00118300 	call	11830 <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    3d84:	d0a71b0b 	ldhu	r2,-25492(gp)
    3d88:	10bfffcc 	andi	r2,r2,65535
    3d8c:	1009883a 	mov	r4,r2
    3d90:	0003e280 	call	3e28 <UsbRead>
    3d94:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3d98:	0104e204 	movi	r4,5000
    3d9c:	00118300 	call	11830 <usleep>

       if(usb_ctl_val & no_device)
    3da0:	d0a71b8b 	ldhu	r2,-25490(gp)
    3da4:	e0fff80b 	ldhu	r3,-32(fp)
    3da8:	1884703a 	and	r2,r3,r2
    3dac:	10bfffcc 	andi	r2,r2,65535
    3db0:	10000126 	beq	r2,zero,3db8 <main+0x3ac8>
    3db4:	00317a06 	br	3a0 <main+0xb0>
         goto USB_HOT_PLUG;
       
       usleep(200);
    3db8:	01003204 	movi	r4,200
    3dbc:	00118300 	call	11830 <usleep>
       printf("\n[INFO]: the mouse has been removed!!! \n");
       printf("[INFO]: please insert again!!! \n");
    };
    usleep(5000);
    usb_ctl_val = UsbRead(ctl_reg);
    while (!(usb_ctl_val & no_device))
    3dc0:	d0a71b8b 	ldhu	r2,-25490(gp)
    3dc4:	e0fff80b 	ldhu	r3,-32(fp)
    3dc8:	1884703a 	and	r2,r3,r2
    3dcc:	10bfffcc 	andi	r2,r2,65535
    3dd0:	103fde26 	beq	r2,zero,3d4c <main+0x3a5c>
       
       usleep(200);

    }
    
    }//end while
    3dd4:	003e3306 	br	36a4 <main+0x33b4>

00003dd8 <UsbWrite>:
*
* @note     None
*
******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    3dd8:	defffd04 	addi	sp,sp,-12
    3ddc:	df000215 	stw	fp,8(sp)
    3de0:	df000204 	addi	fp,sp,8
    3de4:	2007883a 	mov	r3,r4
    3de8:	2805883a 	mov	r2,r5
    3dec:	e0fffe0d 	sth	r3,-8(fp)
    3df0:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(USB_ADDRESS, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    3df4:	e0fffe0b 	ldhu	r3,-8(fp)
    3df8:	00824834 	movhi	r2,2336
    3dfc:	10801e04 	addi	r2,r2,120
    3e00:	10c00035 	stwio	r3,0(r2)
    //usleep(10);
    
    //XIo_Out16(USB_DATA, Data);
    IOWR(CY7C67200_BASE,HPI_DATA,Data); 
    3e04:	e0ffff0b 	ldhu	r3,-4(fp)
    3e08:	00824834 	movhi	r2,2336
    3e0c:	10801c04 	addi	r2,r2,112
    3e10:	10c00035 	stwio	r3,0(r2)
}
    3e14:	0001883a 	nop
    3e18:	e037883a 	mov	sp,fp
    3e1c:	df000017 	ldw	fp,0(sp)
    3e20:	dec00104 	addi	sp,sp,4
    3e24:	f800283a 	ret

00003e28 <UsbRead>:
*
* @note     None
*
******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    3e28:	defffe04 	addi	sp,sp,-8
    3e2c:	df000115 	stw	fp,4(sp)
    3e30:	df000104 	addi	fp,sp,4
    3e34:	2005883a 	mov	r2,r4
    3e38:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(HPI_ADDR, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    3e3c:	e0ffff0b 	ldhu	r3,-4(fp)
    3e40:	00824834 	movhi	r2,2336
    3e44:	10801e04 	addi	r2,r2,120
    3e48:	10c00035 	stwio	r3,0(r2)
    //usleep(20);
    return IORD(CY7C67200_BASE,HPI_DATA);
    3e4c:	00824834 	movhi	r2,2336
    3e50:	10801c04 	addi	r2,r2,112
    3e54:	10800037 	ldwio	r2,0(r2)
}
    3e58:	e037883a 	mov	sp,fp
    3e5c:	df000017 	ldw	fp,0(sp)
    3e60:	dec00104 	addi	sp,sp,4
    3e64:	f800283a 	ret

00003e68 <UsbSoftReset>:
*
* @note     None
*
******************************************************************************/
void UsbSoftReset()
{
    3e68:	defffe04 	addi	sp,sp,-8
    3e6c:	dfc00115 	stw	ra,4(sp)
    3e70:	df000015 	stw	fp,0(sp)
    3e74:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    3e78:	00fe9414 	movui	r3,64080
    3e7c:	00824834 	movhi	r2,2336
    3e80:	10801d04 	addi	r2,r2,116
    3e84:	10c00035 	stwio	r3,0(r2)
    usleep(100000);
    3e88:	010000b4 	movhi	r4,2
    3e8c:	2121a804 	addi	r4,r4,-31072
    3e90:	00118300 	call	11830 <usleep>
    printf("[USB INIT]:reset finished!\n");
    3e94:	01000074 	movhi	r4,1
    3e98:	2113c104 	addi	r4,r4,20228
    3e9c:	00048840 	call	4884 <puts>

    usleep(500000);
    3ea0:	01000234 	movhi	r4,8
    3ea4:	21284804 	addi	r4,r4,-24288
    3ea8:	00118300 	call	11830 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
    3eac:	01000074 	movhi	r4,1
    3eb0:	2113c804 	addi	r4,r4,20256
    3eb4:	00048840 	call	4884 <puts>
    IORD(CY7C67200_BASE,HPI_MAILBOX);
    3eb8:	00824834 	movhi	r2,2336
    3ebc:	10801d04 	addi	r2,r2,116
    3ec0:	10800037 	ldwio	r2,0(r2)
    IORD(CY7C67200_BASE,HPI_STATUS);
    3ec4:	00824834 	movhi	r2,2336
    3ec8:	10801f04 	addi	r2,r2,124
    3ecc:	10800037 	ldwio	r2,0(r2)

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    UsbRead (HPI_SIE1_MSG_ADR);
    3ed0:	01005104 	movi	r4,324
    3ed4:	0003e280 	call	3e28 <UsbRead>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
    3ed8:	000b883a 	mov	r5,zero
    3edc:	01005104 	movi	r4,324
    3ee0:	0003dd80 	call	3dd8 <UsbWrite>
    UsbRead (HPI_SIE2_MSG_ADR);
    3ee4:	01005204 	movi	r4,328
    3ee8:	0003e280 	call	3e28 <UsbRead>
    UsbWrite (HPI_SIE2_MSG_ADR, 0);
    3eec:	000b883a 	mov	r5,zero
    3ef0:	01005204 	movi	r4,328
    3ef4:	0003dd80 	call	3dd8 <UsbWrite>

    UsbWrite (HOST1_STAT_REG, 0xFFFF);
    3ef8:	017fffd4 	movui	r5,65535
    3efc:	01302414 	movui	r4,49296
    3f00:	0003dd80 	call	3dd8 <UsbWrite>
    UsbWrite (HOST2_STAT_REG, 0xFFFF);
    3f04:	017fffd4 	movui	r5,65535
    3f08:	01302c14 	movui	r4,49328
    3f0c:	0003dd80 	call	3dd8 <UsbWrite>
}
    3f10:	0001883a 	nop
    3f14:	e037883a 	mov	sp,fp
    3f18:	dfc00117 	ldw	ra,4(sp)
    3f1c:	df000017 	ldw	fp,0(sp)
    3f20:	dec00204 	addi	sp,sp,8
    3f24:	f800283a 	ret

00003f28 <LCD_Init>:
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
    3f28:	defffe04 	addi	sp,sp,-8
    3f2c:	dfc00115 	stw	ra,4(sp)
    3f30:	df000015 	stw	fp,0(sp)
    3f34:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x38); 
    3f38:	00c00e04 	movi	r3,56
    3f3c:	00824834 	movhi	r2,2336
    3f40:	10801804 	addi	r2,r2,96
    3f44:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
    3f48:	0101f404 	movi	r4,2000
    3f4c:	00118300 	call	11830 <usleep>
  lcd_write_cmd(LCD_BASE,0x0C);
    3f50:	00c00304 	movi	r3,12
    3f54:	00824834 	movhi	r2,2336
    3f58:	10801804 	addi	r2,r2,96
    3f5c:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
    3f60:	0101f404 	movi	r4,2000
    3f64:	00118300 	call	11830 <usleep>
  lcd_write_cmd(LCD_BASE,0x01);
    3f68:	00c00044 	movi	r3,1
    3f6c:	00824834 	movhi	r2,2336
    3f70:	10801804 	addi	r2,r2,96
    3f74:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
    3f78:	0101f404 	movi	r4,2000
    3f7c:	00118300 	call	11830 <usleep>
  lcd_write_cmd(LCD_BASE,0x06);
    3f80:	00c00184 	movi	r3,6
    3f84:	00824834 	movhi	r2,2336
    3f88:	10801804 	addi	r2,r2,96
    3f8c:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
    3f90:	0101f404 	movi	r4,2000
    3f94:	00118300 	call	11830 <usleep>
  lcd_write_cmd(LCD_BASE,0x80);
    3f98:	00c02004 	movi	r3,128
    3f9c:	00824834 	movhi	r2,2336
    3fa0:	10801804 	addi	r2,r2,96
    3fa4:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
    3fa8:	0101f404 	movi	r4,2000
    3fac:	00118300 	call	11830 <usleep>
}
    3fb0:	0001883a 	nop
    3fb4:	e037883a 	mov	sp,fp
    3fb8:	dfc00117 	ldw	ra,4(sp)
    3fbc:	df000017 	ldw	fp,0(sp)
    3fc0:	dec00204 	addi	sp,sp,8
    3fc4:	f800283a 	ret

00003fc8 <LCD_Show_Text>:
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
    3fc8:	defffc04 	addi	sp,sp,-16
    3fcc:	dfc00315 	stw	ra,12(sp)
    3fd0:	df000215 	stw	fp,8(sp)
    3fd4:	df000204 	addi	fp,sp,8
    3fd8:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i=0;i<strlen(Text);i++)
    3fdc:	e03ffe15 	stw	zero,-8(fp)
    3fe0:	00000f06 	br	4020 <LCD_Show_Text+0x58>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    3fe4:	e0bffe17 	ldw	r2,-8(fp)
    3fe8:	e0ffff17 	ldw	r3,-4(fp)
    3fec:	1885883a 	add	r2,r3,r2
    3ff0:	10800003 	ldbu	r2,0(r2)
    3ff4:	10c03fcc 	andi	r3,r2,255
    3ff8:	18c0201c 	xori	r3,r3,128
    3ffc:	18ffe004 	addi	r3,r3,-128
    4000:	00824834 	movhi	r2,2336
    4004:	10801a04 	addi	r2,r2,104
    4008:	10c00035 	stwio	r3,0(r2)
    usleep(2000);
    400c:	0101f404 	movi	r4,2000
    4010:	00118300 	call	11830 <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
    4014:	e0bffe17 	ldw	r2,-8(fp)
    4018:	10800044 	addi	r2,r2,1
    401c:	e0bffe15 	stw	r2,-8(fp)
    4020:	e13fff17 	ldw	r4,-4(fp)
    4024:	00048980 	call	4898 <strlen>
    4028:	1007883a 	mov	r3,r2
    402c:	e0bffe17 	ldw	r2,-8(fp)
    4030:	10ffec36 	bltu	r2,r3,3fe4 <LCD_Show_Text+0x1c>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    usleep(2000);
  }
}
    4034:	0001883a 	nop
    4038:	e037883a 	mov	sp,fp
    403c:	dfc00117 	ldw	ra,4(sp)
    4040:	df000017 	ldw	fp,0(sp)
    4044:	dec00204 	addi	sp,sp,8
    4048:	f800283a 	ret

0000404c <LCD_Line2>:
//-------------------------------------------------------------------------
void LCD_Line2()
{
    404c:	defffe04 	addi	sp,sp,-8
    4050:	dfc00115 	stw	ra,4(sp)
    4054:	df000015 	stw	fp,0(sp)
    4058:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0xC0);
    405c:	00c03004 	movi	r3,192
    4060:	00824834 	movhi	r2,2336
    4064:	10801804 	addi	r2,r2,96
    4068:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
    406c:	0101f404 	movi	r4,2000
    4070:	00118300 	call	11830 <usleep>
}
    4074:	0001883a 	nop
    4078:	e037883a 	mov	sp,fp
    407c:	dfc00117 	ldw	ra,4(sp)
    4080:	df000017 	ldw	fp,0(sp)
    4084:	dec00204 	addi	sp,sp,8
    4088:	f800283a 	ret

0000408c <LCD_Test>:
//-------------------------------------------------------------------------
void LCD_Test(char* Text1, char* Text2)
{
    408c:	defffc04 	addi	sp,sp,-16
    4090:	dfc00315 	stw	ra,12(sp)
    4094:	df000215 	stw	fp,8(sp)
    4098:	df000204 	addi	fp,sp,8
    409c:	e13ffe15 	stw	r4,-8(fp)
    40a0:	e17fff15 	stw	r5,-4(fp)
  //char Text1[16] = "Altera DE2 Board";
  //char Text2[16] = " USB Paintbrush ";
  //  Initial LCD
  LCD_Init();
    40a4:	0003f280 	call	3f28 <LCD_Init>
  //  Show Text to LCD
  LCD_Show_Text("Coord. X: ");
    40a8:	01000074 	movhi	r4,1
    40ac:	2113d104 	addi	r4,r4,20292
    40b0:	0003fc80 	call	3fc8 <LCD_Show_Text>
  LCD_Show_Text(Text1);
    40b4:	e13ffe17 	ldw	r4,-8(fp)
    40b8:	0003fc80 	call	3fc8 <LCD_Show_Text>
  //  Change Line2
  LCD_Line2();
    40bc:	000404c0 	call	404c <LCD_Line2>
  //  Show Text to LCD
  LCD_Show_Text("Coord. Y: ");
    40c0:	01000074 	movhi	r4,1
    40c4:	2113d404 	addi	r4,r4,20304
    40c8:	0003fc80 	call	3fc8 <LCD_Show_Text>
  LCD_Show_Text(Text2);
    40cc:	e13fff17 	ldw	r4,-4(fp)
    40d0:	0003fc80 	call	3fc8 <LCD_Show_Text>
}
    40d4:	0001883a 	nop
    40d8:	e037883a 	mov	sp,fp
    40dc:	dfc00117 	ldw	ra,4(sp)
    40e0:	df000017 	ldw	fp,0(sp)
    40e4:	dec00204 	addi	sp,sp,8
    40e8:	f800283a 	ret

000040ec <SEG7_Clear>:
static    unsigned char szMap[] = {
        63, 6, 91, 79, 102, 109, 125, 7, 
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
    40ec:	defffe04 	addi	sp,sp,-8
    40f0:	df000115 	stw	fp,4(sp)
    40f4:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
    40f8:	e03fff15 	stw	zero,-4(fp)
    40fc:	00000b06 	br	412c <SEG7_Clear+0x40>
        SEG7_SET(i, 0x00);
    4100:	e0bfff17 	ldw	r2,-4(fp)
    4104:	1085883a 	add	r2,r2,r2
    4108:	1085883a 	add	r2,r2,r2
    410c:	1007883a 	mov	r3,r2
    4110:	00824834 	movhi	r2,2336
    4114:	1885883a 	add	r2,r3,r2
    4118:	0007883a 	mov	r3,zero
    411c:	10c00035 	stwio	r3,0(r2)
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
    4120:	e0bfff17 	ldw	r2,-4(fp)
    4124:	10800044 	addi	r2,r2,1
    4128:	e0bfff15 	stw	r2,-4(fp)
    412c:	e0bfff17 	ldw	r2,-4(fp)
    4130:	10800210 	cmplti	r2,r2,8
    4134:	103ff21e 	bne	r2,zero,4100 <SEG7_Clear+0x14>
        SEG7_SET(i, 0x00);
    }        
}
    4138:	0001883a 	nop
    413c:	e037883a 	mov	sp,fp
    4140:	df000017 	ldw	fp,0(sp)
    4144:	dec00104 	addi	sp,sp,4
    4148:	f800283a 	ret

0000414c <SEG7_Full>:
void SEG7_Full(void){
    414c:	defffe04 	addi	sp,sp,-8
    4150:	df000115 	stw	fp,4(sp)
    4154:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
    4158:	e03fff15 	stw	zero,-4(fp)
    415c:	00000b06 	br	418c <SEG7_Full+0x40>
        SEG7_SET(i, 0xFF);
    4160:	e0bfff17 	ldw	r2,-4(fp)
    4164:	1085883a 	add	r2,r2,r2
    4168:	1085883a 	add	r2,r2,r2
    416c:	1007883a 	mov	r3,r2
    4170:	00824834 	movhi	r2,2336
    4174:	1885883a 	add	r2,r3,r2
    4178:	00c03fc4 	movi	r3,255
    417c:	10c00035 	stwio	r3,0(r2)
        SEG7_SET(i, 0x00);
    }        
}
void SEG7_Full(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	10800044 	addi	r2,r2,1
    4188:	e0bfff15 	stw	r2,-4(fp)
    418c:	e0bfff17 	ldw	r2,-4(fp)
    4190:	10800210 	cmplti	r2,r2,8
    4194:	103ff21e 	bne	r2,zero,4160 <SEG7_Full+0x14>
        SEG7_SET(i, 0xFF);
    }        
}
    4198:	0001883a 	nop
    419c:	e037883a 	mov	sp,fp
    41a0:	df000017 	ldw	fp,0(sp)
    41a4:	dec00104 	addi	sp,sp,4
    41a8:	f800283a 	ret

000041ac <SEG7_Number>:

void SEG7_Number(void){
    41ac:	defffe04 	addi	sp,sp,-8
    41b0:	df000115 	stw	fp,4(sp)
    41b4:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
    41b8:	e03fff15 	stw	zero,-4(fp)
    41bc:	00001006 	br	4200 <SEG7_Number+0x54>
        SEG7_SET(i, szMap[i]);
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	1085883a 	add	r2,r2,r2
    41c8:	1085883a 	add	r2,r2,r2
    41cc:	1007883a 	mov	r3,r2
    41d0:	00824834 	movhi	r2,2336
    41d4:	1887883a 	add	r3,r3,r2
    41d8:	00800074 	movhi	r2,1
    41dc:	10953804 	addi	r2,r2,21728
    41e0:	e13fff17 	ldw	r4,-4(fp)
    41e4:	1105883a 	add	r2,r2,r4
    41e8:	10800003 	ldbu	r2,0(r2)
    41ec:	10803fcc 	andi	r2,r2,255
    41f0:	18800035 	stwio	r2,0(r3)
    }        
}

void SEG7_Number(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
    41f4:	e0bfff17 	ldw	r2,-4(fp)
    41f8:	10800044 	addi	r2,r2,1
    41fc:	e0bfff15 	stw	r2,-4(fp)
    4200:	e0bfff17 	ldw	r2,-4(fp)
    4204:	10800210 	cmplti	r2,r2,8
    4208:	103fed1e 	bne	r2,zero,41c0 <SEG7_Number+0x14>
        SEG7_SET(i, szMap[i]);
    }        
}
    420c:	0001883a 	nop
    4210:	e037883a 	mov	sp,fp
    4214:	df000017 	ldw	fp,0(sp)
    4218:	dec00104 	addi	sp,sp,4
    421c:	f800283a 	ret

00004220 <SEG7_Hex>:

void SEG7_Hex(alt_u32 Data, alt_u8 point_mask){
    4220:	defffb04 	addi	sp,sp,-20
    4224:	df000415 	stw	fp,16(sp)
    4228:	df000404 	addi	fp,sp,16
    422c:	e13ffe15 	stw	r4,-8(fp)
    4230:	2805883a 	mov	r2,r5
    4234:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
    4238:	00800044 	movi	r2,1
    423c:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    4240:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
    4244:	e03ffd15 	stw	zero,-12(fp)
    4248:	00002106 	br	42d0 <SEG7_Hex+0xb0>
        seg_mask = szMap[Data & 0x0F];
    424c:	e0bffe17 	ldw	r2,-8(fp)
    4250:	10c003cc 	andi	r3,r2,15
    4254:	00800074 	movhi	r2,1
    4258:	10953804 	addi	r2,r2,21728
    425c:	10c5883a 	add	r2,r2,r3
    4260:	10800003 	ldbu	r2,0(r2)
    4264:	e0bffc45 	stb	r2,-15(fp)
        Data >>= 4;
    4268:	e0bffe17 	ldw	r2,-8(fp)
    426c:	1004d13a 	srli	r2,r2,4
    4270:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
    4274:	e0ffff03 	ldbu	r3,-4(fp)
    4278:	e0bffc03 	ldbu	r2,-16(fp)
    427c:	1884703a 	and	r2,r3,r2
    4280:	10803fcc 	andi	r2,r2,255
    4284:	10000426 	beq	r2,zero,4298 <SEG7_Hex+0x78>
            seg_mask |= 0x80;
    4288:	e0fffc43 	ldbu	r3,-15(fp)
    428c:	00bfe004 	movi	r2,-128
    4290:	1884b03a 	or	r2,r3,r2
    4294:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;     
    4298:	e0bffc03 	ldbu	r2,-16(fp)
    429c:	1085883a 	add	r2,r2,r2
    42a0:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
    42a4:	e0bffd17 	ldw	r2,-12(fp)
    42a8:	1085883a 	add	r2,r2,r2
    42ac:	1085883a 	add	r2,r2,r2
    42b0:	1007883a 	mov	r3,r2
    42b4:	00824834 	movhi	r2,2336
    42b8:	1885883a 	add	r2,r3,r2
    42bc:	e0fffc43 	ldbu	r3,-15(fp)
    42c0:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
    42c4:	e0bffd17 	ldw	r2,-12(fp)
    42c8:	10800044 	addi	r2,r2,1
    42cc:	e0bffd15 	stw	r2,-12(fp)
    42d0:	e0bffd17 	ldw	r2,-12(fp)
    42d4:	10800210 	cmplti	r2,r2,8
    42d8:	103fdc1e 	bne	r2,zero,424c <SEG7_Hex+0x2c>
        if (point_mask & mask)
            seg_mask |= 0x80;
        mask <<= 1;     
        SEG7_SET(i, seg_mask);
    }        
}
    42dc:	0001883a 	nop
    42e0:	e037883a 	mov	sp,fp
    42e4:	df000017 	ldw	fp,0(sp)
    42e8:	dec00104 	addi	sp,sp,4
    42ec:	f800283a 	ret

000042f0 <SEG7_Decimal>:

void SEG7_Decimal(alt_u32 Data, alt_u8 point_mask){
    42f0:	defffa04 	addi	sp,sp,-24
    42f4:	dfc00515 	stw	ra,20(sp)
    42f8:	df000415 	stw	fp,16(sp)
    42fc:	df000404 	addi	fp,sp,16
    4300:	e13ffe15 	stw	r4,-8(fp)
    4304:	2805883a 	mov	r2,r5
    4308:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
    430c:	00800044 	movi	r2,1
    4310:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    4314:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
    4318:	e03ffd15 	stw	zero,-12(fp)
    431c:	00002606 	br	43b8 <SEG7_Decimal+0xc8>
        seg_mask = szMap[Data%10];
    4320:	e0bffe17 	ldw	r2,-8(fp)
    4324:	01400284 	movi	r5,10
    4328:	1009883a 	mov	r4,r2
    432c:	00046940 	call	4694 <__umodsi3>
    4330:	1007883a 	mov	r3,r2
    4334:	00800074 	movhi	r2,1
    4338:	10953804 	addi	r2,r2,21728
    433c:	10c5883a 	add	r2,r2,r3
    4340:	10800003 	ldbu	r2,0(r2)
    4344:	e0bffc45 	stb	r2,-15(fp)
        Data /= 10;
    4348:	e0bffe17 	ldw	r2,-8(fp)
    434c:	01400284 	movi	r5,10
    4350:	1009883a 	mov	r4,r2
    4354:	00046300 	call	4630 <__udivsi3>
    4358:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
    435c:	e0ffff03 	ldbu	r3,-4(fp)
    4360:	e0bffc03 	ldbu	r2,-16(fp)
    4364:	1884703a 	and	r2,r3,r2
    4368:	10803fcc 	andi	r2,r2,255
    436c:	10000426 	beq	r2,zero,4380 <SEG7_Decimal+0x90>
            seg_mask |= 0x80;
    4370:	e0fffc43 	ldbu	r3,-15(fp)
    4374:	00bfe004 	movi	r2,-128
    4378:	1884b03a 	or	r2,r3,r2
    437c:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;   
    4380:	e0bffc03 	ldbu	r2,-16(fp)
    4384:	1085883a 	add	r2,r2,r2
    4388:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
    438c:	e0bffd17 	ldw	r2,-12(fp)
    4390:	1085883a 	add	r2,r2,r2
    4394:	1085883a 	add	r2,r2,r2
    4398:	1007883a 	mov	r3,r2
    439c:	00824834 	movhi	r2,2336
    43a0:	1885883a 	add	r2,r3,r2
    43a4:	e0fffc43 	ldbu	r3,-15(fp)
    43a8:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
    43ac:	e0bffd17 	ldw	r2,-12(fp)
    43b0:	10800044 	addi	r2,r2,1
    43b4:	e0bffd15 	stw	r2,-12(fp)
    43b8:	e0bffd17 	ldw	r2,-12(fp)
    43bc:	10800210 	cmplti	r2,r2,8
    43c0:	103fd71e 	bne	r2,zero,4320 <SEG7_Decimal+0x30>
            seg_mask |= 0x80;
        mask <<= 1;   
        SEG7_SET(i, seg_mask);
    }        
  
} 
    43c4:	0001883a 	nop
    43c8:	e037883a 	mov	sp,fp
    43cc:	dfc00117 	ldw	ra,4(sp)
    43d0:	df000017 	ldw	fp,0(sp)
    43d4:	dec00204 	addi	sp,sp,8
    43d8:	f800283a 	ret

000043dc <Set_Cursor_XY>:



//-------------------------------------------------------------------------
void Set_Cursor_XY(unsigned int X,unsigned int Y)
{
    43dc:	defffd04 	addi	sp,sp,-12
    43e0:	df000215 	stw	fp,8(sp)
    43e4:	df000204 	addi	fp,sp,8
    43e8:	e13ffe15 	stw	r4,-8(fp)
    43ec:	e17fff15 	stw	r5,-4(fp)
  Vga_Cursor_X(VPG_BASE,X);
    43f0:	e0fffe17 	ldw	r3,-8(fp)
    43f4:	008244f4 	movhi	r2,2323
    43f8:	10b00104 	addi	r2,r2,-16380
    43fc:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Y(VPG_BASE,Y);
    4400:	e0ffff17 	ldw	r3,-4(fp)
    4404:	008244f4 	movhi	r2,2323
    4408:	10b00204 	addi	r2,r2,-16376
    440c:	10c00035 	stwio	r3,0(r2)

}
    4410:	0001883a 	nop
    4414:	e037883a 	mov	sp,fp
    4418:	df000017 	ldw	fp,0(sp)
    441c:	dec00104 	addi	sp,sp,4
    4420:	f800283a 	ret

00004424 <Set_Cursor_Color>:
//-------------------------------------------------------------------------
void Set_Cursor_Color(unsigned int R,unsigned int G,unsigned int B)
{
    4424:	defffc04 	addi	sp,sp,-16
    4428:	df000315 	stw	fp,12(sp)
    442c:	df000304 	addi	fp,sp,12
    4430:	e13ffd15 	stw	r4,-12(fp)
    4434:	e17ffe15 	stw	r5,-8(fp)
    4438:	e1bfff15 	stw	r6,-4(fp)
  Vga_Cursor_Color_R(VPG_BASE,R);
    443c:	e0fffd17 	ldw	r3,-12(fp)
    4440:	008244f4 	movhi	r2,2323
    4444:	10b00304 	addi	r2,r2,-16372
    4448:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Color_G(VPG_BASE,G);
    444c:	e0fffe17 	ldw	r3,-8(fp)
    4450:	008244f4 	movhi	r2,2323
    4454:	10b00404 	addi	r2,r2,-16368
    4458:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Color_B(VPG_BASE,B);
    445c:	e0ffff17 	ldw	r3,-4(fp)
    4460:	008244f4 	movhi	r2,2323
    4464:	10b00504 	addi	r2,r2,-16364
    4468:	10c00035 	stwio	r3,0(r2)

}
    446c:	0001883a 	nop
    4470:	e037883a 	mov	sp,fp
    4474:	df000017 	ldw	fp,0(sp)
    4478:	dec00104 	addi	sp,sp,4
    447c:	f800283a 	ret

00004480 <Set_Pixel_On_Color>:
//-------------------------------------------------------------------------
void Set_Pixel_On_Color(unsigned int R,unsigned int G,unsigned int B)
{
    4480:	defffc04 	addi	sp,sp,-16
    4484:	df000315 	stw	fp,12(sp)
    4488:	df000304 	addi	fp,sp,12
    448c:	e13ffd15 	stw	r4,-12(fp)
    4490:	e17ffe15 	stw	r5,-8(fp)
    4494:	e1bfff15 	stw	r6,-4(fp)
  Vga_Pixel_On_Color_R(VPG_BASE,R);
    4498:	e0fffd17 	ldw	r3,-12(fp)
    449c:	008244f4 	movhi	r2,2323
    44a0:	10b00604 	addi	r2,r2,-16360
    44a4:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_On_Color_G(VPG_BASE,G);
    44a8:	e0fffe17 	ldw	r3,-8(fp)
    44ac:	008244f4 	movhi	r2,2323
    44b0:	10b00704 	addi	r2,r2,-16356
    44b4:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_On_Color_B(VPG_BASE,B);
    44b8:	e0ffff17 	ldw	r3,-4(fp)
    44bc:	008244f4 	movhi	r2,2323
    44c0:	10b00804 	addi	r2,r2,-16352
    44c4:	10c00035 	stwio	r3,0(r2)

}
    44c8:	0001883a 	nop
    44cc:	e037883a 	mov	sp,fp
    44d0:	df000017 	ldw	fp,0(sp)
    44d4:	dec00104 	addi	sp,sp,4
    44d8:	f800283a 	ret

000044dc <Set_Pixel_Off_Color>:
//-------------------------------------------------------------------------
void Set_Pixel_Off_Color(unsigned int R,unsigned int G,unsigned int B)
{
    44dc:	defffc04 	addi	sp,sp,-16
    44e0:	df000315 	stw	fp,12(sp)
    44e4:	df000304 	addi	fp,sp,12
    44e8:	e13ffd15 	stw	r4,-12(fp)
    44ec:	e17ffe15 	stw	r5,-8(fp)
    44f0:	e1bfff15 	stw	r6,-4(fp)
  Vga_Pixel_Off_Color_R(VPG_BASE,R);
    44f4:	e0fffd17 	ldw	r3,-12(fp)
    44f8:	008244f4 	movhi	r2,2323
    44fc:	10b00904 	addi	r2,r2,-16348
    4500:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_Off_Color_G(VPG_BASE,G);
    4504:	e0fffe17 	ldw	r3,-8(fp)
    4508:	008244f4 	movhi	r2,2323
    450c:	10b00a04 	addi	r2,r2,-16344
    4510:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_Off_Color_B(VPG_BASE,B);
    4514:	e0ffff17 	ldw	r3,-4(fp)
    4518:	008244f4 	movhi	r2,2323
    451c:	10b00b04 	addi	r2,r2,-16340
    4520:	10c00035 	stwio	r3,0(r2)

}
    4524:	0001883a 	nop
    4528:	e037883a 	mov	sp,fp
    452c:	df000017 	ldw	fp,0(sp)
    4530:	dec00104 	addi	sp,sp,4
    4534:	f800283a 	ret

00004538 <__divsi3>:
    4538:	20001b16 	blt	r4,zero,45a8 <__divsi3+0x70>
    453c:	000f883a 	mov	r7,zero
    4540:	28001616 	blt	r5,zero,459c <__divsi3+0x64>
    4544:	200d883a 	mov	r6,r4
    4548:	29001a2e 	bgeu	r5,r4,45b4 <__divsi3+0x7c>
    454c:	00800804 	movi	r2,32
    4550:	00c00044 	movi	r3,1
    4554:	00000106 	br	455c <__divsi3+0x24>
    4558:	10000d26 	beq	r2,zero,4590 <__divsi3+0x58>
    455c:	294b883a 	add	r5,r5,r5
    4560:	10bfffc4 	addi	r2,r2,-1
    4564:	18c7883a 	add	r3,r3,r3
    4568:	293ffb36 	bltu	r5,r4,4558 <__divsi3+0x20>
    456c:	0005883a 	mov	r2,zero
    4570:	18000726 	beq	r3,zero,4590 <__divsi3+0x58>
    4574:	0005883a 	mov	r2,zero
    4578:	31400236 	bltu	r6,r5,4584 <__divsi3+0x4c>
    457c:	314dc83a 	sub	r6,r6,r5
    4580:	10c4b03a 	or	r2,r2,r3
    4584:	1806d07a 	srli	r3,r3,1
    4588:	280ad07a 	srli	r5,r5,1
    458c:	183ffa1e 	bne	r3,zero,4578 <__divsi3+0x40>
    4590:	38000126 	beq	r7,zero,4598 <__divsi3+0x60>
    4594:	0085c83a 	sub	r2,zero,r2
    4598:	f800283a 	ret
    459c:	014bc83a 	sub	r5,zero,r5
    45a0:	39c0005c 	xori	r7,r7,1
    45a4:	003fe706 	br	4544 <__divsi3+0xc>
    45a8:	0109c83a 	sub	r4,zero,r4
    45ac:	01c00044 	movi	r7,1
    45b0:	003fe306 	br	4540 <__divsi3+0x8>
    45b4:	00c00044 	movi	r3,1
    45b8:	003fee06 	br	4574 <__divsi3+0x3c>

000045bc <__modsi3>:
    45bc:	20001716 	blt	r4,zero,461c <__modsi3+0x60>
    45c0:	000f883a 	mov	r7,zero
    45c4:	2005883a 	mov	r2,r4
    45c8:	28001216 	blt	r5,zero,4614 <__modsi3+0x58>
    45cc:	2900162e 	bgeu	r5,r4,4628 <__modsi3+0x6c>
    45d0:	01800804 	movi	r6,32
    45d4:	00c00044 	movi	r3,1
    45d8:	00000106 	br	45e0 <__modsi3+0x24>
    45dc:	30000a26 	beq	r6,zero,4608 <__modsi3+0x4c>
    45e0:	294b883a 	add	r5,r5,r5
    45e4:	31bfffc4 	addi	r6,r6,-1
    45e8:	18c7883a 	add	r3,r3,r3
    45ec:	293ffb36 	bltu	r5,r4,45dc <__modsi3+0x20>
    45f0:	18000526 	beq	r3,zero,4608 <__modsi3+0x4c>
    45f4:	1806d07a 	srli	r3,r3,1
    45f8:	11400136 	bltu	r2,r5,4600 <__modsi3+0x44>
    45fc:	1145c83a 	sub	r2,r2,r5
    4600:	280ad07a 	srli	r5,r5,1
    4604:	183ffb1e 	bne	r3,zero,45f4 <__modsi3+0x38>
    4608:	38000126 	beq	r7,zero,4610 <__modsi3+0x54>
    460c:	0085c83a 	sub	r2,zero,r2
    4610:	f800283a 	ret
    4614:	014bc83a 	sub	r5,zero,r5
    4618:	003fec06 	br	45cc <__modsi3+0x10>
    461c:	0109c83a 	sub	r4,zero,r4
    4620:	01c00044 	movi	r7,1
    4624:	003fe706 	br	45c4 <__modsi3+0x8>
    4628:	00c00044 	movi	r3,1
    462c:	003ff106 	br	45f4 <__modsi3+0x38>

00004630 <__udivsi3>:
    4630:	200d883a 	mov	r6,r4
    4634:	2900152e 	bgeu	r5,r4,468c <__udivsi3+0x5c>
    4638:	28001416 	blt	r5,zero,468c <__udivsi3+0x5c>
    463c:	00800804 	movi	r2,32
    4640:	00c00044 	movi	r3,1
    4644:	00000206 	br	4650 <__udivsi3+0x20>
    4648:	10000e26 	beq	r2,zero,4684 <__udivsi3+0x54>
    464c:	28000516 	blt	r5,zero,4664 <__udivsi3+0x34>
    4650:	294b883a 	add	r5,r5,r5
    4654:	10bfffc4 	addi	r2,r2,-1
    4658:	18c7883a 	add	r3,r3,r3
    465c:	293ffa36 	bltu	r5,r4,4648 <__udivsi3+0x18>
    4660:	18000826 	beq	r3,zero,4684 <__udivsi3+0x54>
    4664:	0005883a 	mov	r2,zero
    4668:	31400236 	bltu	r6,r5,4674 <__udivsi3+0x44>
    466c:	314dc83a 	sub	r6,r6,r5
    4670:	10c4b03a 	or	r2,r2,r3
    4674:	1806d07a 	srli	r3,r3,1
    4678:	280ad07a 	srli	r5,r5,1
    467c:	183ffa1e 	bne	r3,zero,4668 <__udivsi3+0x38>
    4680:	f800283a 	ret
    4684:	0005883a 	mov	r2,zero
    4688:	f800283a 	ret
    468c:	00c00044 	movi	r3,1
    4690:	003ff406 	br	4664 <__udivsi3+0x34>

00004694 <__umodsi3>:
    4694:	2005883a 	mov	r2,r4
    4698:	2900122e 	bgeu	r5,r4,46e4 <__umodsi3+0x50>
    469c:	28001116 	blt	r5,zero,46e4 <__umodsi3+0x50>
    46a0:	01800804 	movi	r6,32
    46a4:	00c00044 	movi	r3,1
    46a8:	00000206 	br	46b4 <__umodsi3+0x20>
    46ac:	30000c26 	beq	r6,zero,46e0 <__umodsi3+0x4c>
    46b0:	28000516 	blt	r5,zero,46c8 <__umodsi3+0x34>
    46b4:	294b883a 	add	r5,r5,r5
    46b8:	31bfffc4 	addi	r6,r6,-1
    46bc:	18c7883a 	add	r3,r3,r3
    46c0:	293ffa36 	bltu	r5,r4,46ac <__umodsi3+0x18>
    46c4:	18000626 	beq	r3,zero,46e0 <__umodsi3+0x4c>
    46c8:	1806d07a 	srli	r3,r3,1
    46cc:	11400136 	bltu	r2,r5,46d4 <__umodsi3+0x40>
    46d0:	1145c83a 	sub	r2,r2,r5
    46d4:	280ad07a 	srli	r5,r5,1
    46d8:	183ffb1e 	bne	r3,zero,46c8 <__umodsi3+0x34>
    46dc:	f800283a 	ret
    46e0:	f800283a 	ret
    46e4:	00c00044 	movi	r3,1
    46e8:	003ff706 	br	46c8 <__umodsi3+0x34>

000046ec <__itoa>:
    46ec:	30bfff84 	addi	r2,r6,-2
    46f0:	00c00884 	movi	r3,34
    46f4:	18801436 	bltu	r3,r2,4748 <__itoa+0x5c>
    46f8:	defffe04 	addi	sp,sp,-8
    46fc:	dfc00115 	stw	ra,4(sp)
    4700:	dc000015 	stw	r16,0(sp)
    4704:	00800284 	movi	r2,10
    4708:	30800926 	beq	r6,r2,4730 <__itoa+0x44>
    470c:	0005883a 	mov	r2,zero
    4710:	2821883a 	mov	r16,r5
    4714:	288b883a 	add	r5,r5,r2
    4718:	00049300 	call	4930 <__utoa>
    471c:	8005883a 	mov	r2,r16
    4720:	dfc00117 	ldw	ra,4(sp)
    4724:	dc000017 	ldw	r16,0(sp)
    4728:	dec00204 	addi	sp,sp,8
    472c:	f800283a 	ret
    4730:	203ff60e 	bge	r4,zero,470c <__itoa+0x20>
    4734:	00800b44 	movi	r2,45
    4738:	28800005 	stb	r2,0(r5)
    473c:	0109c83a 	sub	r4,zero,r4
    4740:	00800044 	movi	r2,1
    4744:	003ff206 	br	4710 <__itoa+0x24>
    4748:	28000005 	stb	zero,0(r5)
    474c:	0005883a 	mov	r2,zero
    4750:	f800283a 	ret

00004754 <itoa>:
    4754:	00046ec1 	jmpi	46ec <__itoa>

00004758 <_printf_r>:
    4758:	defffd04 	addi	sp,sp,-12
    475c:	2805883a 	mov	r2,r5
    4760:	dfc00015 	stw	ra,0(sp)
    4764:	d9800115 	stw	r6,4(sp)
    4768:	d9c00215 	stw	r7,8(sp)
    476c:	21400217 	ldw	r5,8(r4)
    4770:	d9c00104 	addi	r7,sp,4
    4774:	100d883a 	mov	r6,r2
    4778:	0004a8c0 	call	4a8c <___vfprintf_internal_r>
    477c:	dfc00017 	ldw	ra,0(sp)
    4780:	dec00304 	addi	sp,sp,12
    4784:	f800283a 	ret

00004788 <printf>:
    4788:	defffc04 	addi	sp,sp,-16
    478c:	dfc00015 	stw	ra,0(sp)
    4790:	d9400115 	stw	r5,4(sp)
    4794:	d9800215 	stw	r6,8(sp)
    4798:	d9c00315 	stw	r7,12(sp)
    479c:	00800074 	movhi	r2,1
    47a0:	109c3004 	addi	r2,r2,28864
    47a4:	10800017 	ldw	r2,0(r2)
    47a8:	200b883a 	mov	r5,r4
    47ac:	d9800104 	addi	r6,sp,4
    47b0:	11000217 	ldw	r4,8(r2)
    47b4:	0006c840 	call	6c84 <__vfprintf_internal>
    47b8:	dfc00017 	ldw	ra,0(sp)
    47bc:	dec00404 	addi	sp,sp,16
    47c0:	f800283a 	ret

000047c4 <_puts_r>:
    47c4:	defff604 	addi	sp,sp,-40
    47c8:	dc000715 	stw	r16,28(sp)
    47cc:	2021883a 	mov	r16,r4
    47d0:	2809883a 	mov	r4,r5
    47d4:	dc400815 	stw	r17,32(sp)
    47d8:	dfc00915 	stw	ra,36(sp)
    47dc:	2823883a 	mov	r17,r5
    47e0:	00048980 	call	4898 <strlen>
    47e4:	10c00044 	addi	r3,r2,1
    47e8:	d8800115 	stw	r2,4(sp)
    47ec:	00800074 	movhi	r2,1
    47f0:	1093d704 	addi	r2,r2,20316
    47f4:	d8800215 	stw	r2,8(sp)
    47f8:	00800044 	movi	r2,1
    47fc:	d8800315 	stw	r2,12(sp)
    4800:	00800084 	movi	r2,2
    4804:	dc400015 	stw	r17,0(sp)
    4808:	d8c00615 	stw	r3,24(sp)
    480c:	dec00415 	stw	sp,16(sp)
    4810:	d8800515 	stw	r2,20(sp)
    4814:	80000226 	beq	r16,zero,4820 <_puts_r+0x5c>
    4818:	80800e17 	ldw	r2,56(r16)
    481c:	10001426 	beq	r2,zero,4870 <_puts_r+0xac>
    4820:	81400217 	ldw	r5,8(r16)
    4824:	2880030b 	ldhu	r2,12(r5)
    4828:	10c8000c 	andi	r3,r2,8192
    482c:	1800061e 	bne	r3,zero,4848 <_puts_r+0x84>
    4830:	29001917 	ldw	r4,100(r5)
    4834:	00f7ffc4 	movi	r3,-8193
    4838:	10880014 	ori	r2,r2,8192
    483c:	20c6703a 	and	r3,r4,r3
    4840:	2880030d 	sth	r2,12(r5)
    4844:	28c01915 	stw	r3,100(r5)
    4848:	d9800404 	addi	r6,sp,16
    484c:	8009883a 	mov	r4,r16
    4850:	00091b40 	call	91b4 <__sfvwrite_r>
    4854:	1000091e 	bne	r2,zero,487c <_puts_r+0xb8>
    4858:	00800284 	movi	r2,10
    485c:	dfc00917 	ldw	ra,36(sp)
    4860:	dc400817 	ldw	r17,32(sp)
    4864:	dc000717 	ldw	r16,28(sp)
    4868:	dec00a04 	addi	sp,sp,40
    486c:	f800283a 	ret
    4870:	8009883a 	mov	r4,r16
    4874:	0008d300 	call	8d30 <__sinit>
    4878:	003fe906 	br	4820 <_puts_r+0x5c>
    487c:	00bfffc4 	movi	r2,-1
    4880:	003ff606 	br	485c <_puts_r+0x98>

00004884 <puts>:
    4884:	00800074 	movhi	r2,1
    4888:	109c3004 	addi	r2,r2,28864
    488c:	200b883a 	mov	r5,r4
    4890:	11000017 	ldw	r4,0(r2)
    4894:	00047c41 	jmpi	47c4 <_puts_r>

00004898 <strlen>:
    4898:	208000cc 	andi	r2,r4,3
    489c:	10002026 	beq	r2,zero,4920 <strlen+0x88>
    48a0:	20800007 	ldb	r2,0(r4)
    48a4:	10002026 	beq	r2,zero,4928 <strlen+0x90>
    48a8:	2005883a 	mov	r2,r4
    48ac:	00000206 	br	48b8 <strlen+0x20>
    48b0:	10c00007 	ldb	r3,0(r2)
    48b4:	18001826 	beq	r3,zero,4918 <strlen+0x80>
    48b8:	10800044 	addi	r2,r2,1
    48bc:	10c000cc 	andi	r3,r2,3
    48c0:	183ffb1e 	bne	r3,zero,48b0 <strlen+0x18>
    48c4:	10c00017 	ldw	r3,0(r2)
    48c8:	01ffbff4 	movhi	r7,65279
    48cc:	39ffbfc4 	addi	r7,r7,-257
    48d0:	00ca303a 	nor	r5,zero,r3
    48d4:	01a02074 	movhi	r6,32897
    48d8:	19c7883a 	add	r3,r3,r7
    48dc:	31a02004 	addi	r6,r6,-32640
    48e0:	1946703a 	and	r3,r3,r5
    48e4:	1986703a 	and	r3,r3,r6
    48e8:	1800091e 	bne	r3,zero,4910 <strlen+0x78>
    48ec:	10800104 	addi	r2,r2,4
    48f0:	10c00017 	ldw	r3,0(r2)
    48f4:	19cb883a 	add	r5,r3,r7
    48f8:	00c6303a 	nor	r3,zero,r3
    48fc:	28c6703a 	and	r3,r5,r3
    4900:	1986703a 	and	r3,r3,r6
    4904:	183ff926 	beq	r3,zero,48ec <strlen+0x54>
    4908:	00000106 	br	4910 <strlen+0x78>
    490c:	10800044 	addi	r2,r2,1
    4910:	10c00007 	ldb	r3,0(r2)
    4914:	183ffd1e 	bne	r3,zero,490c <strlen+0x74>
    4918:	1105c83a 	sub	r2,r2,r4
    491c:	f800283a 	ret
    4920:	2005883a 	mov	r2,r4
    4924:	003fe706 	br	48c4 <strlen+0x2c>
    4928:	0005883a 	mov	r2,zero
    492c:	f800283a 	ret

00004930 <__utoa>:
    4930:	008cccb4 	movhi	r2,13106
    4934:	defff004 	addi	sp,sp,-64
    4938:	108c4c04 	addi	r2,r2,12592
    493c:	d8800015 	stw	r2,0(sp)
    4940:	008dcdb4 	movhi	r2,14134
    4944:	108d4d04 	addi	r2,r2,13620
    4948:	d8800115 	stw	r2,4(sp)
    494c:	00989874 	movhi	r2,25185
    4950:	108e4e04 	addi	r2,r2,14648
    4954:	d8800215 	stw	r2,8(sp)
    4958:	00999974 	movhi	r2,26213
    495c:	109918c4 	addi	r2,r2,25699
    4960:	d8800315 	stw	r2,12(sp)
    4964:	009a9a74 	movhi	r2,27241
    4968:	109a19c4 	addi	r2,r2,26727
    496c:	d8800415 	stw	r2,16(sp)
    4970:	009b9b74 	movhi	r2,28269
    4974:	109b1ac4 	addi	r2,r2,27755
    4978:	d8800515 	stw	r2,20(sp)
    497c:	009c9c74 	movhi	r2,29297
    4980:	109c1bc4 	addi	r2,r2,28783
    4984:	d8800615 	stw	r2,24(sp)
    4988:	009d9d74 	movhi	r2,30325
    498c:	109d1cc4 	addi	r2,r2,29811
    4990:	d8800715 	stw	r2,28(sp)
    4994:	009e9e74 	movhi	r2,31353
    4998:	109e1dc4 	addi	r2,r2,30839
    499c:	dd000e15 	stw	r20,56(sp)
    49a0:	d8800815 	stw	r2,32(sp)
    49a4:	dfc00f15 	stw	ra,60(sp)
    49a8:	dcc00d15 	stw	r19,52(sp)
    49ac:	dc800c15 	stw	r18,48(sp)
    49b0:	dc400b15 	stw	r17,44(sp)
    49b4:	dc000a15 	stw	r16,40(sp)
    49b8:	d8000905 	stb	zero,36(sp)
    49bc:	30bfff84 	addi	r2,r6,-2
    49c0:	00c00884 	movi	r3,34
    49c4:	2829883a 	mov	r20,r5
    49c8:	18802c36 	bltu	r3,r2,4a7c <__utoa+0x14c>
    49cc:	3027883a 	mov	r19,r6
    49d0:	2023883a 	mov	r17,r4
    49d4:	2825883a 	mov	r18,r5
    49d8:	0021883a 	mov	r16,zero
    49dc:	00000106 	br	49e4 <__utoa+0xb4>
    49e0:	1821883a 	mov	r16,r3
    49e4:	8809883a 	mov	r4,r17
    49e8:	980b883a 	mov	r5,r19
    49ec:	00046940 	call	4694 <__umodsi3>
    49f0:	d885883a 	add	r2,sp,r2
    49f4:	10800003 	ldbu	r2,0(r2)
    49f8:	8809883a 	mov	r4,r17
    49fc:	980b883a 	mov	r5,r19
    4a00:	90800005 	stb	r2,0(r18)
    4a04:	00046300 	call	4630 <__udivsi3>
    4a08:	1023883a 	mov	r17,r2
    4a0c:	80c00044 	addi	r3,r16,1
    4a10:	94800044 	addi	r18,r18,1
    4a14:	103ff21e 	bne	r2,zero,49e0 <__utoa+0xb0>
    4a18:	a0c7883a 	add	r3,r20,r3
    4a1c:	18000005 	stb	zero,0(r3)
    4a20:	80000d26 	beq	r16,zero,4a58 <__utoa+0x128>
    4a24:	01c00044 	movi	r7,1
    4a28:	a409883a 	add	r4,r20,r16
    4a2c:	a007883a 	mov	r3,r20
    4a30:	3d0fc83a 	sub	r7,r7,r20
    4a34:	21800003 	ldbu	r6,0(r4)
    4a38:	19400003 	ldbu	r5,0(r3)
    4a3c:	38c5883a 	add	r2,r7,r3
    4a40:	19800005 	stb	r6,0(r3)
    4a44:	21400005 	stb	r5,0(r4)
    4a48:	843fffc4 	addi	r16,r16,-1
    4a4c:	18c00044 	addi	r3,r3,1
    4a50:	213fffc4 	addi	r4,r4,-1
    4a54:	143ff716 	blt	r2,r16,4a34 <__utoa+0x104>
    4a58:	a005883a 	mov	r2,r20
    4a5c:	dfc00f17 	ldw	ra,60(sp)
    4a60:	dd000e17 	ldw	r20,56(sp)
    4a64:	dcc00d17 	ldw	r19,52(sp)
    4a68:	dc800c17 	ldw	r18,48(sp)
    4a6c:	dc400b17 	ldw	r17,44(sp)
    4a70:	dc000a17 	ldw	r16,40(sp)
    4a74:	dec01004 	addi	sp,sp,64
    4a78:	f800283a 	ret
    4a7c:	28000005 	stb	zero,0(r5)
    4a80:	0005883a 	mov	r2,zero
    4a84:	003ff506 	br	4a5c <__utoa+0x12c>

00004a88 <utoa>:
    4a88:	00049301 	jmpi	4930 <__utoa>

00004a8c <___vfprintf_internal_r>:
    4a8c:	deffb804 	addi	sp,sp,-288
    4a90:	dfc04715 	stw	ra,284(sp)
    4a94:	ddc04515 	stw	r23,276(sp)
    4a98:	dd404315 	stw	r21,268(sp)
    4a9c:	d9002c15 	stw	r4,176(sp)
    4aa0:	282f883a 	mov	r23,r5
    4aa4:	302b883a 	mov	r21,r6
    4aa8:	d9c02d15 	stw	r7,180(sp)
    4aac:	df004615 	stw	fp,280(sp)
    4ab0:	dd804415 	stw	r22,272(sp)
    4ab4:	dd004215 	stw	r20,264(sp)
    4ab8:	dcc04115 	stw	r19,260(sp)
    4abc:	dc804015 	stw	r18,256(sp)
    4ac0:	dc403f15 	stw	r17,252(sp)
    4ac4:	dc003e15 	stw	r16,248(sp)
    4ac8:	00098a40 	call	98a4 <_localeconv_r>
    4acc:	10800017 	ldw	r2,0(r2)
    4ad0:	1009883a 	mov	r4,r2
    4ad4:	d8803415 	stw	r2,208(sp)
    4ad8:	00048980 	call	4898 <strlen>
    4adc:	d8803715 	stw	r2,220(sp)
    4ae0:	d8802c17 	ldw	r2,176(sp)
    4ae4:	10000226 	beq	r2,zero,4af0 <___vfprintf_internal_r+0x64>
    4ae8:	10800e17 	ldw	r2,56(r2)
    4aec:	1000f926 	beq	r2,zero,4ed4 <___vfprintf_internal_r+0x448>
    4af0:	b880030b 	ldhu	r2,12(r23)
    4af4:	10c8000c 	andi	r3,r2,8192
    4af8:	1800061e 	bne	r3,zero,4b14 <___vfprintf_internal_r+0x88>
    4afc:	b9001917 	ldw	r4,100(r23)
    4b00:	00f7ffc4 	movi	r3,-8193
    4b04:	10880014 	ori	r2,r2,8192
    4b08:	20c6703a 	and	r3,r4,r3
    4b0c:	b880030d 	sth	r2,12(r23)
    4b10:	b8c01915 	stw	r3,100(r23)
    4b14:	10c0020c 	andi	r3,r2,8
    4b18:	1800c126 	beq	r3,zero,4e20 <___vfprintf_internal_r+0x394>
    4b1c:	b8c00417 	ldw	r3,16(r23)
    4b20:	1800bf26 	beq	r3,zero,4e20 <___vfprintf_internal_r+0x394>
    4b24:	1080068c 	andi	r2,r2,26
    4b28:	00c00284 	movi	r3,10
    4b2c:	10c0c426 	beq	r2,r3,4e40 <___vfprintf_internal_r+0x3b4>
    4b30:	d8c00404 	addi	r3,sp,16
    4b34:	05000074 	movhi	r20,1
    4b38:	d9001e04 	addi	r4,sp,120
    4b3c:	a513e884 	addi	r20,r20,20386
    4b40:	d8c01e15 	stw	r3,120(sp)
    4b44:	d8002015 	stw	zero,128(sp)
    4b48:	d8001f15 	stw	zero,124(sp)
    4b4c:	d8003315 	stw	zero,204(sp)
    4b50:	d8003615 	stw	zero,216(sp)
    4b54:	d8003815 	stw	zero,224(sp)
    4b58:	1811883a 	mov	r8,r3
    4b5c:	d8003915 	stw	zero,228(sp)
    4b60:	d8003a15 	stw	zero,232(sp)
    4b64:	d8002f15 	stw	zero,188(sp)
    4b68:	d9002815 	stw	r4,160(sp)
    4b6c:	a8800007 	ldb	r2,0(r21)
    4b70:	10027b26 	beq	r2,zero,5560 <___vfprintf_internal_r+0xad4>
    4b74:	00c00944 	movi	r3,37
    4b78:	a821883a 	mov	r16,r21
    4b7c:	10c0021e 	bne	r2,r3,4b88 <___vfprintf_internal_r+0xfc>
    4b80:	00001406 	br	4bd4 <___vfprintf_internal_r+0x148>
    4b84:	10c00326 	beq	r2,r3,4b94 <___vfprintf_internal_r+0x108>
    4b88:	84000044 	addi	r16,r16,1
    4b8c:	80800007 	ldb	r2,0(r16)
    4b90:	103ffc1e 	bne	r2,zero,4b84 <___vfprintf_internal_r+0xf8>
    4b94:	8563c83a 	sub	r17,r16,r21
    4b98:	88000e26 	beq	r17,zero,4bd4 <___vfprintf_internal_r+0x148>
    4b9c:	d8c02017 	ldw	r3,128(sp)
    4ba0:	d8801f17 	ldw	r2,124(sp)
    4ba4:	45400015 	stw	r21,0(r8)
    4ba8:	1c47883a 	add	r3,r3,r17
    4bac:	10800044 	addi	r2,r2,1
    4bb0:	d8c02015 	stw	r3,128(sp)
    4bb4:	44400115 	stw	r17,4(r8)
    4bb8:	d8801f15 	stw	r2,124(sp)
    4bbc:	00c001c4 	movi	r3,7
    4bc0:	1880a716 	blt	r3,r2,4e60 <___vfprintf_internal_r+0x3d4>
    4bc4:	42000204 	addi	r8,r8,8
    4bc8:	d9402f17 	ldw	r5,188(sp)
    4bcc:	2c4b883a 	add	r5,r5,r17
    4bd0:	d9402f15 	stw	r5,188(sp)
    4bd4:	80800007 	ldb	r2,0(r16)
    4bd8:	1000a826 	beq	r2,zero,4e7c <___vfprintf_internal_r+0x3f0>
    4bdc:	84400047 	ldb	r17,1(r16)
    4be0:	00bfffc4 	movi	r2,-1
    4be4:	85400044 	addi	r21,r16,1
    4be8:	d8002785 	stb	zero,158(sp)
    4bec:	0007883a 	mov	r3,zero
    4bf0:	000f883a 	mov	r7,zero
    4bf4:	d8802915 	stw	r2,164(sp)
    4bf8:	d8003115 	stw	zero,196(sp)
    4bfc:	0025883a 	mov	r18,zero
    4c00:	01401604 	movi	r5,88
    4c04:	01800244 	movi	r6,9
    4c08:	02800a84 	movi	r10,42
    4c0c:	02401b04 	movi	r9,108
    4c10:	ad400044 	addi	r21,r21,1
    4c14:	88bff804 	addi	r2,r17,-32
    4c18:	28830436 	bltu	r5,r2,582c <___vfprintf_internal_r+0xda0>
    4c1c:	100490ba 	slli	r2,r2,2
    4c20:	01000034 	movhi	r4,0
    4c24:	21130d04 	addi	r4,r4,19508
    4c28:	1105883a 	add	r2,r2,r4
    4c2c:	10800017 	ldw	r2,0(r2)
    4c30:	1000683a 	jmp	r2
    4c34:	0000574c 	andi	zero,zero,349
    4c38:	0000582c 	andhi	zero,zero,352
    4c3c:	0000582c 	andhi	zero,zero,352
    4c40:	0000576c 	andhi	zero,zero,349
    4c44:	0000582c 	andhi	zero,zero,352
    4c48:	0000582c 	andhi	zero,zero,352
    4c4c:	0000582c 	andhi	zero,zero,352
    4c50:	0000582c 	andhi	zero,zero,352
    4c54:	0000582c 	andhi	zero,zero,352
    4c58:	0000582c 	andhi	zero,zero,352
    4c5c:	00004ee0 	cmpeqi	zero,zero,315
    4c60:	00005688 	cmpgei	zero,zero,346
    4c64:	0000582c 	andhi	zero,zero,352
    4c68:	00004da8 	cmpgeui	zero,zero,310
    4c6c:	00004f08 	cmpgei	zero,zero,316
    4c70:	0000582c 	andhi	zero,zero,352
    4c74:	00004f48 	cmpgei	zero,zero,317
    4c78:	00004f54 	movui	zero,317
    4c7c:	00004f54 	movui	zero,317
    4c80:	00004f54 	movui	zero,317
    4c84:	00004f54 	movui	zero,317
    4c88:	00004f54 	movui	zero,317
    4c8c:	00004f54 	movui	zero,317
    4c90:	00004f54 	movui	zero,317
    4c94:	00004f54 	movui	zero,317
    4c98:	00004f54 	movui	zero,317
    4c9c:	0000582c 	andhi	zero,zero,352
    4ca0:	0000582c 	andhi	zero,zero,352
    4ca4:	0000582c 	andhi	zero,zero,352
    4ca8:	0000582c 	andhi	zero,zero,352
    4cac:	0000582c 	andhi	zero,zero,352
    4cb0:	0000582c 	andhi	zero,zero,352
    4cb4:	0000582c 	andhi	zero,zero,352
    4cb8:	0000582c 	andhi	zero,zero,352
    4cbc:	0000582c 	andhi	zero,zero,352
    4cc0:	0000582c 	andhi	zero,zero,352
    4cc4:	00004f88 	cmpgei	zero,zero,318
    4cc8:	00005044 	movi	zero,321
    4ccc:	0000582c 	andhi	zero,zero,352
    4cd0:	00005044 	movi	zero,321
    4cd4:	0000582c 	andhi	zero,zero,352
    4cd8:	0000582c 	andhi	zero,zero,352
    4cdc:	0000582c 	andhi	zero,zero,352
    4ce0:	0000582c 	andhi	zero,zero,352
    4ce4:	000050e4 	muli	zero,zero,323
    4ce8:	0000582c 	andhi	zero,zero,352
    4cec:	0000582c 	andhi	zero,zero,352
    4cf0:	000050f0 	cmpltui	zero,zero,323
    4cf4:	0000582c 	andhi	zero,zero,352
    4cf8:	0000582c 	andhi	zero,zero,352
    4cfc:	0000582c 	andhi	zero,zero,352
    4d00:	0000582c 	andhi	zero,zero,352
    4d04:	0000582c 	andhi	zero,zero,352
    4d08:	00005568 	cmpgeui	zero,zero,341
    4d0c:	0000582c 	andhi	zero,zero,352
    4d10:	0000582c 	andhi	zero,zero,352
    4d14:	000055c8 	cmpgei	zero,zero,343
    4d18:	0000582c 	andhi	zero,zero,352
    4d1c:	0000582c 	andhi	zero,zero,352
    4d20:	0000582c 	andhi	zero,zero,352
    4d24:	0000582c 	andhi	zero,zero,352
    4d28:	0000582c 	andhi	zero,zero,352
    4d2c:	0000582c 	andhi	zero,zero,352
    4d30:	0000582c 	andhi	zero,zero,352
    4d34:	0000582c 	andhi	zero,zero,352
    4d38:	0000582c 	andhi	zero,zero,352
    4d3c:	0000582c 	andhi	zero,zero,352
    4d40:	000057d8 	cmpnei	zero,zero,351
    4d44:	00005778 	rdprs	zero,zero,349
    4d48:	00005044 	movi	zero,321
    4d4c:	00005044 	movi	zero,321
    4d50:	00005044 	movi	zero,321
    4d54:	00005788 	cmpgei	zero,zero,350
    4d58:	00005778 	rdprs	zero,zero,349
    4d5c:	0000582c 	andhi	zero,zero,352
    4d60:	0000582c 	andhi	zero,zero,352
    4d64:	00005794 	movui	zero,350
    4d68:	0000582c 	andhi	zero,zero,352
    4d6c:	000057a4 	muli	zero,zero,350
    4d70:	00005678 	rdprs	zero,zero,345
    4d74:	00004db4 	movhi	zero,310
    4d78:	00005698 	cmpnei	zero,zero,346
    4d7c:	0000582c 	andhi	zero,zero,352
    4d80:	000056a4 	muli	zero,zero,346
    4d84:	0000582c 	andhi	zero,zero,352
    4d88:	00005700 	call	570 <main+0x280>
    4d8c:	0000582c 	andhi	zero,zero,352
    4d90:	0000582c 	andhi	zero,zero,352
    4d94:	00005710 	cmplti	zero,zero,348
    4d98:	d9003117 	ldw	r4,196(sp)
    4d9c:	d8802d15 	stw	r2,180(sp)
    4da0:	0109c83a 	sub	r4,zero,r4
    4da4:	d9003115 	stw	r4,196(sp)
    4da8:	94800114 	ori	r18,r18,4
    4dac:	ac400007 	ldb	r17,0(r21)
    4db0:	003f9706 	br	4c10 <___vfprintf_internal_r+0x184>
    4db4:	00800c04 	movi	r2,48
    4db8:	d9002d17 	ldw	r4,180(sp)
    4dbc:	d9402917 	ldw	r5,164(sp)
    4dc0:	d8802705 	stb	r2,156(sp)
    4dc4:	00801e04 	movi	r2,120
    4dc8:	d8802745 	stb	r2,157(sp)
    4dcc:	d8002785 	stb	zero,158(sp)
    4dd0:	20c00104 	addi	r3,r4,4
    4dd4:	24c00017 	ldw	r19,0(r4)
    4dd8:	002d883a 	mov	r22,zero
    4ddc:	90800094 	ori	r2,r18,2
    4de0:	28029a16 	blt	r5,zero,584c <___vfprintf_internal_r+0xdc0>
    4de4:	00bfdfc4 	movi	r2,-129
    4de8:	90a4703a 	and	r18,r18,r2
    4dec:	d8c02d15 	stw	r3,180(sp)
    4df0:	94800094 	ori	r18,r18,2
    4df4:	9802871e 	bne	r19,zero,5814 <___vfprintf_internal_r+0xd88>
    4df8:	00800074 	movhi	r2,1
    4dfc:	1093e104 	addi	r2,r2,20356
    4e00:	d8803915 	stw	r2,228(sp)
    4e04:	04401e04 	movi	r17,120
    4e08:	d8802917 	ldw	r2,164(sp)
    4e0c:	0039883a 	mov	fp,zero
    4e10:	1001e926 	beq	r2,zero,55b8 <___vfprintf_internal_r+0xb2c>
    4e14:	0027883a 	mov	r19,zero
    4e18:	002d883a 	mov	r22,zero
    4e1c:	00020506 	br	5634 <___vfprintf_internal_r+0xba8>
    4e20:	d9002c17 	ldw	r4,176(sp)
    4e24:	b80b883a 	mov	r5,r23
    4e28:	0006d5c0 	call	6d5c <__swsetup_r>
    4e2c:	1005ac1e 	bne	r2,zero,64e0 <___vfprintf_internal_r+0x1a54>
    4e30:	b880030b 	ldhu	r2,12(r23)
    4e34:	00c00284 	movi	r3,10
    4e38:	1080068c 	andi	r2,r2,26
    4e3c:	10ff3c1e 	bne	r2,r3,4b30 <___vfprintf_internal_r+0xa4>
    4e40:	b880038f 	ldh	r2,14(r23)
    4e44:	103f3a16 	blt	r2,zero,4b30 <___vfprintf_internal_r+0xa4>
    4e48:	d9c02d17 	ldw	r7,180(sp)
    4e4c:	d9002c17 	ldw	r4,176(sp)
    4e50:	a80d883a 	mov	r6,r21
    4e54:	b80b883a 	mov	r5,r23
    4e58:	0006ca00 	call	6ca0 <__sbprintf>
    4e5c:	00001106 	br	4ea4 <___vfprintf_internal_r+0x418>
    4e60:	d9002c17 	ldw	r4,176(sp)
    4e64:	d9801e04 	addi	r6,sp,120
    4e68:	b80b883a 	mov	r5,r23
    4e6c:	000c0880 	call	c088 <__sprint_r>
    4e70:	1000081e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    4e74:	da000404 	addi	r8,sp,16
    4e78:	003f5306 	br	4bc8 <___vfprintf_internal_r+0x13c>
    4e7c:	d8802017 	ldw	r2,128(sp)
    4e80:	10000426 	beq	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    4e84:	d9002c17 	ldw	r4,176(sp)
    4e88:	d9801e04 	addi	r6,sp,120
    4e8c:	b80b883a 	mov	r5,r23
    4e90:	000c0880 	call	c088 <__sprint_r>
    4e94:	b880030b 	ldhu	r2,12(r23)
    4e98:	1080100c 	andi	r2,r2,64
    4e9c:	1005901e 	bne	r2,zero,64e0 <___vfprintf_internal_r+0x1a54>
    4ea0:	d8802f17 	ldw	r2,188(sp)
    4ea4:	dfc04717 	ldw	ra,284(sp)
    4ea8:	df004617 	ldw	fp,280(sp)
    4eac:	ddc04517 	ldw	r23,276(sp)
    4eb0:	dd804417 	ldw	r22,272(sp)
    4eb4:	dd404317 	ldw	r21,268(sp)
    4eb8:	dd004217 	ldw	r20,264(sp)
    4ebc:	dcc04117 	ldw	r19,260(sp)
    4ec0:	dc804017 	ldw	r18,256(sp)
    4ec4:	dc403f17 	ldw	r17,252(sp)
    4ec8:	dc003e17 	ldw	r16,248(sp)
    4ecc:	dec04804 	addi	sp,sp,288
    4ed0:	f800283a 	ret
    4ed4:	d9002c17 	ldw	r4,176(sp)
    4ed8:	0008d300 	call	8d30 <__sinit>
    4edc:	003f0406 	br	4af0 <___vfprintf_internal_r+0x64>
    4ee0:	d8802d17 	ldw	r2,180(sp)
    4ee4:	d9002d17 	ldw	r4,180(sp)
    4ee8:	10800017 	ldw	r2,0(r2)
    4eec:	d8803115 	stw	r2,196(sp)
    4ef0:	20800104 	addi	r2,r4,4
    4ef4:	d9003117 	ldw	r4,196(sp)
    4ef8:	203fa716 	blt	r4,zero,4d98 <___vfprintf_internal_r+0x30c>
    4efc:	d8802d15 	stw	r2,180(sp)
    4f00:	ac400007 	ldb	r17,0(r21)
    4f04:	003f4206 	br	4c10 <___vfprintf_internal_r+0x184>
    4f08:	ac400007 	ldb	r17,0(r21)
    4f0c:	aac00044 	addi	r11,r21,1
    4f10:	8a872826 	beq	r17,r10,6bb4 <___vfprintf_internal_r+0x2128>
    4f14:	88bff404 	addi	r2,r17,-48
    4f18:	0009883a 	mov	r4,zero
    4f1c:	30867d36 	bltu	r6,r2,6914 <___vfprintf_internal_r+0x1e88>
    4f20:	5c400007 	ldb	r17,0(r11)
    4f24:	210002a4 	muli	r4,r4,10
    4f28:	5d400044 	addi	r21,r11,1
    4f2c:	a817883a 	mov	r11,r21
    4f30:	2089883a 	add	r4,r4,r2
    4f34:	88bff404 	addi	r2,r17,-48
    4f38:	30bff92e 	bgeu	r6,r2,4f20 <___vfprintf_internal_r+0x494>
    4f3c:	2005c916 	blt	r4,zero,6664 <___vfprintf_internal_r+0x1bd8>
    4f40:	d9002915 	stw	r4,164(sp)
    4f44:	003f3306 	br	4c14 <___vfprintf_internal_r+0x188>
    4f48:	94802014 	ori	r18,r18,128
    4f4c:	ac400007 	ldb	r17,0(r21)
    4f50:	003f2f06 	br	4c10 <___vfprintf_internal_r+0x184>
    4f54:	a809883a 	mov	r4,r21
    4f58:	d8003115 	stw	zero,196(sp)
    4f5c:	88bff404 	addi	r2,r17,-48
    4f60:	0017883a 	mov	r11,zero
    4f64:	24400007 	ldb	r17,0(r4)
    4f68:	5ac002a4 	muli	r11,r11,10
    4f6c:	ad400044 	addi	r21,r21,1
    4f70:	a809883a 	mov	r4,r21
    4f74:	12d7883a 	add	r11,r2,r11
    4f78:	88bff404 	addi	r2,r17,-48
    4f7c:	30bff92e 	bgeu	r6,r2,4f64 <___vfprintf_internal_r+0x4d8>
    4f80:	dac03115 	stw	r11,196(sp)
    4f84:	003f2306 	br	4c14 <___vfprintf_internal_r+0x188>
    4f88:	18c03fcc 	andi	r3,r3,255
    4f8c:	18072b1e 	bne	r3,zero,6c3c <___vfprintf_internal_r+0x21b0>
    4f90:	94800414 	ori	r18,r18,16
    4f94:	9080080c 	andi	r2,r18,32
    4f98:	10037b26 	beq	r2,zero,5d88 <___vfprintf_internal_r+0x12fc>
    4f9c:	d9402d17 	ldw	r5,180(sp)
    4fa0:	28800117 	ldw	r2,4(r5)
    4fa4:	2cc00017 	ldw	r19,0(r5)
    4fa8:	29400204 	addi	r5,r5,8
    4fac:	d9402d15 	stw	r5,180(sp)
    4fb0:	102d883a 	mov	r22,r2
    4fb4:	10044b16 	blt	r2,zero,60e4 <___vfprintf_internal_r+0x1658>
    4fb8:	d9402917 	ldw	r5,164(sp)
    4fbc:	df002783 	ldbu	fp,158(sp)
    4fc0:	2803bc16 	blt	r5,zero,5eb4 <___vfprintf_internal_r+0x1428>
    4fc4:	00ffdfc4 	movi	r3,-129
    4fc8:	9d84b03a 	or	r2,r19,r22
    4fcc:	90e4703a 	and	r18,r18,r3
    4fd0:	10017726 	beq	r2,zero,55b0 <___vfprintf_internal_r+0xb24>
    4fd4:	b0038326 	beq	r22,zero,5de4 <___vfprintf_internal_r+0x1358>
    4fd8:	dc402a15 	stw	r17,168(sp)
    4fdc:	dc001e04 	addi	r16,sp,120
    4fe0:	b023883a 	mov	r17,r22
    4fe4:	402d883a 	mov	r22,r8
    4fe8:	9809883a 	mov	r4,r19
    4fec:	880b883a 	mov	r5,r17
    4ff0:	01800284 	movi	r6,10
    4ff4:	000f883a 	mov	r7,zero
    4ff8:	000e4800 	call	e480 <__umoddi3>
    4ffc:	10800c04 	addi	r2,r2,48
    5000:	843fffc4 	addi	r16,r16,-1
    5004:	9809883a 	mov	r4,r19
    5008:	880b883a 	mov	r5,r17
    500c:	80800005 	stb	r2,0(r16)
    5010:	01800284 	movi	r6,10
    5014:	000f883a 	mov	r7,zero
    5018:	000df080 	call	df08 <__udivdi3>
    501c:	1027883a 	mov	r19,r2
    5020:	10c4b03a 	or	r2,r2,r3
    5024:	1823883a 	mov	r17,r3
    5028:	103fef1e 	bne	r2,zero,4fe8 <___vfprintf_internal_r+0x55c>
    502c:	d8c02817 	ldw	r3,160(sp)
    5030:	dc402a17 	ldw	r17,168(sp)
    5034:	b011883a 	mov	r8,r22
    5038:	1c07c83a 	sub	r3,r3,r16
    503c:	d8c02e15 	stw	r3,184(sp)
    5040:	00005906 	br	51a8 <___vfprintf_internal_r+0x71c>
    5044:	18c03fcc 	andi	r3,r3,255
    5048:	1806fa1e 	bne	r3,zero,6c34 <___vfprintf_internal_r+0x21a8>
    504c:	9080020c 	andi	r2,r18,8
    5050:	10048a26 	beq	r2,zero,627c <___vfprintf_internal_r+0x17f0>
    5054:	d8c02d17 	ldw	r3,180(sp)
    5058:	d9002d17 	ldw	r4,180(sp)
    505c:	d9402d17 	ldw	r5,180(sp)
    5060:	18c00017 	ldw	r3,0(r3)
    5064:	21000117 	ldw	r4,4(r4)
    5068:	29400204 	addi	r5,r5,8
    506c:	d8c03615 	stw	r3,216(sp)
    5070:	d9003815 	stw	r4,224(sp)
    5074:	d9402d15 	stw	r5,180(sp)
    5078:	d9003617 	ldw	r4,216(sp)
    507c:	d9403817 	ldw	r5,224(sp)
    5080:	da003d15 	stw	r8,244(sp)
    5084:	04000044 	movi	r16,1
    5088:	000bcac0 	call	bcac <__fpclassifyd>
    508c:	da003d17 	ldw	r8,244(sp)
    5090:	14041f1e 	bne	r2,r16,6110 <___vfprintf_internal_r+0x1684>
    5094:	d9003617 	ldw	r4,216(sp)
    5098:	d9403817 	ldw	r5,224(sp)
    509c:	000d883a 	mov	r6,zero
    50a0:	000f883a 	mov	r7,zero
    50a4:	000fcb00 	call	fcb0 <__ledf2>
    50a8:	da003d17 	ldw	r8,244(sp)
    50ac:	1005be16 	blt	r2,zero,67a8 <___vfprintf_internal_r+0x1d1c>
    50b0:	df002783 	ldbu	fp,158(sp)
    50b4:	008011c4 	movi	r2,71
    50b8:	1445330e 	bge	r2,r17,6588 <___vfprintf_internal_r+0x1afc>
    50bc:	04000074 	movhi	r16,1
    50c0:	8413d904 	addi	r16,r16,20324
    50c4:	00c000c4 	movi	r3,3
    50c8:	00bfdfc4 	movi	r2,-129
    50cc:	d8c02a15 	stw	r3,168(sp)
    50d0:	90a4703a 	and	r18,r18,r2
    50d4:	d8c02e15 	stw	r3,184(sp)
    50d8:	d8002915 	stw	zero,164(sp)
    50dc:	d8003215 	stw	zero,200(sp)
    50e0:	00003706 	br	51c0 <___vfprintf_internal_r+0x734>
    50e4:	94800214 	ori	r18,r18,8
    50e8:	ac400007 	ldb	r17,0(r21)
    50ec:	003ec806 	br	4c10 <___vfprintf_internal_r+0x184>
    50f0:	18c03fcc 	andi	r3,r3,255
    50f4:	1806db1e 	bne	r3,zero,6c64 <___vfprintf_internal_r+0x21d8>
    50f8:	94800414 	ori	r18,r18,16
    50fc:	9080080c 	andi	r2,r18,32
    5100:	1002d826 	beq	r2,zero,5c64 <___vfprintf_internal_r+0x11d8>
    5104:	d9402d17 	ldw	r5,180(sp)
    5108:	d8c02917 	ldw	r3,164(sp)
    510c:	d8002785 	stb	zero,158(sp)
    5110:	28800204 	addi	r2,r5,8
    5114:	2cc00017 	ldw	r19,0(r5)
    5118:	2d800117 	ldw	r22,4(r5)
    511c:	18048f16 	blt	r3,zero,635c <___vfprintf_internal_r+0x18d0>
    5120:	013fdfc4 	movi	r4,-129
    5124:	9d86b03a 	or	r3,r19,r22
    5128:	d8802d15 	stw	r2,180(sp)
    512c:	9124703a 	and	r18,r18,r4
    5130:	1802d91e 	bne	r3,zero,5c98 <___vfprintf_internal_r+0x120c>
    5134:	d8c02917 	ldw	r3,164(sp)
    5138:	0039883a 	mov	fp,zero
    513c:	1805c326 	beq	r3,zero,684c <___vfprintf_internal_r+0x1dc0>
    5140:	0027883a 	mov	r19,zero
    5144:	002d883a 	mov	r22,zero
    5148:	dc001e04 	addi	r16,sp,120
    514c:	9806d0fa 	srli	r3,r19,3
    5150:	b008977a 	slli	r4,r22,29
    5154:	b02cd0fa 	srli	r22,r22,3
    5158:	9cc001cc 	andi	r19,r19,7
    515c:	98800c04 	addi	r2,r19,48
    5160:	843fffc4 	addi	r16,r16,-1
    5164:	20e6b03a 	or	r19,r4,r3
    5168:	80800005 	stb	r2,0(r16)
    516c:	9d86b03a 	or	r3,r19,r22
    5170:	183ff61e 	bne	r3,zero,514c <___vfprintf_internal_r+0x6c0>
    5174:	90c0004c 	andi	r3,r18,1
    5178:	18013b26 	beq	r3,zero,5668 <___vfprintf_internal_r+0xbdc>
    517c:	10803fcc 	andi	r2,r2,255
    5180:	1080201c 	xori	r2,r2,128
    5184:	10bfe004 	addi	r2,r2,-128
    5188:	00c00c04 	movi	r3,48
    518c:	10c13626 	beq	r2,r3,5668 <___vfprintf_internal_r+0xbdc>
    5190:	80ffffc5 	stb	r3,-1(r16)
    5194:	d8c02817 	ldw	r3,160(sp)
    5198:	80bfffc4 	addi	r2,r16,-1
    519c:	1021883a 	mov	r16,r2
    51a0:	1887c83a 	sub	r3,r3,r2
    51a4:	d8c02e15 	stw	r3,184(sp)
    51a8:	d8802e17 	ldw	r2,184(sp)
    51ac:	d9002917 	ldw	r4,164(sp)
    51b0:	1100010e 	bge	r2,r4,51b8 <___vfprintf_internal_r+0x72c>
    51b4:	2005883a 	mov	r2,r4
    51b8:	d8802a15 	stw	r2,168(sp)
    51bc:	d8003215 	stw	zero,200(sp)
    51c0:	e7003fcc 	andi	fp,fp,255
    51c4:	e700201c 	xori	fp,fp,128
    51c8:	e73fe004 	addi	fp,fp,-128
    51cc:	e0000326 	beq	fp,zero,51dc <___vfprintf_internal_r+0x750>
    51d0:	d8c02a17 	ldw	r3,168(sp)
    51d4:	18c00044 	addi	r3,r3,1
    51d8:	d8c02a15 	stw	r3,168(sp)
    51dc:	90c0008c 	andi	r3,r18,2
    51e0:	d8c02b15 	stw	r3,172(sp)
    51e4:	18000326 	beq	r3,zero,51f4 <___vfprintf_internal_r+0x768>
    51e8:	d8c02a17 	ldw	r3,168(sp)
    51ec:	18c00084 	addi	r3,r3,2
    51f0:	d8c02a15 	stw	r3,168(sp)
    51f4:	90c0210c 	andi	r3,r18,132
    51f8:	d8c03015 	stw	r3,192(sp)
    51fc:	1801a31e 	bne	r3,zero,588c <___vfprintf_internal_r+0xe00>
    5200:	d9003117 	ldw	r4,196(sp)
    5204:	d8c02a17 	ldw	r3,168(sp)
    5208:	20e7c83a 	sub	r19,r4,r3
    520c:	04c19f0e 	bge	zero,r19,588c <___vfprintf_internal_r+0xe00>
    5210:	02400404 	movi	r9,16
    5214:	d8c02017 	ldw	r3,128(sp)
    5218:	d8801f17 	ldw	r2,124(sp)
    521c:	4cc50d0e 	bge	r9,r19,6654 <___vfprintf_internal_r+0x1bc8>
    5220:	01400074 	movhi	r5,1
    5224:	2953ec84 	addi	r5,r5,20402
    5228:	dc403b15 	stw	r17,236(sp)
    522c:	d9403515 	stw	r5,212(sp)
    5230:	9823883a 	mov	r17,r19
    5234:	482d883a 	mov	r22,r9
    5238:	9027883a 	mov	r19,r18
    523c:	070001c4 	movi	fp,7
    5240:	8025883a 	mov	r18,r16
    5244:	dc002c17 	ldw	r16,176(sp)
    5248:	00000306 	br	5258 <___vfprintf_internal_r+0x7cc>
    524c:	8c7ffc04 	addi	r17,r17,-16
    5250:	42000204 	addi	r8,r8,8
    5254:	b440130e 	bge	r22,r17,52a4 <___vfprintf_internal_r+0x818>
    5258:	01000074 	movhi	r4,1
    525c:	18c00404 	addi	r3,r3,16
    5260:	10800044 	addi	r2,r2,1
    5264:	2113ec84 	addi	r4,r4,20402
    5268:	41000015 	stw	r4,0(r8)
    526c:	45800115 	stw	r22,4(r8)
    5270:	d8c02015 	stw	r3,128(sp)
    5274:	d8801f15 	stw	r2,124(sp)
    5278:	e0bff40e 	bge	fp,r2,524c <___vfprintf_internal_r+0x7c0>
    527c:	d9801e04 	addi	r6,sp,120
    5280:	b80b883a 	mov	r5,r23
    5284:	8009883a 	mov	r4,r16
    5288:	000c0880 	call	c088 <__sprint_r>
    528c:	103f011e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5290:	8c7ffc04 	addi	r17,r17,-16
    5294:	d8c02017 	ldw	r3,128(sp)
    5298:	d8801f17 	ldw	r2,124(sp)
    529c:	da000404 	addi	r8,sp,16
    52a0:	b47fed16 	blt	r22,r17,5258 <___vfprintf_internal_r+0x7cc>
    52a4:	9021883a 	mov	r16,r18
    52a8:	9825883a 	mov	r18,r19
    52ac:	8827883a 	mov	r19,r17
    52b0:	dc403b17 	ldw	r17,236(sp)
    52b4:	d9403517 	ldw	r5,212(sp)
    52b8:	98c7883a 	add	r3,r19,r3
    52bc:	10800044 	addi	r2,r2,1
    52c0:	41400015 	stw	r5,0(r8)
    52c4:	44c00115 	stw	r19,4(r8)
    52c8:	d8c02015 	stw	r3,128(sp)
    52cc:	d8801f15 	stw	r2,124(sp)
    52d0:	010001c4 	movi	r4,7
    52d4:	2082a316 	blt	r4,r2,5d64 <___vfprintf_internal_r+0x12d8>
    52d8:	df002787 	ldb	fp,158(sp)
    52dc:	42000204 	addi	r8,r8,8
    52e0:	e0000c26 	beq	fp,zero,5314 <___vfprintf_internal_r+0x888>
    52e4:	d8801f17 	ldw	r2,124(sp)
    52e8:	d9002784 	addi	r4,sp,158
    52ec:	18c00044 	addi	r3,r3,1
    52f0:	10800044 	addi	r2,r2,1
    52f4:	41000015 	stw	r4,0(r8)
    52f8:	01000044 	movi	r4,1
    52fc:	41000115 	stw	r4,4(r8)
    5300:	d8c02015 	stw	r3,128(sp)
    5304:	d8801f15 	stw	r2,124(sp)
    5308:	010001c4 	movi	r4,7
    530c:	20823c16 	blt	r4,r2,5c00 <___vfprintf_internal_r+0x1174>
    5310:	42000204 	addi	r8,r8,8
    5314:	d8802b17 	ldw	r2,172(sp)
    5318:	10000c26 	beq	r2,zero,534c <___vfprintf_internal_r+0x8c0>
    531c:	d8801f17 	ldw	r2,124(sp)
    5320:	d9002704 	addi	r4,sp,156
    5324:	18c00084 	addi	r3,r3,2
    5328:	10800044 	addi	r2,r2,1
    532c:	41000015 	stw	r4,0(r8)
    5330:	01000084 	movi	r4,2
    5334:	41000115 	stw	r4,4(r8)
    5338:	d8c02015 	stw	r3,128(sp)
    533c:	d8801f15 	stw	r2,124(sp)
    5340:	010001c4 	movi	r4,7
    5344:	20823616 	blt	r4,r2,5c20 <___vfprintf_internal_r+0x1194>
    5348:	42000204 	addi	r8,r8,8
    534c:	d9003017 	ldw	r4,192(sp)
    5350:	00802004 	movi	r2,128
    5354:	20819926 	beq	r4,r2,59bc <___vfprintf_internal_r+0xf30>
    5358:	d9402917 	ldw	r5,164(sp)
    535c:	d8802e17 	ldw	r2,184(sp)
    5360:	28adc83a 	sub	r22,r5,r2
    5364:	0580310e 	bge	zero,r22,542c <___vfprintf_internal_r+0x9a0>
    5368:	07000404 	movi	fp,16
    536c:	d8801f17 	ldw	r2,124(sp)
    5370:	e584140e 	bge	fp,r22,63c4 <___vfprintf_internal_r+0x1938>
    5374:	01400074 	movhi	r5,1
    5378:	2953e884 	addi	r5,r5,20386
    537c:	dc402915 	stw	r17,164(sp)
    5380:	d9402b15 	stw	r5,172(sp)
    5384:	b023883a 	mov	r17,r22
    5388:	04c001c4 	movi	r19,7
    538c:	a82d883a 	mov	r22,r21
    5390:	902b883a 	mov	r21,r18
    5394:	8025883a 	mov	r18,r16
    5398:	dc002c17 	ldw	r16,176(sp)
    539c:	00000306 	br	53ac <___vfprintf_internal_r+0x920>
    53a0:	8c7ffc04 	addi	r17,r17,-16
    53a4:	42000204 	addi	r8,r8,8
    53a8:	e440110e 	bge	fp,r17,53f0 <___vfprintf_internal_r+0x964>
    53ac:	18c00404 	addi	r3,r3,16
    53b0:	10800044 	addi	r2,r2,1
    53b4:	45000015 	stw	r20,0(r8)
    53b8:	47000115 	stw	fp,4(r8)
    53bc:	d8c02015 	stw	r3,128(sp)
    53c0:	d8801f15 	stw	r2,124(sp)
    53c4:	98bff60e 	bge	r19,r2,53a0 <___vfprintf_internal_r+0x914>
    53c8:	d9801e04 	addi	r6,sp,120
    53cc:	b80b883a 	mov	r5,r23
    53d0:	8009883a 	mov	r4,r16
    53d4:	000c0880 	call	c088 <__sprint_r>
    53d8:	103eae1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    53dc:	8c7ffc04 	addi	r17,r17,-16
    53e0:	d8c02017 	ldw	r3,128(sp)
    53e4:	d8801f17 	ldw	r2,124(sp)
    53e8:	da000404 	addi	r8,sp,16
    53ec:	e47fef16 	blt	fp,r17,53ac <___vfprintf_internal_r+0x920>
    53f0:	9021883a 	mov	r16,r18
    53f4:	a825883a 	mov	r18,r21
    53f8:	b02b883a 	mov	r21,r22
    53fc:	882d883a 	mov	r22,r17
    5400:	dc402917 	ldw	r17,164(sp)
    5404:	d9002b17 	ldw	r4,172(sp)
    5408:	1d87883a 	add	r3,r3,r22
    540c:	10800044 	addi	r2,r2,1
    5410:	41000015 	stw	r4,0(r8)
    5414:	45800115 	stw	r22,4(r8)
    5418:	d8c02015 	stw	r3,128(sp)
    541c:	d8801f15 	stw	r2,124(sp)
    5420:	010001c4 	movi	r4,7
    5424:	2081ee16 	blt	r4,r2,5be0 <___vfprintf_internal_r+0x1154>
    5428:	42000204 	addi	r8,r8,8
    542c:	9080400c 	andi	r2,r18,256
    5430:	1001181e 	bne	r2,zero,5894 <___vfprintf_internal_r+0xe08>
    5434:	d9402e17 	ldw	r5,184(sp)
    5438:	d8801f17 	ldw	r2,124(sp)
    543c:	44000015 	stw	r16,0(r8)
    5440:	1947883a 	add	r3,r3,r5
    5444:	10800044 	addi	r2,r2,1
    5448:	41400115 	stw	r5,4(r8)
    544c:	d8c02015 	stw	r3,128(sp)
    5450:	d8801f15 	stw	r2,124(sp)
    5454:	010001c4 	movi	r4,7
    5458:	2081d316 	blt	r4,r2,5ba8 <___vfprintf_internal_r+0x111c>
    545c:	42000204 	addi	r8,r8,8
    5460:	9480010c 	andi	r18,r18,4
    5464:	90003226 	beq	r18,zero,5530 <___vfprintf_internal_r+0xaa4>
    5468:	d9403117 	ldw	r5,196(sp)
    546c:	d8802a17 	ldw	r2,168(sp)
    5470:	28a1c83a 	sub	r16,r5,r2
    5474:	04002e0e 	bge	zero,r16,5530 <___vfprintf_internal_r+0xaa4>
    5478:	04400404 	movi	r17,16
    547c:	d8801f17 	ldw	r2,124(sp)
    5480:	8c04a20e 	bge	r17,r16,670c <___vfprintf_internal_r+0x1c80>
    5484:	01400074 	movhi	r5,1
    5488:	2953ec84 	addi	r5,r5,20402
    548c:	d9403515 	stw	r5,212(sp)
    5490:	048001c4 	movi	r18,7
    5494:	dcc02c17 	ldw	r19,176(sp)
    5498:	00000306 	br	54a8 <___vfprintf_internal_r+0xa1c>
    549c:	843ffc04 	addi	r16,r16,-16
    54a0:	42000204 	addi	r8,r8,8
    54a4:	8c00130e 	bge	r17,r16,54f4 <___vfprintf_internal_r+0xa68>
    54a8:	01000074 	movhi	r4,1
    54ac:	18c00404 	addi	r3,r3,16
    54b0:	10800044 	addi	r2,r2,1
    54b4:	2113ec84 	addi	r4,r4,20402
    54b8:	41000015 	stw	r4,0(r8)
    54bc:	44400115 	stw	r17,4(r8)
    54c0:	d8c02015 	stw	r3,128(sp)
    54c4:	d8801f15 	stw	r2,124(sp)
    54c8:	90bff40e 	bge	r18,r2,549c <___vfprintf_internal_r+0xa10>
    54cc:	d9801e04 	addi	r6,sp,120
    54d0:	b80b883a 	mov	r5,r23
    54d4:	9809883a 	mov	r4,r19
    54d8:	000c0880 	call	c088 <__sprint_r>
    54dc:	103e6d1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    54e0:	843ffc04 	addi	r16,r16,-16
    54e4:	d8c02017 	ldw	r3,128(sp)
    54e8:	d8801f17 	ldw	r2,124(sp)
    54ec:	da000404 	addi	r8,sp,16
    54f0:	8c3fed16 	blt	r17,r16,54a8 <___vfprintf_internal_r+0xa1c>
    54f4:	d9403517 	ldw	r5,212(sp)
    54f8:	1c07883a 	add	r3,r3,r16
    54fc:	10800044 	addi	r2,r2,1
    5500:	41400015 	stw	r5,0(r8)
    5504:	44000115 	stw	r16,4(r8)
    5508:	d8c02015 	stw	r3,128(sp)
    550c:	d8801f15 	stw	r2,124(sp)
    5510:	010001c4 	movi	r4,7
    5514:	2080060e 	bge	r4,r2,5530 <___vfprintf_internal_r+0xaa4>
    5518:	d9002c17 	ldw	r4,176(sp)
    551c:	d9801e04 	addi	r6,sp,120
    5520:	b80b883a 	mov	r5,r23
    5524:	000c0880 	call	c088 <__sprint_r>
    5528:	103e5a1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    552c:	d8c02017 	ldw	r3,128(sp)
    5530:	d8803117 	ldw	r2,196(sp)
    5534:	d9002a17 	ldw	r4,168(sp)
    5538:	1100010e 	bge	r2,r4,5540 <___vfprintf_internal_r+0xab4>
    553c:	2005883a 	mov	r2,r4
    5540:	d9402f17 	ldw	r5,188(sp)
    5544:	288b883a 	add	r5,r5,r2
    5548:	d9402f15 	stw	r5,188(sp)
    554c:	18019e1e 	bne	r3,zero,5bc8 <___vfprintf_internal_r+0x113c>
    5550:	a8800007 	ldb	r2,0(r21)
    5554:	d8001f15 	stw	zero,124(sp)
    5558:	da000404 	addi	r8,sp,16
    555c:	103d851e 	bne	r2,zero,4b74 <___vfprintf_internal_r+0xe8>
    5560:	a821883a 	mov	r16,r21
    5564:	003d9b06 	br	4bd4 <___vfprintf_internal_r+0x148>
    5568:	18c03fcc 	andi	r3,r3,255
    556c:	1805c11e 	bne	r3,zero,6c74 <___vfprintf_internal_r+0x21e8>
    5570:	94800414 	ori	r18,r18,16
    5574:	9080080c 	andi	r2,r18,32
    5578:	10020c26 	beq	r2,zero,5dac <___vfprintf_internal_r+0x1320>
    557c:	d8802d17 	ldw	r2,180(sp)
    5580:	d9002917 	ldw	r4,164(sp)
    5584:	d8002785 	stb	zero,158(sp)
    5588:	10c00204 	addi	r3,r2,8
    558c:	14c00017 	ldw	r19,0(r2)
    5590:	15800117 	ldw	r22,4(r2)
    5594:	20040f16 	blt	r4,zero,65d4 <___vfprintf_internal_r+0x1b48>
    5598:	013fdfc4 	movi	r4,-129
    559c:	9d84b03a 	or	r2,r19,r22
    55a0:	d8c02d15 	stw	r3,180(sp)
    55a4:	9124703a 	and	r18,r18,r4
    55a8:	0039883a 	mov	fp,zero
    55ac:	103e891e 	bne	r2,zero,4fd4 <___vfprintf_internal_r+0x548>
    55b0:	d9002917 	ldw	r4,164(sp)
    55b4:	2002c11e 	bne	r4,zero,60bc <___vfprintf_internal_r+0x1630>
    55b8:	d8002915 	stw	zero,164(sp)
    55bc:	d8002e15 	stw	zero,184(sp)
    55c0:	dc001e04 	addi	r16,sp,120
    55c4:	003ef806 	br	51a8 <___vfprintf_internal_r+0x71c>
    55c8:	18c03fcc 	andi	r3,r3,255
    55cc:	18059d1e 	bne	r3,zero,6c44 <___vfprintf_internal_r+0x21b8>
    55d0:	01400074 	movhi	r5,1
    55d4:	2953dc04 	addi	r5,r5,20336
    55d8:	d9403915 	stw	r5,228(sp)
    55dc:	9080080c 	andi	r2,r18,32
    55e0:	10005226 	beq	r2,zero,572c <___vfprintf_internal_r+0xca0>
    55e4:	d8802d17 	ldw	r2,180(sp)
    55e8:	14c00017 	ldw	r19,0(r2)
    55ec:	15800117 	ldw	r22,4(r2)
    55f0:	10800204 	addi	r2,r2,8
    55f4:	d8802d15 	stw	r2,180(sp)
    55f8:	9080004c 	andi	r2,r18,1
    55fc:	10019026 	beq	r2,zero,5c40 <___vfprintf_internal_r+0x11b4>
    5600:	9d84b03a 	or	r2,r19,r22
    5604:	10036926 	beq	r2,zero,63ac <___vfprintf_internal_r+0x1920>
    5608:	d8c02917 	ldw	r3,164(sp)
    560c:	00800c04 	movi	r2,48
    5610:	d8802705 	stb	r2,156(sp)
    5614:	dc402745 	stb	r17,157(sp)
    5618:	d8002785 	stb	zero,158(sp)
    561c:	90800094 	ori	r2,r18,2
    5620:	18045d16 	blt	r3,zero,6798 <___vfprintf_internal_r+0x1d0c>
    5624:	00bfdfc4 	movi	r2,-129
    5628:	90a4703a 	and	r18,r18,r2
    562c:	94800094 	ori	r18,r18,2
    5630:	0039883a 	mov	fp,zero
    5634:	d9003917 	ldw	r4,228(sp)
    5638:	dc001e04 	addi	r16,sp,120
    563c:	988003cc 	andi	r2,r19,15
    5640:	b006973a 	slli	r3,r22,28
    5644:	2085883a 	add	r2,r4,r2
    5648:	9826d13a 	srli	r19,r19,4
    564c:	10800003 	ldbu	r2,0(r2)
    5650:	b02cd13a 	srli	r22,r22,4
    5654:	843fffc4 	addi	r16,r16,-1
    5658:	1ce6b03a 	or	r19,r3,r19
    565c:	80800005 	stb	r2,0(r16)
    5660:	9d84b03a 	or	r2,r19,r22
    5664:	103ff51e 	bne	r2,zero,563c <___vfprintf_internal_r+0xbb0>
    5668:	d8c02817 	ldw	r3,160(sp)
    566c:	1c07c83a 	sub	r3,r3,r16
    5670:	d8c02e15 	stw	r3,184(sp)
    5674:	003ecc06 	br	51a8 <___vfprintf_internal_r+0x71c>
    5678:	18c03fcc 	andi	r3,r3,255
    567c:	183e9f26 	beq	r3,zero,50fc <___vfprintf_internal_r+0x670>
    5680:	d9c02785 	stb	r7,158(sp)
    5684:	003e9d06 	br	50fc <___vfprintf_internal_r+0x670>
    5688:	00c00044 	movi	r3,1
    568c:	01c00ac4 	movi	r7,43
    5690:	ac400007 	ldb	r17,0(r21)
    5694:	003d5e06 	br	4c10 <___vfprintf_internal_r+0x184>
    5698:	94800814 	ori	r18,r18,32
    569c:	ac400007 	ldb	r17,0(r21)
    56a0:	003d5b06 	br	4c10 <___vfprintf_internal_r+0x184>
    56a4:	d8c02d17 	ldw	r3,180(sp)
    56a8:	d8002785 	stb	zero,158(sp)
    56ac:	1c000017 	ldw	r16,0(r3)
    56b0:	1cc00104 	addi	r19,r3,4
    56b4:	80041926 	beq	r16,zero,671c <___vfprintf_internal_r+0x1c90>
    56b8:	d9002917 	ldw	r4,164(sp)
    56bc:	2003d016 	blt	r4,zero,6600 <___vfprintf_internal_r+0x1b74>
    56c0:	200d883a 	mov	r6,r4
    56c4:	000b883a 	mov	r5,zero
    56c8:	8009883a 	mov	r4,r16
    56cc:	da003d15 	stw	r8,244(sp)
    56d0:	000a29c0 	call	a29c <memchr>
    56d4:	da003d17 	ldw	r8,244(sp)
    56d8:	10045426 	beq	r2,zero,682c <___vfprintf_internal_r+0x1da0>
    56dc:	1405c83a 	sub	r2,r2,r16
    56e0:	d8802e15 	stw	r2,184(sp)
    56e4:	1003cc16 	blt	r2,zero,6618 <___vfprintf_internal_r+0x1b8c>
    56e8:	df002783 	ldbu	fp,158(sp)
    56ec:	d8802a15 	stw	r2,168(sp)
    56f0:	dcc02d15 	stw	r19,180(sp)
    56f4:	d8002915 	stw	zero,164(sp)
    56f8:	d8003215 	stw	zero,200(sp)
    56fc:	003eb006 	br	51c0 <___vfprintf_internal_r+0x734>
    5700:	18c03fcc 	andi	r3,r3,255
    5704:	183f9b26 	beq	r3,zero,5574 <___vfprintf_internal_r+0xae8>
    5708:	d9c02785 	stb	r7,158(sp)
    570c:	003f9906 	br	5574 <___vfprintf_internal_r+0xae8>
    5710:	18c03fcc 	andi	r3,r3,255
    5714:	1805551e 	bne	r3,zero,6c6c <___vfprintf_internal_r+0x21e0>
    5718:	01400074 	movhi	r5,1
    571c:	2953e104 	addi	r5,r5,20356
    5720:	d9403915 	stw	r5,228(sp)
    5724:	9080080c 	andi	r2,r18,32
    5728:	103fae1e 	bne	r2,zero,55e4 <___vfprintf_internal_r+0xb58>
    572c:	9080040c 	andi	r2,r18,16
    5730:	1002de26 	beq	r2,zero,62ac <___vfprintf_internal_r+0x1820>
    5734:	d8c02d17 	ldw	r3,180(sp)
    5738:	002d883a 	mov	r22,zero
    573c:	1cc00017 	ldw	r19,0(r3)
    5740:	18c00104 	addi	r3,r3,4
    5744:	d8c02d15 	stw	r3,180(sp)
    5748:	003fab06 	br	55f8 <___vfprintf_internal_r+0xb6c>
    574c:	38803fcc 	andi	r2,r7,255
    5750:	1080201c 	xori	r2,r2,128
    5754:	10bfe004 	addi	r2,r2,-128
    5758:	1002d21e 	bne	r2,zero,62a4 <___vfprintf_internal_r+0x1818>
    575c:	00c00044 	movi	r3,1
    5760:	01c00804 	movi	r7,32
    5764:	ac400007 	ldb	r17,0(r21)
    5768:	003d2906 	br	4c10 <___vfprintf_internal_r+0x184>
    576c:	94800054 	ori	r18,r18,1
    5770:	ac400007 	ldb	r17,0(r21)
    5774:	003d2606 	br	4c10 <___vfprintf_internal_r+0x184>
    5778:	18c03fcc 	andi	r3,r3,255
    577c:	183e0526 	beq	r3,zero,4f94 <___vfprintf_internal_r+0x508>
    5780:	d9c02785 	stb	r7,158(sp)
    5784:	003e0306 	br	4f94 <___vfprintf_internal_r+0x508>
    5788:	94801014 	ori	r18,r18,64
    578c:	ac400007 	ldb	r17,0(r21)
    5790:	003d1f06 	br	4c10 <___vfprintf_internal_r+0x184>
    5794:	ac400007 	ldb	r17,0(r21)
    5798:	8a438726 	beq	r17,r9,65b8 <___vfprintf_internal_r+0x1b2c>
    579c:	94800414 	ori	r18,r18,16
    57a0:	003d1b06 	br	4c10 <___vfprintf_internal_r+0x184>
    57a4:	18c03fcc 	andi	r3,r3,255
    57a8:	1805341e 	bne	r3,zero,6c7c <___vfprintf_internal_r+0x21f0>
    57ac:	9080080c 	andi	r2,r18,32
    57b0:	1002cd26 	beq	r2,zero,62e8 <___vfprintf_internal_r+0x185c>
    57b4:	d9402d17 	ldw	r5,180(sp)
    57b8:	d9002f17 	ldw	r4,188(sp)
    57bc:	28800017 	ldw	r2,0(r5)
    57c0:	2007d7fa 	srai	r3,r4,31
    57c4:	29400104 	addi	r5,r5,4
    57c8:	d9402d15 	stw	r5,180(sp)
    57cc:	11000015 	stw	r4,0(r2)
    57d0:	10c00115 	stw	r3,4(r2)
    57d4:	003ce506 	br	4b6c <___vfprintf_internal_r+0xe0>
    57d8:	d8c02d17 	ldw	r3,180(sp)
    57dc:	d9002d17 	ldw	r4,180(sp)
    57e0:	d8002785 	stb	zero,158(sp)
    57e4:	18800017 	ldw	r2,0(r3)
    57e8:	21000104 	addi	r4,r4,4
    57ec:	00c00044 	movi	r3,1
    57f0:	d8c02a15 	stw	r3,168(sp)
    57f4:	d8801405 	stb	r2,80(sp)
    57f8:	d9002d15 	stw	r4,180(sp)
    57fc:	d8c02e15 	stw	r3,184(sp)
    5800:	d8002915 	stw	zero,164(sp)
    5804:	d8003215 	stw	zero,200(sp)
    5808:	dc001404 	addi	r16,sp,80
    580c:	0039883a 	mov	fp,zero
    5810:	003e7206 	br	51dc <___vfprintf_internal_r+0x750>
    5814:	01000074 	movhi	r4,1
    5818:	2113e104 	addi	r4,r4,20356
    581c:	0039883a 	mov	fp,zero
    5820:	d9003915 	stw	r4,228(sp)
    5824:	04401e04 	movi	r17,120
    5828:	003f8206 	br	5634 <___vfprintf_internal_r+0xba8>
    582c:	18c03fcc 	andi	r3,r3,255
    5830:	1805061e 	bne	r3,zero,6c4c <___vfprintf_internal_r+0x21c0>
    5834:	883d9126 	beq	r17,zero,4e7c <___vfprintf_internal_r+0x3f0>
    5838:	00c00044 	movi	r3,1
    583c:	d8c02a15 	stw	r3,168(sp)
    5840:	dc401405 	stb	r17,80(sp)
    5844:	d8002785 	stb	zero,158(sp)
    5848:	003fec06 	br	57fc <___vfprintf_internal_r+0xd70>
    584c:	01400074 	movhi	r5,1
    5850:	2953e104 	addi	r5,r5,20356
    5854:	d9403915 	stw	r5,228(sp)
    5858:	d8c02d15 	stw	r3,180(sp)
    585c:	1025883a 	mov	r18,r2
    5860:	04401e04 	movi	r17,120
    5864:	9d84b03a 	or	r2,r19,r22
    5868:	1000fc1e 	bne	r2,zero,5c5c <___vfprintf_internal_r+0x11d0>
    586c:	0039883a 	mov	fp,zero
    5870:	00800084 	movi	r2,2
    5874:	10803fcc 	andi	r2,r2,255
    5878:	00c00044 	movi	r3,1
    587c:	10c20f26 	beq	r2,r3,60bc <___vfprintf_internal_r+0x1630>
    5880:	00c00084 	movi	r3,2
    5884:	10fd6326 	beq	r2,r3,4e14 <___vfprintf_internal_r+0x388>
    5888:	003e2d06 	br	5140 <___vfprintf_internal_r+0x6b4>
    588c:	d8c02017 	ldw	r3,128(sp)
    5890:	003e9306 	br	52e0 <___vfprintf_internal_r+0x854>
    5894:	00801944 	movi	r2,101
    5898:	14407e0e 	bge	r2,r17,5a94 <___vfprintf_internal_r+0x1008>
    589c:	d9003617 	ldw	r4,216(sp)
    58a0:	d9403817 	ldw	r5,224(sp)
    58a4:	000d883a 	mov	r6,zero
    58a8:	000f883a 	mov	r7,zero
    58ac:	d8c03c15 	stw	r3,240(sp)
    58b0:	da003d15 	stw	r8,244(sp)
    58b4:	000fb4c0 	call	fb4c <__eqdf2>
    58b8:	d8c03c17 	ldw	r3,240(sp)
    58bc:	da003d17 	ldw	r8,244(sp)
    58c0:	1000f71e 	bne	r2,zero,5ca0 <___vfprintf_internal_r+0x1214>
    58c4:	d8801f17 	ldw	r2,124(sp)
    58c8:	01000074 	movhi	r4,1
    58cc:	2113e804 	addi	r4,r4,20384
    58d0:	18c00044 	addi	r3,r3,1
    58d4:	10800044 	addi	r2,r2,1
    58d8:	41000015 	stw	r4,0(r8)
    58dc:	01000044 	movi	r4,1
    58e0:	41000115 	stw	r4,4(r8)
    58e4:	d8c02015 	stw	r3,128(sp)
    58e8:	d8801f15 	stw	r2,124(sp)
    58ec:	010001c4 	movi	r4,7
    58f0:	2082b816 	blt	r4,r2,63d4 <___vfprintf_internal_r+0x1948>
    58f4:	42000204 	addi	r8,r8,8
    58f8:	d8802617 	ldw	r2,152(sp)
    58fc:	d9403317 	ldw	r5,204(sp)
    5900:	11400216 	blt	r2,r5,590c <___vfprintf_internal_r+0xe80>
    5904:	9080004c 	andi	r2,r18,1
    5908:	103ed526 	beq	r2,zero,5460 <___vfprintf_internal_r+0x9d4>
    590c:	d8803717 	ldw	r2,220(sp)
    5910:	d9003417 	ldw	r4,208(sp)
    5914:	d9403717 	ldw	r5,220(sp)
    5918:	1887883a 	add	r3,r3,r2
    591c:	d8801f17 	ldw	r2,124(sp)
    5920:	41000015 	stw	r4,0(r8)
    5924:	41400115 	stw	r5,4(r8)
    5928:	10800044 	addi	r2,r2,1
    592c:	d8c02015 	stw	r3,128(sp)
    5930:	d8801f15 	stw	r2,124(sp)
    5934:	010001c4 	movi	r4,7
    5938:	20832916 	blt	r4,r2,65e0 <___vfprintf_internal_r+0x1b54>
    593c:	42000204 	addi	r8,r8,8
    5940:	d8803317 	ldw	r2,204(sp)
    5944:	143fffc4 	addi	r16,r2,-1
    5948:	043ec50e 	bge	zero,r16,5460 <___vfprintf_internal_r+0x9d4>
    594c:	04400404 	movi	r17,16
    5950:	d8801f17 	ldw	r2,124(sp)
    5954:	8c00880e 	bge	r17,r16,5b78 <___vfprintf_internal_r+0x10ec>
    5958:	01400074 	movhi	r5,1
    595c:	2953e884 	addi	r5,r5,20386
    5960:	d9402b15 	stw	r5,172(sp)
    5964:	058001c4 	movi	r22,7
    5968:	dcc02c17 	ldw	r19,176(sp)
    596c:	00000306 	br	597c <___vfprintf_internal_r+0xef0>
    5970:	42000204 	addi	r8,r8,8
    5974:	843ffc04 	addi	r16,r16,-16
    5978:	8c00820e 	bge	r17,r16,5b84 <___vfprintf_internal_r+0x10f8>
    597c:	18c00404 	addi	r3,r3,16
    5980:	10800044 	addi	r2,r2,1
    5984:	45000015 	stw	r20,0(r8)
    5988:	44400115 	stw	r17,4(r8)
    598c:	d8c02015 	stw	r3,128(sp)
    5990:	d8801f15 	stw	r2,124(sp)
    5994:	b0bff60e 	bge	r22,r2,5970 <___vfprintf_internal_r+0xee4>
    5998:	d9801e04 	addi	r6,sp,120
    599c:	b80b883a 	mov	r5,r23
    59a0:	9809883a 	mov	r4,r19
    59a4:	000c0880 	call	c088 <__sprint_r>
    59a8:	103d3a1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    59ac:	d8c02017 	ldw	r3,128(sp)
    59b0:	d8801f17 	ldw	r2,124(sp)
    59b4:	da000404 	addi	r8,sp,16
    59b8:	003fee06 	br	5974 <___vfprintf_internal_r+0xee8>
    59bc:	d9403117 	ldw	r5,196(sp)
    59c0:	d8802a17 	ldw	r2,168(sp)
    59c4:	28adc83a 	sub	r22,r5,r2
    59c8:	05be630e 	bge	zero,r22,5358 <___vfprintf_internal_r+0x8cc>
    59cc:	07000404 	movi	fp,16
    59d0:	d8801f17 	ldw	r2,124(sp)
    59d4:	e5838f0e 	bge	fp,r22,6814 <___vfprintf_internal_r+0x1d88>
    59d8:	01400074 	movhi	r5,1
    59dc:	2953e884 	addi	r5,r5,20386
    59e0:	dc403015 	stw	r17,192(sp)
    59e4:	d9402b15 	stw	r5,172(sp)
    59e8:	b023883a 	mov	r17,r22
    59ec:	04c001c4 	movi	r19,7
    59f0:	a82d883a 	mov	r22,r21
    59f4:	902b883a 	mov	r21,r18
    59f8:	8025883a 	mov	r18,r16
    59fc:	dc002c17 	ldw	r16,176(sp)
    5a00:	00000306 	br	5a10 <___vfprintf_internal_r+0xf84>
    5a04:	8c7ffc04 	addi	r17,r17,-16
    5a08:	42000204 	addi	r8,r8,8
    5a0c:	e440110e 	bge	fp,r17,5a54 <___vfprintf_internal_r+0xfc8>
    5a10:	18c00404 	addi	r3,r3,16
    5a14:	10800044 	addi	r2,r2,1
    5a18:	45000015 	stw	r20,0(r8)
    5a1c:	47000115 	stw	fp,4(r8)
    5a20:	d8c02015 	stw	r3,128(sp)
    5a24:	d8801f15 	stw	r2,124(sp)
    5a28:	98bff60e 	bge	r19,r2,5a04 <___vfprintf_internal_r+0xf78>
    5a2c:	d9801e04 	addi	r6,sp,120
    5a30:	b80b883a 	mov	r5,r23
    5a34:	8009883a 	mov	r4,r16
    5a38:	000c0880 	call	c088 <__sprint_r>
    5a3c:	103d151e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5a40:	8c7ffc04 	addi	r17,r17,-16
    5a44:	d8c02017 	ldw	r3,128(sp)
    5a48:	d8801f17 	ldw	r2,124(sp)
    5a4c:	da000404 	addi	r8,sp,16
    5a50:	e47fef16 	blt	fp,r17,5a10 <___vfprintf_internal_r+0xf84>
    5a54:	9021883a 	mov	r16,r18
    5a58:	a825883a 	mov	r18,r21
    5a5c:	b02b883a 	mov	r21,r22
    5a60:	882d883a 	mov	r22,r17
    5a64:	dc403017 	ldw	r17,192(sp)
    5a68:	d9002b17 	ldw	r4,172(sp)
    5a6c:	1d87883a 	add	r3,r3,r22
    5a70:	10800044 	addi	r2,r2,1
    5a74:	41000015 	stw	r4,0(r8)
    5a78:	45800115 	stw	r22,4(r8)
    5a7c:	d8c02015 	stw	r3,128(sp)
    5a80:	d8801f15 	stw	r2,124(sp)
    5a84:	010001c4 	movi	r4,7
    5a88:	20818e16 	blt	r4,r2,60c4 <___vfprintf_internal_r+0x1638>
    5a8c:	42000204 	addi	r8,r8,8
    5a90:	003e3106 	br	5358 <___vfprintf_internal_r+0x8cc>
    5a94:	d9403317 	ldw	r5,204(sp)
    5a98:	00800044 	movi	r2,1
    5a9c:	18c00044 	addi	r3,r3,1
    5aa0:	1141530e 	bge	r2,r5,5ff0 <___vfprintf_internal_r+0x1564>
    5aa4:	dc401f17 	ldw	r17,124(sp)
    5aa8:	00800044 	movi	r2,1
    5aac:	40800115 	stw	r2,4(r8)
    5ab0:	8c400044 	addi	r17,r17,1
    5ab4:	44000015 	stw	r16,0(r8)
    5ab8:	d8c02015 	stw	r3,128(sp)
    5abc:	dc401f15 	stw	r17,124(sp)
    5ac0:	008001c4 	movi	r2,7
    5ac4:	14416b16 	blt	r2,r17,6074 <___vfprintf_internal_r+0x15e8>
    5ac8:	42000204 	addi	r8,r8,8
    5acc:	d8803717 	ldw	r2,220(sp)
    5ad0:	d9003417 	ldw	r4,208(sp)
    5ad4:	8c400044 	addi	r17,r17,1
    5ad8:	10c7883a 	add	r3,r2,r3
    5adc:	40800115 	stw	r2,4(r8)
    5ae0:	41000015 	stw	r4,0(r8)
    5ae4:	d8c02015 	stw	r3,128(sp)
    5ae8:	dc401f15 	stw	r17,124(sp)
    5aec:	008001c4 	movi	r2,7
    5af0:	14416916 	blt	r2,r17,6098 <___vfprintf_internal_r+0x160c>
    5af4:	45800204 	addi	r22,r8,8
    5af8:	d9003617 	ldw	r4,216(sp)
    5afc:	d9403817 	ldw	r5,224(sp)
    5b00:	000d883a 	mov	r6,zero
    5b04:	000f883a 	mov	r7,zero
    5b08:	d8c03c15 	stw	r3,240(sp)
    5b0c:	000fb4c0 	call	fb4c <__eqdf2>
    5b10:	d8c03c17 	ldw	r3,240(sp)
    5b14:	1000bc26 	beq	r2,zero,5e08 <___vfprintf_internal_r+0x137c>
    5b18:	d9403317 	ldw	r5,204(sp)
    5b1c:	84000044 	addi	r16,r16,1
    5b20:	8c400044 	addi	r17,r17,1
    5b24:	28bfffc4 	addi	r2,r5,-1
    5b28:	1887883a 	add	r3,r3,r2
    5b2c:	b0800115 	stw	r2,4(r22)
    5b30:	b4000015 	stw	r16,0(r22)
    5b34:	d8c02015 	stw	r3,128(sp)
    5b38:	dc401f15 	stw	r17,124(sp)
    5b3c:	008001c4 	movi	r2,7
    5b40:	14414316 	blt	r2,r17,6050 <___vfprintf_internal_r+0x15c4>
    5b44:	b5800204 	addi	r22,r22,8
    5b48:	d9003a17 	ldw	r4,232(sp)
    5b4c:	df0022c4 	addi	fp,sp,139
    5b50:	8c400044 	addi	r17,r17,1
    5b54:	20c7883a 	add	r3,r4,r3
    5b58:	b7000015 	stw	fp,0(r22)
    5b5c:	b1000115 	stw	r4,4(r22)
    5b60:	d8c02015 	stw	r3,128(sp)
    5b64:	dc401f15 	stw	r17,124(sp)
    5b68:	008001c4 	movi	r2,7
    5b6c:	14400e16 	blt	r2,r17,5ba8 <___vfprintf_internal_r+0x111c>
    5b70:	b2000204 	addi	r8,r22,8
    5b74:	003e3a06 	br	5460 <___vfprintf_internal_r+0x9d4>
    5b78:	01000074 	movhi	r4,1
    5b7c:	2113e884 	addi	r4,r4,20386
    5b80:	d9002b15 	stw	r4,172(sp)
    5b84:	d9002b17 	ldw	r4,172(sp)
    5b88:	1c07883a 	add	r3,r3,r16
    5b8c:	44000115 	stw	r16,4(r8)
    5b90:	41000015 	stw	r4,0(r8)
    5b94:	10800044 	addi	r2,r2,1
    5b98:	d8c02015 	stw	r3,128(sp)
    5b9c:	d8801f15 	stw	r2,124(sp)
    5ba0:	010001c4 	movi	r4,7
    5ba4:	20be2d0e 	bge	r4,r2,545c <___vfprintf_internal_r+0x9d0>
    5ba8:	d9002c17 	ldw	r4,176(sp)
    5bac:	d9801e04 	addi	r6,sp,120
    5bb0:	b80b883a 	mov	r5,r23
    5bb4:	000c0880 	call	c088 <__sprint_r>
    5bb8:	103cb61e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5bbc:	d8c02017 	ldw	r3,128(sp)
    5bc0:	da000404 	addi	r8,sp,16
    5bc4:	003e2606 	br	5460 <___vfprintf_internal_r+0x9d4>
    5bc8:	d9002c17 	ldw	r4,176(sp)
    5bcc:	d9801e04 	addi	r6,sp,120
    5bd0:	b80b883a 	mov	r5,r23
    5bd4:	000c0880 	call	c088 <__sprint_r>
    5bd8:	103e5d26 	beq	r2,zero,5550 <___vfprintf_internal_r+0xac4>
    5bdc:	003cad06 	br	4e94 <___vfprintf_internal_r+0x408>
    5be0:	d9002c17 	ldw	r4,176(sp)
    5be4:	d9801e04 	addi	r6,sp,120
    5be8:	b80b883a 	mov	r5,r23
    5bec:	000c0880 	call	c088 <__sprint_r>
    5bf0:	103ca81e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5bf4:	d8c02017 	ldw	r3,128(sp)
    5bf8:	da000404 	addi	r8,sp,16
    5bfc:	003e0b06 	br	542c <___vfprintf_internal_r+0x9a0>
    5c00:	d9002c17 	ldw	r4,176(sp)
    5c04:	d9801e04 	addi	r6,sp,120
    5c08:	b80b883a 	mov	r5,r23
    5c0c:	000c0880 	call	c088 <__sprint_r>
    5c10:	103ca01e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5c14:	d8c02017 	ldw	r3,128(sp)
    5c18:	da000404 	addi	r8,sp,16
    5c1c:	003dbd06 	br	5314 <___vfprintf_internal_r+0x888>
    5c20:	d9002c17 	ldw	r4,176(sp)
    5c24:	d9801e04 	addi	r6,sp,120
    5c28:	b80b883a 	mov	r5,r23
    5c2c:	000c0880 	call	c088 <__sprint_r>
    5c30:	103c981e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5c34:	d8c02017 	ldw	r3,128(sp)
    5c38:	da000404 	addi	r8,sp,16
    5c3c:	003dc306 	br	534c <___vfprintf_internal_r+0x8c0>
    5c40:	d8802917 	ldw	r2,164(sp)
    5c44:	d8002785 	stb	zero,158(sp)
    5c48:	103f0616 	blt	r2,zero,5864 <___vfprintf_internal_r+0xdd8>
    5c4c:	00ffdfc4 	movi	r3,-129
    5c50:	9d84b03a 	or	r2,r19,r22
    5c54:	90e4703a 	and	r18,r18,r3
    5c58:	103c6b26 	beq	r2,zero,4e08 <___vfprintf_internal_r+0x37c>
    5c5c:	0039883a 	mov	fp,zero
    5c60:	003e7406 	br	5634 <___vfprintf_internal_r+0xba8>
    5c64:	9080040c 	andi	r2,r18,16
    5c68:	1001b326 	beq	r2,zero,6338 <___vfprintf_internal_r+0x18ac>
    5c6c:	d9002d17 	ldw	r4,180(sp)
    5c70:	d9402917 	ldw	r5,164(sp)
    5c74:	d8002785 	stb	zero,158(sp)
    5c78:	20800104 	addi	r2,r4,4
    5c7c:	24c00017 	ldw	r19,0(r4)
    5c80:	002d883a 	mov	r22,zero
    5c84:	2801b516 	blt	r5,zero,635c <___vfprintf_internal_r+0x18d0>
    5c88:	00ffdfc4 	movi	r3,-129
    5c8c:	d8802d15 	stw	r2,180(sp)
    5c90:	90e4703a 	and	r18,r18,r3
    5c94:	983d2726 	beq	r19,zero,5134 <___vfprintf_internal_r+0x6a8>
    5c98:	0039883a 	mov	fp,zero
    5c9c:	003d2a06 	br	5148 <___vfprintf_internal_r+0x6bc>
    5ca0:	dc402617 	ldw	r17,152(sp)
    5ca4:	0441d30e 	bge	zero,r17,63f4 <___vfprintf_internal_r+0x1968>
    5ca8:	dc403217 	ldw	r17,200(sp)
    5cac:	d8803317 	ldw	r2,204(sp)
    5cb0:	1440010e 	bge	r2,r17,5cb8 <___vfprintf_internal_r+0x122c>
    5cb4:	1023883a 	mov	r17,r2
    5cb8:	04400a0e 	bge	zero,r17,5ce4 <___vfprintf_internal_r+0x1258>
    5cbc:	d8801f17 	ldw	r2,124(sp)
    5cc0:	1c47883a 	add	r3,r3,r17
    5cc4:	44000015 	stw	r16,0(r8)
    5cc8:	10800044 	addi	r2,r2,1
    5ccc:	44400115 	stw	r17,4(r8)
    5cd0:	d8c02015 	stw	r3,128(sp)
    5cd4:	d8801f15 	stw	r2,124(sp)
    5cd8:	010001c4 	movi	r4,7
    5cdc:	20826516 	blt	r4,r2,6674 <___vfprintf_internal_r+0x1be8>
    5ce0:	42000204 	addi	r8,r8,8
    5ce4:	88026116 	blt	r17,zero,666c <___vfprintf_internal_r+0x1be0>
    5ce8:	d9003217 	ldw	r4,200(sp)
    5cec:	2463c83a 	sub	r17,r4,r17
    5cf0:	04407b0e 	bge	zero,r17,5ee0 <___vfprintf_internal_r+0x1454>
    5cf4:	05800404 	movi	r22,16
    5cf8:	d8801f17 	ldw	r2,124(sp)
    5cfc:	b4419d0e 	bge	r22,r17,6374 <___vfprintf_internal_r+0x18e8>
    5d00:	01000074 	movhi	r4,1
    5d04:	2113e884 	addi	r4,r4,20386
    5d08:	d9002b15 	stw	r4,172(sp)
    5d0c:	070001c4 	movi	fp,7
    5d10:	dcc02c17 	ldw	r19,176(sp)
    5d14:	00000306 	br	5d24 <___vfprintf_internal_r+0x1298>
    5d18:	42000204 	addi	r8,r8,8
    5d1c:	8c7ffc04 	addi	r17,r17,-16
    5d20:	b441970e 	bge	r22,r17,6380 <___vfprintf_internal_r+0x18f4>
    5d24:	18c00404 	addi	r3,r3,16
    5d28:	10800044 	addi	r2,r2,1
    5d2c:	45000015 	stw	r20,0(r8)
    5d30:	45800115 	stw	r22,4(r8)
    5d34:	d8c02015 	stw	r3,128(sp)
    5d38:	d8801f15 	stw	r2,124(sp)
    5d3c:	e0bff60e 	bge	fp,r2,5d18 <___vfprintf_internal_r+0x128c>
    5d40:	d9801e04 	addi	r6,sp,120
    5d44:	b80b883a 	mov	r5,r23
    5d48:	9809883a 	mov	r4,r19
    5d4c:	000c0880 	call	c088 <__sprint_r>
    5d50:	103c501e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5d54:	d8c02017 	ldw	r3,128(sp)
    5d58:	d8801f17 	ldw	r2,124(sp)
    5d5c:	da000404 	addi	r8,sp,16
    5d60:	003fee06 	br	5d1c <___vfprintf_internal_r+0x1290>
    5d64:	d9002c17 	ldw	r4,176(sp)
    5d68:	d9801e04 	addi	r6,sp,120
    5d6c:	b80b883a 	mov	r5,r23
    5d70:	000c0880 	call	c088 <__sprint_r>
    5d74:	103c471e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5d78:	d8c02017 	ldw	r3,128(sp)
    5d7c:	df002787 	ldb	fp,158(sp)
    5d80:	da000404 	addi	r8,sp,16
    5d84:	003d5606 	br	52e0 <___vfprintf_internal_r+0x854>
    5d88:	9080040c 	andi	r2,r18,16
    5d8c:	10016126 	beq	r2,zero,6314 <___vfprintf_internal_r+0x1888>
    5d90:	d8802d17 	ldw	r2,180(sp)
    5d94:	14c00017 	ldw	r19,0(r2)
    5d98:	10800104 	addi	r2,r2,4
    5d9c:	d8802d15 	stw	r2,180(sp)
    5da0:	982dd7fa 	srai	r22,r19,31
    5da4:	b005883a 	mov	r2,r22
    5da8:	003c8206 	br	4fb4 <___vfprintf_internal_r+0x528>
    5dac:	9080040c 	andi	r2,r18,16
    5db0:	10003526 	beq	r2,zero,5e88 <___vfprintf_internal_r+0x13fc>
    5db4:	d9402d17 	ldw	r5,180(sp)
    5db8:	d8c02917 	ldw	r3,164(sp)
    5dbc:	d8002785 	stb	zero,158(sp)
    5dc0:	28800104 	addi	r2,r5,4
    5dc4:	2cc00017 	ldw	r19,0(r5)
    5dc8:	002d883a 	mov	r22,zero
    5dcc:	18003716 	blt	r3,zero,5eac <___vfprintf_internal_r+0x1420>
    5dd0:	00ffdfc4 	movi	r3,-129
    5dd4:	d8802d15 	stw	r2,180(sp)
    5dd8:	90e4703a 	and	r18,r18,r3
    5ddc:	0039883a 	mov	fp,zero
    5de0:	983df326 	beq	r19,zero,55b0 <___vfprintf_internal_r+0xb24>
    5de4:	00800244 	movi	r2,9
    5de8:	14fc7b36 	bltu	r2,r19,4fd8 <___vfprintf_internal_r+0x54c>
    5dec:	d8c02817 	ldw	r3,160(sp)
    5df0:	dc001dc4 	addi	r16,sp,119
    5df4:	9cc00c04 	addi	r19,r19,48
    5df8:	1c07c83a 	sub	r3,r3,r16
    5dfc:	dcc01dc5 	stb	r19,119(sp)
    5e00:	d8c02e15 	stw	r3,184(sp)
    5e04:	003ce806 	br	51a8 <___vfprintf_internal_r+0x71c>
    5e08:	d8803317 	ldw	r2,204(sp)
    5e0c:	143fffc4 	addi	r16,r2,-1
    5e10:	043f4d0e 	bge	zero,r16,5b48 <___vfprintf_internal_r+0x10bc>
    5e14:	07000404 	movi	fp,16
    5e18:	e400810e 	bge	fp,r16,6020 <___vfprintf_internal_r+0x1594>
    5e1c:	01400074 	movhi	r5,1
    5e20:	2953e884 	addi	r5,r5,20386
    5e24:	d9402b15 	stw	r5,172(sp)
    5e28:	01c001c4 	movi	r7,7
    5e2c:	dcc02c17 	ldw	r19,176(sp)
    5e30:	00000306 	br	5e40 <___vfprintf_internal_r+0x13b4>
    5e34:	b5800204 	addi	r22,r22,8
    5e38:	843ffc04 	addi	r16,r16,-16
    5e3c:	e4007b0e 	bge	fp,r16,602c <___vfprintf_internal_r+0x15a0>
    5e40:	18c00404 	addi	r3,r3,16
    5e44:	8c400044 	addi	r17,r17,1
    5e48:	b5000015 	stw	r20,0(r22)
    5e4c:	b7000115 	stw	fp,4(r22)
    5e50:	d8c02015 	stw	r3,128(sp)
    5e54:	dc401f15 	stw	r17,124(sp)
    5e58:	3c7ff60e 	bge	r7,r17,5e34 <___vfprintf_internal_r+0x13a8>
    5e5c:	d9801e04 	addi	r6,sp,120
    5e60:	b80b883a 	mov	r5,r23
    5e64:	9809883a 	mov	r4,r19
    5e68:	d9c03c15 	stw	r7,240(sp)
    5e6c:	000c0880 	call	c088 <__sprint_r>
    5e70:	d9c03c17 	ldw	r7,240(sp)
    5e74:	103c071e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5e78:	d8c02017 	ldw	r3,128(sp)
    5e7c:	dc401f17 	ldw	r17,124(sp)
    5e80:	dd800404 	addi	r22,sp,16
    5e84:	003fec06 	br	5e38 <___vfprintf_internal_r+0x13ac>
    5e88:	9080100c 	andi	r2,r18,64
    5e8c:	d8002785 	stb	zero,158(sp)
    5e90:	10010e26 	beq	r2,zero,62cc <___vfprintf_internal_r+0x1840>
    5e94:	d9002d17 	ldw	r4,180(sp)
    5e98:	d9402917 	ldw	r5,164(sp)
    5e9c:	002d883a 	mov	r22,zero
    5ea0:	20800104 	addi	r2,r4,4
    5ea4:	24c0000b 	ldhu	r19,0(r4)
    5ea8:	283fc90e 	bge	r5,zero,5dd0 <___vfprintf_internal_r+0x1344>
    5eac:	d8802d15 	stw	r2,180(sp)
    5eb0:	0039883a 	mov	fp,zero
    5eb4:	9d84b03a 	or	r2,r19,r22
    5eb8:	103c461e 	bne	r2,zero,4fd4 <___vfprintf_internal_r+0x548>
    5ebc:	00800044 	movi	r2,1
    5ec0:	003e6c06 	br	5874 <___vfprintf_internal_r+0xde8>
    5ec4:	d9002c17 	ldw	r4,176(sp)
    5ec8:	d9801e04 	addi	r6,sp,120
    5ecc:	b80b883a 	mov	r5,r23
    5ed0:	000c0880 	call	c088 <__sprint_r>
    5ed4:	103bef1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5ed8:	d8c02017 	ldw	r3,128(sp)
    5edc:	da000404 	addi	r8,sp,16
    5ee0:	d9003217 	ldw	r4,200(sp)
    5ee4:	d8802617 	ldw	r2,152(sp)
    5ee8:	d9403317 	ldw	r5,204(sp)
    5eec:	8123883a 	add	r17,r16,r4
    5ef0:	11400216 	blt	r2,r5,5efc <___vfprintf_internal_r+0x1470>
    5ef4:	9100004c 	andi	r4,r18,1
    5ef8:	20000d26 	beq	r4,zero,5f30 <___vfprintf_internal_r+0x14a4>
    5efc:	d9003717 	ldw	r4,220(sp)
    5f00:	d9403417 	ldw	r5,208(sp)
    5f04:	1907883a 	add	r3,r3,r4
    5f08:	d9001f17 	ldw	r4,124(sp)
    5f0c:	41400015 	stw	r5,0(r8)
    5f10:	d9403717 	ldw	r5,220(sp)
    5f14:	21000044 	addi	r4,r4,1
    5f18:	d8c02015 	stw	r3,128(sp)
    5f1c:	41400115 	stw	r5,4(r8)
    5f20:	d9001f15 	stw	r4,124(sp)
    5f24:	014001c4 	movi	r5,7
    5f28:	2901e816 	blt	r5,r4,66cc <___vfprintf_internal_r+0x1c40>
    5f2c:	42000204 	addi	r8,r8,8
    5f30:	d9003317 	ldw	r4,204(sp)
    5f34:	8121883a 	add	r16,r16,r4
    5f38:	2085c83a 	sub	r2,r4,r2
    5f3c:	8461c83a 	sub	r16,r16,r17
    5f40:	1400010e 	bge	r2,r16,5f48 <___vfprintf_internal_r+0x14bc>
    5f44:	1021883a 	mov	r16,r2
    5f48:	04000a0e 	bge	zero,r16,5f74 <___vfprintf_internal_r+0x14e8>
    5f4c:	d9001f17 	ldw	r4,124(sp)
    5f50:	1c07883a 	add	r3,r3,r16
    5f54:	44400015 	stw	r17,0(r8)
    5f58:	21000044 	addi	r4,r4,1
    5f5c:	44000115 	stw	r16,4(r8)
    5f60:	d8c02015 	stw	r3,128(sp)
    5f64:	d9001f15 	stw	r4,124(sp)
    5f68:	014001c4 	movi	r5,7
    5f6c:	2901fb16 	blt	r5,r4,675c <___vfprintf_internal_r+0x1cd0>
    5f70:	42000204 	addi	r8,r8,8
    5f74:	8001f716 	blt	r16,zero,6754 <___vfprintf_internal_r+0x1cc8>
    5f78:	1421c83a 	sub	r16,r2,r16
    5f7c:	043d380e 	bge	zero,r16,5460 <___vfprintf_internal_r+0x9d4>
    5f80:	04400404 	movi	r17,16
    5f84:	d8801f17 	ldw	r2,124(sp)
    5f88:	8c3efb0e 	bge	r17,r16,5b78 <___vfprintf_internal_r+0x10ec>
    5f8c:	01400074 	movhi	r5,1
    5f90:	2953e884 	addi	r5,r5,20386
    5f94:	d9402b15 	stw	r5,172(sp)
    5f98:	058001c4 	movi	r22,7
    5f9c:	dcc02c17 	ldw	r19,176(sp)
    5fa0:	00000306 	br	5fb0 <___vfprintf_internal_r+0x1524>
    5fa4:	42000204 	addi	r8,r8,8
    5fa8:	843ffc04 	addi	r16,r16,-16
    5fac:	8c3ef50e 	bge	r17,r16,5b84 <___vfprintf_internal_r+0x10f8>
    5fb0:	18c00404 	addi	r3,r3,16
    5fb4:	10800044 	addi	r2,r2,1
    5fb8:	45000015 	stw	r20,0(r8)
    5fbc:	44400115 	stw	r17,4(r8)
    5fc0:	d8c02015 	stw	r3,128(sp)
    5fc4:	d8801f15 	stw	r2,124(sp)
    5fc8:	b0bff60e 	bge	r22,r2,5fa4 <___vfprintf_internal_r+0x1518>
    5fcc:	d9801e04 	addi	r6,sp,120
    5fd0:	b80b883a 	mov	r5,r23
    5fd4:	9809883a 	mov	r4,r19
    5fd8:	000c0880 	call	c088 <__sprint_r>
    5fdc:	103bad1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    5fe0:	d8c02017 	ldw	r3,128(sp)
    5fe4:	d8801f17 	ldw	r2,124(sp)
    5fe8:	da000404 	addi	r8,sp,16
    5fec:	003fee06 	br	5fa8 <___vfprintf_internal_r+0x151c>
    5ff0:	9088703a 	and	r4,r18,r2
    5ff4:	203eab1e 	bne	r4,zero,5aa4 <___vfprintf_internal_r+0x1018>
    5ff8:	dc401f17 	ldw	r17,124(sp)
    5ffc:	40800115 	stw	r2,4(r8)
    6000:	44000015 	stw	r16,0(r8)
    6004:	8c400044 	addi	r17,r17,1
    6008:	d8c02015 	stw	r3,128(sp)
    600c:	dc401f15 	stw	r17,124(sp)
    6010:	008001c4 	movi	r2,7
    6014:	14400e16 	blt	r2,r17,6050 <___vfprintf_internal_r+0x15c4>
    6018:	45800204 	addi	r22,r8,8
    601c:	003eca06 	br	5b48 <___vfprintf_internal_r+0x10bc>
    6020:	01000074 	movhi	r4,1
    6024:	2113e884 	addi	r4,r4,20386
    6028:	d9002b15 	stw	r4,172(sp)
    602c:	d8802b17 	ldw	r2,172(sp)
    6030:	1c07883a 	add	r3,r3,r16
    6034:	8c400044 	addi	r17,r17,1
    6038:	b0800015 	stw	r2,0(r22)
    603c:	b4000115 	stw	r16,4(r22)
    6040:	d8c02015 	stw	r3,128(sp)
    6044:	dc401f15 	stw	r17,124(sp)
    6048:	008001c4 	movi	r2,7
    604c:	147ebd0e 	bge	r2,r17,5b44 <___vfprintf_internal_r+0x10b8>
    6050:	d9002c17 	ldw	r4,176(sp)
    6054:	d9801e04 	addi	r6,sp,120
    6058:	b80b883a 	mov	r5,r23
    605c:	000c0880 	call	c088 <__sprint_r>
    6060:	103b8c1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    6064:	d8c02017 	ldw	r3,128(sp)
    6068:	dc401f17 	ldw	r17,124(sp)
    606c:	dd800404 	addi	r22,sp,16
    6070:	003eb506 	br	5b48 <___vfprintf_internal_r+0x10bc>
    6074:	d9002c17 	ldw	r4,176(sp)
    6078:	d9801e04 	addi	r6,sp,120
    607c:	b80b883a 	mov	r5,r23
    6080:	000c0880 	call	c088 <__sprint_r>
    6084:	103b831e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    6088:	d8c02017 	ldw	r3,128(sp)
    608c:	dc401f17 	ldw	r17,124(sp)
    6090:	da000404 	addi	r8,sp,16
    6094:	003e8d06 	br	5acc <___vfprintf_internal_r+0x1040>
    6098:	d9002c17 	ldw	r4,176(sp)
    609c:	d9801e04 	addi	r6,sp,120
    60a0:	b80b883a 	mov	r5,r23
    60a4:	000c0880 	call	c088 <__sprint_r>
    60a8:	103b7a1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    60ac:	d8c02017 	ldw	r3,128(sp)
    60b0:	dc401f17 	ldw	r17,124(sp)
    60b4:	dd800404 	addi	r22,sp,16
    60b8:	003e8f06 	br	5af8 <___vfprintf_internal_r+0x106c>
    60bc:	0027883a 	mov	r19,zero
    60c0:	003f4a06 	br	5dec <___vfprintf_internal_r+0x1360>
    60c4:	d9002c17 	ldw	r4,176(sp)
    60c8:	d9801e04 	addi	r6,sp,120
    60cc:	b80b883a 	mov	r5,r23
    60d0:	000c0880 	call	c088 <__sprint_r>
    60d4:	103b6f1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    60d8:	d8c02017 	ldw	r3,128(sp)
    60dc:	da000404 	addi	r8,sp,16
    60e0:	003c9d06 	br	5358 <___vfprintf_internal_r+0x8cc>
    60e4:	04e7c83a 	sub	r19,zero,r19
    60e8:	9804c03a 	cmpne	r2,r19,zero
    60ec:	05adc83a 	sub	r22,zero,r22
    60f0:	b0adc83a 	sub	r22,r22,r2
    60f4:	d8802917 	ldw	r2,164(sp)
    60f8:	07000b44 	movi	fp,45
    60fc:	df002785 	stb	fp,158(sp)
    6100:	10017b16 	blt	r2,zero,66f0 <___vfprintf_internal_r+0x1c64>
    6104:	00bfdfc4 	movi	r2,-129
    6108:	90a4703a 	and	r18,r18,r2
    610c:	003bb106 	br	4fd4 <___vfprintf_internal_r+0x548>
    6110:	d9003617 	ldw	r4,216(sp)
    6114:	d9403817 	ldw	r5,224(sp)
    6118:	da003d15 	stw	r8,244(sp)
    611c:	000bcac0 	call	bcac <__fpclassifyd>
    6120:	da003d17 	ldw	r8,244(sp)
    6124:	1000f026 	beq	r2,zero,64e8 <___vfprintf_internal_r+0x1a5c>
    6128:	d9002917 	ldw	r4,164(sp)
    612c:	05bff7c4 	movi	r22,-33
    6130:	00bfffc4 	movi	r2,-1
    6134:	8dac703a 	and	r22,r17,r22
    6138:	20820026 	beq	r4,r2,693c <___vfprintf_internal_r+0x1eb0>
    613c:	008011c4 	movi	r2,71
    6140:	b081f726 	beq	r22,r2,6920 <___vfprintf_internal_r+0x1e94>
    6144:	d9003817 	ldw	r4,224(sp)
    6148:	90c04014 	ori	r3,r18,256
    614c:	d8c02b15 	stw	r3,172(sp)
    6150:	20021516 	blt	r4,zero,69a8 <___vfprintf_internal_r+0x1f1c>
    6154:	dcc03817 	ldw	r19,224(sp)
    6158:	d8002a05 	stb	zero,168(sp)
    615c:	00801984 	movi	r2,102
    6160:	8881f926 	beq	r17,r2,6948 <___vfprintf_internal_r+0x1ebc>
    6164:	00801184 	movi	r2,70
    6168:	88821c26 	beq	r17,r2,69dc <___vfprintf_internal_r+0x1f50>
    616c:	00801144 	movi	r2,69
    6170:	b081ef26 	beq	r22,r2,6930 <___vfprintf_internal_r+0x1ea4>
    6174:	d8c02917 	ldw	r3,164(sp)
    6178:	d8802104 	addi	r2,sp,132
    617c:	d8800315 	stw	r2,12(sp)
    6180:	d9403617 	ldw	r5,216(sp)
    6184:	d8802504 	addi	r2,sp,148
    6188:	d9002c17 	ldw	r4,176(sp)
    618c:	d8800215 	stw	r2,8(sp)
    6190:	d8802604 	addi	r2,sp,152
    6194:	d8c00015 	stw	r3,0(sp)
    6198:	d8800115 	stw	r2,4(sp)
    619c:	01c00084 	movi	r7,2
    61a0:	980d883a 	mov	r6,r19
    61a4:	d8c03c15 	stw	r3,240(sp)
    61a8:	da003d15 	stw	r8,244(sp)
    61ac:	00070b00 	call	70b0 <_dtoa_r>
    61b0:	1021883a 	mov	r16,r2
    61b4:	008019c4 	movi	r2,103
    61b8:	d8c03c17 	ldw	r3,240(sp)
    61bc:	da003d17 	ldw	r8,244(sp)
    61c0:	88817126 	beq	r17,r2,6788 <___vfprintf_internal_r+0x1cfc>
    61c4:	008011c4 	movi	r2,71
    61c8:	88829226 	beq	r17,r2,6c14 <___vfprintf_internal_r+0x2188>
    61cc:	80f9883a 	add	fp,r16,r3
    61d0:	d9003617 	ldw	r4,216(sp)
    61d4:	000d883a 	mov	r6,zero
    61d8:	000f883a 	mov	r7,zero
    61dc:	980b883a 	mov	r5,r19
    61e0:	da003d15 	stw	r8,244(sp)
    61e4:	000fb4c0 	call	fb4c <__eqdf2>
    61e8:	da003d17 	ldw	r8,244(sp)
    61ec:	10018d26 	beq	r2,zero,6824 <___vfprintf_internal_r+0x1d98>
    61f0:	d8802117 	ldw	r2,132(sp)
    61f4:	1700062e 	bgeu	r2,fp,6210 <___vfprintf_internal_r+0x1784>
    61f8:	01000c04 	movi	r4,48
    61fc:	10c00044 	addi	r3,r2,1
    6200:	d8c02115 	stw	r3,132(sp)
    6204:	11000005 	stb	r4,0(r2)
    6208:	d8802117 	ldw	r2,132(sp)
    620c:	173ffb36 	bltu	r2,fp,61fc <___vfprintf_internal_r+0x1770>
    6210:	1405c83a 	sub	r2,r2,r16
    6214:	d8803315 	stw	r2,204(sp)
    6218:	008011c4 	movi	r2,71
    621c:	b0817626 	beq	r22,r2,67f8 <___vfprintf_internal_r+0x1d6c>
    6220:	00801944 	movi	r2,101
    6224:	1442810e 	bge	r2,r17,6c2c <___vfprintf_internal_r+0x21a0>
    6228:	d8c02617 	ldw	r3,152(sp)
    622c:	00801984 	movi	r2,102
    6230:	d8c03215 	stw	r3,200(sp)
    6234:	8881fe26 	beq	r17,r2,6a30 <___vfprintf_internal_r+0x1fa4>
    6238:	d8c03217 	ldw	r3,200(sp)
    623c:	d9003317 	ldw	r4,204(sp)
    6240:	1901dd16 	blt	r3,r4,69b8 <___vfprintf_internal_r+0x1f2c>
    6244:	9480004c 	andi	r18,r18,1
    6248:	90022b1e 	bne	r18,zero,6af8 <___vfprintf_internal_r+0x206c>
    624c:	1805883a 	mov	r2,r3
    6250:	18028016 	blt	r3,zero,6c54 <___vfprintf_internal_r+0x21c8>
    6254:	d8c03217 	ldw	r3,200(sp)
    6258:	044019c4 	movi	r17,103
    625c:	d8c02e15 	stw	r3,184(sp)
    6260:	df002a07 	ldb	fp,168(sp)
    6264:	e001531e 	bne	fp,zero,67b4 <___vfprintf_internal_r+0x1d28>
    6268:	df002783 	ldbu	fp,158(sp)
    626c:	d8802a15 	stw	r2,168(sp)
    6270:	dc802b17 	ldw	r18,172(sp)
    6274:	d8002915 	stw	zero,164(sp)
    6278:	003bd106 	br	51c0 <___vfprintf_internal_r+0x734>
    627c:	d8802d17 	ldw	r2,180(sp)
    6280:	d8c02d17 	ldw	r3,180(sp)
    6284:	d9002d17 	ldw	r4,180(sp)
    6288:	10800017 	ldw	r2,0(r2)
    628c:	18c00117 	ldw	r3,4(r3)
    6290:	21000204 	addi	r4,r4,8
    6294:	d8803615 	stw	r2,216(sp)
    6298:	d8c03815 	stw	r3,224(sp)
    629c:	d9002d15 	stw	r4,180(sp)
    62a0:	003b7506 	br	5078 <___vfprintf_internal_r+0x5ec>
    62a4:	ac400007 	ldb	r17,0(r21)
    62a8:	003a5906 	br	4c10 <___vfprintf_internal_r+0x184>
    62ac:	9080100c 	andi	r2,r18,64
    62b0:	1000a826 	beq	r2,zero,6554 <___vfprintf_internal_r+0x1ac8>
    62b4:	d9002d17 	ldw	r4,180(sp)
    62b8:	002d883a 	mov	r22,zero
    62bc:	24c0000b 	ldhu	r19,0(r4)
    62c0:	21000104 	addi	r4,r4,4
    62c4:	d9002d15 	stw	r4,180(sp)
    62c8:	003ccb06 	br	55f8 <___vfprintf_internal_r+0xb6c>
    62cc:	d8c02d17 	ldw	r3,180(sp)
    62d0:	d9002917 	ldw	r4,164(sp)
    62d4:	002d883a 	mov	r22,zero
    62d8:	18800104 	addi	r2,r3,4
    62dc:	1cc00017 	ldw	r19,0(r3)
    62e0:	203ebb0e 	bge	r4,zero,5dd0 <___vfprintf_internal_r+0x1344>
    62e4:	003ef106 	br	5eac <___vfprintf_internal_r+0x1420>
    62e8:	9080040c 	andi	r2,r18,16
    62ec:	1000921e 	bne	r2,zero,6538 <___vfprintf_internal_r+0x1aac>
    62f0:	9480100c 	andi	r18,r18,64
    62f4:	90013926 	beq	r18,zero,67dc <___vfprintf_internal_r+0x1d50>
    62f8:	d9002d17 	ldw	r4,180(sp)
    62fc:	d9402f17 	ldw	r5,188(sp)
    6300:	20800017 	ldw	r2,0(r4)
    6304:	21000104 	addi	r4,r4,4
    6308:	d9002d15 	stw	r4,180(sp)
    630c:	1140000d 	sth	r5,0(r2)
    6310:	003a1606 	br	4b6c <___vfprintf_internal_r+0xe0>
    6314:	9080100c 	andi	r2,r18,64
    6318:	10008026 	beq	r2,zero,651c <___vfprintf_internal_r+0x1a90>
    631c:	d8c02d17 	ldw	r3,180(sp)
    6320:	1cc0000f 	ldh	r19,0(r3)
    6324:	18c00104 	addi	r3,r3,4
    6328:	d8c02d15 	stw	r3,180(sp)
    632c:	982dd7fa 	srai	r22,r19,31
    6330:	b005883a 	mov	r2,r22
    6334:	003b1f06 	br	4fb4 <___vfprintf_internal_r+0x528>
    6338:	9080100c 	andi	r2,r18,64
    633c:	d8002785 	stb	zero,158(sp)
    6340:	10008a1e 	bne	r2,zero,656c <___vfprintf_internal_r+0x1ae0>
    6344:	d9402d17 	ldw	r5,180(sp)
    6348:	d8c02917 	ldw	r3,164(sp)
    634c:	002d883a 	mov	r22,zero
    6350:	28800104 	addi	r2,r5,4
    6354:	2cc00017 	ldw	r19,0(r5)
    6358:	183e4b0e 	bge	r3,zero,5c88 <___vfprintf_internal_r+0x11fc>
    635c:	9d86b03a 	or	r3,r19,r22
    6360:	d8802d15 	stw	r2,180(sp)
    6364:	183e4c1e 	bne	r3,zero,5c98 <___vfprintf_internal_r+0x120c>
    6368:	0039883a 	mov	fp,zero
    636c:	0005883a 	mov	r2,zero
    6370:	003d4006 	br	5874 <___vfprintf_internal_r+0xde8>
    6374:	01400074 	movhi	r5,1
    6378:	2953e884 	addi	r5,r5,20386
    637c:	d9402b15 	stw	r5,172(sp)
    6380:	d9402b17 	ldw	r5,172(sp)
    6384:	1c47883a 	add	r3,r3,r17
    6388:	10800044 	addi	r2,r2,1
    638c:	41400015 	stw	r5,0(r8)
    6390:	44400115 	stw	r17,4(r8)
    6394:	d8c02015 	stw	r3,128(sp)
    6398:	d8801f15 	stw	r2,124(sp)
    639c:	010001c4 	movi	r4,7
    63a0:	20bec816 	blt	r4,r2,5ec4 <___vfprintf_internal_r+0x1438>
    63a4:	42000204 	addi	r8,r8,8
    63a8:	003ecd06 	br	5ee0 <___vfprintf_internal_r+0x1454>
    63ac:	d9002917 	ldw	r4,164(sp)
    63b0:	d8002785 	stb	zero,158(sp)
    63b4:	203d2d16 	blt	r4,zero,586c <___vfprintf_internal_r+0xde0>
    63b8:	00bfdfc4 	movi	r2,-129
    63bc:	90a4703a 	and	r18,r18,r2
    63c0:	003a9106 	br	4e08 <___vfprintf_internal_r+0x37c>
    63c4:	01000074 	movhi	r4,1
    63c8:	2113e884 	addi	r4,r4,20386
    63cc:	d9002b15 	stw	r4,172(sp)
    63d0:	003c0c06 	br	5404 <___vfprintf_internal_r+0x978>
    63d4:	d9002c17 	ldw	r4,176(sp)
    63d8:	d9801e04 	addi	r6,sp,120
    63dc:	b80b883a 	mov	r5,r23
    63e0:	000c0880 	call	c088 <__sprint_r>
    63e4:	103aab1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    63e8:	d8c02017 	ldw	r3,128(sp)
    63ec:	da000404 	addi	r8,sp,16
    63f0:	003d4106 	br	58f8 <___vfprintf_internal_r+0xe6c>
    63f4:	d8801f17 	ldw	r2,124(sp)
    63f8:	01400074 	movhi	r5,1
    63fc:	01000044 	movi	r4,1
    6400:	18c00044 	addi	r3,r3,1
    6404:	10800044 	addi	r2,r2,1
    6408:	2953e804 	addi	r5,r5,20384
    640c:	41000115 	stw	r4,4(r8)
    6410:	41400015 	stw	r5,0(r8)
    6414:	d8c02015 	stw	r3,128(sp)
    6418:	d8801f15 	stw	r2,124(sp)
    641c:	010001c4 	movi	r4,7
    6420:	20805c16 	blt	r4,r2,6594 <___vfprintf_internal_r+0x1b08>
    6424:	42000204 	addi	r8,r8,8
    6428:	8800041e 	bne	r17,zero,643c <___vfprintf_internal_r+0x19b0>
    642c:	d8803317 	ldw	r2,204(sp)
    6430:	1000021e 	bne	r2,zero,643c <___vfprintf_internal_r+0x19b0>
    6434:	9080004c 	andi	r2,r18,1
    6438:	103c0926 	beq	r2,zero,5460 <___vfprintf_internal_r+0x9d4>
    643c:	d9003717 	ldw	r4,220(sp)
    6440:	d8801f17 	ldw	r2,124(sp)
    6444:	d9403417 	ldw	r5,208(sp)
    6448:	20c7883a 	add	r3,r4,r3
    644c:	10800044 	addi	r2,r2,1
    6450:	41000115 	stw	r4,4(r8)
    6454:	41400015 	stw	r5,0(r8)
    6458:	d8c02015 	stw	r3,128(sp)
    645c:	d8801f15 	stw	r2,124(sp)
    6460:	010001c4 	movi	r4,7
    6464:	20812116 	blt	r4,r2,68ec <___vfprintf_internal_r+0x1e60>
    6468:	42000204 	addi	r8,r8,8
    646c:	0463c83a 	sub	r17,zero,r17
    6470:	0440730e 	bge	zero,r17,6640 <___vfprintf_internal_r+0x1bb4>
    6474:	05800404 	movi	r22,16
    6478:	b440860e 	bge	r22,r17,6694 <___vfprintf_internal_r+0x1c08>
    647c:	01400074 	movhi	r5,1
    6480:	2953e884 	addi	r5,r5,20386
    6484:	d9402b15 	stw	r5,172(sp)
    6488:	070001c4 	movi	fp,7
    648c:	dcc02c17 	ldw	r19,176(sp)
    6490:	00000306 	br	64a0 <___vfprintf_internal_r+0x1a14>
    6494:	42000204 	addi	r8,r8,8
    6498:	8c7ffc04 	addi	r17,r17,-16
    649c:	b440800e 	bge	r22,r17,66a0 <___vfprintf_internal_r+0x1c14>
    64a0:	18c00404 	addi	r3,r3,16
    64a4:	10800044 	addi	r2,r2,1
    64a8:	45000015 	stw	r20,0(r8)
    64ac:	45800115 	stw	r22,4(r8)
    64b0:	d8c02015 	stw	r3,128(sp)
    64b4:	d8801f15 	stw	r2,124(sp)
    64b8:	e0bff60e 	bge	fp,r2,6494 <___vfprintf_internal_r+0x1a08>
    64bc:	d9801e04 	addi	r6,sp,120
    64c0:	b80b883a 	mov	r5,r23
    64c4:	9809883a 	mov	r4,r19
    64c8:	000c0880 	call	c088 <__sprint_r>
    64cc:	103a711e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    64d0:	d8c02017 	ldw	r3,128(sp)
    64d4:	d8801f17 	ldw	r2,124(sp)
    64d8:	da000404 	addi	r8,sp,16
    64dc:	003fee06 	br	6498 <___vfprintf_internal_r+0x1a0c>
    64e0:	00bfffc4 	movi	r2,-1
    64e4:	003a6f06 	br	4ea4 <___vfprintf_internal_r+0x418>
    64e8:	008011c4 	movi	r2,71
    64ec:	1440b816 	blt	r2,r17,67d0 <___vfprintf_internal_r+0x1d44>
    64f0:	04000074 	movhi	r16,1
    64f4:	8413da04 	addi	r16,r16,20328
    64f8:	00c000c4 	movi	r3,3
    64fc:	00bfdfc4 	movi	r2,-129
    6500:	d8c02a15 	stw	r3,168(sp)
    6504:	90a4703a 	and	r18,r18,r2
    6508:	df002783 	ldbu	fp,158(sp)
    650c:	d8c02e15 	stw	r3,184(sp)
    6510:	d8002915 	stw	zero,164(sp)
    6514:	d8003215 	stw	zero,200(sp)
    6518:	003b2906 	br	51c0 <___vfprintf_internal_r+0x734>
    651c:	d9002d17 	ldw	r4,180(sp)
    6520:	24c00017 	ldw	r19,0(r4)
    6524:	21000104 	addi	r4,r4,4
    6528:	d9002d15 	stw	r4,180(sp)
    652c:	982dd7fa 	srai	r22,r19,31
    6530:	b005883a 	mov	r2,r22
    6534:	003a9f06 	br	4fb4 <___vfprintf_internal_r+0x528>
    6538:	d9402d17 	ldw	r5,180(sp)
    653c:	d8c02f17 	ldw	r3,188(sp)
    6540:	28800017 	ldw	r2,0(r5)
    6544:	29400104 	addi	r5,r5,4
    6548:	d9402d15 	stw	r5,180(sp)
    654c:	10c00015 	stw	r3,0(r2)
    6550:	00398606 	br	4b6c <___vfprintf_internal_r+0xe0>
    6554:	d9402d17 	ldw	r5,180(sp)
    6558:	002d883a 	mov	r22,zero
    655c:	2cc00017 	ldw	r19,0(r5)
    6560:	29400104 	addi	r5,r5,4
    6564:	d9402d15 	stw	r5,180(sp)
    6568:	003c2306 	br	55f8 <___vfprintf_internal_r+0xb6c>
    656c:	d8c02d17 	ldw	r3,180(sp)
    6570:	d9002917 	ldw	r4,164(sp)
    6574:	002d883a 	mov	r22,zero
    6578:	18800104 	addi	r2,r3,4
    657c:	1cc0000b 	ldhu	r19,0(r3)
    6580:	203dc10e 	bge	r4,zero,5c88 <___vfprintf_internal_r+0x11fc>
    6584:	003f7506 	br	635c <___vfprintf_internal_r+0x18d0>
    6588:	04000074 	movhi	r16,1
    658c:	8413d804 	addi	r16,r16,20320
    6590:	003acc06 	br	50c4 <___vfprintf_internal_r+0x638>
    6594:	d9002c17 	ldw	r4,176(sp)
    6598:	d9801e04 	addi	r6,sp,120
    659c:	b80b883a 	mov	r5,r23
    65a0:	000c0880 	call	c088 <__sprint_r>
    65a4:	103a3b1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    65a8:	dc402617 	ldw	r17,152(sp)
    65ac:	d8c02017 	ldw	r3,128(sp)
    65b0:	da000404 	addi	r8,sp,16
    65b4:	003f9c06 	br	6428 <___vfprintf_internal_r+0x199c>
    65b8:	ac400043 	ldbu	r17,1(r21)
    65bc:	94800814 	ori	r18,r18,32
    65c0:	ad400044 	addi	r21,r21,1
    65c4:	8c403fcc 	andi	r17,r17,255
    65c8:	8c40201c 	xori	r17,r17,128
    65cc:	8c7fe004 	addi	r17,r17,-128
    65d0:	00398f06 	br	4c10 <___vfprintf_internal_r+0x184>
    65d4:	d8c02d15 	stw	r3,180(sp)
    65d8:	0039883a 	mov	fp,zero
    65dc:	003e3506 	br	5eb4 <___vfprintf_internal_r+0x1428>
    65e0:	d9002c17 	ldw	r4,176(sp)
    65e4:	d9801e04 	addi	r6,sp,120
    65e8:	b80b883a 	mov	r5,r23
    65ec:	000c0880 	call	c088 <__sprint_r>
    65f0:	103a281e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    65f4:	d8c02017 	ldw	r3,128(sp)
    65f8:	da000404 	addi	r8,sp,16
    65fc:	003cd006 	br	5940 <___vfprintf_internal_r+0xeb4>
    6600:	8009883a 	mov	r4,r16
    6604:	da003d15 	stw	r8,244(sp)
    6608:	00048980 	call	4898 <strlen>
    660c:	d8802e15 	stw	r2,184(sp)
    6610:	da003d17 	ldw	r8,244(sp)
    6614:	103c340e 	bge	r2,zero,56e8 <___vfprintf_internal_r+0xc5c>
    6618:	0005883a 	mov	r2,zero
    661c:	003c3206 	br	56e8 <___vfprintf_internal_r+0xc5c>
    6620:	d9002c17 	ldw	r4,176(sp)
    6624:	d9801e04 	addi	r6,sp,120
    6628:	b80b883a 	mov	r5,r23
    662c:	000c0880 	call	c088 <__sprint_r>
    6630:	103a181e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    6634:	d8c02017 	ldw	r3,128(sp)
    6638:	d8801f17 	ldw	r2,124(sp)
    663c:	da000404 	addi	r8,sp,16
    6640:	d9403317 	ldw	r5,204(sp)
    6644:	10800044 	addi	r2,r2,1
    6648:	44000015 	stw	r16,0(r8)
    664c:	28c7883a 	add	r3,r5,r3
    6650:	003b7d06 	br	5448 <___vfprintf_internal_r+0x9bc>
    6654:	01000074 	movhi	r4,1
    6658:	2113ec84 	addi	r4,r4,20402
    665c:	d9003515 	stw	r4,212(sp)
    6660:	003b1406 	br	52b4 <___vfprintf_internal_r+0x828>
    6664:	013fffc4 	movi	r4,-1
    6668:	003a3506 	br	4f40 <___vfprintf_internal_r+0x4b4>
    666c:	0023883a 	mov	r17,zero
    6670:	003d9d06 	br	5ce8 <___vfprintf_internal_r+0x125c>
    6674:	d9002c17 	ldw	r4,176(sp)
    6678:	d9801e04 	addi	r6,sp,120
    667c:	b80b883a 	mov	r5,r23
    6680:	000c0880 	call	c088 <__sprint_r>
    6684:	103a031e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    6688:	d8c02017 	ldw	r3,128(sp)
    668c:	da000404 	addi	r8,sp,16
    6690:	003d9406 	br	5ce4 <___vfprintf_internal_r+0x1258>
    6694:	01000074 	movhi	r4,1
    6698:	2113e884 	addi	r4,r4,20386
    669c:	d9002b15 	stw	r4,172(sp)
    66a0:	d9002b17 	ldw	r4,172(sp)
    66a4:	1c47883a 	add	r3,r3,r17
    66a8:	10800044 	addi	r2,r2,1
    66ac:	41000015 	stw	r4,0(r8)
    66b0:	44400115 	stw	r17,4(r8)
    66b4:	d8c02015 	stw	r3,128(sp)
    66b8:	d8801f15 	stw	r2,124(sp)
    66bc:	010001c4 	movi	r4,7
    66c0:	20bfd716 	blt	r4,r2,6620 <___vfprintf_internal_r+0x1b94>
    66c4:	42000204 	addi	r8,r8,8
    66c8:	003fdd06 	br	6640 <___vfprintf_internal_r+0x1bb4>
    66cc:	d9002c17 	ldw	r4,176(sp)
    66d0:	d9801e04 	addi	r6,sp,120
    66d4:	b80b883a 	mov	r5,r23
    66d8:	000c0880 	call	c088 <__sprint_r>
    66dc:	1039ed1e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    66e0:	d8802617 	ldw	r2,152(sp)
    66e4:	d8c02017 	ldw	r3,128(sp)
    66e8:	da000404 	addi	r8,sp,16
    66ec:	003e1006 	br	5f30 <___vfprintf_internal_r+0x14a4>
    66f0:	00800044 	movi	r2,1
    66f4:	10803fcc 	andi	r2,r2,255
    66f8:	00c00044 	movi	r3,1
    66fc:	10fa3526 	beq	r2,r3,4fd4 <___vfprintf_internal_r+0x548>
    6700:	00c00084 	movi	r3,2
    6704:	10fbcb26 	beq	r2,r3,5634 <___vfprintf_internal_r+0xba8>
    6708:	003a8f06 	br	5148 <___vfprintf_internal_r+0x6bc>
    670c:	01000074 	movhi	r4,1
    6710:	2113ec84 	addi	r4,r4,20402
    6714:	d9003515 	stw	r4,212(sp)
    6718:	003b7606 	br	54f4 <___vfprintf_internal_r+0xa68>
    671c:	d8802917 	ldw	r2,164(sp)
    6720:	00c00184 	movi	r3,6
    6724:	1880012e 	bgeu	r3,r2,672c <___vfprintf_internal_r+0x1ca0>
    6728:	1805883a 	mov	r2,r3
    672c:	d8802e15 	stw	r2,184(sp)
    6730:	1000ef16 	blt	r2,zero,6af0 <___vfprintf_internal_r+0x2064>
    6734:	04000074 	movhi	r16,1
    6738:	d8802a15 	stw	r2,168(sp)
    673c:	dcc02d15 	stw	r19,180(sp)
    6740:	d8002915 	stw	zero,164(sp)
    6744:	d8003215 	stw	zero,200(sp)
    6748:	8413e604 	addi	r16,r16,20376
    674c:	0039883a 	mov	fp,zero
    6750:	003aa206 	br	51dc <___vfprintf_internal_r+0x750>
    6754:	0021883a 	mov	r16,zero
    6758:	003e0706 	br	5f78 <___vfprintf_internal_r+0x14ec>
    675c:	d9002c17 	ldw	r4,176(sp)
    6760:	d9801e04 	addi	r6,sp,120
    6764:	b80b883a 	mov	r5,r23
    6768:	000c0880 	call	c088 <__sprint_r>
    676c:	1039c91e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    6770:	d8802617 	ldw	r2,152(sp)
    6774:	d9403317 	ldw	r5,204(sp)
    6778:	d8c02017 	ldw	r3,128(sp)
    677c:	da000404 	addi	r8,sp,16
    6780:	2885c83a 	sub	r2,r5,r2
    6784:	003dfb06 	br	5f74 <___vfprintf_internal_r+0x14e8>
    6788:	9080004c 	andi	r2,r18,1
    678c:	103e8f1e 	bne	r2,zero,61cc <___vfprintf_internal_r+0x1740>
    6790:	d8802117 	ldw	r2,132(sp)
    6794:	003e9e06 	br	6210 <___vfprintf_internal_r+0x1784>
    6798:	1025883a 	mov	r18,r2
    679c:	0039883a 	mov	fp,zero
    67a0:	00800084 	movi	r2,2
    67a4:	003fd306 	br	66f4 <___vfprintf_internal_r+0x1c68>
    67a8:	07000b44 	movi	fp,45
    67ac:	df002785 	stb	fp,158(sp)
    67b0:	003a4006 	br	50b4 <___vfprintf_internal_r+0x628>
    67b4:	00c00b44 	movi	r3,45
    67b8:	d8c02785 	stb	r3,158(sp)
    67bc:	d8802a15 	stw	r2,168(sp)
    67c0:	dc802b17 	ldw	r18,172(sp)
    67c4:	d8002915 	stw	zero,164(sp)
    67c8:	07000b44 	movi	fp,45
    67cc:	003a8006 	br	51d0 <___vfprintf_internal_r+0x744>
    67d0:	04000074 	movhi	r16,1
    67d4:	8413db04 	addi	r16,r16,20332
    67d8:	003f4706 	br	64f8 <___vfprintf_internal_r+0x1a6c>
    67dc:	d8c02d17 	ldw	r3,180(sp)
    67e0:	d9002f17 	ldw	r4,188(sp)
    67e4:	18800017 	ldw	r2,0(r3)
    67e8:	18c00104 	addi	r3,r3,4
    67ec:	d8c02d15 	stw	r3,180(sp)
    67f0:	11000015 	stw	r4,0(r2)
    67f4:	0038dd06 	br	4b6c <___vfprintf_internal_r+0xe0>
    67f8:	dd802617 	ldw	r22,152(sp)
    67fc:	00bfff44 	movi	r2,-3
    6800:	b0801c16 	blt	r22,r2,6874 <___vfprintf_internal_r+0x1de8>
    6804:	d9402917 	ldw	r5,164(sp)
    6808:	2d801a16 	blt	r5,r22,6874 <___vfprintf_internal_r+0x1de8>
    680c:	dd803215 	stw	r22,200(sp)
    6810:	003e8906 	br	6238 <___vfprintf_internal_r+0x17ac>
    6814:	01000074 	movhi	r4,1
    6818:	2113e884 	addi	r4,r4,20386
    681c:	d9002b15 	stw	r4,172(sp)
    6820:	003c9106 	br	5a68 <___vfprintf_internal_r+0xfdc>
    6824:	e005883a 	mov	r2,fp
    6828:	003e7906 	br	6210 <___vfprintf_internal_r+0x1784>
    682c:	d9402917 	ldw	r5,164(sp)
    6830:	df002783 	ldbu	fp,158(sp)
    6834:	dcc02d15 	stw	r19,180(sp)
    6838:	d9402a15 	stw	r5,168(sp)
    683c:	d9402e15 	stw	r5,184(sp)
    6840:	d8002915 	stw	zero,164(sp)
    6844:	d8003215 	stw	zero,200(sp)
    6848:	003a5d06 	br	51c0 <___vfprintf_internal_r+0x734>
    684c:	9080004c 	andi	r2,r18,1
    6850:	0039883a 	mov	fp,zero
    6854:	10000426 	beq	r2,zero,6868 <___vfprintf_internal_r+0x1ddc>
    6858:	00800c04 	movi	r2,48
    685c:	dc001dc4 	addi	r16,sp,119
    6860:	d8801dc5 	stb	r2,119(sp)
    6864:	003b8006 	br	5668 <___vfprintf_internal_r+0xbdc>
    6868:	d8002e15 	stw	zero,184(sp)
    686c:	dc001e04 	addi	r16,sp,120
    6870:	003a4d06 	br	51a8 <___vfprintf_internal_r+0x71c>
    6874:	8c7fff84 	addi	r17,r17,-2
    6878:	b5bfffc4 	addi	r22,r22,-1
    687c:	dd802615 	stw	r22,152(sp)
    6880:	dc4022c5 	stb	r17,139(sp)
    6884:	b000bf16 	blt	r22,zero,6b84 <___vfprintf_internal_r+0x20f8>
    6888:	00800ac4 	movi	r2,43
    688c:	d8802305 	stb	r2,140(sp)
    6890:	00800244 	movi	r2,9
    6894:	15807016 	blt	r2,r22,6a58 <___vfprintf_internal_r+0x1fcc>
    6898:	00800c04 	movi	r2,48
    689c:	b5800c04 	addi	r22,r22,48
    68a0:	d8802345 	stb	r2,141(sp)
    68a4:	dd802385 	stb	r22,142(sp)
    68a8:	d88023c4 	addi	r2,sp,143
    68ac:	df0022c4 	addi	fp,sp,139
    68b0:	d8c03317 	ldw	r3,204(sp)
    68b4:	1739c83a 	sub	fp,r2,fp
    68b8:	d9003317 	ldw	r4,204(sp)
    68bc:	e0c7883a 	add	r3,fp,r3
    68c0:	df003a15 	stw	fp,232(sp)
    68c4:	d8c02e15 	stw	r3,184(sp)
    68c8:	00800044 	movi	r2,1
    68cc:	1100b30e 	bge	r2,r4,6b9c <___vfprintf_internal_r+0x2110>
    68d0:	d8c02e17 	ldw	r3,184(sp)
    68d4:	18c00044 	addi	r3,r3,1
    68d8:	d8c02e15 	stw	r3,184(sp)
    68dc:	1805883a 	mov	r2,r3
    68e0:	1800ac16 	blt	r3,zero,6b94 <___vfprintf_internal_r+0x2108>
    68e4:	d8003215 	stw	zero,200(sp)
    68e8:	003e5d06 	br	6260 <___vfprintf_internal_r+0x17d4>
    68ec:	d9002c17 	ldw	r4,176(sp)
    68f0:	d9801e04 	addi	r6,sp,120
    68f4:	b80b883a 	mov	r5,r23
    68f8:	000c0880 	call	c088 <__sprint_r>
    68fc:	1039651e 	bne	r2,zero,4e94 <___vfprintf_internal_r+0x408>
    6900:	dc402617 	ldw	r17,152(sp)
    6904:	d8c02017 	ldw	r3,128(sp)
    6908:	d8801f17 	ldw	r2,124(sp)
    690c:	da000404 	addi	r8,sp,16
    6910:	003ed606 	br	646c <___vfprintf_internal_r+0x19e0>
    6914:	582b883a 	mov	r21,r11
    6918:	d8002915 	stw	zero,164(sp)
    691c:	0038bd06 	br	4c14 <___vfprintf_internal_r+0x188>
    6920:	d8802917 	ldw	r2,164(sp)
    6924:	103e071e 	bne	r2,zero,6144 <___vfprintf_internal_r+0x16b8>
    6928:	dc002915 	stw	r16,164(sp)
    692c:	003e0506 	br	6144 <___vfprintf_internal_r+0x16b8>
    6930:	d9002917 	ldw	r4,164(sp)
    6934:	20c00044 	addi	r3,r4,1
    6938:	003e0f06 	br	6178 <___vfprintf_internal_r+0x16ec>
    693c:	01400184 	movi	r5,6
    6940:	d9402915 	stw	r5,164(sp)
    6944:	003dff06 	br	6144 <___vfprintf_internal_r+0x16b8>
    6948:	d8802104 	addi	r2,sp,132
    694c:	d8800315 	stw	r2,12(sp)
    6950:	d8802504 	addi	r2,sp,148
    6954:	d8800215 	stw	r2,8(sp)
    6958:	d8802604 	addi	r2,sp,152
    695c:	d8800115 	stw	r2,4(sp)
    6960:	d8802917 	ldw	r2,164(sp)
    6964:	d9403617 	ldw	r5,216(sp)
    6968:	d9002c17 	ldw	r4,176(sp)
    696c:	d8800015 	stw	r2,0(sp)
    6970:	01c000c4 	movi	r7,3
    6974:	980d883a 	mov	r6,r19
    6978:	da003d15 	stw	r8,244(sp)
    697c:	00070b00 	call	70b0 <_dtoa_r>
    6980:	d8c02917 	ldw	r3,164(sp)
    6984:	da003d17 	ldw	r8,244(sp)
    6988:	1021883a 	mov	r16,r2
    698c:	10f9883a 	add	fp,r2,r3
    6990:	81000007 	ldb	r4,0(r16)
    6994:	00800c04 	movi	r2,48
    6998:	20805e26 	beq	r4,r2,6b14 <___vfprintf_internal_r+0x2088>
    699c:	d8c02617 	ldw	r3,152(sp)
    69a0:	e0f9883a 	add	fp,fp,r3
    69a4:	003e0a06 	br	61d0 <___vfprintf_internal_r+0x1744>
    69a8:	00c00b44 	movi	r3,45
    69ac:	24e0003c 	xorhi	r19,r4,32768
    69b0:	d8c02a05 	stb	r3,168(sp)
    69b4:	003de906 	br	615c <___vfprintf_internal_r+0x16d0>
    69b8:	d8c03217 	ldw	r3,200(sp)
    69bc:	00c07a0e 	bge	zero,r3,6ba8 <___vfprintf_internal_r+0x211c>
    69c0:	00800044 	movi	r2,1
    69c4:	d9003317 	ldw	r4,204(sp)
    69c8:	1105883a 	add	r2,r2,r4
    69cc:	d8802e15 	stw	r2,184(sp)
    69d0:	10004e16 	blt	r2,zero,6b0c <___vfprintf_internal_r+0x2080>
    69d4:	044019c4 	movi	r17,103
    69d8:	003e2106 	br	6260 <___vfprintf_internal_r+0x17d4>
    69dc:	d9002917 	ldw	r4,164(sp)
    69e0:	d8802104 	addi	r2,sp,132
    69e4:	d8800315 	stw	r2,12(sp)
    69e8:	d9000015 	stw	r4,0(sp)
    69ec:	d8802504 	addi	r2,sp,148
    69f0:	d9403617 	ldw	r5,216(sp)
    69f4:	d9002c17 	ldw	r4,176(sp)
    69f8:	d8800215 	stw	r2,8(sp)
    69fc:	d8802604 	addi	r2,sp,152
    6a00:	d8800115 	stw	r2,4(sp)
    6a04:	01c000c4 	movi	r7,3
    6a08:	980d883a 	mov	r6,r19
    6a0c:	da003d15 	stw	r8,244(sp)
    6a10:	00070b00 	call	70b0 <_dtoa_r>
    6a14:	d8c02917 	ldw	r3,164(sp)
    6a18:	da003d17 	ldw	r8,244(sp)
    6a1c:	1021883a 	mov	r16,r2
    6a20:	00801184 	movi	r2,70
    6a24:	80f9883a 	add	fp,r16,r3
    6a28:	88bfd926 	beq	r17,r2,6990 <___vfprintf_internal_r+0x1f04>
    6a2c:	003de806 	br	61d0 <___vfprintf_internal_r+0x1744>
    6a30:	d9002917 	ldw	r4,164(sp)
    6a34:	00c04d0e 	bge	zero,r3,6b6c <___vfprintf_internal_r+0x20e0>
    6a38:	2000441e 	bne	r4,zero,6b4c <___vfprintf_internal_r+0x20c0>
    6a3c:	9480004c 	andi	r18,r18,1
    6a40:	9000421e 	bne	r18,zero,6b4c <___vfprintf_internal_r+0x20c0>
    6a44:	1805883a 	mov	r2,r3
    6a48:	18007016 	blt	r3,zero,6c0c <___vfprintf_internal_r+0x2180>
    6a4c:	d8c03217 	ldw	r3,200(sp)
    6a50:	d8c02e15 	stw	r3,184(sp)
    6a54:	003e0206 	br	6260 <___vfprintf_internal_r+0x17d4>
    6a58:	df0022c4 	addi	fp,sp,139
    6a5c:	dc002915 	stw	r16,164(sp)
    6a60:	4027883a 	mov	r19,r8
    6a64:	e021883a 	mov	r16,fp
    6a68:	b009883a 	mov	r4,r22
    6a6c:	01400284 	movi	r5,10
    6a70:	00045bc0 	call	45bc <__modsi3>
    6a74:	10800c04 	addi	r2,r2,48
    6a78:	843fffc4 	addi	r16,r16,-1
    6a7c:	b009883a 	mov	r4,r22
    6a80:	01400284 	movi	r5,10
    6a84:	80800005 	stb	r2,0(r16)
    6a88:	00045380 	call	4538 <__divsi3>
    6a8c:	102d883a 	mov	r22,r2
    6a90:	00800244 	movi	r2,9
    6a94:	15bff416 	blt	r2,r22,6a68 <___vfprintf_internal_r+0x1fdc>
    6a98:	9811883a 	mov	r8,r19
    6a9c:	b0800c04 	addi	r2,r22,48
    6aa0:	8027883a 	mov	r19,r16
    6aa4:	997fffc4 	addi	r5,r19,-1
    6aa8:	98bfffc5 	stb	r2,-1(r19)
    6aac:	dc002917 	ldw	r16,164(sp)
    6ab0:	2f006a2e 	bgeu	r5,fp,6c5c <___vfprintf_internal_r+0x21d0>
    6ab4:	d9c02384 	addi	r7,sp,142
    6ab8:	3ccfc83a 	sub	r7,r7,r19
    6abc:	d9002344 	addi	r4,sp,141
    6ac0:	e1cf883a 	add	r7,fp,r7
    6ac4:	00000106 	br	6acc <___vfprintf_internal_r+0x2040>
    6ac8:	28800003 	ldbu	r2,0(r5)
    6acc:	20800005 	stb	r2,0(r4)
    6ad0:	21000044 	addi	r4,r4,1
    6ad4:	29400044 	addi	r5,r5,1
    6ad8:	393ffb1e 	bne	r7,r4,6ac8 <___vfprintf_internal_r+0x203c>
    6adc:	d8802304 	addi	r2,sp,140
    6ae0:	14c5c83a 	sub	r2,r2,r19
    6ae4:	d8c02344 	addi	r3,sp,141
    6ae8:	1885883a 	add	r2,r3,r2
    6aec:	003f7006 	br	68b0 <___vfprintf_internal_r+0x1e24>
    6af0:	0005883a 	mov	r2,zero
    6af4:	003f0f06 	br	6734 <___vfprintf_internal_r+0x1ca8>
    6af8:	d8c03217 	ldw	r3,200(sp)
    6afc:	18c00044 	addi	r3,r3,1
    6b00:	d8c02e15 	stw	r3,184(sp)
    6b04:	1805883a 	mov	r2,r3
    6b08:	183fb20e 	bge	r3,zero,69d4 <___vfprintf_internal_r+0x1f48>
    6b0c:	0005883a 	mov	r2,zero
    6b10:	003fb006 	br	69d4 <___vfprintf_internal_r+0x1f48>
    6b14:	d9003617 	ldw	r4,216(sp)
    6b18:	000d883a 	mov	r6,zero
    6b1c:	000f883a 	mov	r7,zero
    6b20:	980b883a 	mov	r5,r19
    6b24:	d8c03c15 	stw	r3,240(sp)
    6b28:	da003d15 	stw	r8,244(sp)
    6b2c:	000fb4c0 	call	fb4c <__eqdf2>
    6b30:	d8c03c17 	ldw	r3,240(sp)
    6b34:	da003d17 	ldw	r8,244(sp)
    6b38:	103f9826 	beq	r2,zero,699c <___vfprintf_internal_r+0x1f10>
    6b3c:	00800044 	movi	r2,1
    6b40:	10c7c83a 	sub	r3,r2,r3
    6b44:	d8c02615 	stw	r3,152(sp)
    6b48:	003f9506 	br	69a0 <___vfprintf_internal_r+0x1f14>
    6b4c:	d9002917 	ldw	r4,164(sp)
    6b50:	d8c03217 	ldw	r3,200(sp)
    6b54:	20800044 	addi	r2,r4,1
    6b58:	1885883a 	add	r2,r3,r2
    6b5c:	d8802e15 	stw	r2,184(sp)
    6b60:	103dbf0e 	bge	r2,zero,6260 <___vfprintf_internal_r+0x17d4>
    6b64:	0005883a 	mov	r2,zero
    6b68:	003dbd06 	br	6260 <___vfprintf_internal_r+0x17d4>
    6b6c:	2000211e 	bne	r4,zero,6bf4 <___vfprintf_internal_r+0x2168>
    6b70:	9480004c 	andi	r18,r18,1
    6b74:	90001f1e 	bne	r18,zero,6bf4 <___vfprintf_internal_r+0x2168>
    6b78:	00800044 	movi	r2,1
    6b7c:	d8802e15 	stw	r2,184(sp)
    6b80:	003db706 	br	6260 <___vfprintf_internal_r+0x17d4>
    6b84:	00800b44 	movi	r2,45
    6b88:	05adc83a 	sub	r22,zero,r22
    6b8c:	d8802305 	stb	r2,140(sp)
    6b90:	003f3f06 	br	6890 <___vfprintf_internal_r+0x1e04>
    6b94:	0005883a 	mov	r2,zero
    6b98:	003f5206 	br	68e4 <___vfprintf_internal_r+0x1e58>
    6b9c:	90a4703a 	and	r18,r18,r2
    6ba0:	903f4e26 	beq	r18,zero,68dc <___vfprintf_internal_r+0x1e50>
    6ba4:	003f4a06 	br	68d0 <___vfprintf_internal_r+0x1e44>
    6ba8:	00800084 	movi	r2,2
    6bac:	10c5c83a 	sub	r2,r2,r3
    6bb0:	003f8406 	br	69c4 <___vfprintf_internal_r+0x1f38>
    6bb4:	d8802d17 	ldw	r2,180(sp)
    6bb8:	d9002d17 	ldw	r4,180(sp)
    6bbc:	ac400043 	ldbu	r17,1(r21)
    6bc0:	10800017 	ldw	r2,0(r2)
    6bc4:	582b883a 	mov	r21,r11
    6bc8:	d8802915 	stw	r2,164(sp)
    6bcc:	20800104 	addi	r2,r4,4
    6bd0:	d9002917 	ldw	r4,164(sp)
    6bd4:	d8802d15 	stw	r2,180(sp)
    6bd8:	203e7a0e 	bge	r4,zero,65c4 <___vfprintf_internal_r+0x1b38>
    6bdc:	8c403fcc 	andi	r17,r17,255
    6be0:	00bfffc4 	movi	r2,-1
    6be4:	8c40201c 	xori	r17,r17,128
    6be8:	d8802915 	stw	r2,164(sp)
    6bec:	8c7fe004 	addi	r17,r17,-128
    6bf0:	00380706 	br	4c10 <___vfprintf_internal_r+0x184>
    6bf4:	d8c02917 	ldw	r3,164(sp)
    6bf8:	18c00084 	addi	r3,r3,2
    6bfc:	d8c02e15 	stw	r3,184(sp)
    6c00:	1805883a 	mov	r2,r3
    6c04:	183d960e 	bge	r3,zero,6260 <___vfprintf_internal_r+0x17d4>
    6c08:	003fd606 	br	6b64 <___vfprintf_internal_r+0x20d8>
    6c0c:	0005883a 	mov	r2,zero
    6c10:	003f8e06 	br	6a4c <___vfprintf_internal_r+0x1fc0>
    6c14:	9080004c 	andi	r2,r18,1
    6c18:	103f811e 	bne	r2,zero,6a20 <___vfprintf_internal_r+0x1f94>
    6c1c:	d8802117 	ldw	r2,132(sp)
    6c20:	1405c83a 	sub	r2,r2,r16
    6c24:	d8803315 	stw	r2,204(sp)
    6c28:	b47ef326 	beq	r22,r17,67f8 <___vfprintf_internal_r+0x1d6c>
    6c2c:	dd802617 	ldw	r22,152(sp)
    6c30:	003f1106 	br	6878 <___vfprintf_internal_r+0x1dec>
    6c34:	d9c02785 	stb	r7,158(sp)
    6c38:	00390406 	br	504c <___vfprintf_internal_r+0x5c0>
    6c3c:	d9c02785 	stb	r7,158(sp)
    6c40:	0038d306 	br	4f90 <___vfprintf_internal_r+0x504>
    6c44:	d9c02785 	stb	r7,158(sp)
    6c48:	003a6106 	br	55d0 <___vfprintf_internal_r+0xb44>
    6c4c:	d9c02785 	stb	r7,158(sp)
    6c50:	003af806 	br	5834 <___vfprintf_internal_r+0xda8>
    6c54:	0005883a 	mov	r2,zero
    6c58:	003d7e06 	br	6254 <___vfprintf_internal_r+0x17c8>
    6c5c:	d8802344 	addi	r2,sp,141
    6c60:	003f1306 	br	68b0 <___vfprintf_internal_r+0x1e24>
    6c64:	d9c02785 	stb	r7,158(sp)
    6c68:	00392306 	br	50f8 <___vfprintf_internal_r+0x66c>
    6c6c:	d9c02785 	stb	r7,158(sp)
    6c70:	003aa906 	br	5718 <___vfprintf_internal_r+0xc8c>
    6c74:	d9c02785 	stb	r7,158(sp)
    6c78:	003a3d06 	br	5570 <___vfprintf_internal_r+0xae4>
    6c7c:	d9c02785 	stb	r7,158(sp)
    6c80:	003aca06 	br	57ac <___vfprintf_internal_r+0xd20>

00006c84 <__vfprintf_internal>:
    6c84:	00800074 	movhi	r2,1
    6c88:	109c3004 	addi	r2,r2,28864
    6c8c:	300f883a 	mov	r7,r6
    6c90:	280d883a 	mov	r6,r5
    6c94:	200b883a 	mov	r5,r4
    6c98:	11000017 	ldw	r4,0(r2)
    6c9c:	0004a8c1 	jmpi	4a8c <___vfprintf_internal_r>

00006ca0 <__sbprintf>:
    6ca0:	2880030b 	ldhu	r2,12(r5)
    6ca4:	2ac01917 	ldw	r11,100(r5)
    6ca8:	2a80038b 	ldhu	r10,14(r5)
    6cac:	2a400717 	ldw	r9,28(r5)
    6cb0:	2a000917 	ldw	r8,36(r5)
    6cb4:	defee204 	addi	sp,sp,-1144
    6cb8:	00c10004 	movi	r3,1024
    6cbc:	dc011a15 	stw	r16,1128(sp)
    6cc0:	10bfff4c 	andi	r2,r2,65533
    6cc4:	2821883a 	mov	r16,r5
    6cc8:	d8cb883a 	add	r5,sp,r3
    6ccc:	dc811c15 	stw	r18,1136(sp)
    6cd0:	dc411b15 	stw	r17,1132(sp)
    6cd4:	dfc11d15 	stw	ra,1140(sp)
    6cd8:	2025883a 	mov	r18,r4
    6cdc:	d881030d 	sth	r2,1036(sp)
    6ce0:	dac11915 	stw	r11,1124(sp)
    6ce4:	da81038d 	sth	r10,1038(sp)
    6ce8:	da410715 	stw	r9,1052(sp)
    6cec:	da010915 	stw	r8,1060(sp)
    6cf0:	dec10015 	stw	sp,1024(sp)
    6cf4:	dec10415 	stw	sp,1040(sp)
    6cf8:	d8c10215 	stw	r3,1032(sp)
    6cfc:	d8c10515 	stw	r3,1044(sp)
    6d00:	d8010615 	stw	zero,1048(sp)
    6d04:	0004a8c0 	call	4a8c <___vfprintf_internal_r>
    6d08:	1023883a 	mov	r17,r2
    6d0c:	10000416 	blt	r2,zero,6d20 <__sbprintf+0x80>
    6d10:	d9410004 	addi	r5,sp,1024
    6d14:	9009883a 	mov	r4,r18
    6d18:	00089540 	call	8954 <_fflush_r>
    6d1c:	10000d1e 	bne	r2,zero,6d54 <__sbprintf+0xb4>
    6d20:	d881030b 	ldhu	r2,1036(sp)
    6d24:	1080100c 	andi	r2,r2,64
    6d28:	10000326 	beq	r2,zero,6d38 <__sbprintf+0x98>
    6d2c:	8080030b 	ldhu	r2,12(r16)
    6d30:	10801014 	ori	r2,r2,64
    6d34:	8080030d 	sth	r2,12(r16)
    6d38:	8805883a 	mov	r2,r17
    6d3c:	dfc11d17 	ldw	ra,1140(sp)
    6d40:	dc811c17 	ldw	r18,1136(sp)
    6d44:	dc411b17 	ldw	r17,1132(sp)
    6d48:	dc011a17 	ldw	r16,1128(sp)
    6d4c:	dec11e04 	addi	sp,sp,1144
    6d50:	f800283a 	ret
    6d54:	047fffc4 	movi	r17,-1
    6d58:	003ff106 	br	6d20 <__sbprintf+0x80>

00006d5c <__swsetup_r>:
    6d5c:	00800074 	movhi	r2,1
    6d60:	defffd04 	addi	sp,sp,-12
    6d64:	109c3004 	addi	r2,r2,28864
    6d68:	dc400115 	stw	r17,4(sp)
    6d6c:	2023883a 	mov	r17,r4
    6d70:	11000017 	ldw	r4,0(r2)
    6d74:	dc000015 	stw	r16,0(sp)
    6d78:	dfc00215 	stw	ra,8(sp)
    6d7c:	2821883a 	mov	r16,r5
    6d80:	20000226 	beq	r4,zero,6d8c <__swsetup_r+0x30>
    6d84:	20800e17 	ldw	r2,56(r4)
    6d88:	10003126 	beq	r2,zero,6e50 <__swsetup_r+0xf4>
    6d8c:	8080030b 	ldhu	r2,12(r16)
    6d90:	10c0020c 	andi	r3,r2,8
    6d94:	1009883a 	mov	r4,r2
    6d98:	18000f26 	beq	r3,zero,6dd8 <__swsetup_r+0x7c>
    6d9c:	80c00417 	ldw	r3,16(r16)
    6da0:	18001526 	beq	r3,zero,6df8 <__swsetup_r+0x9c>
    6da4:	1100004c 	andi	r4,r2,1
    6da8:	20001c1e 	bne	r4,zero,6e1c <__swsetup_r+0xc0>
    6dac:	1080008c 	andi	r2,r2,2
    6db0:	1000291e 	bne	r2,zero,6e58 <__swsetup_r+0xfc>
    6db4:	80800517 	ldw	r2,20(r16)
    6db8:	80800215 	stw	r2,8(r16)
    6dbc:	18001c26 	beq	r3,zero,6e30 <__swsetup_r+0xd4>
    6dc0:	0005883a 	mov	r2,zero
    6dc4:	dfc00217 	ldw	ra,8(sp)
    6dc8:	dc400117 	ldw	r17,4(sp)
    6dcc:	dc000017 	ldw	r16,0(sp)
    6dd0:	dec00304 	addi	sp,sp,12
    6dd4:	f800283a 	ret
    6dd8:	2080040c 	andi	r2,r4,16
    6ddc:	10002e26 	beq	r2,zero,6e98 <__swsetup_r+0x13c>
    6de0:	2080010c 	andi	r2,r4,4
    6de4:	10001e1e 	bne	r2,zero,6e60 <__swsetup_r+0x104>
    6de8:	80c00417 	ldw	r3,16(r16)
    6dec:	20800214 	ori	r2,r4,8
    6df0:	8080030d 	sth	r2,12(r16)
    6df4:	183feb1e 	bne	r3,zero,6da4 <__swsetup_r+0x48>
    6df8:	1100a00c 	andi	r4,r2,640
    6dfc:	01408004 	movi	r5,512
    6e00:	217fe826 	beq	r4,r5,6da4 <__swsetup_r+0x48>
    6e04:	800b883a 	mov	r5,r16
    6e08:	8809883a 	mov	r4,r17
    6e0c:	00098d40 	call	98d4 <__smakebuf_r>
    6e10:	8080030b 	ldhu	r2,12(r16)
    6e14:	80c00417 	ldw	r3,16(r16)
    6e18:	003fe206 	br	6da4 <__swsetup_r+0x48>
    6e1c:	80800517 	ldw	r2,20(r16)
    6e20:	80000215 	stw	zero,8(r16)
    6e24:	0085c83a 	sub	r2,zero,r2
    6e28:	80800615 	stw	r2,24(r16)
    6e2c:	183fe41e 	bne	r3,zero,6dc0 <__swsetup_r+0x64>
    6e30:	80c0030b 	ldhu	r3,12(r16)
    6e34:	0005883a 	mov	r2,zero
    6e38:	1900200c 	andi	r4,r3,128
    6e3c:	203fe126 	beq	r4,zero,6dc4 <__swsetup_r+0x68>
    6e40:	18c01014 	ori	r3,r3,64
    6e44:	80c0030d 	sth	r3,12(r16)
    6e48:	00bfffc4 	movi	r2,-1
    6e4c:	003fdd06 	br	6dc4 <__swsetup_r+0x68>
    6e50:	0008d300 	call	8d30 <__sinit>
    6e54:	003fcd06 	br	6d8c <__swsetup_r+0x30>
    6e58:	0005883a 	mov	r2,zero
    6e5c:	003fd606 	br	6db8 <__swsetup_r+0x5c>
    6e60:	81400c17 	ldw	r5,48(r16)
    6e64:	28000626 	beq	r5,zero,6e80 <__swsetup_r+0x124>
    6e68:	80801004 	addi	r2,r16,64
    6e6c:	28800326 	beq	r5,r2,6e7c <__swsetup_r+0x120>
    6e70:	8809883a 	mov	r4,r17
    6e74:	0008ea40 	call	8ea4 <_free_r>
    6e78:	8100030b 	ldhu	r4,12(r16)
    6e7c:	80000c15 	stw	zero,48(r16)
    6e80:	80c00417 	ldw	r3,16(r16)
    6e84:	00bff6c4 	movi	r2,-37
    6e88:	1108703a 	and	r4,r2,r4
    6e8c:	80000115 	stw	zero,4(r16)
    6e90:	80c00015 	stw	r3,0(r16)
    6e94:	003fd506 	br	6dec <__swsetup_r+0x90>
    6e98:	00800244 	movi	r2,9
    6e9c:	88800015 	stw	r2,0(r17)
    6ea0:	20801014 	ori	r2,r4,64
    6ea4:	8080030d 	sth	r2,12(r16)
    6ea8:	00bfffc4 	movi	r2,-1
    6eac:	003fc506 	br	6dc4 <__swsetup_r+0x68>

00006eb0 <quorem>:
    6eb0:	defff704 	addi	sp,sp,-36
    6eb4:	dc800215 	stw	r18,8(sp)
    6eb8:	20800417 	ldw	r2,16(r4)
    6ebc:	2c800417 	ldw	r18,16(r5)
    6ec0:	dfc00815 	stw	ra,32(sp)
    6ec4:	ddc00715 	stw	r23,28(sp)
    6ec8:	dd800615 	stw	r22,24(sp)
    6ecc:	dd400515 	stw	r21,20(sp)
    6ed0:	dd000415 	stw	r20,16(sp)
    6ed4:	dcc00315 	stw	r19,12(sp)
    6ed8:	dc400115 	stw	r17,4(sp)
    6edc:	dc000015 	stw	r16,0(sp)
    6ee0:	14807116 	blt	r2,r18,70a8 <quorem+0x1f8>
    6ee4:	94bfffc4 	addi	r18,r18,-1
    6ee8:	94ad883a 	add	r22,r18,r18
    6eec:	b5ad883a 	add	r22,r22,r22
    6ef0:	2c400504 	addi	r17,r5,20
    6ef4:	8da9883a 	add	r20,r17,r22
    6ef8:	25400504 	addi	r21,r4,20
    6efc:	282f883a 	mov	r23,r5
    6f00:	adad883a 	add	r22,r21,r22
    6f04:	a1400017 	ldw	r5,0(r20)
    6f08:	2021883a 	mov	r16,r4
    6f0c:	b1000017 	ldw	r4,0(r22)
    6f10:	29400044 	addi	r5,r5,1
    6f14:	00046300 	call	4630 <__udivsi3>
    6f18:	1027883a 	mov	r19,r2
    6f1c:	10002c26 	beq	r2,zero,6fd0 <quorem+0x120>
    6f20:	a813883a 	mov	r9,r21
    6f24:	880b883a 	mov	r5,r17
    6f28:	0009883a 	mov	r4,zero
    6f2c:	000d883a 	mov	r6,zero
    6f30:	2a000017 	ldw	r8,0(r5)
    6f34:	49c00017 	ldw	r7,0(r9)
    6f38:	29400104 	addi	r5,r5,4
    6f3c:	40bfffcc 	andi	r2,r8,65535
    6f40:	14c5383a 	mul	r2,r2,r19
    6f44:	4010d43a 	srli	r8,r8,16
    6f48:	38ffffcc 	andi	r3,r7,65535
    6f4c:	1105883a 	add	r2,r2,r4
    6f50:	1008d43a 	srli	r4,r2,16
    6f54:	44d1383a 	mul	r8,r8,r19
    6f58:	198d883a 	add	r6,r3,r6
    6f5c:	10ffffcc 	andi	r3,r2,65535
    6f60:	30c7c83a 	sub	r3,r6,r3
    6f64:	380ed43a 	srli	r7,r7,16
    6f68:	4105883a 	add	r2,r8,r4
    6f6c:	180dd43a 	srai	r6,r3,16
    6f70:	113fffcc 	andi	r4,r2,65535
    6f74:	390fc83a 	sub	r7,r7,r4
    6f78:	398d883a 	add	r6,r7,r6
    6f7c:	300e943a 	slli	r7,r6,16
    6f80:	18ffffcc 	andi	r3,r3,65535
    6f84:	1008d43a 	srli	r4,r2,16
    6f88:	38ceb03a 	or	r7,r7,r3
    6f8c:	49c00015 	stw	r7,0(r9)
    6f90:	300dd43a 	srai	r6,r6,16
    6f94:	4a400104 	addi	r9,r9,4
    6f98:	a17fe52e 	bgeu	r20,r5,6f30 <quorem+0x80>
    6f9c:	b0800017 	ldw	r2,0(r22)
    6fa0:	10000b1e 	bne	r2,zero,6fd0 <quorem+0x120>
    6fa4:	b0bfff04 	addi	r2,r22,-4
    6fa8:	a880082e 	bgeu	r21,r2,6fcc <quorem+0x11c>
    6fac:	b0ffff17 	ldw	r3,-4(r22)
    6fb0:	18000326 	beq	r3,zero,6fc0 <quorem+0x110>
    6fb4:	00000506 	br	6fcc <quorem+0x11c>
    6fb8:	10c00017 	ldw	r3,0(r2)
    6fbc:	1800031e 	bne	r3,zero,6fcc <quorem+0x11c>
    6fc0:	10bfff04 	addi	r2,r2,-4
    6fc4:	94bfffc4 	addi	r18,r18,-1
    6fc8:	a8bffb36 	bltu	r21,r2,6fb8 <quorem+0x108>
    6fcc:	84800415 	stw	r18,16(r16)
    6fd0:	b80b883a 	mov	r5,r23
    6fd4:	8009883a 	mov	r4,r16
    6fd8:	000b0140 	call	b014 <__mcmp>
    6fdc:	10002616 	blt	r2,zero,7078 <quorem+0x1c8>
    6fe0:	9cc00044 	addi	r19,r19,1
    6fe4:	a805883a 	mov	r2,r21
    6fe8:	000b883a 	mov	r5,zero
    6fec:	11000017 	ldw	r4,0(r2)
    6ff0:	89800017 	ldw	r6,0(r17)
    6ff4:	10800104 	addi	r2,r2,4
    6ff8:	20ffffcc 	andi	r3,r4,65535
    6ffc:	194b883a 	add	r5,r3,r5
    7000:	30ffffcc 	andi	r3,r6,65535
    7004:	28c7c83a 	sub	r3,r5,r3
    7008:	300cd43a 	srli	r6,r6,16
    700c:	2008d43a 	srli	r4,r4,16
    7010:	180bd43a 	srai	r5,r3,16
    7014:	18ffffcc 	andi	r3,r3,65535
    7018:	2189c83a 	sub	r4,r4,r6
    701c:	2149883a 	add	r4,r4,r5
    7020:	200c943a 	slli	r6,r4,16
    7024:	8c400104 	addi	r17,r17,4
    7028:	200bd43a 	srai	r5,r4,16
    702c:	30c6b03a 	or	r3,r6,r3
    7030:	10ffff15 	stw	r3,-4(r2)
    7034:	a47fed2e 	bgeu	r20,r17,6fec <quorem+0x13c>
    7038:	9485883a 	add	r2,r18,r18
    703c:	1085883a 	add	r2,r2,r2
    7040:	a887883a 	add	r3,r21,r2
    7044:	18800017 	ldw	r2,0(r3)
    7048:	10000b1e 	bne	r2,zero,7078 <quorem+0x1c8>
    704c:	18bfff04 	addi	r2,r3,-4
    7050:	a880082e 	bgeu	r21,r2,7074 <quorem+0x1c4>
    7054:	18ffff17 	ldw	r3,-4(r3)
    7058:	18000326 	beq	r3,zero,7068 <quorem+0x1b8>
    705c:	00000506 	br	7074 <quorem+0x1c4>
    7060:	10c00017 	ldw	r3,0(r2)
    7064:	1800031e 	bne	r3,zero,7074 <quorem+0x1c4>
    7068:	10bfff04 	addi	r2,r2,-4
    706c:	94bfffc4 	addi	r18,r18,-1
    7070:	a8bffb36 	bltu	r21,r2,7060 <quorem+0x1b0>
    7074:	84800415 	stw	r18,16(r16)
    7078:	9805883a 	mov	r2,r19
    707c:	dfc00817 	ldw	ra,32(sp)
    7080:	ddc00717 	ldw	r23,28(sp)
    7084:	dd800617 	ldw	r22,24(sp)
    7088:	dd400517 	ldw	r21,20(sp)
    708c:	dd000417 	ldw	r20,16(sp)
    7090:	dcc00317 	ldw	r19,12(sp)
    7094:	dc800217 	ldw	r18,8(sp)
    7098:	dc400117 	ldw	r17,4(sp)
    709c:	dc000017 	ldw	r16,0(sp)
    70a0:	dec00904 	addi	sp,sp,36
    70a4:	f800283a 	ret
    70a8:	0005883a 	mov	r2,zero
    70ac:	003ff306 	br	707c <quorem+0x1cc>

000070b0 <_dtoa_r>:
    70b0:	20801017 	ldw	r2,64(r4)
    70b4:	deffde04 	addi	sp,sp,-136
    70b8:	df002015 	stw	fp,128(sp)
    70bc:	dcc01b15 	stw	r19,108(sp)
    70c0:	dc801a15 	stw	r18,104(sp)
    70c4:	dc401915 	stw	r17,100(sp)
    70c8:	dc001815 	stw	r16,96(sp)
    70cc:	dfc02115 	stw	ra,132(sp)
    70d0:	ddc01f15 	stw	r23,124(sp)
    70d4:	dd801e15 	stw	r22,120(sp)
    70d8:	dd401d15 	stw	r21,116(sp)
    70dc:	dd001c15 	stw	r20,112(sp)
    70e0:	d9c00315 	stw	r7,12(sp)
    70e4:	2039883a 	mov	fp,r4
    70e8:	3023883a 	mov	r17,r6
    70ec:	2825883a 	mov	r18,r5
    70f0:	dc002417 	ldw	r16,144(sp)
    70f4:	3027883a 	mov	r19,r6
    70f8:	10000826 	beq	r2,zero,711c <_dtoa_r+0x6c>
    70fc:	21801117 	ldw	r6,68(r4)
    7100:	00c00044 	movi	r3,1
    7104:	100b883a 	mov	r5,r2
    7108:	1986983a 	sll	r3,r3,r6
    710c:	11800115 	stw	r6,4(r2)
    7110:	10c00215 	stw	r3,8(r2)
    7114:	000a7f40 	call	a7f4 <_Bfree>
    7118:	e0001015 	stw	zero,64(fp)
    711c:	88002e16 	blt	r17,zero,71d8 <_dtoa_r+0x128>
    7120:	80000015 	stw	zero,0(r16)
    7124:	889ffc2c 	andhi	r2,r17,32752
    7128:	00dffc34 	movhi	r3,32752
    712c:	10c01c26 	beq	r2,r3,71a0 <_dtoa_r+0xf0>
    7130:	000d883a 	mov	r6,zero
    7134:	000f883a 	mov	r7,zero
    7138:	9009883a 	mov	r4,r18
    713c:	980b883a 	mov	r5,r19
    7140:	000fb4c0 	call	fb4c <__eqdf2>
    7144:	10002b1e 	bne	r2,zero,71f4 <_dtoa_r+0x144>
    7148:	d9c02317 	ldw	r7,140(sp)
    714c:	00800044 	movi	r2,1
    7150:	38800015 	stw	r2,0(r7)
    7154:	d8802517 	ldw	r2,148(sp)
    7158:	10019e26 	beq	r2,zero,77d4 <_dtoa_r+0x724>
    715c:	d8c02517 	ldw	r3,148(sp)
    7160:	00800074 	movhi	r2,1
    7164:	1093e844 	addi	r2,r2,20385
    7168:	18800015 	stw	r2,0(r3)
    716c:	10bfffc4 	addi	r2,r2,-1
    7170:	dfc02117 	ldw	ra,132(sp)
    7174:	df002017 	ldw	fp,128(sp)
    7178:	ddc01f17 	ldw	r23,124(sp)
    717c:	dd801e17 	ldw	r22,120(sp)
    7180:	dd401d17 	ldw	r21,116(sp)
    7184:	dd001c17 	ldw	r20,112(sp)
    7188:	dcc01b17 	ldw	r19,108(sp)
    718c:	dc801a17 	ldw	r18,104(sp)
    7190:	dc401917 	ldw	r17,100(sp)
    7194:	dc001817 	ldw	r16,96(sp)
    7198:	dec02204 	addi	sp,sp,136
    719c:	f800283a 	ret
    71a0:	d8c02317 	ldw	r3,140(sp)
    71a4:	0089c3c4 	movi	r2,9999
    71a8:	18800015 	stw	r2,0(r3)
    71ac:	90017726 	beq	r18,zero,778c <_dtoa_r+0x6dc>
    71b0:	00800074 	movhi	r2,1
    71b4:	1093f404 	addi	r2,r2,20432
    71b8:	d9002517 	ldw	r4,148(sp)
    71bc:	203fec26 	beq	r4,zero,7170 <_dtoa_r+0xc0>
    71c0:	10c000c7 	ldb	r3,3(r2)
    71c4:	1801781e 	bne	r3,zero,77a8 <_dtoa_r+0x6f8>
    71c8:	10c000c4 	addi	r3,r2,3
    71cc:	d9802517 	ldw	r6,148(sp)
    71d0:	30c00015 	stw	r3,0(r6)
    71d4:	003fe606 	br	7170 <_dtoa_r+0xc0>
    71d8:	04e00034 	movhi	r19,32768
    71dc:	9cffffc4 	addi	r19,r19,-1
    71e0:	00800044 	movi	r2,1
    71e4:	8ce6703a 	and	r19,r17,r19
    71e8:	80800015 	stw	r2,0(r16)
    71ec:	9823883a 	mov	r17,r19
    71f0:	003fcc06 	br	7124 <_dtoa_r+0x74>
    71f4:	d8800204 	addi	r2,sp,8
    71f8:	d8800015 	stw	r2,0(sp)
    71fc:	d9c00104 	addi	r7,sp,4
    7200:	900b883a 	mov	r5,r18
    7204:	980d883a 	mov	r6,r19
    7208:	e009883a 	mov	r4,fp
    720c:	8820d53a 	srli	r16,r17,20
    7210:	000b3e00 	call	b3e0 <__d2b>
    7214:	d8800915 	stw	r2,36(sp)
    7218:	8001651e 	bne	r16,zero,77b0 <_dtoa_r+0x700>
    721c:	dd800217 	ldw	r22,8(sp)
    7220:	dc000117 	ldw	r16,4(sp)
    7224:	00800804 	movi	r2,32
    7228:	b421883a 	add	r16,r22,r16
    722c:	80c10c84 	addi	r3,r16,1074
    7230:	10c2d10e 	bge	r2,r3,7d78 <_dtoa_r+0xcc8>
    7234:	00801004 	movi	r2,64
    7238:	81010484 	addi	r4,r16,1042
    723c:	10c7c83a 	sub	r3,r2,r3
    7240:	9108d83a 	srl	r4,r18,r4
    7244:	88e2983a 	sll	r17,r17,r3
    7248:	2448b03a 	or	r4,r4,r17
    724c:	0010f140 	call	10f14 <__floatunsidf>
    7250:	017f8434 	movhi	r5,65040
    7254:	01800044 	movi	r6,1
    7258:	1009883a 	mov	r4,r2
    725c:	194b883a 	add	r5,r3,r5
    7260:	843fffc4 	addi	r16,r16,-1
    7264:	d9801115 	stw	r6,68(sp)
    7268:	000d883a 	mov	r6,zero
    726c:	01cffe34 	movhi	r7,16376
    7270:	00104bc0 	call	104bc <__subdf3>
    7274:	0198dbf4 	movhi	r6,25455
    7278:	01cff4f4 	movhi	r7,16339
    727c:	3190d844 	addi	r6,r6,17249
    7280:	39e1e9c4 	addi	r7,r7,-30809
    7284:	1009883a 	mov	r4,r2
    7288:	180b883a 	mov	r5,r3
    728c:	000fda40 	call	fda4 <__muldf3>
    7290:	01a2d874 	movhi	r6,35681
    7294:	01cff1f4 	movhi	r7,16327
    7298:	31b22cc4 	addi	r6,r6,-14157
    729c:	39e28a04 	addi	r7,r7,-30168
    72a0:	180b883a 	mov	r5,r3
    72a4:	1009883a 	mov	r4,r2
    72a8:	000e9b80 	call	e9b8 <__adddf3>
    72ac:	8009883a 	mov	r4,r16
    72b0:	1029883a 	mov	r20,r2
    72b4:	1823883a 	mov	r17,r3
    72b8:	0010e380 	call	10e38 <__floatsidf>
    72bc:	019427f4 	movhi	r6,20639
    72c0:	01cff4f4 	movhi	r7,16339
    72c4:	319e7ec4 	addi	r6,r6,31227
    72c8:	39d104c4 	addi	r7,r7,17427
    72cc:	1009883a 	mov	r4,r2
    72d0:	180b883a 	mov	r5,r3
    72d4:	000fda40 	call	fda4 <__muldf3>
    72d8:	100d883a 	mov	r6,r2
    72dc:	180f883a 	mov	r7,r3
    72e0:	a009883a 	mov	r4,r20
    72e4:	880b883a 	mov	r5,r17
    72e8:	000e9b80 	call	e9b8 <__adddf3>
    72ec:	1009883a 	mov	r4,r2
    72f0:	180b883a 	mov	r5,r3
    72f4:	1029883a 	mov	r20,r2
    72f8:	1823883a 	mov	r17,r3
    72fc:	0010db80 	call	10db8 <__fixdfsi>
    7300:	000d883a 	mov	r6,zero
    7304:	000f883a 	mov	r7,zero
    7308:	a009883a 	mov	r4,r20
    730c:	880b883a 	mov	r5,r17
    7310:	d8800515 	stw	r2,20(sp)
    7314:	000fcb00 	call	fcb0 <__ledf2>
    7318:	10028716 	blt	r2,zero,7d38 <_dtoa_r+0xc88>
    731c:	d8c00517 	ldw	r3,20(sp)
    7320:	00800584 	movi	r2,22
    7324:	10c27536 	bltu	r2,r3,7cfc <_dtoa_r+0xc4c>
    7328:	180490fa 	slli	r2,r3,3
    732c:	00c00074 	movhi	r3,1
    7330:	18d41004 	addi	r3,r3,20544
    7334:	1885883a 	add	r2,r3,r2
    7338:	11000017 	ldw	r4,0(r2)
    733c:	11400117 	ldw	r5,4(r2)
    7340:	900d883a 	mov	r6,r18
    7344:	980f883a 	mov	r7,r19
    7348:	000fbd40 	call	fbd4 <__gedf2>
    734c:	00828d0e 	bge	zero,r2,7d84 <_dtoa_r+0xcd4>
    7350:	d9000517 	ldw	r4,20(sp)
    7354:	d8000e15 	stw	zero,56(sp)
    7358:	213fffc4 	addi	r4,r4,-1
    735c:	d9000515 	stw	r4,20(sp)
    7360:	b42dc83a 	sub	r22,r22,r16
    7364:	b5bfffc4 	addi	r22,r22,-1
    7368:	b0026f16 	blt	r22,zero,7d28 <_dtoa_r+0xc78>
    736c:	d8000815 	stw	zero,32(sp)
    7370:	d9c00517 	ldw	r7,20(sp)
    7374:	38026416 	blt	r7,zero,7d08 <_dtoa_r+0xc58>
    7378:	b1ed883a 	add	r22,r22,r7
    737c:	d9c00d15 	stw	r7,52(sp)
    7380:	d8000a15 	stw	zero,40(sp)
    7384:	d9800317 	ldw	r6,12(sp)
    7388:	00800244 	movi	r2,9
    738c:	11811436 	bltu	r2,r6,77e0 <_dtoa_r+0x730>
    7390:	00800144 	movi	r2,5
    7394:	1184e10e 	bge	r2,r6,871c <_dtoa_r+0x166c>
    7398:	31bfff04 	addi	r6,r6,-4
    739c:	d9800315 	stw	r6,12(sp)
    73a0:	0023883a 	mov	r17,zero
    73a4:	d9800317 	ldw	r6,12(sp)
    73a8:	008000c4 	movi	r2,3
    73ac:	30836726 	beq	r6,r2,814c <_dtoa_r+0x109c>
    73b0:	1183410e 	bge	r2,r6,80b8 <_dtoa_r+0x1008>
    73b4:	d9c00317 	ldw	r7,12(sp)
    73b8:	00800104 	movi	r2,4
    73bc:	38827c26 	beq	r7,r2,7db0 <_dtoa_r+0xd00>
    73c0:	00800144 	movi	r2,5
    73c4:	3884c41e 	bne	r7,r2,86d8 <_dtoa_r+0x1628>
    73c8:	00800044 	movi	r2,1
    73cc:	d8800b15 	stw	r2,44(sp)
    73d0:	d8c00517 	ldw	r3,20(sp)
    73d4:	d9002217 	ldw	r4,136(sp)
    73d8:	1907883a 	add	r3,r3,r4
    73dc:	19800044 	addi	r6,r3,1
    73e0:	d8c00c15 	stw	r3,48(sp)
    73e4:	d9800615 	stw	r6,24(sp)
    73e8:	0183a40e 	bge	zero,r6,827c <_dtoa_r+0x11cc>
    73ec:	d9800617 	ldw	r6,24(sp)
    73f0:	3021883a 	mov	r16,r6
    73f4:	e0001115 	stw	zero,68(fp)
    73f8:	008005c4 	movi	r2,23
    73fc:	1184c92e 	bgeu	r2,r6,8724 <_dtoa_r+0x1674>
    7400:	00c00044 	movi	r3,1
    7404:	00800104 	movi	r2,4
    7408:	1085883a 	add	r2,r2,r2
    740c:	11000504 	addi	r4,r2,20
    7410:	180b883a 	mov	r5,r3
    7414:	18c00044 	addi	r3,r3,1
    7418:	313ffb2e 	bgeu	r6,r4,7408 <_dtoa_r+0x358>
    741c:	e1401115 	stw	r5,68(fp)
    7420:	e009883a 	mov	r4,fp
    7424:	000a74c0 	call	a74c <_Balloc>
    7428:	d8800715 	stw	r2,28(sp)
    742c:	e0801015 	stw	r2,64(fp)
    7430:	00800384 	movi	r2,14
    7434:	1400f736 	bltu	r2,r16,7814 <_dtoa_r+0x764>
    7438:	8800f626 	beq	r17,zero,7814 <_dtoa_r+0x764>
    743c:	d9c00517 	ldw	r7,20(sp)
    7440:	01c39a0e 	bge	zero,r7,82ac <_dtoa_r+0x11fc>
    7444:	388003cc 	andi	r2,r7,15
    7448:	100490fa 	slli	r2,r2,3
    744c:	382bd13a 	srai	r21,r7,4
    7450:	00c00074 	movhi	r3,1
    7454:	18d41004 	addi	r3,r3,20544
    7458:	1885883a 	add	r2,r3,r2
    745c:	a8c0040c 	andi	r3,r21,16
    7460:	12400017 	ldw	r9,0(r2)
    7464:	12000117 	ldw	r8,4(r2)
    7468:	18037926 	beq	r3,zero,8250 <_dtoa_r+0x11a0>
    746c:	00800074 	movhi	r2,1
    7470:	10940604 	addi	r2,r2,20504
    7474:	11800817 	ldw	r6,32(r2)
    7478:	11c00917 	ldw	r7,36(r2)
    747c:	9009883a 	mov	r4,r18
    7480:	980b883a 	mov	r5,r19
    7484:	da001715 	stw	r8,92(sp)
    7488:	da401615 	stw	r9,88(sp)
    748c:	000f2640 	call	f264 <__divdf3>
    7490:	da001717 	ldw	r8,92(sp)
    7494:	da401617 	ldw	r9,88(sp)
    7498:	ad4003cc 	andi	r21,r21,15
    749c:	040000c4 	movi	r16,3
    74a0:	1023883a 	mov	r17,r2
    74a4:	1829883a 	mov	r20,r3
    74a8:	a8001126 	beq	r21,zero,74f0 <_dtoa_r+0x440>
    74ac:	05c00074 	movhi	r23,1
    74b0:	bdd40604 	addi	r23,r23,20504
    74b4:	4805883a 	mov	r2,r9
    74b8:	4007883a 	mov	r3,r8
    74bc:	a980004c 	andi	r6,r21,1
    74c0:	1009883a 	mov	r4,r2
    74c4:	a82bd07a 	srai	r21,r21,1
    74c8:	180b883a 	mov	r5,r3
    74cc:	30000426 	beq	r6,zero,74e0 <_dtoa_r+0x430>
    74d0:	b9800017 	ldw	r6,0(r23)
    74d4:	b9c00117 	ldw	r7,4(r23)
    74d8:	84000044 	addi	r16,r16,1
    74dc:	000fda40 	call	fda4 <__muldf3>
    74e0:	bdc00204 	addi	r23,r23,8
    74e4:	a83ff51e 	bne	r21,zero,74bc <_dtoa_r+0x40c>
    74e8:	1013883a 	mov	r9,r2
    74ec:	1811883a 	mov	r8,r3
    74f0:	480d883a 	mov	r6,r9
    74f4:	400f883a 	mov	r7,r8
    74f8:	8809883a 	mov	r4,r17
    74fc:	a00b883a 	mov	r5,r20
    7500:	000f2640 	call	f264 <__divdf3>
    7504:	d8800f15 	stw	r2,60(sp)
    7508:	d8c01015 	stw	r3,64(sp)
    750c:	d8c00e17 	ldw	r3,56(sp)
    7510:	18000626 	beq	r3,zero,752c <_dtoa_r+0x47c>
    7514:	d9000f17 	ldw	r4,60(sp)
    7518:	d9401017 	ldw	r5,64(sp)
    751c:	000d883a 	mov	r6,zero
    7520:	01cffc34 	movhi	r7,16368
    7524:	000fcb00 	call	fcb0 <__ledf2>
    7528:	10040b16 	blt	r2,zero,8558 <_dtoa_r+0x14a8>
    752c:	8009883a 	mov	r4,r16
    7530:	0010e380 	call	10e38 <__floatsidf>
    7534:	d9800f17 	ldw	r6,60(sp)
    7538:	d9c01017 	ldw	r7,64(sp)
    753c:	1009883a 	mov	r4,r2
    7540:	180b883a 	mov	r5,r3
    7544:	000fda40 	call	fda4 <__muldf3>
    7548:	000d883a 	mov	r6,zero
    754c:	01d00734 	movhi	r7,16412
    7550:	1009883a 	mov	r4,r2
    7554:	180b883a 	mov	r5,r3
    7558:	000e9b80 	call	e9b8 <__adddf3>
    755c:	1021883a 	mov	r16,r2
    7560:	d8800617 	ldw	r2,24(sp)
    7564:	047f3034 	movhi	r17,64704
    7568:	1c63883a 	add	r17,r3,r17
    756c:	10031826 	beq	r2,zero,81d0 <_dtoa_r+0x1120>
    7570:	d8c00517 	ldw	r3,20(sp)
    7574:	db000617 	ldw	r12,24(sp)
    7578:	d8c01315 	stw	r3,76(sp)
    757c:	d9000b17 	ldw	r4,44(sp)
    7580:	20038f26 	beq	r4,zero,83c0 <_dtoa_r+0x1310>
    7584:	60bfffc4 	addi	r2,r12,-1
    7588:	100490fa 	slli	r2,r2,3
    758c:	00c00074 	movhi	r3,1
    7590:	18d41004 	addi	r3,r3,20544
    7594:	1885883a 	add	r2,r3,r2
    7598:	11800017 	ldw	r6,0(r2)
    759c:	11c00117 	ldw	r7,4(r2)
    75a0:	d8800717 	ldw	r2,28(sp)
    75a4:	0009883a 	mov	r4,zero
    75a8:	014ff834 	movhi	r5,16352
    75ac:	db001615 	stw	r12,88(sp)
    75b0:	15c00044 	addi	r23,r2,1
    75b4:	000f2640 	call	f264 <__divdf3>
    75b8:	800d883a 	mov	r6,r16
    75bc:	880f883a 	mov	r7,r17
    75c0:	1009883a 	mov	r4,r2
    75c4:	180b883a 	mov	r5,r3
    75c8:	00104bc0 	call	104bc <__subdf3>
    75cc:	d9401017 	ldw	r5,64(sp)
    75d0:	d9000f17 	ldw	r4,60(sp)
    75d4:	102b883a 	mov	r21,r2
    75d8:	d8c01215 	stw	r3,72(sp)
    75dc:	0010db80 	call	10db8 <__fixdfsi>
    75e0:	1009883a 	mov	r4,r2
    75e4:	1029883a 	mov	r20,r2
    75e8:	0010e380 	call	10e38 <__floatsidf>
    75ec:	d9000f17 	ldw	r4,60(sp)
    75f0:	d9401017 	ldw	r5,64(sp)
    75f4:	100d883a 	mov	r6,r2
    75f8:	180f883a 	mov	r7,r3
    75fc:	00104bc0 	call	104bc <__subdf3>
    7600:	1823883a 	mov	r17,r3
    7604:	d8c00717 	ldw	r3,28(sp)
    7608:	d9401217 	ldw	r5,72(sp)
    760c:	a2000c04 	addi	r8,r20,48
    7610:	1021883a 	mov	r16,r2
    7614:	1a000005 	stb	r8,0(r3)
    7618:	800d883a 	mov	r6,r16
    761c:	880f883a 	mov	r7,r17
    7620:	a809883a 	mov	r4,r21
    7624:	4029883a 	mov	r20,r8
    7628:	000fbd40 	call	fbd4 <__gedf2>
    762c:	00841d16 	blt	zero,r2,86a4 <_dtoa_r+0x15f4>
    7630:	800d883a 	mov	r6,r16
    7634:	880f883a 	mov	r7,r17
    7638:	0009883a 	mov	r4,zero
    763c:	014ffc34 	movhi	r5,16368
    7640:	00104bc0 	call	104bc <__subdf3>
    7644:	d9401217 	ldw	r5,72(sp)
    7648:	100d883a 	mov	r6,r2
    764c:	180f883a 	mov	r7,r3
    7650:	a809883a 	mov	r4,r21
    7654:	000fbd40 	call	fbd4 <__gedf2>
    7658:	db001617 	ldw	r12,88(sp)
    765c:	00840e16 	blt	zero,r2,8698 <_dtoa_r+0x15e8>
    7660:	00800044 	movi	r2,1
    7664:	13006b0e 	bge	r2,r12,7814 <_dtoa_r+0x764>
    7668:	d9000717 	ldw	r4,28(sp)
    766c:	dd800f15 	stw	r22,60(sp)
    7670:	dcc01015 	stw	r19,64(sp)
    7674:	2319883a 	add	r12,r4,r12
    7678:	dcc01217 	ldw	r19,72(sp)
    767c:	602d883a 	mov	r22,r12
    7680:	dc801215 	stw	r18,72(sp)
    7684:	b825883a 	mov	r18,r23
    7688:	00000906 	br	76b0 <_dtoa_r+0x600>
    768c:	00104bc0 	call	104bc <__subdf3>
    7690:	a80d883a 	mov	r6,r21
    7694:	980f883a 	mov	r7,r19
    7698:	1009883a 	mov	r4,r2
    769c:	180b883a 	mov	r5,r3
    76a0:	000fcb00 	call	fcb0 <__ledf2>
    76a4:	1003e816 	blt	r2,zero,8648 <_dtoa_r+0x1598>
    76a8:	b825883a 	mov	r18,r23
    76ac:	bd83e926 	beq	r23,r22,8654 <_dtoa_r+0x15a4>
    76b0:	a809883a 	mov	r4,r21
    76b4:	980b883a 	mov	r5,r19
    76b8:	000d883a 	mov	r6,zero
    76bc:	01d00934 	movhi	r7,16420
    76c0:	000fda40 	call	fda4 <__muldf3>
    76c4:	000d883a 	mov	r6,zero
    76c8:	01d00934 	movhi	r7,16420
    76cc:	8009883a 	mov	r4,r16
    76d0:	880b883a 	mov	r5,r17
    76d4:	102b883a 	mov	r21,r2
    76d8:	1827883a 	mov	r19,r3
    76dc:	000fda40 	call	fda4 <__muldf3>
    76e0:	180b883a 	mov	r5,r3
    76e4:	1009883a 	mov	r4,r2
    76e8:	1821883a 	mov	r16,r3
    76ec:	1023883a 	mov	r17,r2
    76f0:	0010db80 	call	10db8 <__fixdfsi>
    76f4:	1009883a 	mov	r4,r2
    76f8:	1029883a 	mov	r20,r2
    76fc:	0010e380 	call	10e38 <__floatsidf>
    7700:	8809883a 	mov	r4,r17
    7704:	800b883a 	mov	r5,r16
    7708:	100d883a 	mov	r6,r2
    770c:	180f883a 	mov	r7,r3
    7710:	00104bc0 	call	104bc <__subdf3>
    7714:	a5000c04 	addi	r20,r20,48
    7718:	a80d883a 	mov	r6,r21
    771c:	980f883a 	mov	r7,r19
    7720:	1009883a 	mov	r4,r2
    7724:	180b883a 	mov	r5,r3
    7728:	95000005 	stb	r20,0(r18)
    772c:	1021883a 	mov	r16,r2
    7730:	1823883a 	mov	r17,r3
    7734:	000fcb00 	call	fcb0 <__ledf2>
    7738:	bdc00044 	addi	r23,r23,1
    773c:	800d883a 	mov	r6,r16
    7740:	880f883a 	mov	r7,r17
    7744:	0009883a 	mov	r4,zero
    7748:	014ffc34 	movhi	r5,16368
    774c:	103fcf0e 	bge	r2,zero,768c <_dtoa_r+0x5dc>
    7750:	d8c01317 	ldw	r3,76(sp)
    7754:	d8c00515 	stw	r3,20(sp)
    7758:	d9400917 	ldw	r5,36(sp)
    775c:	e009883a 	mov	r4,fp
    7760:	000a7f40 	call	a7f4 <_Bfree>
    7764:	d9000517 	ldw	r4,20(sp)
    7768:	d9802317 	ldw	r6,140(sp)
    776c:	d9c02517 	ldw	r7,148(sp)
    7770:	b8000005 	stb	zero,0(r23)
    7774:	20800044 	addi	r2,r4,1
    7778:	30800015 	stw	r2,0(r6)
    777c:	3802aa26 	beq	r7,zero,8228 <_dtoa_r+0x1178>
    7780:	3dc00015 	stw	r23,0(r7)
    7784:	d8800717 	ldw	r2,28(sp)
    7788:	003e7906 	br	7170 <_dtoa_r+0xc0>
    778c:	00800434 	movhi	r2,16
    7790:	10bfffc4 	addi	r2,r2,-1
    7794:	88a2703a 	and	r17,r17,r2
    7798:	883e851e 	bne	r17,zero,71b0 <_dtoa_r+0x100>
    779c:	00800074 	movhi	r2,1
    77a0:	1093f104 	addi	r2,r2,20420
    77a4:	003e8406 	br	71b8 <_dtoa_r+0x108>
    77a8:	10c00204 	addi	r3,r2,8
    77ac:	003e8706 	br	71cc <_dtoa_r+0x11c>
    77b0:	01400434 	movhi	r5,16
    77b4:	297fffc4 	addi	r5,r5,-1
    77b8:	994a703a 	and	r5,r19,r5
    77bc:	9009883a 	mov	r4,r18
    77c0:	843f0044 	addi	r16,r16,-1023
    77c4:	294ffc34 	orhi	r5,r5,16368
    77c8:	dd800217 	ldw	r22,8(sp)
    77cc:	d8001115 	stw	zero,68(sp)
    77d0:	003ea506 	br	7268 <_dtoa_r+0x1b8>
    77d4:	00800074 	movhi	r2,1
    77d8:	1093e804 	addi	r2,r2,20384
    77dc:	003e6406 	br	7170 <_dtoa_r+0xc0>
    77e0:	e0001115 	stw	zero,68(fp)
    77e4:	000b883a 	mov	r5,zero
    77e8:	e009883a 	mov	r4,fp
    77ec:	000a74c0 	call	a74c <_Balloc>
    77f0:	01bfffc4 	movi	r6,-1
    77f4:	01c00044 	movi	r7,1
    77f8:	d8800715 	stw	r2,28(sp)
    77fc:	d9800c15 	stw	r6,48(sp)
    7800:	e0801015 	stw	r2,64(fp)
    7804:	d8000315 	stw	zero,12(sp)
    7808:	d9c00b15 	stw	r7,44(sp)
    780c:	d9800615 	stw	r6,24(sp)
    7810:	d8002215 	stw	zero,136(sp)
    7814:	d8800117 	ldw	r2,4(sp)
    7818:	10008916 	blt	r2,zero,7a40 <_dtoa_r+0x990>
    781c:	d9000517 	ldw	r4,20(sp)
    7820:	00c00384 	movi	r3,14
    7824:	19008616 	blt	r3,r4,7a40 <_dtoa_r+0x990>
    7828:	200490fa 	slli	r2,r4,3
    782c:	00c00074 	movhi	r3,1
    7830:	d9802217 	ldw	r6,136(sp)
    7834:	18d41004 	addi	r3,r3,20544
    7838:	1885883a 	add	r2,r3,r2
    783c:	14000017 	ldw	r16,0(r2)
    7840:	14400117 	ldw	r17,4(r2)
    7844:	30016316 	blt	r6,zero,7dd4 <_dtoa_r+0xd24>
    7848:	800d883a 	mov	r6,r16
    784c:	880f883a 	mov	r7,r17
    7850:	9009883a 	mov	r4,r18
    7854:	980b883a 	mov	r5,r19
    7858:	000f2640 	call	f264 <__divdf3>
    785c:	180b883a 	mov	r5,r3
    7860:	1009883a 	mov	r4,r2
    7864:	0010db80 	call	10db8 <__fixdfsi>
    7868:	1009883a 	mov	r4,r2
    786c:	102b883a 	mov	r21,r2
    7870:	0010e380 	call	10e38 <__floatsidf>
    7874:	800d883a 	mov	r6,r16
    7878:	880f883a 	mov	r7,r17
    787c:	1009883a 	mov	r4,r2
    7880:	180b883a 	mov	r5,r3
    7884:	000fda40 	call	fda4 <__muldf3>
    7888:	100d883a 	mov	r6,r2
    788c:	180f883a 	mov	r7,r3
    7890:	9009883a 	mov	r4,r18
    7894:	980b883a 	mov	r5,r19
    7898:	00104bc0 	call	104bc <__subdf3>
    789c:	d9c00717 	ldw	r7,28(sp)
    78a0:	1009883a 	mov	r4,r2
    78a4:	a8800c04 	addi	r2,r21,48
    78a8:	38800005 	stb	r2,0(r7)
    78ac:	3dc00044 	addi	r23,r7,1
    78b0:	d9c00617 	ldw	r7,24(sp)
    78b4:	01800044 	movi	r6,1
    78b8:	180b883a 	mov	r5,r3
    78bc:	2005883a 	mov	r2,r4
    78c0:	39803826 	beq	r7,r6,79a4 <_dtoa_r+0x8f4>
    78c4:	000d883a 	mov	r6,zero
    78c8:	01d00934 	movhi	r7,16420
    78cc:	000fda40 	call	fda4 <__muldf3>
    78d0:	000d883a 	mov	r6,zero
    78d4:	000f883a 	mov	r7,zero
    78d8:	1009883a 	mov	r4,r2
    78dc:	180b883a 	mov	r5,r3
    78e0:	1025883a 	mov	r18,r2
    78e4:	1827883a 	mov	r19,r3
    78e8:	000fb4c0 	call	fb4c <__eqdf2>
    78ec:	103f9a26 	beq	r2,zero,7758 <_dtoa_r+0x6a8>
    78f0:	d9c00617 	ldw	r7,24(sp)
    78f4:	d8c00717 	ldw	r3,28(sp)
    78f8:	b829883a 	mov	r20,r23
    78fc:	38bfffc4 	addi	r2,r7,-1
    7900:	18ad883a 	add	r22,r3,r2
    7904:	00000a06 	br	7930 <_dtoa_r+0x880>
    7908:	000fda40 	call	fda4 <__muldf3>
    790c:	000d883a 	mov	r6,zero
    7910:	000f883a 	mov	r7,zero
    7914:	1009883a 	mov	r4,r2
    7918:	180b883a 	mov	r5,r3
    791c:	1025883a 	mov	r18,r2
    7920:	1827883a 	mov	r19,r3
    7924:	b829883a 	mov	r20,r23
    7928:	000fb4c0 	call	fb4c <__eqdf2>
    792c:	103f8a26 	beq	r2,zero,7758 <_dtoa_r+0x6a8>
    7930:	800d883a 	mov	r6,r16
    7934:	880f883a 	mov	r7,r17
    7938:	9009883a 	mov	r4,r18
    793c:	980b883a 	mov	r5,r19
    7940:	000f2640 	call	f264 <__divdf3>
    7944:	180b883a 	mov	r5,r3
    7948:	1009883a 	mov	r4,r2
    794c:	0010db80 	call	10db8 <__fixdfsi>
    7950:	1009883a 	mov	r4,r2
    7954:	102b883a 	mov	r21,r2
    7958:	0010e380 	call	10e38 <__floatsidf>
    795c:	800d883a 	mov	r6,r16
    7960:	880f883a 	mov	r7,r17
    7964:	1009883a 	mov	r4,r2
    7968:	180b883a 	mov	r5,r3
    796c:	000fda40 	call	fda4 <__muldf3>
    7970:	100d883a 	mov	r6,r2
    7974:	180f883a 	mov	r7,r3
    7978:	9009883a 	mov	r4,r18
    797c:	980b883a 	mov	r5,r19
    7980:	00104bc0 	call	104bc <__subdf3>
    7984:	aa000c04 	addi	r8,r21,48
    7988:	a2000005 	stb	r8,0(r20)
    798c:	000d883a 	mov	r6,zero
    7990:	01d00934 	movhi	r7,16420
    7994:	1009883a 	mov	r4,r2
    7998:	180b883a 	mov	r5,r3
    799c:	a5c00044 	addi	r23,r20,1
    79a0:	b53fd91e 	bne	r22,r20,7908 <_dtoa_r+0x858>
    79a4:	100d883a 	mov	r6,r2
    79a8:	180f883a 	mov	r7,r3
    79ac:	1009883a 	mov	r4,r2
    79b0:	180b883a 	mov	r5,r3
    79b4:	000e9b80 	call	e9b8 <__adddf3>
    79b8:	100d883a 	mov	r6,r2
    79bc:	180f883a 	mov	r7,r3
    79c0:	8009883a 	mov	r4,r16
    79c4:	880b883a 	mov	r5,r17
    79c8:	1027883a 	mov	r19,r2
    79cc:	1825883a 	mov	r18,r3
    79d0:	000fcb00 	call	fcb0 <__ledf2>
    79d4:	10000816 	blt	r2,zero,79f8 <_dtoa_r+0x948>
    79d8:	980d883a 	mov	r6,r19
    79dc:	900f883a 	mov	r7,r18
    79e0:	8009883a 	mov	r4,r16
    79e4:	880b883a 	mov	r5,r17
    79e8:	000fb4c0 	call	fb4c <__eqdf2>
    79ec:	103f5a1e 	bne	r2,zero,7758 <_dtoa_r+0x6a8>
    79f0:	ad40004c 	andi	r21,r21,1
    79f4:	a83f5826 	beq	r21,zero,7758 <_dtoa_r+0x6a8>
    79f8:	bd3fffc3 	ldbu	r20,-1(r23)
    79fc:	b8bfffc4 	addi	r2,r23,-1
    7a00:	1007883a 	mov	r3,r2
    7a04:	01400e44 	movi	r5,57
    7a08:	d9800717 	ldw	r6,28(sp)
    7a0c:	00000506 	br	7a24 <_dtoa_r+0x974>
    7a10:	18ffffc4 	addi	r3,r3,-1
    7a14:	11824726 	beq	r2,r6,8334 <_dtoa_r+0x1284>
    7a18:	1d000003 	ldbu	r20,0(r3)
    7a1c:	102f883a 	mov	r23,r2
    7a20:	10bfffc4 	addi	r2,r2,-1
    7a24:	a1003fcc 	andi	r4,r20,255
    7a28:	2100201c 	xori	r4,r4,128
    7a2c:	213fe004 	addi	r4,r4,-128
    7a30:	217ff726 	beq	r4,r5,7a10 <_dtoa_r+0x960>
    7a34:	a2000044 	addi	r8,r20,1
    7a38:	12000005 	stb	r8,0(r2)
    7a3c:	003f4606 	br	7758 <_dtoa_r+0x6a8>
    7a40:	d9000b17 	ldw	r4,44(sp)
    7a44:	2000c826 	beq	r4,zero,7d68 <_dtoa_r+0xcb8>
    7a48:	d9800317 	ldw	r6,12(sp)
    7a4c:	00c00044 	movi	r3,1
    7a50:	1980f90e 	bge	r3,r6,7e38 <_dtoa_r+0xd88>
    7a54:	d8800617 	ldw	r2,24(sp)
    7a58:	d8c00a17 	ldw	r3,40(sp)
    7a5c:	157fffc4 	addi	r21,r2,-1
    7a60:	1d41f316 	blt	r3,r21,8230 <_dtoa_r+0x1180>
    7a64:	1d6bc83a 	sub	r21,r3,r21
    7a68:	d9c00617 	ldw	r7,24(sp)
    7a6c:	3802aa16 	blt	r7,zero,8518 <_dtoa_r+0x1468>
    7a70:	dd000817 	ldw	r20,32(sp)
    7a74:	d8800617 	ldw	r2,24(sp)
    7a78:	d8c00817 	ldw	r3,32(sp)
    7a7c:	01400044 	movi	r5,1
    7a80:	e009883a 	mov	r4,fp
    7a84:	1887883a 	add	r3,r3,r2
    7a88:	d8c00815 	stw	r3,32(sp)
    7a8c:	b0ad883a 	add	r22,r22,r2
    7a90:	000ab580 	call	ab58 <__i2b>
    7a94:	1023883a 	mov	r17,r2
    7a98:	a0000826 	beq	r20,zero,7abc <_dtoa_r+0xa0c>
    7a9c:	0580070e 	bge	zero,r22,7abc <_dtoa_r+0xa0c>
    7aa0:	a005883a 	mov	r2,r20
    7aa4:	b500b916 	blt	r22,r20,7d8c <_dtoa_r+0xcdc>
    7aa8:	d9000817 	ldw	r4,32(sp)
    7aac:	a0a9c83a 	sub	r20,r20,r2
    7ab0:	b0adc83a 	sub	r22,r22,r2
    7ab4:	2089c83a 	sub	r4,r4,r2
    7ab8:	d9000815 	stw	r4,32(sp)
    7abc:	d9800a17 	ldw	r6,40(sp)
    7ac0:	0181810e 	bge	zero,r6,80c8 <_dtoa_r+0x1018>
    7ac4:	d9c00b17 	ldw	r7,44(sp)
    7ac8:	3800b326 	beq	r7,zero,7d98 <_dtoa_r+0xce8>
    7acc:	a800b226 	beq	r21,zero,7d98 <_dtoa_r+0xce8>
    7ad0:	880b883a 	mov	r5,r17
    7ad4:	a80d883a 	mov	r6,r21
    7ad8:	e009883a 	mov	r4,fp
    7adc:	000ad8c0 	call	ad8c <__pow5mult>
    7ae0:	d9800917 	ldw	r6,36(sp)
    7ae4:	100b883a 	mov	r5,r2
    7ae8:	e009883a 	mov	r4,fp
    7aec:	1023883a 	mov	r17,r2
    7af0:	000ab940 	call	ab94 <__multiply>
    7af4:	1021883a 	mov	r16,r2
    7af8:	d8800a17 	ldw	r2,40(sp)
    7afc:	d9400917 	ldw	r5,36(sp)
    7b00:	e009883a 	mov	r4,fp
    7b04:	1545c83a 	sub	r2,r2,r21
    7b08:	d8800a15 	stw	r2,40(sp)
    7b0c:	000a7f40 	call	a7f4 <_Bfree>
    7b10:	d8c00a17 	ldw	r3,40(sp)
    7b14:	18009f1e 	bne	r3,zero,7d94 <_dtoa_r+0xce4>
    7b18:	05c00044 	movi	r23,1
    7b1c:	e009883a 	mov	r4,fp
    7b20:	b80b883a 	mov	r5,r23
    7b24:	000ab580 	call	ab58 <__i2b>
    7b28:	d9000d17 	ldw	r4,52(sp)
    7b2c:	102b883a 	mov	r21,r2
    7b30:	2000ce26 	beq	r4,zero,7e6c <_dtoa_r+0xdbc>
    7b34:	200d883a 	mov	r6,r4
    7b38:	100b883a 	mov	r5,r2
    7b3c:	e009883a 	mov	r4,fp
    7b40:	000ad8c0 	call	ad8c <__pow5mult>
    7b44:	d9800317 	ldw	r6,12(sp)
    7b48:	102b883a 	mov	r21,r2
    7b4c:	b981810e 	bge	r23,r6,8154 <_dtoa_r+0x10a4>
    7b50:	0027883a 	mov	r19,zero
    7b54:	a8800417 	ldw	r2,16(r21)
    7b58:	05c00804 	movi	r23,32
    7b5c:	10800104 	addi	r2,r2,4
    7b60:	1085883a 	add	r2,r2,r2
    7b64:	1085883a 	add	r2,r2,r2
    7b68:	a885883a 	add	r2,r21,r2
    7b6c:	11000017 	ldw	r4,0(r2)
    7b70:	000aa400 	call	aa40 <__hi0bits>
    7b74:	b885c83a 	sub	r2,r23,r2
    7b78:	1585883a 	add	r2,r2,r22
    7b7c:	108007cc 	andi	r2,r2,31
    7b80:	1000b326 	beq	r2,zero,7e50 <_dtoa_r+0xda0>
    7b84:	00c00804 	movi	r3,32
    7b88:	1887c83a 	sub	r3,r3,r2
    7b8c:	01000104 	movi	r4,4
    7b90:	20c2cd0e 	bge	r4,r3,86c8 <_dtoa_r+0x1618>
    7b94:	00c00704 	movi	r3,28
    7b98:	1885c83a 	sub	r2,r3,r2
    7b9c:	d8c00817 	ldw	r3,32(sp)
    7ba0:	a0a9883a 	add	r20,r20,r2
    7ba4:	b0ad883a 	add	r22,r22,r2
    7ba8:	1887883a 	add	r3,r3,r2
    7bac:	d8c00815 	stw	r3,32(sp)
    7bb0:	d9800817 	ldw	r6,32(sp)
    7bb4:	0180040e 	bge	zero,r6,7bc8 <_dtoa_r+0xb18>
    7bb8:	800b883a 	mov	r5,r16
    7bbc:	e009883a 	mov	r4,fp
    7bc0:	000aecc0 	call	aecc <__lshift>
    7bc4:	1021883a 	mov	r16,r2
    7bc8:	0580050e 	bge	zero,r22,7be0 <_dtoa_r+0xb30>
    7bcc:	a80b883a 	mov	r5,r21
    7bd0:	b00d883a 	mov	r6,r22
    7bd4:	e009883a 	mov	r4,fp
    7bd8:	000aecc0 	call	aecc <__lshift>
    7bdc:	102b883a 	mov	r21,r2
    7be0:	d9c00e17 	ldw	r7,56(sp)
    7be4:	3801211e 	bne	r7,zero,806c <_dtoa_r+0xfbc>
    7be8:	d9800617 	ldw	r6,24(sp)
    7bec:	0181380e 	bge	zero,r6,80d0 <_dtoa_r+0x1020>
    7bf0:	d8c00b17 	ldw	r3,44(sp)
    7bf4:	1800ab1e 	bne	r3,zero,7ea4 <_dtoa_r+0xdf4>
    7bf8:	dc800717 	ldw	r18,28(sp)
    7bfc:	dcc00617 	ldw	r19,24(sp)
    7c00:	9029883a 	mov	r20,r18
    7c04:	00000206 	br	7c10 <_dtoa_r+0xb60>
    7c08:	000a81c0 	call	a81c <__multadd>
    7c0c:	1021883a 	mov	r16,r2
    7c10:	a80b883a 	mov	r5,r21
    7c14:	8009883a 	mov	r4,r16
    7c18:	0006eb00 	call	6eb0 <quorem>
    7c1c:	10800c04 	addi	r2,r2,48
    7c20:	90800005 	stb	r2,0(r18)
    7c24:	94800044 	addi	r18,r18,1
    7c28:	9507c83a 	sub	r3,r18,r20
    7c2c:	000f883a 	mov	r7,zero
    7c30:	01800284 	movi	r6,10
    7c34:	800b883a 	mov	r5,r16
    7c38:	e009883a 	mov	r4,fp
    7c3c:	1cfff216 	blt	r3,r19,7c08 <_dtoa_r+0xb58>
    7c40:	1011883a 	mov	r8,r2
    7c44:	d8800617 	ldw	r2,24(sp)
    7c48:	0082370e 	bge	zero,r2,8528 <_dtoa_r+0x1478>
    7c4c:	d9000717 	ldw	r4,28(sp)
    7c50:	0025883a 	mov	r18,zero
    7c54:	20af883a 	add	r23,r4,r2
    7c58:	01800044 	movi	r6,1
    7c5c:	800b883a 	mov	r5,r16
    7c60:	e009883a 	mov	r4,fp
    7c64:	da001715 	stw	r8,92(sp)
    7c68:	000aecc0 	call	aecc <__lshift>
    7c6c:	a80b883a 	mov	r5,r21
    7c70:	1009883a 	mov	r4,r2
    7c74:	d8800915 	stw	r2,36(sp)
    7c78:	000b0140 	call	b014 <__mcmp>
    7c7c:	da001717 	ldw	r8,92(sp)
    7c80:	0081800e 	bge	zero,r2,8284 <_dtoa_r+0x11d4>
    7c84:	b93fffc3 	ldbu	r4,-1(r23)
    7c88:	b8bfffc4 	addi	r2,r23,-1
    7c8c:	1007883a 	mov	r3,r2
    7c90:	01800e44 	movi	r6,57
    7c94:	d9c00717 	ldw	r7,28(sp)
    7c98:	00000506 	br	7cb0 <_dtoa_r+0xc00>
    7c9c:	18ffffc4 	addi	r3,r3,-1
    7ca0:	11c12326 	beq	r2,r7,8130 <_dtoa_r+0x1080>
    7ca4:	19000003 	ldbu	r4,0(r3)
    7ca8:	102f883a 	mov	r23,r2
    7cac:	10bfffc4 	addi	r2,r2,-1
    7cb0:	21403fcc 	andi	r5,r4,255
    7cb4:	2940201c 	xori	r5,r5,128
    7cb8:	297fe004 	addi	r5,r5,-128
    7cbc:	29bff726 	beq	r5,r6,7c9c <_dtoa_r+0xbec>
    7cc0:	21000044 	addi	r4,r4,1
    7cc4:	11000005 	stb	r4,0(r2)
    7cc8:	a80b883a 	mov	r5,r21
    7ccc:	e009883a 	mov	r4,fp
    7cd0:	000a7f40 	call	a7f4 <_Bfree>
    7cd4:	883ea026 	beq	r17,zero,7758 <_dtoa_r+0x6a8>
    7cd8:	90000426 	beq	r18,zero,7cec <_dtoa_r+0xc3c>
    7cdc:	94400326 	beq	r18,r17,7cec <_dtoa_r+0xc3c>
    7ce0:	900b883a 	mov	r5,r18
    7ce4:	e009883a 	mov	r4,fp
    7ce8:	000a7f40 	call	a7f4 <_Bfree>
    7cec:	880b883a 	mov	r5,r17
    7cf0:	e009883a 	mov	r4,fp
    7cf4:	000a7f40 	call	a7f4 <_Bfree>
    7cf8:	003e9706 	br	7758 <_dtoa_r+0x6a8>
    7cfc:	01800044 	movi	r6,1
    7d00:	d9800e15 	stw	r6,56(sp)
    7d04:	003d9606 	br	7360 <_dtoa_r+0x2b0>
    7d08:	d8800817 	ldw	r2,32(sp)
    7d0c:	d8c00517 	ldw	r3,20(sp)
    7d10:	d8000d15 	stw	zero,52(sp)
    7d14:	10c5c83a 	sub	r2,r2,r3
    7d18:	00c9c83a 	sub	r4,zero,r3
    7d1c:	d8800815 	stw	r2,32(sp)
    7d20:	d9000a15 	stw	r4,40(sp)
    7d24:	003d9706 	br	7384 <_dtoa_r+0x2d4>
    7d28:	05adc83a 	sub	r22,zero,r22
    7d2c:	dd800815 	stw	r22,32(sp)
    7d30:	002d883a 	mov	r22,zero
    7d34:	003d8e06 	br	7370 <_dtoa_r+0x2c0>
    7d38:	d9000517 	ldw	r4,20(sp)
    7d3c:	0010e380 	call	10e38 <__floatsidf>
    7d40:	100d883a 	mov	r6,r2
    7d44:	180f883a 	mov	r7,r3
    7d48:	a009883a 	mov	r4,r20
    7d4c:	880b883a 	mov	r5,r17
    7d50:	000fb4c0 	call	fb4c <__eqdf2>
    7d54:	103d7126 	beq	r2,zero,731c <_dtoa_r+0x26c>
    7d58:	d9c00517 	ldw	r7,20(sp)
    7d5c:	39ffffc4 	addi	r7,r7,-1
    7d60:	d9c00515 	stw	r7,20(sp)
    7d64:	003d6d06 	br	731c <_dtoa_r+0x26c>
    7d68:	dd400a17 	ldw	r21,40(sp)
    7d6c:	dd000817 	ldw	r20,32(sp)
    7d70:	0023883a 	mov	r17,zero
    7d74:	003f4806 	br	7a98 <_dtoa_r+0x9e8>
    7d78:	10e3c83a 	sub	r17,r2,r3
    7d7c:	9448983a 	sll	r4,r18,r17
    7d80:	003d3206 	br	724c <_dtoa_r+0x19c>
    7d84:	d8000e15 	stw	zero,56(sp)
    7d88:	003d7506 	br	7360 <_dtoa_r+0x2b0>
    7d8c:	b005883a 	mov	r2,r22
    7d90:	003f4506 	br	7aa8 <_dtoa_r+0x9f8>
    7d94:	dc000915 	stw	r16,36(sp)
    7d98:	d9800a17 	ldw	r6,40(sp)
    7d9c:	d9400917 	ldw	r5,36(sp)
    7da0:	e009883a 	mov	r4,fp
    7da4:	000ad8c0 	call	ad8c <__pow5mult>
    7da8:	1021883a 	mov	r16,r2
    7dac:	003f5a06 	br	7b18 <_dtoa_r+0xa68>
    7db0:	01c00044 	movi	r7,1
    7db4:	d9c00b15 	stw	r7,44(sp)
    7db8:	d8802217 	ldw	r2,136(sp)
    7dbc:	0081280e 	bge	zero,r2,8260 <_dtoa_r+0x11b0>
    7dc0:	100d883a 	mov	r6,r2
    7dc4:	1021883a 	mov	r16,r2
    7dc8:	d8800c15 	stw	r2,48(sp)
    7dcc:	d8800615 	stw	r2,24(sp)
    7dd0:	003d8806 	br	73f4 <_dtoa_r+0x344>
    7dd4:	d8800617 	ldw	r2,24(sp)
    7dd8:	00be9b16 	blt	zero,r2,7848 <_dtoa_r+0x798>
    7ddc:	10010f1e 	bne	r2,zero,821c <_dtoa_r+0x116c>
    7de0:	880b883a 	mov	r5,r17
    7de4:	000d883a 	mov	r6,zero
    7de8:	01d00534 	movhi	r7,16404
    7dec:	8009883a 	mov	r4,r16
    7df0:	000fda40 	call	fda4 <__muldf3>
    7df4:	900d883a 	mov	r6,r18
    7df8:	980f883a 	mov	r7,r19
    7dfc:	1009883a 	mov	r4,r2
    7e00:	180b883a 	mov	r5,r3
    7e04:	000fbd40 	call	fbd4 <__gedf2>
    7e08:	002b883a 	mov	r21,zero
    7e0c:	0023883a 	mov	r17,zero
    7e10:	1000bf16 	blt	r2,zero,8110 <_dtoa_r+0x1060>
    7e14:	d9802217 	ldw	r6,136(sp)
    7e18:	ddc00717 	ldw	r23,28(sp)
    7e1c:	018c303a 	nor	r6,zero,r6
    7e20:	d9800515 	stw	r6,20(sp)
    7e24:	a80b883a 	mov	r5,r21
    7e28:	e009883a 	mov	r4,fp
    7e2c:	000a7f40 	call	a7f4 <_Bfree>
    7e30:	883e4926 	beq	r17,zero,7758 <_dtoa_r+0x6a8>
    7e34:	003fad06 	br	7cec <_dtoa_r+0xc3c>
    7e38:	d9c01117 	ldw	r7,68(sp)
    7e3c:	3801bc26 	beq	r7,zero,8530 <_dtoa_r+0x1480>
    7e40:	10810cc4 	addi	r2,r2,1075
    7e44:	dd400a17 	ldw	r21,40(sp)
    7e48:	dd000817 	ldw	r20,32(sp)
    7e4c:	003f0a06 	br	7a78 <_dtoa_r+0x9c8>
    7e50:	00800704 	movi	r2,28
    7e54:	d9000817 	ldw	r4,32(sp)
    7e58:	a0a9883a 	add	r20,r20,r2
    7e5c:	b0ad883a 	add	r22,r22,r2
    7e60:	2089883a 	add	r4,r4,r2
    7e64:	d9000815 	stw	r4,32(sp)
    7e68:	003f5106 	br	7bb0 <_dtoa_r+0xb00>
    7e6c:	d8c00317 	ldw	r3,12(sp)
    7e70:	b8c1fc0e 	bge	r23,r3,8664 <_dtoa_r+0x15b4>
    7e74:	0027883a 	mov	r19,zero
    7e78:	b805883a 	mov	r2,r23
    7e7c:	003f3e06 	br	7b78 <_dtoa_r+0xac8>
    7e80:	880b883a 	mov	r5,r17
    7e84:	e009883a 	mov	r4,fp
    7e88:	000f883a 	mov	r7,zero
    7e8c:	01800284 	movi	r6,10
    7e90:	000a81c0 	call	a81c <__multadd>
    7e94:	d9000c17 	ldw	r4,48(sp)
    7e98:	1023883a 	mov	r17,r2
    7e9c:	0102040e 	bge	zero,r4,86b0 <_dtoa_r+0x1600>
    7ea0:	d9000615 	stw	r4,24(sp)
    7ea4:	0500050e 	bge	zero,r20,7ebc <_dtoa_r+0xe0c>
    7ea8:	880b883a 	mov	r5,r17
    7eac:	a00d883a 	mov	r6,r20
    7eb0:	e009883a 	mov	r4,fp
    7eb4:	000aecc0 	call	aecc <__lshift>
    7eb8:	1023883a 	mov	r17,r2
    7ebc:	9801241e 	bne	r19,zero,8350 <_dtoa_r+0x12a0>
    7ec0:	8829883a 	mov	r20,r17
    7ec4:	d9000617 	ldw	r4,24(sp)
    7ec8:	dcc00717 	ldw	r19,28(sp)
    7ecc:	9480004c 	andi	r18,r18,1
    7ed0:	20bfffc4 	addi	r2,r4,-1
    7ed4:	9885883a 	add	r2,r19,r2
    7ed8:	d8800415 	stw	r2,16(sp)
    7edc:	dc800615 	stw	r18,24(sp)
    7ee0:	a80b883a 	mov	r5,r21
    7ee4:	8009883a 	mov	r4,r16
    7ee8:	0006eb00 	call	6eb0 <quorem>
    7eec:	880b883a 	mov	r5,r17
    7ef0:	8009883a 	mov	r4,r16
    7ef4:	102f883a 	mov	r23,r2
    7ef8:	000b0140 	call	b014 <__mcmp>
    7efc:	a80b883a 	mov	r5,r21
    7f00:	a00d883a 	mov	r6,r20
    7f04:	e009883a 	mov	r4,fp
    7f08:	102d883a 	mov	r22,r2
    7f0c:	000b0740 	call	b074 <__mdiff>
    7f10:	1007883a 	mov	r3,r2
    7f14:	10800317 	ldw	r2,12(r2)
    7f18:	bc800c04 	addi	r18,r23,48
    7f1c:	180b883a 	mov	r5,r3
    7f20:	10004e1e 	bne	r2,zero,805c <_dtoa_r+0xfac>
    7f24:	8009883a 	mov	r4,r16
    7f28:	d8c01615 	stw	r3,88(sp)
    7f2c:	000b0140 	call	b014 <__mcmp>
    7f30:	d8c01617 	ldw	r3,88(sp)
    7f34:	e009883a 	mov	r4,fp
    7f38:	d8801615 	stw	r2,88(sp)
    7f3c:	180b883a 	mov	r5,r3
    7f40:	000a7f40 	call	a7f4 <_Bfree>
    7f44:	d8801617 	ldw	r2,88(sp)
    7f48:	1000041e 	bne	r2,zero,7f5c <_dtoa_r+0xeac>
    7f4c:	d9800317 	ldw	r6,12(sp)
    7f50:	3000021e 	bne	r6,zero,7f5c <_dtoa_r+0xeac>
    7f54:	d8c00617 	ldw	r3,24(sp)
    7f58:	18003726 	beq	r3,zero,8038 <_dtoa_r+0xf88>
    7f5c:	b0002016 	blt	r22,zero,7fe0 <_dtoa_r+0xf30>
    7f60:	b000041e 	bne	r22,zero,7f74 <_dtoa_r+0xec4>
    7f64:	d9000317 	ldw	r4,12(sp)
    7f68:	2000021e 	bne	r4,zero,7f74 <_dtoa_r+0xec4>
    7f6c:	d8c00617 	ldw	r3,24(sp)
    7f70:	18001b26 	beq	r3,zero,7fe0 <_dtoa_r+0xf30>
    7f74:	00810716 	blt	zero,r2,8394 <_dtoa_r+0x12e4>
    7f78:	d8c00417 	ldw	r3,16(sp)
    7f7c:	9d800044 	addi	r22,r19,1
    7f80:	9c800005 	stb	r18,0(r19)
    7f84:	b02f883a 	mov	r23,r22
    7f88:	98c10626 	beq	r19,r3,83a4 <_dtoa_r+0x12f4>
    7f8c:	800b883a 	mov	r5,r16
    7f90:	000f883a 	mov	r7,zero
    7f94:	01800284 	movi	r6,10
    7f98:	e009883a 	mov	r4,fp
    7f9c:	000a81c0 	call	a81c <__multadd>
    7fa0:	1021883a 	mov	r16,r2
    7fa4:	000f883a 	mov	r7,zero
    7fa8:	01800284 	movi	r6,10
    7fac:	880b883a 	mov	r5,r17
    7fb0:	e009883a 	mov	r4,fp
    7fb4:	8d002526 	beq	r17,r20,804c <_dtoa_r+0xf9c>
    7fb8:	000a81c0 	call	a81c <__multadd>
    7fbc:	a00b883a 	mov	r5,r20
    7fc0:	000f883a 	mov	r7,zero
    7fc4:	01800284 	movi	r6,10
    7fc8:	e009883a 	mov	r4,fp
    7fcc:	1023883a 	mov	r17,r2
    7fd0:	000a81c0 	call	a81c <__multadd>
    7fd4:	1029883a 	mov	r20,r2
    7fd8:	b027883a 	mov	r19,r22
    7fdc:	003fc006 	br	7ee0 <_dtoa_r+0xe30>
    7fe0:	9011883a 	mov	r8,r18
    7fe4:	00800e0e 	bge	zero,r2,8020 <_dtoa_r+0xf70>
    7fe8:	800b883a 	mov	r5,r16
    7fec:	01800044 	movi	r6,1
    7ff0:	e009883a 	mov	r4,fp
    7ff4:	da001715 	stw	r8,92(sp)
    7ff8:	000aecc0 	call	aecc <__lshift>
    7ffc:	a80b883a 	mov	r5,r21
    8000:	1009883a 	mov	r4,r2
    8004:	1021883a 	mov	r16,r2
    8008:	000b0140 	call	b014 <__mcmp>
    800c:	da001717 	ldw	r8,92(sp)
    8010:	0081960e 	bge	zero,r2,866c <_dtoa_r+0x15bc>
    8014:	00800e44 	movi	r2,57
    8018:	40817026 	beq	r8,r2,85dc <_dtoa_r+0x152c>
    801c:	ba000c44 	addi	r8,r23,49
    8020:	8825883a 	mov	r18,r17
    8024:	9dc00044 	addi	r23,r19,1
    8028:	9a000005 	stb	r8,0(r19)
    802c:	a023883a 	mov	r17,r20
    8030:	dc000915 	stw	r16,36(sp)
    8034:	003f2406 	br	7cc8 <_dtoa_r+0xc18>
    8038:	00800e44 	movi	r2,57
    803c:	9011883a 	mov	r8,r18
    8040:	90816626 	beq	r18,r2,85dc <_dtoa_r+0x152c>
    8044:	05bff516 	blt	zero,r22,801c <_dtoa_r+0xf6c>
    8048:	003ff506 	br	8020 <_dtoa_r+0xf70>
    804c:	000a81c0 	call	a81c <__multadd>
    8050:	1023883a 	mov	r17,r2
    8054:	1029883a 	mov	r20,r2
    8058:	003fdf06 	br	7fd8 <_dtoa_r+0xf28>
    805c:	e009883a 	mov	r4,fp
    8060:	000a7f40 	call	a7f4 <_Bfree>
    8064:	00800044 	movi	r2,1
    8068:	003fbc06 	br	7f5c <_dtoa_r+0xeac>
    806c:	a80b883a 	mov	r5,r21
    8070:	8009883a 	mov	r4,r16
    8074:	000b0140 	call	b014 <__mcmp>
    8078:	103edb0e 	bge	r2,zero,7be8 <_dtoa_r+0xb38>
    807c:	800b883a 	mov	r5,r16
    8080:	000f883a 	mov	r7,zero
    8084:	01800284 	movi	r6,10
    8088:	e009883a 	mov	r4,fp
    808c:	000a81c0 	call	a81c <__multadd>
    8090:	1021883a 	mov	r16,r2
    8094:	d8800517 	ldw	r2,20(sp)
    8098:	d8c00b17 	ldw	r3,44(sp)
    809c:	10bfffc4 	addi	r2,r2,-1
    80a0:	d8800515 	stw	r2,20(sp)
    80a4:	183f761e 	bne	r3,zero,7e80 <_dtoa_r+0xdd0>
    80a8:	d9000c17 	ldw	r4,48(sp)
    80ac:	0101730e 	bge	zero,r4,867c <_dtoa_r+0x15cc>
    80b0:	d9000615 	stw	r4,24(sp)
    80b4:	003ed006 	br	7bf8 <_dtoa_r+0xb48>
    80b8:	00800084 	movi	r2,2
    80bc:	3081861e 	bne	r6,r2,86d8 <_dtoa_r+0x1628>
    80c0:	d8000b15 	stw	zero,44(sp)
    80c4:	003f3c06 	br	7db8 <_dtoa_r+0xd08>
    80c8:	dc000917 	ldw	r16,36(sp)
    80cc:	003e9206 	br	7b18 <_dtoa_r+0xa68>
    80d0:	d9c00317 	ldw	r7,12(sp)
    80d4:	00800084 	movi	r2,2
    80d8:	11fec50e 	bge	r2,r7,7bf0 <_dtoa_r+0xb40>
    80dc:	d9000617 	ldw	r4,24(sp)
    80e0:	20013c1e 	bne	r4,zero,85d4 <_dtoa_r+0x1524>
    80e4:	a80b883a 	mov	r5,r21
    80e8:	000f883a 	mov	r7,zero
    80ec:	01800144 	movi	r6,5
    80f0:	e009883a 	mov	r4,fp
    80f4:	000a81c0 	call	a81c <__multadd>
    80f8:	100b883a 	mov	r5,r2
    80fc:	8009883a 	mov	r4,r16
    8100:	102b883a 	mov	r21,r2
    8104:	000b0140 	call	b014 <__mcmp>
    8108:	dc000915 	stw	r16,36(sp)
    810c:	00bf410e 	bge	zero,r2,7e14 <_dtoa_r+0xd64>
    8110:	d9c00717 	ldw	r7,28(sp)
    8114:	00800c44 	movi	r2,49
    8118:	38800005 	stb	r2,0(r7)
    811c:	d8800517 	ldw	r2,20(sp)
    8120:	3dc00044 	addi	r23,r7,1
    8124:	10800044 	addi	r2,r2,1
    8128:	d8800515 	stw	r2,20(sp)
    812c:	003f3d06 	br	7e24 <_dtoa_r+0xd74>
    8130:	d9800517 	ldw	r6,20(sp)
    8134:	d9c00717 	ldw	r7,28(sp)
    8138:	00800c44 	movi	r2,49
    813c:	31800044 	addi	r6,r6,1
    8140:	d9800515 	stw	r6,20(sp)
    8144:	38800005 	stb	r2,0(r7)
    8148:	003edf06 	br	7cc8 <_dtoa_r+0xc18>
    814c:	d8000b15 	stw	zero,44(sp)
    8150:	003c9f06 	br	73d0 <_dtoa_r+0x320>
    8154:	903e7e1e 	bne	r18,zero,7b50 <_dtoa_r+0xaa0>
    8158:	00800434 	movhi	r2,16
    815c:	10bfffc4 	addi	r2,r2,-1
    8160:	9884703a 	and	r2,r19,r2
    8164:	1000ea1e 	bne	r2,zero,8510 <_dtoa_r+0x1460>
    8168:	9cdffc2c 	andhi	r19,r19,32752
    816c:	9800e826 	beq	r19,zero,8510 <_dtoa_r+0x1460>
    8170:	d9c00817 	ldw	r7,32(sp)
    8174:	b5800044 	addi	r22,r22,1
    8178:	04c00044 	movi	r19,1
    817c:	39c00044 	addi	r7,r7,1
    8180:	d9c00815 	stw	r7,32(sp)
    8184:	d8800d17 	ldw	r2,52(sp)
    8188:	103e721e 	bne	r2,zero,7b54 <_dtoa_r+0xaa4>
    818c:	00800044 	movi	r2,1
    8190:	003e7906 	br	7b78 <_dtoa_r+0xac8>
    8194:	8009883a 	mov	r4,r16
    8198:	0010e380 	call	10e38 <__floatsidf>
    819c:	d9800f17 	ldw	r6,60(sp)
    81a0:	d9c01017 	ldw	r7,64(sp)
    81a4:	1009883a 	mov	r4,r2
    81a8:	180b883a 	mov	r5,r3
    81ac:	000fda40 	call	fda4 <__muldf3>
    81b0:	000d883a 	mov	r6,zero
    81b4:	01d00734 	movhi	r7,16412
    81b8:	1009883a 	mov	r4,r2
    81bc:	180b883a 	mov	r5,r3
    81c0:	000e9b80 	call	e9b8 <__adddf3>
    81c4:	047f3034 	movhi	r17,64704
    81c8:	1021883a 	mov	r16,r2
    81cc:	1c63883a 	add	r17,r3,r17
    81d0:	d9000f17 	ldw	r4,60(sp)
    81d4:	d9401017 	ldw	r5,64(sp)
    81d8:	000d883a 	mov	r6,zero
    81dc:	01d00534 	movhi	r7,16404
    81e0:	00104bc0 	call	104bc <__subdf3>
    81e4:	800d883a 	mov	r6,r16
    81e8:	880f883a 	mov	r7,r17
    81ec:	1009883a 	mov	r4,r2
    81f0:	180b883a 	mov	r5,r3
    81f4:	102b883a 	mov	r21,r2
    81f8:	1829883a 	mov	r20,r3
    81fc:	000fbd40 	call	fbd4 <__gedf2>
    8200:	00806c16 	blt	zero,r2,83b4 <_dtoa_r+0x1304>
    8204:	89e0003c 	xorhi	r7,r17,32768
    8208:	800d883a 	mov	r6,r16
    820c:	a809883a 	mov	r4,r21
    8210:	a00b883a 	mov	r5,r20
    8214:	000fcb00 	call	fcb0 <__ledf2>
    8218:	103d7e0e 	bge	r2,zero,7814 <_dtoa_r+0x764>
    821c:	002b883a 	mov	r21,zero
    8220:	0023883a 	mov	r17,zero
    8224:	003efb06 	br	7e14 <_dtoa_r+0xd64>
    8228:	d8800717 	ldw	r2,28(sp)
    822c:	003bd006 	br	7170 <_dtoa_r+0xc0>
    8230:	d9000a17 	ldw	r4,40(sp)
    8234:	d9800d17 	ldw	r6,52(sp)
    8238:	dd400a15 	stw	r21,40(sp)
    823c:	a905c83a 	sub	r2,r21,r4
    8240:	308d883a 	add	r6,r6,r2
    8244:	d9800d15 	stw	r6,52(sp)
    8248:	002b883a 	mov	r21,zero
    824c:	003e0606 	br	7a68 <_dtoa_r+0x9b8>
    8250:	9023883a 	mov	r17,r18
    8254:	9829883a 	mov	r20,r19
    8258:	04000084 	movi	r16,2
    825c:	003c9206 	br	74a8 <_dtoa_r+0x3f8>
    8260:	04000044 	movi	r16,1
    8264:	dc000c15 	stw	r16,48(sp)
    8268:	dc000615 	stw	r16,24(sp)
    826c:	dc002215 	stw	r16,136(sp)
    8270:	e0001115 	stw	zero,68(fp)
    8274:	000b883a 	mov	r5,zero
    8278:	003c6906 	br	7420 <_dtoa_r+0x370>
    827c:	3021883a 	mov	r16,r6
    8280:	003ffb06 	br	8270 <_dtoa_r+0x11c0>
    8284:	1000021e 	bne	r2,zero,8290 <_dtoa_r+0x11e0>
    8288:	4200004c 	andi	r8,r8,1
    828c:	403e7d1e 	bne	r8,zero,7c84 <_dtoa_r+0xbd4>
    8290:	01000c04 	movi	r4,48
    8294:	00000106 	br	829c <_dtoa_r+0x11ec>
    8298:	102f883a 	mov	r23,r2
    829c:	b8bfffc4 	addi	r2,r23,-1
    82a0:	10c00007 	ldb	r3,0(r2)
    82a4:	193ffc26 	beq	r3,r4,8298 <_dtoa_r+0x11e8>
    82a8:	003e8706 	br	7cc8 <_dtoa_r+0xc18>
    82ac:	d8800517 	ldw	r2,20(sp)
    82b0:	00a3c83a 	sub	r17,zero,r2
    82b4:	8800a426 	beq	r17,zero,8548 <_dtoa_r+0x1498>
    82b8:	888003cc 	andi	r2,r17,15
    82bc:	100490fa 	slli	r2,r2,3
    82c0:	00c00074 	movhi	r3,1
    82c4:	18d41004 	addi	r3,r3,20544
    82c8:	1885883a 	add	r2,r3,r2
    82cc:	11800017 	ldw	r6,0(r2)
    82d0:	11c00117 	ldw	r7,4(r2)
    82d4:	9009883a 	mov	r4,r18
    82d8:	980b883a 	mov	r5,r19
    82dc:	8823d13a 	srai	r17,r17,4
    82e0:	000fda40 	call	fda4 <__muldf3>
    82e4:	d8800f15 	stw	r2,60(sp)
    82e8:	d8c01015 	stw	r3,64(sp)
    82ec:	8800e826 	beq	r17,zero,8690 <_dtoa_r+0x15e0>
    82f0:	05000074 	movhi	r20,1
    82f4:	a5140604 	addi	r20,r20,20504
    82f8:	04000084 	movi	r16,2
    82fc:	8980004c 	andi	r6,r17,1
    8300:	1009883a 	mov	r4,r2
    8304:	8823d07a 	srai	r17,r17,1
    8308:	180b883a 	mov	r5,r3
    830c:	30000426 	beq	r6,zero,8320 <_dtoa_r+0x1270>
    8310:	a1800017 	ldw	r6,0(r20)
    8314:	a1c00117 	ldw	r7,4(r20)
    8318:	84000044 	addi	r16,r16,1
    831c:	000fda40 	call	fda4 <__muldf3>
    8320:	a5000204 	addi	r20,r20,8
    8324:	883ff51e 	bne	r17,zero,82fc <_dtoa_r+0x124c>
    8328:	d8800f15 	stw	r2,60(sp)
    832c:	d8c01015 	stw	r3,64(sp)
    8330:	003c7606 	br	750c <_dtoa_r+0x45c>
    8334:	00c00c04 	movi	r3,48
    8338:	10c00005 	stb	r3,0(r2)
    833c:	d8c00517 	ldw	r3,20(sp)
    8340:	bd3fffc3 	ldbu	r20,-1(r23)
    8344:	18c00044 	addi	r3,r3,1
    8348:	d8c00515 	stw	r3,20(sp)
    834c:	003db906 	br	7a34 <_dtoa_r+0x984>
    8350:	89400117 	ldw	r5,4(r17)
    8354:	e009883a 	mov	r4,fp
    8358:	000a74c0 	call	a74c <_Balloc>
    835c:	89800417 	ldw	r6,16(r17)
    8360:	89400304 	addi	r5,r17,12
    8364:	11000304 	addi	r4,r2,12
    8368:	31800084 	addi	r6,r6,2
    836c:	318d883a 	add	r6,r6,r6
    8370:	318d883a 	add	r6,r6,r6
    8374:	1027883a 	mov	r19,r2
    8378:	000a3800 	call	a380 <memcpy>
    837c:	01800044 	movi	r6,1
    8380:	980b883a 	mov	r5,r19
    8384:	e009883a 	mov	r4,fp
    8388:	000aecc0 	call	aecc <__lshift>
    838c:	1029883a 	mov	r20,r2
    8390:	003ecc06 	br	7ec4 <_dtoa_r+0xe14>
    8394:	00800e44 	movi	r2,57
    8398:	90809026 	beq	r18,r2,85dc <_dtoa_r+0x152c>
    839c:	92000044 	addi	r8,r18,1
    83a0:	003f1f06 	br	8020 <_dtoa_r+0xf70>
    83a4:	9011883a 	mov	r8,r18
    83a8:	8825883a 	mov	r18,r17
    83ac:	a023883a 	mov	r17,r20
    83b0:	003e2906 	br	7c58 <_dtoa_r+0xba8>
    83b4:	002b883a 	mov	r21,zero
    83b8:	0023883a 	mov	r17,zero
    83bc:	003f5406 	br	8110 <_dtoa_r+0x1060>
    83c0:	61bfffc4 	addi	r6,r12,-1
    83c4:	300490fa 	slli	r2,r6,3
    83c8:	00c00074 	movhi	r3,1
    83cc:	18d41004 	addi	r3,r3,20544
    83d0:	1885883a 	add	r2,r3,r2
    83d4:	11000017 	ldw	r4,0(r2)
    83d8:	11400117 	ldw	r5,4(r2)
    83dc:	d8800717 	ldw	r2,28(sp)
    83e0:	880f883a 	mov	r7,r17
    83e4:	d9801215 	stw	r6,72(sp)
    83e8:	800d883a 	mov	r6,r16
    83ec:	db001615 	stw	r12,88(sp)
    83f0:	15c00044 	addi	r23,r2,1
    83f4:	000fda40 	call	fda4 <__muldf3>
    83f8:	d9401017 	ldw	r5,64(sp)
    83fc:	d9000f17 	ldw	r4,60(sp)
    8400:	d8c01515 	stw	r3,84(sp)
    8404:	d8801415 	stw	r2,80(sp)
    8408:	0010db80 	call	10db8 <__fixdfsi>
    840c:	1009883a 	mov	r4,r2
    8410:	1021883a 	mov	r16,r2
    8414:	0010e380 	call	10e38 <__floatsidf>
    8418:	d9000f17 	ldw	r4,60(sp)
    841c:	d9401017 	ldw	r5,64(sp)
    8420:	100d883a 	mov	r6,r2
    8424:	180f883a 	mov	r7,r3
    8428:	00104bc0 	call	104bc <__subdf3>
    842c:	1829883a 	mov	r20,r3
    8430:	d8c00717 	ldw	r3,28(sp)
    8434:	84000c04 	addi	r16,r16,48
    8438:	1023883a 	mov	r17,r2
    843c:	1c000005 	stb	r16,0(r3)
    8440:	db001617 	ldw	r12,88(sp)
    8444:	00800044 	movi	r2,1
    8448:	60802226 	beq	r12,r2,84d4 <_dtoa_r+0x1424>
    844c:	d9c00717 	ldw	r7,28(sp)
    8450:	8805883a 	mov	r2,r17
    8454:	b82b883a 	mov	r21,r23
    8458:	3b19883a 	add	r12,r7,r12
    845c:	6023883a 	mov	r17,r12
    8460:	a007883a 	mov	r3,r20
    8464:	dc800f15 	stw	r18,60(sp)
    8468:	000d883a 	mov	r6,zero
    846c:	01d00934 	movhi	r7,16420
    8470:	1009883a 	mov	r4,r2
    8474:	180b883a 	mov	r5,r3
    8478:	000fda40 	call	fda4 <__muldf3>
    847c:	180b883a 	mov	r5,r3
    8480:	1009883a 	mov	r4,r2
    8484:	1829883a 	mov	r20,r3
    8488:	1025883a 	mov	r18,r2
    848c:	0010db80 	call	10db8 <__fixdfsi>
    8490:	1009883a 	mov	r4,r2
    8494:	1021883a 	mov	r16,r2
    8498:	0010e380 	call	10e38 <__floatsidf>
    849c:	100d883a 	mov	r6,r2
    84a0:	180f883a 	mov	r7,r3
    84a4:	9009883a 	mov	r4,r18
    84a8:	a00b883a 	mov	r5,r20
    84ac:	84000c04 	addi	r16,r16,48
    84b0:	00104bc0 	call	104bc <__subdf3>
    84b4:	ad400044 	addi	r21,r21,1
    84b8:	ac3fffc5 	stb	r16,-1(r21)
    84bc:	ac7fea1e 	bne	r21,r17,8468 <_dtoa_r+0x13b8>
    84c0:	1023883a 	mov	r17,r2
    84c4:	d8801217 	ldw	r2,72(sp)
    84c8:	dc800f17 	ldw	r18,60(sp)
    84cc:	1829883a 	mov	r20,r3
    84d0:	b8af883a 	add	r23,r23,r2
    84d4:	d9001417 	ldw	r4,80(sp)
    84d8:	d9401517 	ldw	r5,84(sp)
    84dc:	000d883a 	mov	r6,zero
    84e0:	01cff834 	movhi	r7,16352
    84e4:	000e9b80 	call	e9b8 <__adddf3>
    84e8:	880d883a 	mov	r6,r17
    84ec:	a00f883a 	mov	r7,r20
    84f0:	1009883a 	mov	r4,r2
    84f4:	180b883a 	mov	r5,r3
    84f8:	000fcb00 	call	fcb0 <__ledf2>
    84fc:	10003e0e 	bge	r2,zero,85f8 <_dtoa_r+0x1548>
    8500:	d9001317 	ldw	r4,76(sp)
    8504:	bd3fffc3 	ldbu	r20,-1(r23)
    8508:	d9000515 	stw	r4,20(sp)
    850c:	003d3b06 	br	79fc <_dtoa_r+0x94c>
    8510:	0027883a 	mov	r19,zero
    8514:	003f1b06 	br	8184 <_dtoa_r+0x10d4>
    8518:	d8800817 	ldw	r2,32(sp)
    851c:	11e9c83a 	sub	r20,r2,r7
    8520:	0005883a 	mov	r2,zero
    8524:	003d5406 	br	7a78 <_dtoa_r+0x9c8>
    8528:	00800044 	movi	r2,1
    852c:	003dc706 	br	7c4c <_dtoa_r+0xb9c>
    8530:	d8c00217 	ldw	r3,8(sp)
    8534:	00800d84 	movi	r2,54
    8538:	dd400a17 	ldw	r21,40(sp)
    853c:	10c5c83a 	sub	r2,r2,r3
    8540:	dd000817 	ldw	r20,32(sp)
    8544:	003d4c06 	br	7a78 <_dtoa_r+0x9c8>
    8548:	dc800f15 	stw	r18,60(sp)
    854c:	dcc01015 	stw	r19,64(sp)
    8550:	04000084 	movi	r16,2
    8554:	003bed06 	br	750c <_dtoa_r+0x45c>
    8558:	d9000617 	ldw	r4,24(sp)
    855c:	203f0d26 	beq	r4,zero,8194 <_dtoa_r+0x10e4>
    8560:	d9800c17 	ldw	r6,48(sp)
    8564:	01bcab0e 	bge	zero,r6,7814 <_dtoa_r+0x764>
    8568:	d9401017 	ldw	r5,64(sp)
    856c:	d9000f17 	ldw	r4,60(sp)
    8570:	000d883a 	mov	r6,zero
    8574:	01d00934 	movhi	r7,16420
    8578:	000fda40 	call	fda4 <__muldf3>
    857c:	81000044 	addi	r4,r16,1
    8580:	d8800f15 	stw	r2,60(sp)
    8584:	d8c01015 	stw	r3,64(sp)
    8588:	0010e380 	call	10e38 <__floatsidf>
    858c:	d9800f17 	ldw	r6,60(sp)
    8590:	d9c01017 	ldw	r7,64(sp)
    8594:	1009883a 	mov	r4,r2
    8598:	180b883a 	mov	r5,r3
    859c:	000fda40 	call	fda4 <__muldf3>
    85a0:	01d00734 	movhi	r7,16412
    85a4:	000d883a 	mov	r6,zero
    85a8:	1009883a 	mov	r4,r2
    85ac:	180b883a 	mov	r5,r3
    85b0:	000e9b80 	call	e9b8 <__adddf3>
    85b4:	d9c00517 	ldw	r7,20(sp)
    85b8:	047f3034 	movhi	r17,64704
    85bc:	1021883a 	mov	r16,r2
    85c0:	39ffffc4 	addi	r7,r7,-1
    85c4:	d9c01315 	stw	r7,76(sp)
    85c8:	1c63883a 	add	r17,r3,r17
    85cc:	db000c17 	ldw	r12,48(sp)
    85d0:	003bea06 	br	757c <_dtoa_r+0x4cc>
    85d4:	dc000915 	stw	r16,36(sp)
    85d8:	003e0e06 	br	7e14 <_dtoa_r+0xd64>
    85dc:	01000e44 	movi	r4,57
    85e0:	8825883a 	mov	r18,r17
    85e4:	9dc00044 	addi	r23,r19,1
    85e8:	99000005 	stb	r4,0(r19)
    85ec:	a023883a 	mov	r17,r20
    85f0:	dc000915 	stw	r16,36(sp)
    85f4:	003da406 	br	7c88 <_dtoa_r+0xbd8>
    85f8:	d9801417 	ldw	r6,80(sp)
    85fc:	d9c01517 	ldw	r7,84(sp)
    8600:	0009883a 	mov	r4,zero
    8604:	014ff834 	movhi	r5,16352
    8608:	00104bc0 	call	104bc <__subdf3>
    860c:	880d883a 	mov	r6,r17
    8610:	a00f883a 	mov	r7,r20
    8614:	1009883a 	mov	r4,r2
    8618:	180b883a 	mov	r5,r3
    861c:	000fbd40 	call	fbd4 <__gedf2>
    8620:	00bc7c0e 	bge	zero,r2,7814 <_dtoa_r+0x764>
    8624:	01000c04 	movi	r4,48
    8628:	00000106 	br	8630 <_dtoa_r+0x1580>
    862c:	102f883a 	mov	r23,r2
    8630:	b8bfffc4 	addi	r2,r23,-1
    8634:	10c00007 	ldb	r3,0(r2)
    8638:	193ffc26 	beq	r3,r4,862c <_dtoa_r+0x157c>
    863c:	d9801317 	ldw	r6,76(sp)
    8640:	d9800515 	stw	r6,20(sp)
    8644:	003c4406 	br	7758 <_dtoa_r+0x6a8>
    8648:	d9801317 	ldw	r6,76(sp)
    864c:	d9800515 	stw	r6,20(sp)
    8650:	003cea06 	br	79fc <_dtoa_r+0x94c>
    8654:	dd800f17 	ldw	r22,60(sp)
    8658:	dcc01017 	ldw	r19,64(sp)
    865c:	dc801217 	ldw	r18,72(sp)
    8660:	003c6c06 	br	7814 <_dtoa_r+0x764>
    8664:	903e031e 	bne	r18,zero,7e74 <_dtoa_r+0xdc4>
    8668:	003ebb06 	br	8158 <_dtoa_r+0x10a8>
    866c:	103e6c1e 	bne	r2,zero,8020 <_dtoa_r+0xf70>
    8670:	4080004c 	andi	r2,r8,1
    8674:	103e6a26 	beq	r2,zero,8020 <_dtoa_r+0xf70>
    8678:	003e6606 	br	8014 <_dtoa_r+0xf64>
    867c:	d8c00317 	ldw	r3,12(sp)
    8680:	00800084 	movi	r2,2
    8684:	10c02916 	blt	r2,r3,872c <_dtoa_r+0x167c>
    8688:	d9000c17 	ldw	r4,48(sp)
    868c:	003e8806 	br	80b0 <_dtoa_r+0x1000>
    8690:	04000084 	movi	r16,2
    8694:	003b9d06 	br	750c <_dtoa_r+0x45c>
    8698:	d9001317 	ldw	r4,76(sp)
    869c:	d9000515 	stw	r4,20(sp)
    86a0:	003cd606 	br	79fc <_dtoa_r+0x94c>
    86a4:	d8801317 	ldw	r2,76(sp)
    86a8:	d8800515 	stw	r2,20(sp)
    86ac:	003c2a06 	br	7758 <_dtoa_r+0x6a8>
    86b0:	d9800317 	ldw	r6,12(sp)
    86b4:	00800084 	movi	r2,2
    86b8:	11801516 	blt	r2,r6,8710 <_dtoa_r+0x1660>
    86bc:	d9c00c17 	ldw	r7,48(sp)
    86c0:	d9c00615 	stw	r7,24(sp)
    86c4:	003df706 	br	7ea4 <_dtoa_r+0xdf4>
    86c8:	193d3926 	beq	r3,r4,7bb0 <_dtoa_r+0xb00>
    86cc:	00c00f04 	movi	r3,60
    86d0:	1885c83a 	sub	r2,r3,r2
    86d4:	003ddf06 	br	7e54 <_dtoa_r+0xda4>
    86d8:	e009883a 	mov	r4,fp
    86dc:	e0001115 	stw	zero,68(fp)
    86e0:	000b883a 	mov	r5,zero
    86e4:	000a74c0 	call	a74c <_Balloc>
    86e8:	d8800715 	stw	r2,28(sp)
    86ec:	d8c00717 	ldw	r3,28(sp)
    86f0:	00bfffc4 	movi	r2,-1
    86f4:	01000044 	movi	r4,1
    86f8:	d8800c15 	stw	r2,48(sp)
    86fc:	e0c01015 	stw	r3,64(fp)
    8700:	d9000b15 	stw	r4,44(sp)
    8704:	d8800615 	stw	r2,24(sp)
    8708:	d8002215 	stw	zero,136(sp)
    870c:	003c4106 	br	7814 <_dtoa_r+0x764>
    8710:	d8c00c17 	ldw	r3,48(sp)
    8714:	d8c00615 	stw	r3,24(sp)
    8718:	003e7006 	br	80dc <_dtoa_r+0x102c>
    871c:	04400044 	movi	r17,1
    8720:	003b2006 	br	73a4 <_dtoa_r+0x2f4>
    8724:	000b883a 	mov	r5,zero
    8728:	003b3d06 	br	7420 <_dtoa_r+0x370>
    872c:	d8800c17 	ldw	r2,48(sp)
    8730:	d8800615 	stw	r2,24(sp)
    8734:	003e6906 	br	80dc <_dtoa_r+0x102c>

00008738 <__sflush_r>:
    8738:	2880030b 	ldhu	r2,12(r5)
    873c:	defffb04 	addi	sp,sp,-20
    8740:	dcc00315 	stw	r19,12(sp)
    8744:	dc400115 	stw	r17,4(sp)
    8748:	dfc00415 	stw	ra,16(sp)
    874c:	dc800215 	stw	r18,8(sp)
    8750:	dc000015 	stw	r16,0(sp)
    8754:	10c0020c 	andi	r3,r2,8
    8758:	2823883a 	mov	r17,r5
    875c:	2027883a 	mov	r19,r4
    8760:	1800311e 	bne	r3,zero,8828 <__sflush_r+0xf0>
    8764:	28c00117 	ldw	r3,4(r5)
    8768:	10820014 	ori	r2,r2,2048
    876c:	2880030d 	sth	r2,12(r5)
    8770:	00c04b0e 	bge	zero,r3,88a0 <__sflush_r+0x168>
    8774:	8a000a17 	ldw	r8,40(r17)
    8778:	40002326 	beq	r8,zero,8808 <__sflush_r+0xd0>
    877c:	9c000017 	ldw	r16,0(r19)
    8780:	10c4000c 	andi	r3,r2,4096
    8784:	98000015 	stw	zero,0(r19)
    8788:	18004826 	beq	r3,zero,88ac <__sflush_r+0x174>
    878c:	89801417 	ldw	r6,80(r17)
    8790:	10c0010c 	andi	r3,r2,4
    8794:	18000626 	beq	r3,zero,87b0 <__sflush_r+0x78>
    8798:	88c00117 	ldw	r3,4(r17)
    879c:	88800c17 	ldw	r2,48(r17)
    87a0:	30cdc83a 	sub	r6,r6,r3
    87a4:	10000226 	beq	r2,zero,87b0 <__sflush_r+0x78>
    87a8:	88800f17 	ldw	r2,60(r17)
    87ac:	308dc83a 	sub	r6,r6,r2
    87b0:	89400717 	ldw	r5,28(r17)
    87b4:	000f883a 	mov	r7,zero
    87b8:	9809883a 	mov	r4,r19
    87bc:	403ee83a 	callr	r8
    87c0:	00ffffc4 	movi	r3,-1
    87c4:	10c04426 	beq	r2,r3,88d8 <__sflush_r+0x1a0>
    87c8:	88c0030b 	ldhu	r3,12(r17)
    87cc:	89000417 	ldw	r4,16(r17)
    87d0:	88000115 	stw	zero,4(r17)
    87d4:	197dffcc 	andi	r5,r3,63487
    87d8:	8940030d 	sth	r5,12(r17)
    87dc:	89000015 	stw	r4,0(r17)
    87e0:	18c4000c 	andi	r3,r3,4096
    87e4:	18002c1e 	bne	r3,zero,8898 <__sflush_r+0x160>
    87e8:	89400c17 	ldw	r5,48(r17)
    87ec:	9c000015 	stw	r16,0(r19)
    87f0:	28000526 	beq	r5,zero,8808 <__sflush_r+0xd0>
    87f4:	88801004 	addi	r2,r17,64
    87f8:	28800226 	beq	r5,r2,8804 <__sflush_r+0xcc>
    87fc:	9809883a 	mov	r4,r19
    8800:	0008ea40 	call	8ea4 <_free_r>
    8804:	88000c15 	stw	zero,48(r17)
    8808:	0005883a 	mov	r2,zero
    880c:	dfc00417 	ldw	ra,16(sp)
    8810:	dcc00317 	ldw	r19,12(sp)
    8814:	dc800217 	ldw	r18,8(sp)
    8818:	dc400117 	ldw	r17,4(sp)
    881c:	dc000017 	ldw	r16,0(sp)
    8820:	dec00504 	addi	sp,sp,20
    8824:	f800283a 	ret
    8828:	2c800417 	ldw	r18,16(r5)
    882c:	903ff626 	beq	r18,zero,8808 <__sflush_r+0xd0>
    8830:	2c000017 	ldw	r16,0(r5)
    8834:	108000cc 	andi	r2,r2,3
    8838:	2c800015 	stw	r18,0(r5)
    883c:	84a1c83a 	sub	r16,r16,r18
    8840:	1000131e 	bne	r2,zero,8890 <__sflush_r+0x158>
    8844:	28800517 	ldw	r2,20(r5)
    8848:	88800215 	stw	r2,8(r17)
    884c:	04000316 	blt	zero,r16,885c <__sflush_r+0x124>
    8850:	003fed06 	br	8808 <__sflush_r+0xd0>
    8854:	90a5883a 	add	r18,r18,r2
    8858:	043feb0e 	bge	zero,r16,8808 <__sflush_r+0xd0>
    885c:	88800917 	ldw	r2,36(r17)
    8860:	89400717 	ldw	r5,28(r17)
    8864:	800f883a 	mov	r7,r16
    8868:	900d883a 	mov	r6,r18
    886c:	9809883a 	mov	r4,r19
    8870:	103ee83a 	callr	r2
    8874:	80a1c83a 	sub	r16,r16,r2
    8878:	00bff616 	blt	zero,r2,8854 <__sflush_r+0x11c>
    887c:	88c0030b 	ldhu	r3,12(r17)
    8880:	00bfffc4 	movi	r2,-1
    8884:	18c01014 	ori	r3,r3,64
    8888:	88c0030d 	sth	r3,12(r17)
    888c:	003fdf06 	br	880c <__sflush_r+0xd4>
    8890:	0005883a 	mov	r2,zero
    8894:	003fec06 	br	8848 <__sflush_r+0x110>
    8898:	88801415 	stw	r2,80(r17)
    889c:	003fd206 	br	87e8 <__sflush_r+0xb0>
    88a0:	28c00f17 	ldw	r3,60(r5)
    88a4:	00ffb316 	blt	zero,r3,8774 <__sflush_r+0x3c>
    88a8:	003fd706 	br	8808 <__sflush_r+0xd0>
    88ac:	89400717 	ldw	r5,28(r17)
    88b0:	000d883a 	mov	r6,zero
    88b4:	01c00044 	movi	r7,1
    88b8:	9809883a 	mov	r4,r19
    88bc:	403ee83a 	callr	r8
    88c0:	100d883a 	mov	r6,r2
    88c4:	00bfffc4 	movi	r2,-1
    88c8:	30801426 	beq	r6,r2,891c <__sflush_r+0x1e4>
    88cc:	8880030b 	ldhu	r2,12(r17)
    88d0:	8a000a17 	ldw	r8,40(r17)
    88d4:	003fae06 	br	8790 <__sflush_r+0x58>
    88d8:	98c00017 	ldw	r3,0(r19)
    88dc:	183fba26 	beq	r3,zero,87c8 <__sflush_r+0x90>
    88e0:	01000744 	movi	r4,29
    88e4:	19000626 	beq	r3,r4,8900 <__sflush_r+0x1c8>
    88e8:	01000584 	movi	r4,22
    88ec:	19000426 	beq	r3,r4,8900 <__sflush_r+0x1c8>
    88f0:	88c0030b 	ldhu	r3,12(r17)
    88f4:	18c01014 	ori	r3,r3,64
    88f8:	88c0030d 	sth	r3,12(r17)
    88fc:	003fc306 	br	880c <__sflush_r+0xd4>
    8900:	8880030b 	ldhu	r2,12(r17)
    8904:	88c00417 	ldw	r3,16(r17)
    8908:	88000115 	stw	zero,4(r17)
    890c:	10bdffcc 	andi	r2,r2,63487
    8910:	8880030d 	sth	r2,12(r17)
    8914:	88c00015 	stw	r3,0(r17)
    8918:	003fb306 	br	87e8 <__sflush_r+0xb0>
    891c:	98800017 	ldw	r2,0(r19)
    8920:	103fea26 	beq	r2,zero,88cc <__sflush_r+0x194>
    8924:	00c00744 	movi	r3,29
    8928:	10c00226 	beq	r2,r3,8934 <__sflush_r+0x1fc>
    892c:	00c00584 	movi	r3,22
    8930:	10c0031e 	bne	r2,r3,8940 <__sflush_r+0x208>
    8934:	9c000015 	stw	r16,0(r19)
    8938:	0005883a 	mov	r2,zero
    893c:	003fb306 	br	880c <__sflush_r+0xd4>
    8940:	88c0030b 	ldhu	r3,12(r17)
    8944:	3005883a 	mov	r2,r6
    8948:	18c01014 	ori	r3,r3,64
    894c:	88c0030d 	sth	r3,12(r17)
    8950:	003fae06 	br	880c <__sflush_r+0xd4>

00008954 <_fflush_r>:
    8954:	defffd04 	addi	sp,sp,-12
    8958:	dc000115 	stw	r16,4(sp)
    895c:	dfc00215 	stw	ra,8(sp)
    8960:	2021883a 	mov	r16,r4
    8964:	20000226 	beq	r4,zero,8970 <_fflush_r+0x1c>
    8968:	20800e17 	ldw	r2,56(r4)
    896c:	10000c26 	beq	r2,zero,89a0 <_fflush_r+0x4c>
    8970:	2880030f 	ldh	r2,12(r5)
    8974:	1000051e 	bne	r2,zero,898c <_fflush_r+0x38>
    8978:	0005883a 	mov	r2,zero
    897c:	dfc00217 	ldw	ra,8(sp)
    8980:	dc000117 	ldw	r16,4(sp)
    8984:	dec00304 	addi	sp,sp,12
    8988:	f800283a 	ret
    898c:	8009883a 	mov	r4,r16
    8990:	dfc00217 	ldw	ra,8(sp)
    8994:	dc000117 	ldw	r16,4(sp)
    8998:	dec00304 	addi	sp,sp,12
    899c:	00087381 	jmpi	8738 <__sflush_r>
    89a0:	d9400015 	stw	r5,0(sp)
    89a4:	0008d300 	call	8d30 <__sinit>
    89a8:	d9400017 	ldw	r5,0(sp)
    89ac:	003ff006 	br	8970 <_fflush_r+0x1c>

000089b0 <fflush>:
    89b0:	20000526 	beq	r4,zero,89c8 <fflush+0x18>
    89b4:	00800074 	movhi	r2,1
    89b8:	109c3004 	addi	r2,r2,28864
    89bc:	200b883a 	mov	r5,r4
    89c0:	11000017 	ldw	r4,0(r2)
    89c4:	00089541 	jmpi	8954 <_fflush_r>
    89c8:	00800074 	movhi	r2,1
    89cc:	109c2f04 	addi	r2,r2,28860
    89d0:	11000017 	ldw	r4,0(r2)
    89d4:	01400074 	movhi	r5,1
    89d8:	29625504 	addi	r5,r5,-30380
    89dc:	00097341 	jmpi	9734 <_fwalk_reent>

000089e0 <__fp_unlock>:
    89e0:	0005883a 	mov	r2,zero
    89e4:	f800283a 	ret

000089e8 <_cleanup_r>:
    89e8:	01400074 	movhi	r5,1
    89ec:	2975d304 	addi	r5,r5,-10420
    89f0:	00097341 	jmpi	9734 <_fwalk_reent>

000089f4 <__sinit.part.1>:
    89f4:	defff704 	addi	sp,sp,-36
    89f8:	00c00074 	movhi	r3,1
    89fc:	dfc00815 	stw	ra,32(sp)
    8a00:	ddc00715 	stw	r23,28(sp)
    8a04:	dd800615 	stw	r22,24(sp)
    8a08:	dd400515 	stw	r21,20(sp)
    8a0c:	dd000415 	stw	r20,16(sp)
    8a10:	dcc00315 	stw	r19,12(sp)
    8a14:	dc800215 	stw	r18,8(sp)
    8a18:	dc400115 	stw	r17,4(sp)
    8a1c:	dc000015 	stw	r16,0(sp)
    8a20:	18e27a04 	addi	r3,r3,-30232
    8a24:	24000117 	ldw	r16,4(r4)
    8a28:	20c00f15 	stw	r3,60(r4)
    8a2c:	2080bb04 	addi	r2,r4,748
    8a30:	00c000c4 	movi	r3,3
    8a34:	20c0b915 	stw	r3,740(r4)
    8a38:	2080ba15 	stw	r2,744(r4)
    8a3c:	2000b815 	stw	zero,736(r4)
    8a40:	05c00204 	movi	r23,8
    8a44:	00800104 	movi	r2,4
    8a48:	2025883a 	mov	r18,r4
    8a4c:	b80d883a 	mov	r6,r23
    8a50:	81001704 	addi	r4,r16,92
    8a54:	000b883a 	mov	r5,zero
    8a58:	80000015 	stw	zero,0(r16)
    8a5c:	80000115 	stw	zero,4(r16)
    8a60:	80000215 	stw	zero,8(r16)
    8a64:	8080030d 	sth	r2,12(r16)
    8a68:	80001915 	stw	zero,100(r16)
    8a6c:	8000038d 	sth	zero,14(r16)
    8a70:	80000415 	stw	zero,16(r16)
    8a74:	80000515 	stw	zero,20(r16)
    8a78:	80000615 	stw	zero,24(r16)
    8a7c:	000a6240 	call	a624 <memset>
    8a80:	05800074 	movhi	r22,1
    8a84:	94400217 	ldw	r17,8(r18)
    8a88:	05400074 	movhi	r21,1
    8a8c:	05000074 	movhi	r20,1
    8a90:	04c00074 	movhi	r19,1
    8a94:	b5af5d04 	addi	r22,r22,-17036
    8a98:	ad6f7404 	addi	r21,r21,-16944
    8a9c:	a52f9304 	addi	r20,r20,-16820
    8aa0:	9cefaa04 	addi	r19,r19,-16728
    8aa4:	85800815 	stw	r22,32(r16)
    8aa8:	85400915 	stw	r21,36(r16)
    8aac:	85000a15 	stw	r20,40(r16)
    8ab0:	84c00b15 	stw	r19,44(r16)
    8ab4:	84000715 	stw	r16,28(r16)
    8ab8:	00800284 	movi	r2,10
    8abc:	8880030d 	sth	r2,12(r17)
    8ac0:	00800044 	movi	r2,1
    8ac4:	b80d883a 	mov	r6,r23
    8ac8:	89001704 	addi	r4,r17,92
    8acc:	000b883a 	mov	r5,zero
    8ad0:	88000015 	stw	zero,0(r17)
    8ad4:	88000115 	stw	zero,4(r17)
    8ad8:	88000215 	stw	zero,8(r17)
    8adc:	88001915 	stw	zero,100(r17)
    8ae0:	8880038d 	sth	r2,14(r17)
    8ae4:	88000415 	stw	zero,16(r17)
    8ae8:	88000515 	stw	zero,20(r17)
    8aec:	88000615 	stw	zero,24(r17)
    8af0:	000a6240 	call	a624 <memset>
    8af4:	94000317 	ldw	r16,12(r18)
    8af8:	00800484 	movi	r2,18
    8afc:	8c400715 	stw	r17,28(r17)
    8b00:	8d800815 	stw	r22,32(r17)
    8b04:	8d400915 	stw	r21,36(r17)
    8b08:	8d000a15 	stw	r20,40(r17)
    8b0c:	8cc00b15 	stw	r19,44(r17)
    8b10:	8080030d 	sth	r2,12(r16)
    8b14:	00800084 	movi	r2,2
    8b18:	80000015 	stw	zero,0(r16)
    8b1c:	80000115 	stw	zero,4(r16)
    8b20:	80000215 	stw	zero,8(r16)
    8b24:	80001915 	stw	zero,100(r16)
    8b28:	8080038d 	sth	r2,14(r16)
    8b2c:	80000415 	stw	zero,16(r16)
    8b30:	80000515 	stw	zero,20(r16)
    8b34:	80000615 	stw	zero,24(r16)
    8b38:	b80d883a 	mov	r6,r23
    8b3c:	000b883a 	mov	r5,zero
    8b40:	81001704 	addi	r4,r16,92
    8b44:	000a6240 	call	a624 <memset>
    8b48:	00800044 	movi	r2,1
    8b4c:	84000715 	stw	r16,28(r16)
    8b50:	85800815 	stw	r22,32(r16)
    8b54:	85400915 	stw	r21,36(r16)
    8b58:	85000a15 	stw	r20,40(r16)
    8b5c:	84c00b15 	stw	r19,44(r16)
    8b60:	90800e15 	stw	r2,56(r18)
    8b64:	dfc00817 	ldw	ra,32(sp)
    8b68:	ddc00717 	ldw	r23,28(sp)
    8b6c:	dd800617 	ldw	r22,24(sp)
    8b70:	dd400517 	ldw	r21,20(sp)
    8b74:	dd000417 	ldw	r20,16(sp)
    8b78:	dcc00317 	ldw	r19,12(sp)
    8b7c:	dc800217 	ldw	r18,8(sp)
    8b80:	dc400117 	ldw	r17,4(sp)
    8b84:	dc000017 	ldw	r16,0(sp)
    8b88:	dec00904 	addi	sp,sp,36
    8b8c:	f800283a 	ret

00008b90 <__fp_lock>:
    8b90:	0005883a 	mov	r2,zero
    8b94:	f800283a 	ret

00008b98 <__sfmoreglue>:
    8b98:	defffc04 	addi	sp,sp,-16
    8b9c:	dc400115 	stw	r17,4(sp)
    8ba0:	2c7fffc4 	addi	r17,r5,-1
    8ba4:	8c401a24 	muli	r17,r17,104
    8ba8:	dc800215 	stw	r18,8(sp)
    8bac:	2825883a 	mov	r18,r5
    8bb0:	89401d04 	addi	r5,r17,116
    8bb4:	dc000015 	stw	r16,0(sp)
    8bb8:	dfc00315 	stw	ra,12(sp)
    8bbc:	0009a900 	call	9a90 <_malloc_r>
    8bc0:	1021883a 	mov	r16,r2
    8bc4:	10000726 	beq	r2,zero,8be4 <__sfmoreglue+0x4c>
    8bc8:	11000304 	addi	r4,r2,12
    8bcc:	10000015 	stw	zero,0(r2)
    8bd0:	14800115 	stw	r18,4(r2)
    8bd4:	11000215 	stw	r4,8(r2)
    8bd8:	89801a04 	addi	r6,r17,104
    8bdc:	000b883a 	mov	r5,zero
    8be0:	000a6240 	call	a624 <memset>
    8be4:	8005883a 	mov	r2,r16
    8be8:	dfc00317 	ldw	ra,12(sp)
    8bec:	dc800217 	ldw	r18,8(sp)
    8bf0:	dc400117 	ldw	r17,4(sp)
    8bf4:	dc000017 	ldw	r16,0(sp)
    8bf8:	dec00404 	addi	sp,sp,16
    8bfc:	f800283a 	ret

00008c00 <__sfp>:
    8c00:	defffb04 	addi	sp,sp,-20
    8c04:	dc000015 	stw	r16,0(sp)
    8c08:	04000074 	movhi	r16,1
    8c0c:	841c2f04 	addi	r16,r16,28860
    8c10:	dcc00315 	stw	r19,12(sp)
    8c14:	2027883a 	mov	r19,r4
    8c18:	81000017 	ldw	r4,0(r16)
    8c1c:	dfc00415 	stw	ra,16(sp)
    8c20:	dc800215 	stw	r18,8(sp)
    8c24:	20800e17 	ldw	r2,56(r4)
    8c28:	dc400115 	stw	r17,4(sp)
    8c2c:	1000021e 	bne	r2,zero,8c38 <__sfp+0x38>
    8c30:	00089f40 	call	89f4 <__sinit.part.1>
    8c34:	81000017 	ldw	r4,0(r16)
    8c38:	2480b804 	addi	r18,r4,736
    8c3c:	047fffc4 	movi	r17,-1
    8c40:	91000117 	ldw	r4,4(r18)
    8c44:	94000217 	ldw	r16,8(r18)
    8c48:	213fffc4 	addi	r4,r4,-1
    8c4c:	20000a16 	blt	r4,zero,8c78 <__sfp+0x78>
    8c50:	8080030f 	ldh	r2,12(r16)
    8c54:	10000c26 	beq	r2,zero,8c88 <__sfp+0x88>
    8c58:	80c01d04 	addi	r3,r16,116
    8c5c:	00000206 	br	8c68 <__sfp+0x68>
    8c60:	18bfe60f 	ldh	r2,-104(r3)
    8c64:	10000826 	beq	r2,zero,8c88 <__sfp+0x88>
    8c68:	213fffc4 	addi	r4,r4,-1
    8c6c:	1c3ffd04 	addi	r16,r3,-12
    8c70:	18c01a04 	addi	r3,r3,104
    8c74:	247ffa1e 	bne	r4,r17,8c60 <__sfp+0x60>
    8c78:	90800017 	ldw	r2,0(r18)
    8c7c:	10001d26 	beq	r2,zero,8cf4 <__sfp+0xf4>
    8c80:	1025883a 	mov	r18,r2
    8c84:	003fee06 	br	8c40 <__sfp+0x40>
    8c88:	00bfffc4 	movi	r2,-1
    8c8c:	8080038d 	sth	r2,14(r16)
    8c90:	00800044 	movi	r2,1
    8c94:	8080030d 	sth	r2,12(r16)
    8c98:	80001915 	stw	zero,100(r16)
    8c9c:	80000015 	stw	zero,0(r16)
    8ca0:	80000215 	stw	zero,8(r16)
    8ca4:	80000115 	stw	zero,4(r16)
    8ca8:	80000415 	stw	zero,16(r16)
    8cac:	80000515 	stw	zero,20(r16)
    8cb0:	80000615 	stw	zero,24(r16)
    8cb4:	01800204 	movi	r6,8
    8cb8:	000b883a 	mov	r5,zero
    8cbc:	81001704 	addi	r4,r16,92
    8cc0:	000a6240 	call	a624 <memset>
    8cc4:	8005883a 	mov	r2,r16
    8cc8:	80000c15 	stw	zero,48(r16)
    8ccc:	80000d15 	stw	zero,52(r16)
    8cd0:	80001115 	stw	zero,68(r16)
    8cd4:	80001215 	stw	zero,72(r16)
    8cd8:	dfc00417 	ldw	ra,16(sp)
    8cdc:	dcc00317 	ldw	r19,12(sp)
    8ce0:	dc800217 	ldw	r18,8(sp)
    8ce4:	dc400117 	ldw	r17,4(sp)
    8ce8:	dc000017 	ldw	r16,0(sp)
    8cec:	dec00504 	addi	sp,sp,20
    8cf0:	f800283a 	ret
    8cf4:	01400104 	movi	r5,4
    8cf8:	9809883a 	mov	r4,r19
    8cfc:	0008b980 	call	8b98 <__sfmoreglue>
    8d00:	90800015 	stw	r2,0(r18)
    8d04:	103fde1e 	bne	r2,zero,8c80 <__sfp+0x80>
    8d08:	00800304 	movi	r2,12
    8d0c:	98800015 	stw	r2,0(r19)
    8d10:	0005883a 	mov	r2,zero
    8d14:	003ff006 	br	8cd8 <__sfp+0xd8>

00008d18 <_cleanup>:
    8d18:	00800074 	movhi	r2,1
    8d1c:	109c2f04 	addi	r2,r2,28860
    8d20:	11000017 	ldw	r4,0(r2)
    8d24:	01400074 	movhi	r5,1
    8d28:	2975d304 	addi	r5,r5,-10420
    8d2c:	00097341 	jmpi	9734 <_fwalk_reent>

00008d30 <__sinit>:
    8d30:	20800e17 	ldw	r2,56(r4)
    8d34:	10000126 	beq	r2,zero,8d3c <__sinit+0xc>
    8d38:	f800283a 	ret
    8d3c:	00089f41 	jmpi	89f4 <__sinit.part.1>

00008d40 <__sfp_lock_acquire>:
    8d40:	f800283a 	ret

00008d44 <__sfp_lock_release>:
    8d44:	f800283a 	ret

00008d48 <__sinit_lock_acquire>:
    8d48:	f800283a 	ret

00008d4c <__sinit_lock_release>:
    8d4c:	f800283a 	ret

00008d50 <__fp_lock_all>:
    8d50:	00800074 	movhi	r2,1
    8d54:	109c3004 	addi	r2,r2,28864
    8d58:	11000017 	ldw	r4,0(r2)
    8d5c:	01400074 	movhi	r5,1
    8d60:	2962e404 	addi	r5,r5,-29808
    8d64:	00096701 	jmpi	9670 <_fwalk>

00008d68 <__fp_unlock_all>:
    8d68:	00800074 	movhi	r2,1
    8d6c:	109c3004 	addi	r2,r2,28864
    8d70:	11000017 	ldw	r4,0(r2)
    8d74:	01400074 	movhi	r5,1
    8d78:	29627804 	addi	r5,r5,-30240
    8d7c:	00096701 	jmpi	9670 <_fwalk>

00008d80 <_malloc_trim_r>:
    8d80:	defffb04 	addi	sp,sp,-20
    8d84:	dcc00315 	stw	r19,12(sp)
    8d88:	04c00074 	movhi	r19,1
    8d8c:	dc800215 	stw	r18,8(sp)
    8d90:	dc400115 	stw	r17,4(sp)
    8d94:	dc000015 	stw	r16,0(sp)
    8d98:	dfc00415 	stw	ra,16(sp)
    8d9c:	2821883a 	mov	r16,r5
    8da0:	9cd66304 	addi	r19,r19,22924
    8da4:	2025883a 	mov	r18,r4
    8da8:	001159c0 	call	1159c <__malloc_lock>
    8dac:	98800217 	ldw	r2,8(r19)
    8db0:	14400117 	ldw	r17,4(r2)
    8db4:	00bfff04 	movi	r2,-4
    8db8:	88a2703a 	and	r17,r17,r2
    8dbc:	8c21c83a 	sub	r16,r17,r16
    8dc0:	8403fbc4 	addi	r16,r16,4079
    8dc4:	8020d33a 	srli	r16,r16,12
    8dc8:	0083ffc4 	movi	r2,4095
    8dcc:	843fffc4 	addi	r16,r16,-1
    8dd0:	8020933a 	slli	r16,r16,12
    8dd4:	1400060e 	bge	r2,r16,8df0 <_malloc_trim_r+0x70>
    8dd8:	000b883a 	mov	r5,zero
    8ddc:	9009883a 	mov	r4,r18
    8de0:	000bd200 	call	bd20 <_sbrk_r>
    8de4:	98c00217 	ldw	r3,8(r19)
    8de8:	1c47883a 	add	r3,r3,r17
    8dec:	10c00a26 	beq	r2,r3,8e18 <_malloc_trim_r+0x98>
    8df0:	9009883a 	mov	r4,r18
    8df4:	00115c00 	call	115c0 <__malloc_unlock>
    8df8:	0005883a 	mov	r2,zero
    8dfc:	dfc00417 	ldw	ra,16(sp)
    8e00:	dcc00317 	ldw	r19,12(sp)
    8e04:	dc800217 	ldw	r18,8(sp)
    8e08:	dc400117 	ldw	r17,4(sp)
    8e0c:	dc000017 	ldw	r16,0(sp)
    8e10:	dec00504 	addi	sp,sp,20
    8e14:	f800283a 	ret
    8e18:	040bc83a 	sub	r5,zero,r16
    8e1c:	9009883a 	mov	r4,r18
    8e20:	000bd200 	call	bd20 <_sbrk_r>
    8e24:	00ffffc4 	movi	r3,-1
    8e28:	10c00d26 	beq	r2,r3,8e60 <_malloc_trim_r+0xe0>
    8e2c:	00c000b4 	movhi	r3,2
    8e30:	18e35804 	addi	r3,r3,-29344
    8e34:	18800017 	ldw	r2,0(r3)
    8e38:	99000217 	ldw	r4,8(r19)
    8e3c:	8c23c83a 	sub	r17,r17,r16
    8e40:	8c400054 	ori	r17,r17,1
    8e44:	1421c83a 	sub	r16,r2,r16
    8e48:	24400115 	stw	r17,4(r4)
    8e4c:	9009883a 	mov	r4,r18
    8e50:	1c000015 	stw	r16,0(r3)
    8e54:	00115c00 	call	115c0 <__malloc_unlock>
    8e58:	00800044 	movi	r2,1
    8e5c:	003fe706 	br	8dfc <_malloc_trim_r+0x7c>
    8e60:	000b883a 	mov	r5,zero
    8e64:	9009883a 	mov	r4,r18
    8e68:	000bd200 	call	bd20 <_sbrk_r>
    8e6c:	99000217 	ldw	r4,8(r19)
    8e70:	014003c4 	movi	r5,15
    8e74:	1107c83a 	sub	r3,r2,r4
    8e78:	28ffdd0e 	bge	r5,r3,8df0 <_malloc_trim_r+0x70>
    8e7c:	01400074 	movhi	r5,1
    8e80:	295c3204 	addi	r5,r5,28872
    8e84:	29400017 	ldw	r5,0(r5)
    8e88:	18c00054 	ori	r3,r3,1
    8e8c:	20c00115 	stw	r3,4(r4)
    8e90:	00c000b4 	movhi	r3,2
    8e94:	1145c83a 	sub	r2,r2,r5
    8e98:	18e35804 	addi	r3,r3,-29344
    8e9c:	18800015 	stw	r2,0(r3)
    8ea0:	003fd306 	br	8df0 <_malloc_trim_r+0x70>

00008ea4 <_free_r>:
    8ea4:	28004126 	beq	r5,zero,8fac <_free_r+0x108>
    8ea8:	defffd04 	addi	sp,sp,-12
    8eac:	dc400115 	stw	r17,4(sp)
    8eb0:	dc000015 	stw	r16,0(sp)
    8eb4:	2023883a 	mov	r17,r4
    8eb8:	2821883a 	mov	r16,r5
    8ebc:	dfc00215 	stw	ra,8(sp)
    8ec0:	001159c0 	call	1159c <__malloc_lock>
    8ec4:	81ffff17 	ldw	r7,-4(r16)
    8ec8:	00bfff84 	movi	r2,-2
    8ecc:	01000074 	movhi	r4,1
    8ed0:	81bffe04 	addi	r6,r16,-8
    8ed4:	3884703a 	and	r2,r7,r2
    8ed8:	21166304 	addi	r4,r4,22924
    8edc:	308b883a 	add	r5,r6,r2
    8ee0:	2a400117 	ldw	r9,4(r5)
    8ee4:	22000217 	ldw	r8,8(r4)
    8ee8:	00ffff04 	movi	r3,-4
    8eec:	48c6703a 	and	r3,r9,r3
    8ef0:	2a005726 	beq	r5,r8,9050 <_free_r+0x1ac>
    8ef4:	28c00115 	stw	r3,4(r5)
    8ef8:	39c0004c 	andi	r7,r7,1
    8efc:	3800091e 	bne	r7,zero,8f24 <_free_r+0x80>
    8f00:	823ffe17 	ldw	r8,-8(r16)
    8f04:	22400204 	addi	r9,r4,8
    8f08:	320dc83a 	sub	r6,r6,r8
    8f0c:	31c00217 	ldw	r7,8(r6)
    8f10:	1205883a 	add	r2,r2,r8
    8f14:	3a406526 	beq	r7,r9,90ac <_free_r+0x208>
    8f18:	32000317 	ldw	r8,12(r6)
    8f1c:	3a000315 	stw	r8,12(r7)
    8f20:	41c00215 	stw	r7,8(r8)
    8f24:	28cf883a 	add	r7,r5,r3
    8f28:	39c00117 	ldw	r7,4(r7)
    8f2c:	39c0004c 	andi	r7,r7,1
    8f30:	38003a26 	beq	r7,zero,901c <_free_r+0x178>
    8f34:	10c00054 	ori	r3,r2,1
    8f38:	30c00115 	stw	r3,4(r6)
    8f3c:	3087883a 	add	r3,r6,r2
    8f40:	18800015 	stw	r2,0(r3)
    8f44:	00c07fc4 	movi	r3,511
    8f48:	18801936 	bltu	r3,r2,8fb0 <_free_r+0x10c>
    8f4c:	1004d0fa 	srli	r2,r2,3
    8f50:	01c00044 	movi	r7,1
    8f54:	21400117 	ldw	r5,4(r4)
    8f58:	10c00044 	addi	r3,r2,1
    8f5c:	18c7883a 	add	r3,r3,r3
    8f60:	1005d0ba 	srai	r2,r2,2
    8f64:	18c7883a 	add	r3,r3,r3
    8f68:	18c7883a 	add	r3,r3,r3
    8f6c:	1907883a 	add	r3,r3,r4
    8f70:	3884983a 	sll	r2,r7,r2
    8f74:	19c00017 	ldw	r7,0(r3)
    8f78:	1a3ffe04 	addi	r8,r3,-8
    8f7c:	1144b03a 	or	r2,r2,r5
    8f80:	32000315 	stw	r8,12(r6)
    8f84:	31c00215 	stw	r7,8(r6)
    8f88:	20800115 	stw	r2,4(r4)
    8f8c:	19800015 	stw	r6,0(r3)
    8f90:	39800315 	stw	r6,12(r7)
    8f94:	8809883a 	mov	r4,r17
    8f98:	dfc00217 	ldw	ra,8(sp)
    8f9c:	dc400117 	ldw	r17,4(sp)
    8fa0:	dc000017 	ldw	r16,0(sp)
    8fa4:	dec00304 	addi	sp,sp,12
    8fa8:	00115c01 	jmpi	115c0 <__malloc_unlock>
    8fac:	f800283a 	ret
    8fb0:	100ad27a 	srli	r5,r2,9
    8fb4:	00c00104 	movi	r3,4
    8fb8:	19404a36 	bltu	r3,r5,90e4 <_free_r+0x240>
    8fbc:	100ad1ba 	srli	r5,r2,6
    8fc0:	28c00e44 	addi	r3,r5,57
    8fc4:	18c7883a 	add	r3,r3,r3
    8fc8:	29400e04 	addi	r5,r5,56
    8fcc:	18c7883a 	add	r3,r3,r3
    8fd0:	18c7883a 	add	r3,r3,r3
    8fd4:	1909883a 	add	r4,r3,r4
    8fd8:	20c00017 	ldw	r3,0(r4)
    8fdc:	01c00074 	movhi	r7,1
    8fe0:	213ffe04 	addi	r4,r4,-8
    8fe4:	39d66304 	addi	r7,r7,22924
    8fe8:	20c04426 	beq	r4,r3,90fc <_free_r+0x258>
    8fec:	01ffff04 	movi	r7,-4
    8ff0:	19400117 	ldw	r5,4(r3)
    8ff4:	29ca703a 	and	r5,r5,r7
    8ff8:	1140022e 	bgeu	r2,r5,9004 <_free_r+0x160>
    8ffc:	18c00217 	ldw	r3,8(r3)
    9000:	20fffb1e 	bne	r4,r3,8ff0 <_free_r+0x14c>
    9004:	19000317 	ldw	r4,12(r3)
    9008:	31000315 	stw	r4,12(r6)
    900c:	30c00215 	stw	r3,8(r6)
    9010:	21800215 	stw	r6,8(r4)
    9014:	19800315 	stw	r6,12(r3)
    9018:	003fde06 	br	8f94 <_free_r+0xf0>
    901c:	29c00217 	ldw	r7,8(r5)
    9020:	10c5883a 	add	r2,r2,r3
    9024:	00c00074 	movhi	r3,1
    9028:	18d66504 	addi	r3,r3,22932
    902c:	38c03b26 	beq	r7,r3,911c <_free_r+0x278>
    9030:	2a000317 	ldw	r8,12(r5)
    9034:	11400054 	ori	r5,r2,1
    9038:	3087883a 	add	r3,r6,r2
    903c:	3a000315 	stw	r8,12(r7)
    9040:	41c00215 	stw	r7,8(r8)
    9044:	31400115 	stw	r5,4(r6)
    9048:	18800015 	stw	r2,0(r3)
    904c:	003fbd06 	br	8f44 <_free_r+0xa0>
    9050:	39c0004c 	andi	r7,r7,1
    9054:	10c5883a 	add	r2,r2,r3
    9058:	3800071e 	bne	r7,zero,9078 <_free_r+0x1d4>
    905c:	81fffe17 	ldw	r7,-8(r16)
    9060:	31cdc83a 	sub	r6,r6,r7
    9064:	30c00317 	ldw	r3,12(r6)
    9068:	31400217 	ldw	r5,8(r6)
    906c:	11c5883a 	add	r2,r2,r7
    9070:	28c00315 	stw	r3,12(r5)
    9074:	19400215 	stw	r5,8(r3)
    9078:	10c00054 	ori	r3,r2,1
    907c:	30c00115 	stw	r3,4(r6)
    9080:	00c00074 	movhi	r3,1
    9084:	18dc3304 	addi	r3,r3,28876
    9088:	18c00017 	ldw	r3,0(r3)
    908c:	21800215 	stw	r6,8(r4)
    9090:	10ffc036 	bltu	r2,r3,8f94 <_free_r+0xf0>
    9094:	008000b4 	movhi	r2,2
    9098:	10a35004 	addi	r2,r2,-29376
    909c:	11400017 	ldw	r5,0(r2)
    90a0:	8809883a 	mov	r4,r17
    90a4:	0008d800 	call	8d80 <_malloc_trim_r>
    90a8:	003fba06 	br	8f94 <_free_r+0xf0>
    90ac:	28c9883a 	add	r4,r5,r3
    90b0:	21000117 	ldw	r4,4(r4)
    90b4:	2100004c 	andi	r4,r4,1
    90b8:	2000391e 	bne	r4,zero,91a0 <_free_r+0x2fc>
    90bc:	29c00217 	ldw	r7,8(r5)
    90c0:	29000317 	ldw	r4,12(r5)
    90c4:	1885883a 	add	r2,r3,r2
    90c8:	10c00054 	ori	r3,r2,1
    90cc:	39000315 	stw	r4,12(r7)
    90d0:	21c00215 	stw	r7,8(r4)
    90d4:	30c00115 	stw	r3,4(r6)
    90d8:	308d883a 	add	r6,r6,r2
    90dc:	30800015 	stw	r2,0(r6)
    90e0:	003fac06 	br	8f94 <_free_r+0xf0>
    90e4:	00c00504 	movi	r3,20
    90e8:	19401536 	bltu	r3,r5,9140 <_free_r+0x29c>
    90ec:	28c01704 	addi	r3,r5,92
    90f0:	18c7883a 	add	r3,r3,r3
    90f4:	294016c4 	addi	r5,r5,91
    90f8:	003fb406 	br	8fcc <_free_r+0x128>
    90fc:	280bd0ba 	srai	r5,r5,2
    9100:	00c00044 	movi	r3,1
    9104:	38800117 	ldw	r2,4(r7)
    9108:	194a983a 	sll	r5,r3,r5
    910c:	2007883a 	mov	r3,r4
    9110:	2884b03a 	or	r2,r5,r2
    9114:	38800115 	stw	r2,4(r7)
    9118:	003fbb06 	br	9008 <_free_r+0x164>
    911c:	21800515 	stw	r6,20(r4)
    9120:	21800415 	stw	r6,16(r4)
    9124:	10c00054 	ori	r3,r2,1
    9128:	31c00315 	stw	r7,12(r6)
    912c:	31c00215 	stw	r7,8(r6)
    9130:	30c00115 	stw	r3,4(r6)
    9134:	308d883a 	add	r6,r6,r2
    9138:	30800015 	stw	r2,0(r6)
    913c:	003f9506 	br	8f94 <_free_r+0xf0>
    9140:	00c01504 	movi	r3,84
    9144:	19400536 	bltu	r3,r5,915c <_free_r+0x2b8>
    9148:	100ad33a 	srli	r5,r2,12
    914c:	28c01bc4 	addi	r3,r5,111
    9150:	18c7883a 	add	r3,r3,r3
    9154:	29401b84 	addi	r5,r5,110
    9158:	003f9c06 	br	8fcc <_free_r+0x128>
    915c:	00c05504 	movi	r3,340
    9160:	19400536 	bltu	r3,r5,9178 <_free_r+0x2d4>
    9164:	100ad3fa 	srli	r5,r2,15
    9168:	28c01e04 	addi	r3,r5,120
    916c:	18c7883a 	add	r3,r3,r3
    9170:	29401dc4 	addi	r5,r5,119
    9174:	003f9506 	br	8fcc <_free_r+0x128>
    9178:	00c15504 	movi	r3,1364
    917c:	19400536 	bltu	r3,r5,9194 <_free_r+0x2f0>
    9180:	100ad4ba 	srli	r5,r2,18
    9184:	28c01f44 	addi	r3,r5,125
    9188:	18c7883a 	add	r3,r3,r3
    918c:	29401f04 	addi	r5,r5,124
    9190:	003f8e06 	br	8fcc <_free_r+0x128>
    9194:	00c03f84 	movi	r3,254
    9198:	01401f84 	movi	r5,126
    919c:	003f8b06 	br	8fcc <_free_r+0x128>
    91a0:	10c00054 	ori	r3,r2,1
    91a4:	30c00115 	stw	r3,4(r6)
    91a8:	308d883a 	add	r6,r6,r2
    91ac:	30800015 	stw	r2,0(r6)
    91b0:	003f7806 	br	8f94 <_free_r+0xf0>

000091b4 <__sfvwrite_r>:
    91b4:	30800217 	ldw	r2,8(r6)
    91b8:	10006726 	beq	r2,zero,9358 <__sfvwrite_r+0x1a4>
    91bc:	28c0030b 	ldhu	r3,12(r5)
    91c0:	defff404 	addi	sp,sp,-48
    91c4:	dd400715 	stw	r21,28(sp)
    91c8:	dd000615 	stw	r20,24(sp)
    91cc:	dc000215 	stw	r16,8(sp)
    91d0:	dfc00b15 	stw	ra,44(sp)
    91d4:	df000a15 	stw	fp,40(sp)
    91d8:	ddc00915 	stw	r23,36(sp)
    91dc:	dd800815 	stw	r22,32(sp)
    91e0:	dcc00515 	stw	r19,20(sp)
    91e4:	dc800415 	stw	r18,16(sp)
    91e8:	dc400315 	stw	r17,12(sp)
    91ec:	1880020c 	andi	r2,r3,8
    91f0:	2821883a 	mov	r16,r5
    91f4:	202b883a 	mov	r21,r4
    91f8:	3029883a 	mov	r20,r6
    91fc:	10002726 	beq	r2,zero,929c <__sfvwrite_r+0xe8>
    9200:	28800417 	ldw	r2,16(r5)
    9204:	10002526 	beq	r2,zero,929c <__sfvwrite_r+0xe8>
    9208:	1880008c 	andi	r2,r3,2
    920c:	a4400017 	ldw	r17,0(r20)
    9210:	10002a26 	beq	r2,zero,92bc <__sfvwrite_r+0x108>
    9214:	05a00034 	movhi	r22,32768
    9218:	0027883a 	mov	r19,zero
    921c:	0025883a 	mov	r18,zero
    9220:	b5bf0004 	addi	r22,r22,-1024
    9224:	980d883a 	mov	r6,r19
    9228:	a809883a 	mov	r4,r21
    922c:	90004626 	beq	r18,zero,9348 <__sfvwrite_r+0x194>
    9230:	900f883a 	mov	r7,r18
    9234:	b480022e 	bgeu	r22,r18,9240 <__sfvwrite_r+0x8c>
    9238:	01e00034 	movhi	r7,32768
    923c:	39ff0004 	addi	r7,r7,-1024
    9240:	80800917 	ldw	r2,36(r16)
    9244:	81400717 	ldw	r5,28(r16)
    9248:	103ee83a 	callr	r2
    924c:	0080570e 	bge	zero,r2,93ac <__sfvwrite_r+0x1f8>
    9250:	a0c00217 	ldw	r3,8(r20)
    9254:	98a7883a 	add	r19,r19,r2
    9258:	90a5c83a 	sub	r18,r18,r2
    925c:	1885c83a 	sub	r2,r3,r2
    9260:	a0800215 	stw	r2,8(r20)
    9264:	103fef1e 	bne	r2,zero,9224 <__sfvwrite_r+0x70>
    9268:	0005883a 	mov	r2,zero
    926c:	dfc00b17 	ldw	ra,44(sp)
    9270:	df000a17 	ldw	fp,40(sp)
    9274:	ddc00917 	ldw	r23,36(sp)
    9278:	dd800817 	ldw	r22,32(sp)
    927c:	dd400717 	ldw	r21,28(sp)
    9280:	dd000617 	ldw	r20,24(sp)
    9284:	dcc00517 	ldw	r19,20(sp)
    9288:	dc800417 	ldw	r18,16(sp)
    928c:	dc400317 	ldw	r17,12(sp)
    9290:	dc000217 	ldw	r16,8(sp)
    9294:	dec00c04 	addi	sp,sp,48
    9298:	f800283a 	ret
    929c:	800b883a 	mov	r5,r16
    92a0:	a809883a 	mov	r4,r21
    92a4:	0006d5c0 	call	6d5c <__swsetup_r>
    92a8:	1000eb1e 	bne	r2,zero,9658 <__sfvwrite_r+0x4a4>
    92ac:	80c0030b 	ldhu	r3,12(r16)
    92b0:	a4400017 	ldw	r17,0(r20)
    92b4:	1880008c 	andi	r2,r3,2
    92b8:	103fd61e 	bne	r2,zero,9214 <__sfvwrite_r+0x60>
    92bc:	1880004c 	andi	r2,r3,1
    92c0:	10003f1e 	bne	r2,zero,93c0 <__sfvwrite_r+0x20c>
    92c4:	0039883a 	mov	fp,zero
    92c8:	0025883a 	mov	r18,zero
    92cc:	90001a26 	beq	r18,zero,9338 <__sfvwrite_r+0x184>
    92d0:	1880800c 	andi	r2,r3,512
    92d4:	84c00217 	ldw	r19,8(r16)
    92d8:	10002126 	beq	r2,zero,9360 <__sfvwrite_r+0x1ac>
    92dc:	982f883a 	mov	r23,r19
    92e0:	94c09336 	bltu	r18,r19,9530 <__sfvwrite_r+0x37c>
    92e4:	1881200c 	andi	r2,r3,1152
    92e8:	10009e1e 	bne	r2,zero,9564 <__sfvwrite_r+0x3b0>
    92ec:	81000017 	ldw	r4,0(r16)
    92f0:	b80d883a 	mov	r6,r23
    92f4:	e00b883a 	mov	r5,fp
    92f8:	000a4c80 	call	a4c8 <memmove>
    92fc:	80c00217 	ldw	r3,8(r16)
    9300:	81000017 	ldw	r4,0(r16)
    9304:	9005883a 	mov	r2,r18
    9308:	1ce7c83a 	sub	r19,r3,r19
    930c:	25cf883a 	add	r7,r4,r23
    9310:	84c00215 	stw	r19,8(r16)
    9314:	81c00015 	stw	r7,0(r16)
    9318:	a0c00217 	ldw	r3,8(r20)
    931c:	e0b9883a 	add	fp,fp,r2
    9320:	90a5c83a 	sub	r18,r18,r2
    9324:	18a7c83a 	sub	r19,r3,r2
    9328:	a4c00215 	stw	r19,8(r20)
    932c:	983fce26 	beq	r19,zero,9268 <__sfvwrite_r+0xb4>
    9330:	80c0030b 	ldhu	r3,12(r16)
    9334:	903fe61e 	bne	r18,zero,92d0 <__sfvwrite_r+0x11c>
    9338:	8f000017 	ldw	fp,0(r17)
    933c:	8c800117 	ldw	r18,4(r17)
    9340:	8c400204 	addi	r17,r17,8
    9344:	003fe106 	br	92cc <__sfvwrite_r+0x118>
    9348:	8cc00017 	ldw	r19,0(r17)
    934c:	8c800117 	ldw	r18,4(r17)
    9350:	8c400204 	addi	r17,r17,8
    9354:	003fb306 	br	9224 <__sfvwrite_r+0x70>
    9358:	0005883a 	mov	r2,zero
    935c:	f800283a 	ret
    9360:	81000017 	ldw	r4,0(r16)
    9364:	80800417 	ldw	r2,16(r16)
    9368:	11005736 	bltu	r2,r4,94c8 <__sfvwrite_r+0x314>
    936c:	85c00517 	ldw	r23,20(r16)
    9370:	95c05536 	bltu	r18,r23,94c8 <__sfvwrite_r+0x314>
    9374:	00a00034 	movhi	r2,32768
    9378:	10bfffc4 	addi	r2,r2,-1
    937c:	9009883a 	mov	r4,r18
    9380:	1480012e 	bgeu	r2,r18,9388 <__sfvwrite_r+0x1d4>
    9384:	1009883a 	mov	r4,r2
    9388:	b80b883a 	mov	r5,r23
    938c:	00045380 	call	4538 <__divsi3>
    9390:	15cf383a 	mul	r7,r2,r23
    9394:	81400717 	ldw	r5,28(r16)
    9398:	80800917 	ldw	r2,36(r16)
    939c:	e00d883a 	mov	r6,fp
    93a0:	a809883a 	mov	r4,r21
    93a4:	103ee83a 	callr	r2
    93a8:	00bfdb16 	blt	zero,r2,9318 <__sfvwrite_r+0x164>
    93ac:	8080030b 	ldhu	r2,12(r16)
    93b0:	10801014 	ori	r2,r2,64
    93b4:	8080030d 	sth	r2,12(r16)
    93b8:	00bfffc4 	movi	r2,-1
    93bc:	003fab06 	br	926c <__sfvwrite_r+0xb8>
    93c0:	0027883a 	mov	r19,zero
    93c4:	0011883a 	mov	r8,zero
    93c8:	0039883a 	mov	fp,zero
    93cc:	0025883a 	mov	r18,zero
    93d0:	90001f26 	beq	r18,zero,9450 <__sfvwrite_r+0x29c>
    93d4:	40005a26 	beq	r8,zero,9540 <__sfvwrite_r+0x38c>
    93d8:	982d883a 	mov	r22,r19
    93dc:	94c0012e 	bgeu	r18,r19,93e4 <__sfvwrite_r+0x230>
    93e0:	902d883a 	mov	r22,r18
    93e4:	81000017 	ldw	r4,0(r16)
    93e8:	80800417 	ldw	r2,16(r16)
    93ec:	b02f883a 	mov	r23,r22
    93f0:	81c00517 	ldw	r7,20(r16)
    93f4:	1100032e 	bgeu	r2,r4,9404 <__sfvwrite_r+0x250>
    93f8:	80c00217 	ldw	r3,8(r16)
    93fc:	38c7883a 	add	r3,r7,r3
    9400:	1d801816 	blt	r3,r22,9464 <__sfvwrite_r+0x2b0>
    9404:	b1c03e16 	blt	r22,r7,9500 <__sfvwrite_r+0x34c>
    9408:	80800917 	ldw	r2,36(r16)
    940c:	81400717 	ldw	r5,28(r16)
    9410:	e00d883a 	mov	r6,fp
    9414:	da000115 	stw	r8,4(sp)
    9418:	a809883a 	mov	r4,r21
    941c:	103ee83a 	callr	r2
    9420:	102f883a 	mov	r23,r2
    9424:	da000117 	ldw	r8,4(sp)
    9428:	00bfe00e 	bge	zero,r2,93ac <__sfvwrite_r+0x1f8>
    942c:	9de7c83a 	sub	r19,r19,r23
    9430:	98001f26 	beq	r19,zero,94b0 <__sfvwrite_r+0x2fc>
    9434:	a0800217 	ldw	r2,8(r20)
    9438:	e5f9883a 	add	fp,fp,r23
    943c:	95e5c83a 	sub	r18,r18,r23
    9440:	15efc83a 	sub	r23,r2,r23
    9444:	a5c00215 	stw	r23,8(r20)
    9448:	b83f8726 	beq	r23,zero,9268 <__sfvwrite_r+0xb4>
    944c:	903fe11e 	bne	r18,zero,93d4 <__sfvwrite_r+0x220>
    9450:	8f000017 	ldw	fp,0(r17)
    9454:	8c800117 	ldw	r18,4(r17)
    9458:	0011883a 	mov	r8,zero
    945c:	8c400204 	addi	r17,r17,8
    9460:	003fdb06 	br	93d0 <__sfvwrite_r+0x21c>
    9464:	180d883a 	mov	r6,r3
    9468:	e00b883a 	mov	r5,fp
    946c:	da000115 	stw	r8,4(sp)
    9470:	d8c00015 	stw	r3,0(sp)
    9474:	000a4c80 	call	a4c8 <memmove>
    9478:	d8c00017 	ldw	r3,0(sp)
    947c:	80800017 	ldw	r2,0(r16)
    9480:	800b883a 	mov	r5,r16
    9484:	a809883a 	mov	r4,r21
    9488:	10c5883a 	add	r2,r2,r3
    948c:	80800015 	stw	r2,0(r16)
    9490:	d8c00015 	stw	r3,0(sp)
    9494:	00089540 	call	8954 <_fflush_r>
    9498:	d8c00017 	ldw	r3,0(sp)
    949c:	da000117 	ldw	r8,4(sp)
    94a0:	103fc21e 	bne	r2,zero,93ac <__sfvwrite_r+0x1f8>
    94a4:	182f883a 	mov	r23,r3
    94a8:	9de7c83a 	sub	r19,r19,r23
    94ac:	983fe11e 	bne	r19,zero,9434 <__sfvwrite_r+0x280>
    94b0:	800b883a 	mov	r5,r16
    94b4:	a809883a 	mov	r4,r21
    94b8:	00089540 	call	8954 <_fflush_r>
    94bc:	103fbb1e 	bne	r2,zero,93ac <__sfvwrite_r+0x1f8>
    94c0:	0011883a 	mov	r8,zero
    94c4:	003fdb06 	br	9434 <__sfvwrite_r+0x280>
    94c8:	94c0012e 	bgeu	r18,r19,94d0 <__sfvwrite_r+0x31c>
    94cc:	9027883a 	mov	r19,r18
    94d0:	980d883a 	mov	r6,r19
    94d4:	e00b883a 	mov	r5,fp
    94d8:	000a4c80 	call	a4c8 <memmove>
    94dc:	80800217 	ldw	r2,8(r16)
    94e0:	80c00017 	ldw	r3,0(r16)
    94e4:	14c5c83a 	sub	r2,r2,r19
    94e8:	1cc7883a 	add	r3,r3,r19
    94ec:	80800215 	stw	r2,8(r16)
    94f0:	80c00015 	stw	r3,0(r16)
    94f4:	10004326 	beq	r2,zero,9604 <__sfvwrite_r+0x450>
    94f8:	9805883a 	mov	r2,r19
    94fc:	003f8606 	br	9318 <__sfvwrite_r+0x164>
    9500:	b00d883a 	mov	r6,r22
    9504:	e00b883a 	mov	r5,fp
    9508:	da000115 	stw	r8,4(sp)
    950c:	000a4c80 	call	a4c8 <memmove>
    9510:	80800217 	ldw	r2,8(r16)
    9514:	80c00017 	ldw	r3,0(r16)
    9518:	da000117 	ldw	r8,4(sp)
    951c:	1585c83a 	sub	r2,r2,r22
    9520:	1dad883a 	add	r22,r3,r22
    9524:	80800215 	stw	r2,8(r16)
    9528:	85800015 	stw	r22,0(r16)
    952c:	003fbf06 	br	942c <__sfvwrite_r+0x278>
    9530:	81000017 	ldw	r4,0(r16)
    9534:	9027883a 	mov	r19,r18
    9538:	902f883a 	mov	r23,r18
    953c:	003f6c06 	br	92f0 <__sfvwrite_r+0x13c>
    9540:	900d883a 	mov	r6,r18
    9544:	01400284 	movi	r5,10
    9548:	e009883a 	mov	r4,fp
    954c:	000a29c0 	call	a29c <memchr>
    9550:	10003e26 	beq	r2,zero,964c <__sfvwrite_r+0x498>
    9554:	10800044 	addi	r2,r2,1
    9558:	1727c83a 	sub	r19,r2,fp
    955c:	02000044 	movi	r8,1
    9560:	003f9d06 	br	93d8 <__sfvwrite_r+0x224>
    9564:	80800517 	ldw	r2,20(r16)
    9568:	81400417 	ldw	r5,16(r16)
    956c:	81c00017 	ldw	r7,0(r16)
    9570:	10a7883a 	add	r19,r2,r2
    9574:	9885883a 	add	r2,r19,r2
    9578:	1026d7fa 	srli	r19,r2,31
    957c:	396dc83a 	sub	r22,r7,r5
    9580:	b1000044 	addi	r4,r22,1
    9584:	9885883a 	add	r2,r19,r2
    9588:	1027d07a 	srai	r19,r2,1
    958c:	2485883a 	add	r2,r4,r18
    9590:	980d883a 	mov	r6,r19
    9594:	9880022e 	bgeu	r19,r2,95a0 <__sfvwrite_r+0x3ec>
    9598:	1027883a 	mov	r19,r2
    959c:	100d883a 	mov	r6,r2
    95a0:	18c1000c 	andi	r3,r3,1024
    95a4:	18001c26 	beq	r3,zero,9618 <__sfvwrite_r+0x464>
    95a8:	300b883a 	mov	r5,r6
    95ac:	a809883a 	mov	r4,r21
    95b0:	0009a900 	call	9a90 <_malloc_r>
    95b4:	102f883a 	mov	r23,r2
    95b8:	10002926 	beq	r2,zero,9660 <__sfvwrite_r+0x4ac>
    95bc:	81400417 	ldw	r5,16(r16)
    95c0:	b00d883a 	mov	r6,r22
    95c4:	1009883a 	mov	r4,r2
    95c8:	000a3800 	call	a380 <memcpy>
    95cc:	8080030b 	ldhu	r2,12(r16)
    95d0:	00fedfc4 	movi	r3,-1153
    95d4:	10c4703a 	and	r2,r2,r3
    95d8:	10802014 	ori	r2,r2,128
    95dc:	8080030d 	sth	r2,12(r16)
    95e0:	bd89883a 	add	r4,r23,r22
    95e4:	9d8fc83a 	sub	r7,r19,r22
    95e8:	85c00415 	stw	r23,16(r16)
    95ec:	84c00515 	stw	r19,20(r16)
    95f0:	81000015 	stw	r4,0(r16)
    95f4:	9027883a 	mov	r19,r18
    95f8:	81c00215 	stw	r7,8(r16)
    95fc:	902f883a 	mov	r23,r18
    9600:	003f3b06 	br	92f0 <__sfvwrite_r+0x13c>
    9604:	800b883a 	mov	r5,r16
    9608:	a809883a 	mov	r4,r21
    960c:	00089540 	call	8954 <_fflush_r>
    9610:	103fb926 	beq	r2,zero,94f8 <__sfvwrite_r+0x344>
    9614:	003f6506 	br	93ac <__sfvwrite_r+0x1f8>
    9618:	a809883a 	mov	r4,r21
    961c:	000b7480 	call	b748 <_realloc_r>
    9620:	102f883a 	mov	r23,r2
    9624:	103fee1e 	bne	r2,zero,95e0 <__sfvwrite_r+0x42c>
    9628:	81400417 	ldw	r5,16(r16)
    962c:	a809883a 	mov	r4,r21
    9630:	0008ea40 	call	8ea4 <_free_r>
    9634:	8080030b 	ldhu	r2,12(r16)
    9638:	00ffdfc4 	movi	r3,-129
    963c:	1884703a 	and	r2,r3,r2
    9640:	00c00304 	movi	r3,12
    9644:	a8c00015 	stw	r3,0(r21)
    9648:	003f5906 	br	93b0 <__sfvwrite_r+0x1fc>
    964c:	94c00044 	addi	r19,r18,1
    9650:	02000044 	movi	r8,1
    9654:	003f6006 	br	93d8 <__sfvwrite_r+0x224>
    9658:	00bfffc4 	movi	r2,-1
    965c:	003f0306 	br	926c <__sfvwrite_r+0xb8>
    9660:	00800304 	movi	r2,12
    9664:	a8800015 	stw	r2,0(r21)
    9668:	8080030b 	ldhu	r2,12(r16)
    966c:	003f5006 	br	93b0 <__sfvwrite_r+0x1fc>

00009670 <_fwalk>:
    9670:	defff704 	addi	sp,sp,-36
    9674:	dd000415 	stw	r20,16(sp)
    9678:	dfc00815 	stw	ra,32(sp)
    967c:	ddc00715 	stw	r23,28(sp)
    9680:	dd800615 	stw	r22,24(sp)
    9684:	dd400515 	stw	r21,20(sp)
    9688:	dcc00315 	stw	r19,12(sp)
    968c:	dc800215 	stw	r18,8(sp)
    9690:	dc400115 	stw	r17,4(sp)
    9694:	dc000015 	stw	r16,0(sp)
    9698:	2500b804 	addi	r20,r4,736
    969c:	a0002326 	beq	r20,zero,972c <_fwalk+0xbc>
    96a0:	282b883a 	mov	r21,r5
    96a4:	002f883a 	mov	r23,zero
    96a8:	05800044 	movi	r22,1
    96ac:	04ffffc4 	movi	r19,-1
    96b0:	a4400117 	ldw	r17,4(r20)
    96b4:	a4800217 	ldw	r18,8(r20)
    96b8:	8c7fffc4 	addi	r17,r17,-1
    96bc:	88000d16 	blt	r17,zero,96f4 <_fwalk+0x84>
    96c0:	94000304 	addi	r16,r18,12
    96c4:	94800384 	addi	r18,r18,14
    96c8:	8080000b 	ldhu	r2,0(r16)
    96cc:	8c7fffc4 	addi	r17,r17,-1
    96d0:	813ffd04 	addi	r4,r16,-12
    96d4:	b080042e 	bgeu	r22,r2,96e8 <_fwalk+0x78>
    96d8:	9080000f 	ldh	r2,0(r18)
    96dc:	14c00226 	beq	r2,r19,96e8 <_fwalk+0x78>
    96e0:	a83ee83a 	callr	r21
    96e4:	b8aeb03a 	or	r23,r23,r2
    96e8:	84001a04 	addi	r16,r16,104
    96ec:	94801a04 	addi	r18,r18,104
    96f0:	8cfff51e 	bne	r17,r19,96c8 <_fwalk+0x58>
    96f4:	a5000017 	ldw	r20,0(r20)
    96f8:	a03fed1e 	bne	r20,zero,96b0 <_fwalk+0x40>
    96fc:	b805883a 	mov	r2,r23
    9700:	dfc00817 	ldw	ra,32(sp)
    9704:	ddc00717 	ldw	r23,28(sp)
    9708:	dd800617 	ldw	r22,24(sp)
    970c:	dd400517 	ldw	r21,20(sp)
    9710:	dd000417 	ldw	r20,16(sp)
    9714:	dcc00317 	ldw	r19,12(sp)
    9718:	dc800217 	ldw	r18,8(sp)
    971c:	dc400117 	ldw	r17,4(sp)
    9720:	dc000017 	ldw	r16,0(sp)
    9724:	dec00904 	addi	sp,sp,36
    9728:	f800283a 	ret
    972c:	002f883a 	mov	r23,zero
    9730:	003ff206 	br	96fc <_fwalk+0x8c>

00009734 <_fwalk_reent>:
    9734:	defff704 	addi	sp,sp,-36
    9738:	dd000415 	stw	r20,16(sp)
    973c:	dfc00815 	stw	ra,32(sp)
    9740:	ddc00715 	stw	r23,28(sp)
    9744:	dd800615 	stw	r22,24(sp)
    9748:	dd400515 	stw	r21,20(sp)
    974c:	dcc00315 	stw	r19,12(sp)
    9750:	dc800215 	stw	r18,8(sp)
    9754:	dc400115 	stw	r17,4(sp)
    9758:	dc000015 	stw	r16,0(sp)
    975c:	2500b804 	addi	r20,r4,736
    9760:	a0002326 	beq	r20,zero,97f0 <_fwalk_reent+0xbc>
    9764:	282b883a 	mov	r21,r5
    9768:	2027883a 	mov	r19,r4
    976c:	002f883a 	mov	r23,zero
    9770:	05800044 	movi	r22,1
    9774:	04bfffc4 	movi	r18,-1
    9778:	a4400117 	ldw	r17,4(r20)
    977c:	a4000217 	ldw	r16,8(r20)
    9780:	8c7fffc4 	addi	r17,r17,-1
    9784:	88000c16 	blt	r17,zero,97b8 <_fwalk_reent+0x84>
    9788:	84000304 	addi	r16,r16,12
    978c:	8080000b 	ldhu	r2,0(r16)
    9790:	8c7fffc4 	addi	r17,r17,-1
    9794:	817ffd04 	addi	r5,r16,-12
    9798:	b080052e 	bgeu	r22,r2,97b0 <_fwalk_reent+0x7c>
    979c:	8080008f 	ldh	r2,2(r16)
    97a0:	9809883a 	mov	r4,r19
    97a4:	14800226 	beq	r2,r18,97b0 <_fwalk_reent+0x7c>
    97a8:	a83ee83a 	callr	r21
    97ac:	b8aeb03a 	or	r23,r23,r2
    97b0:	84001a04 	addi	r16,r16,104
    97b4:	8cbff51e 	bne	r17,r18,978c <_fwalk_reent+0x58>
    97b8:	a5000017 	ldw	r20,0(r20)
    97bc:	a03fee1e 	bne	r20,zero,9778 <_fwalk_reent+0x44>
    97c0:	b805883a 	mov	r2,r23
    97c4:	dfc00817 	ldw	ra,32(sp)
    97c8:	ddc00717 	ldw	r23,28(sp)
    97cc:	dd800617 	ldw	r22,24(sp)
    97d0:	dd400517 	ldw	r21,20(sp)
    97d4:	dd000417 	ldw	r20,16(sp)
    97d8:	dcc00317 	ldw	r19,12(sp)
    97dc:	dc800217 	ldw	r18,8(sp)
    97e0:	dc400117 	ldw	r17,4(sp)
    97e4:	dc000017 	ldw	r16,0(sp)
    97e8:	dec00904 	addi	sp,sp,36
    97ec:	f800283a 	ret
    97f0:	002f883a 	mov	r23,zero
    97f4:	003ff206 	br	97c0 <_fwalk_reent+0x8c>

000097f8 <_setlocale_r>:
    97f8:	30001b26 	beq	r6,zero,9868 <_setlocale_r+0x70>
    97fc:	01400074 	movhi	r5,1
    9800:	defffe04 	addi	sp,sp,-8
    9804:	2953f604 	addi	r5,r5,20440
    9808:	3009883a 	mov	r4,r6
    980c:	dc000015 	stw	r16,0(sp)
    9810:	dfc00115 	stw	ra,4(sp)
    9814:	3021883a 	mov	r16,r6
    9818:	000beb00 	call	beb0 <strcmp>
    981c:	1000061e 	bne	r2,zero,9838 <_setlocale_r+0x40>
    9820:	00800074 	movhi	r2,1
    9824:	1093f504 	addi	r2,r2,20436
    9828:	dfc00117 	ldw	ra,4(sp)
    982c:	dc000017 	ldw	r16,0(sp)
    9830:	dec00204 	addi	sp,sp,8
    9834:	f800283a 	ret
    9838:	01400074 	movhi	r5,1
    983c:	2953f504 	addi	r5,r5,20436
    9840:	8009883a 	mov	r4,r16
    9844:	000beb00 	call	beb0 <strcmp>
    9848:	103ff526 	beq	r2,zero,9820 <_setlocale_r+0x28>
    984c:	01400074 	movhi	r5,1
    9850:	2953e004 	addi	r5,r5,20352
    9854:	8009883a 	mov	r4,r16
    9858:	000beb00 	call	beb0 <strcmp>
    985c:	103ff026 	beq	r2,zero,9820 <_setlocale_r+0x28>
    9860:	0005883a 	mov	r2,zero
    9864:	003ff006 	br	9828 <_setlocale_r+0x30>
    9868:	00800074 	movhi	r2,1
    986c:	1093f504 	addi	r2,r2,20436
    9870:	f800283a 	ret

00009874 <__locale_charset>:
    9874:	00800074 	movhi	r2,1
    9878:	10964d04 	addi	r2,r2,22836
    987c:	f800283a 	ret

00009880 <__locale_mb_cur_max>:
    9880:	00800074 	movhi	r2,1
    9884:	109c3104 	addi	r2,r2,28868
    9888:	10800017 	ldw	r2,0(r2)
    988c:	f800283a 	ret

00009890 <__locale_msgcharset>:
    9890:	00800074 	movhi	r2,1
    9894:	10964504 	addi	r2,r2,22804
    9898:	f800283a 	ret

0000989c <__locale_cjk_lang>:
    989c:	0005883a 	mov	r2,zero
    98a0:	f800283a 	ret

000098a4 <_localeconv_r>:
    98a4:	00800074 	movhi	r2,1
    98a8:	10965504 	addi	r2,r2,22868
    98ac:	f800283a 	ret

000098b0 <setlocale>:
    98b0:	00800074 	movhi	r2,1
    98b4:	109c3004 	addi	r2,r2,28864
    98b8:	280d883a 	mov	r6,r5
    98bc:	200b883a 	mov	r5,r4
    98c0:	11000017 	ldw	r4,0(r2)
    98c4:	00097f81 	jmpi	97f8 <_setlocale_r>

000098c8 <localeconv>:
    98c8:	00800074 	movhi	r2,1
    98cc:	10965504 	addi	r2,r2,22868
    98d0:	f800283a 	ret

000098d4 <__smakebuf_r>:
    98d4:	2880030b 	ldhu	r2,12(r5)
    98d8:	10c0008c 	andi	r3,r2,2
    98dc:	1800411e 	bne	r3,zero,99e4 <__smakebuf_r+0x110>
    98e0:	deffec04 	addi	sp,sp,-80
    98e4:	dc000f15 	stw	r16,60(sp)
    98e8:	2821883a 	mov	r16,r5
    98ec:	2940038f 	ldh	r5,14(r5)
    98f0:	dc401015 	stw	r17,64(sp)
    98f4:	dfc01315 	stw	ra,76(sp)
    98f8:	dcc01215 	stw	r19,72(sp)
    98fc:	dc801115 	stw	r18,68(sp)
    9900:	2023883a 	mov	r17,r4
    9904:	28001c16 	blt	r5,zero,9978 <__smakebuf_r+0xa4>
    9908:	d80d883a 	mov	r6,sp
    990c:	000da580 	call	da58 <_fstat_r>
    9910:	10001816 	blt	r2,zero,9974 <__smakebuf_r+0xa0>
    9914:	d8800117 	ldw	r2,4(sp)
    9918:	00e00014 	movui	r3,32768
    991c:	10bc000c 	andi	r2,r2,61440
    9920:	14c80020 	cmpeqi	r19,r2,8192
    9924:	10c03726 	beq	r2,r3,9a04 <__smakebuf_r+0x130>
    9928:	80c0030b 	ldhu	r3,12(r16)
    992c:	18c20014 	ori	r3,r3,2048
    9930:	80c0030d 	sth	r3,12(r16)
    9934:	00c80004 	movi	r3,8192
    9938:	10c0521e 	bne	r2,r3,9a84 <__smakebuf_r+0x1b0>
    993c:	8140038f 	ldh	r5,14(r16)
    9940:	8809883a 	mov	r4,r17
    9944:	000dab40 	call	dab4 <_isatty_r>
    9948:	10004c26 	beq	r2,zero,9a7c <__smakebuf_r+0x1a8>
    994c:	8080030b 	ldhu	r2,12(r16)
    9950:	80c010c4 	addi	r3,r16,67
    9954:	80c00015 	stw	r3,0(r16)
    9958:	10800054 	ori	r2,r2,1
    995c:	8080030d 	sth	r2,12(r16)
    9960:	00800044 	movi	r2,1
    9964:	80c00415 	stw	r3,16(r16)
    9968:	80800515 	stw	r2,20(r16)
    996c:	04810004 	movi	r18,1024
    9970:	00000706 	br	9990 <__smakebuf_r+0xbc>
    9974:	8080030b 	ldhu	r2,12(r16)
    9978:	10c0200c 	andi	r3,r2,128
    997c:	18001f1e 	bne	r3,zero,99fc <__smakebuf_r+0x128>
    9980:	04810004 	movi	r18,1024
    9984:	10820014 	ori	r2,r2,2048
    9988:	8080030d 	sth	r2,12(r16)
    998c:	0027883a 	mov	r19,zero
    9990:	900b883a 	mov	r5,r18
    9994:	8809883a 	mov	r4,r17
    9998:	0009a900 	call	9a90 <_malloc_r>
    999c:	10002c26 	beq	r2,zero,9a50 <__smakebuf_r+0x17c>
    99a0:	80c0030b 	ldhu	r3,12(r16)
    99a4:	01000074 	movhi	r4,1
    99a8:	21227a04 	addi	r4,r4,-30232
    99ac:	89000f15 	stw	r4,60(r17)
    99b0:	18c02014 	ori	r3,r3,128
    99b4:	80c0030d 	sth	r3,12(r16)
    99b8:	80800015 	stw	r2,0(r16)
    99bc:	80800415 	stw	r2,16(r16)
    99c0:	84800515 	stw	r18,20(r16)
    99c4:	98001a1e 	bne	r19,zero,9a30 <__smakebuf_r+0x15c>
    99c8:	dfc01317 	ldw	ra,76(sp)
    99cc:	dcc01217 	ldw	r19,72(sp)
    99d0:	dc801117 	ldw	r18,68(sp)
    99d4:	dc401017 	ldw	r17,64(sp)
    99d8:	dc000f17 	ldw	r16,60(sp)
    99dc:	dec01404 	addi	sp,sp,80
    99e0:	f800283a 	ret
    99e4:	288010c4 	addi	r2,r5,67
    99e8:	28800015 	stw	r2,0(r5)
    99ec:	28800415 	stw	r2,16(r5)
    99f0:	00800044 	movi	r2,1
    99f4:	28800515 	stw	r2,20(r5)
    99f8:	f800283a 	ret
    99fc:	04801004 	movi	r18,64
    9a00:	003fe006 	br	9984 <__smakebuf_r+0xb0>
    9a04:	81000a17 	ldw	r4,40(r16)
    9a08:	00c00074 	movhi	r3,1
    9a0c:	18ef9304 	addi	r3,r3,-16820
    9a10:	20ffc51e 	bne	r4,r3,9928 <__smakebuf_r+0x54>
    9a14:	8080030b 	ldhu	r2,12(r16)
    9a18:	04810004 	movi	r18,1024
    9a1c:	84801315 	stw	r18,76(r16)
    9a20:	1484b03a 	or	r2,r2,r18
    9a24:	8080030d 	sth	r2,12(r16)
    9a28:	0027883a 	mov	r19,zero
    9a2c:	003fd806 	br	9990 <__smakebuf_r+0xbc>
    9a30:	8140038f 	ldh	r5,14(r16)
    9a34:	8809883a 	mov	r4,r17
    9a38:	000dab40 	call	dab4 <_isatty_r>
    9a3c:	103fe226 	beq	r2,zero,99c8 <__smakebuf_r+0xf4>
    9a40:	8080030b 	ldhu	r2,12(r16)
    9a44:	10800054 	ori	r2,r2,1
    9a48:	8080030d 	sth	r2,12(r16)
    9a4c:	003fde06 	br	99c8 <__smakebuf_r+0xf4>
    9a50:	8080030b 	ldhu	r2,12(r16)
    9a54:	10c0800c 	andi	r3,r2,512
    9a58:	183fdb1e 	bne	r3,zero,99c8 <__smakebuf_r+0xf4>
    9a5c:	10800094 	ori	r2,r2,2
    9a60:	80c010c4 	addi	r3,r16,67
    9a64:	8080030d 	sth	r2,12(r16)
    9a68:	00800044 	movi	r2,1
    9a6c:	80c00015 	stw	r3,0(r16)
    9a70:	80c00415 	stw	r3,16(r16)
    9a74:	80800515 	stw	r2,20(r16)
    9a78:	003fd306 	br	99c8 <__smakebuf_r+0xf4>
    9a7c:	04810004 	movi	r18,1024
    9a80:	003fc306 	br	9990 <__smakebuf_r+0xbc>
    9a84:	0027883a 	mov	r19,zero
    9a88:	04810004 	movi	r18,1024
    9a8c:	003fc006 	br	9990 <__smakebuf_r+0xbc>

00009a90 <_malloc_r>:
    9a90:	defff504 	addi	sp,sp,-44
    9a94:	dc800315 	stw	r18,12(sp)
    9a98:	dfc00a15 	stw	ra,40(sp)
    9a9c:	df000915 	stw	fp,36(sp)
    9aa0:	ddc00815 	stw	r23,32(sp)
    9aa4:	dd800715 	stw	r22,28(sp)
    9aa8:	dd400615 	stw	r21,24(sp)
    9aac:	dd000515 	stw	r20,20(sp)
    9ab0:	dcc00415 	stw	r19,16(sp)
    9ab4:	dc400215 	stw	r17,8(sp)
    9ab8:	dc000115 	stw	r16,4(sp)
    9abc:	288002c4 	addi	r2,r5,11
    9ac0:	00c00584 	movi	r3,22
    9ac4:	2025883a 	mov	r18,r4
    9ac8:	18807f2e 	bgeu	r3,r2,9cc8 <_malloc_r+0x238>
    9acc:	047ffe04 	movi	r17,-8
    9ad0:	1462703a 	and	r17,r2,r17
    9ad4:	8800a316 	blt	r17,zero,9d64 <_malloc_r+0x2d4>
    9ad8:	8940a236 	bltu	r17,r5,9d64 <_malloc_r+0x2d4>
    9adc:	001159c0 	call	1159c <__malloc_lock>
    9ae0:	00807dc4 	movi	r2,503
    9ae4:	1441e92e 	bgeu	r2,r17,a28c <_malloc_r+0x7fc>
    9ae8:	8804d27a 	srli	r2,r17,9
    9aec:	1000a126 	beq	r2,zero,9d74 <_malloc_r+0x2e4>
    9af0:	00c00104 	movi	r3,4
    9af4:	18811e36 	bltu	r3,r2,9f70 <_malloc_r+0x4e0>
    9af8:	8804d1ba 	srli	r2,r17,6
    9afc:	12000e44 	addi	r8,r2,57
    9b00:	11c00e04 	addi	r7,r2,56
    9b04:	4209883a 	add	r4,r8,r8
    9b08:	04c00074 	movhi	r19,1
    9b0c:	2109883a 	add	r4,r4,r4
    9b10:	9cd66304 	addi	r19,r19,22924
    9b14:	2109883a 	add	r4,r4,r4
    9b18:	9909883a 	add	r4,r19,r4
    9b1c:	24000117 	ldw	r16,4(r4)
    9b20:	213ffe04 	addi	r4,r4,-8
    9b24:	24009726 	beq	r4,r16,9d84 <_malloc_r+0x2f4>
    9b28:	80800117 	ldw	r2,4(r16)
    9b2c:	01bfff04 	movi	r6,-4
    9b30:	014003c4 	movi	r5,15
    9b34:	1184703a 	and	r2,r2,r6
    9b38:	1447c83a 	sub	r3,r2,r17
    9b3c:	28c00716 	blt	r5,r3,9b5c <_malloc_r+0xcc>
    9b40:	1800920e 	bge	r3,zero,9d8c <_malloc_r+0x2fc>
    9b44:	84000317 	ldw	r16,12(r16)
    9b48:	24008e26 	beq	r4,r16,9d84 <_malloc_r+0x2f4>
    9b4c:	80800117 	ldw	r2,4(r16)
    9b50:	1184703a 	and	r2,r2,r6
    9b54:	1447c83a 	sub	r3,r2,r17
    9b58:	28fff90e 	bge	r5,r3,9b40 <_malloc_r+0xb0>
    9b5c:	3809883a 	mov	r4,r7
    9b60:	01800074 	movhi	r6,1
    9b64:	9c000417 	ldw	r16,16(r19)
    9b68:	31966304 	addi	r6,r6,22924
    9b6c:	32000204 	addi	r8,r6,8
    9b70:	82013426 	beq	r16,r8,a044 <_malloc_r+0x5b4>
    9b74:	80c00117 	ldw	r3,4(r16)
    9b78:	00bfff04 	movi	r2,-4
    9b7c:	188e703a 	and	r7,r3,r2
    9b80:	3c45c83a 	sub	r2,r7,r17
    9b84:	00c003c4 	movi	r3,15
    9b88:	18811f16 	blt	r3,r2,a008 <_malloc_r+0x578>
    9b8c:	32000515 	stw	r8,20(r6)
    9b90:	32000415 	stw	r8,16(r6)
    9b94:	10007f0e 	bge	r2,zero,9d94 <_malloc_r+0x304>
    9b98:	00807fc4 	movi	r2,511
    9b9c:	11c0fd36 	bltu	r2,r7,9f94 <_malloc_r+0x504>
    9ba0:	3806d0fa 	srli	r3,r7,3
    9ba4:	01c00044 	movi	r7,1
    9ba8:	30800117 	ldw	r2,4(r6)
    9bac:	19400044 	addi	r5,r3,1
    9bb0:	294b883a 	add	r5,r5,r5
    9bb4:	1807d0ba 	srai	r3,r3,2
    9bb8:	294b883a 	add	r5,r5,r5
    9bbc:	294b883a 	add	r5,r5,r5
    9bc0:	298b883a 	add	r5,r5,r6
    9bc4:	38c6983a 	sll	r3,r7,r3
    9bc8:	29c00017 	ldw	r7,0(r5)
    9bcc:	2a7ffe04 	addi	r9,r5,-8
    9bd0:	1886b03a 	or	r3,r3,r2
    9bd4:	82400315 	stw	r9,12(r16)
    9bd8:	81c00215 	stw	r7,8(r16)
    9bdc:	30c00115 	stw	r3,4(r6)
    9be0:	2c000015 	stw	r16,0(r5)
    9be4:	3c000315 	stw	r16,12(r7)
    9be8:	2005d0ba 	srai	r2,r4,2
    9bec:	01400044 	movi	r5,1
    9bf0:	288a983a 	sll	r5,r5,r2
    9bf4:	19406f36 	bltu	r3,r5,9db4 <_malloc_r+0x324>
    9bf8:	28c4703a 	and	r2,r5,r3
    9bfc:	10000a1e 	bne	r2,zero,9c28 <_malloc_r+0x198>
    9c00:	00bfff04 	movi	r2,-4
    9c04:	294b883a 	add	r5,r5,r5
    9c08:	2088703a 	and	r4,r4,r2
    9c0c:	28c4703a 	and	r2,r5,r3
    9c10:	21000104 	addi	r4,r4,4
    9c14:	1000041e 	bne	r2,zero,9c28 <_malloc_r+0x198>
    9c18:	294b883a 	add	r5,r5,r5
    9c1c:	28c4703a 	and	r2,r5,r3
    9c20:	21000104 	addi	r4,r4,4
    9c24:	103ffc26 	beq	r2,zero,9c18 <_malloc_r+0x188>
    9c28:	02bfff04 	movi	r10,-4
    9c2c:	024003c4 	movi	r9,15
    9c30:	21800044 	addi	r6,r4,1
    9c34:	318d883a 	add	r6,r6,r6
    9c38:	318d883a 	add	r6,r6,r6
    9c3c:	318d883a 	add	r6,r6,r6
    9c40:	998d883a 	add	r6,r19,r6
    9c44:	333ffe04 	addi	r12,r6,-8
    9c48:	2017883a 	mov	r11,r4
    9c4c:	31800104 	addi	r6,r6,4
    9c50:	34000017 	ldw	r16,0(r6)
    9c54:	31fffd04 	addi	r7,r6,-12
    9c58:	81c0041e 	bne	r16,r7,9c6c <_malloc_r+0x1dc>
    9c5c:	0000fb06 	br	a04c <_malloc_r+0x5bc>
    9c60:	1801030e 	bge	r3,zero,a070 <_malloc_r+0x5e0>
    9c64:	84000317 	ldw	r16,12(r16)
    9c68:	81c0f826 	beq	r16,r7,a04c <_malloc_r+0x5bc>
    9c6c:	80800117 	ldw	r2,4(r16)
    9c70:	1284703a 	and	r2,r2,r10
    9c74:	1447c83a 	sub	r3,r2,r17
    9c78:	48fff90e 	bge	r9,r3,9c60 <_malloc_r+0x1d0>
    9c7c:	80800317 	ldw	r2,12(r16)
    9c80:	81000217 	ldw	r4,8(r16)
    9c84:	89400054 	ori	r5,r17,1
    9c88:	81400115 	stw	r5,4(r16)
    9c8c:	20800315 	stw	r2,12(r4)
    9c90:	11000215 	stw	r4,8(r2)
    9c94:	8463883a 	add	r17,r16,r17
    9c98:	9c400515 	stw	r17,20(r19)
    9c9c:	9c400415 	stw	r17,16(r19)
    9ca0:	18800054 	ori	r2,r3,1
    9ca4:	88800115 	stw	r2,4(r17)
    9ca8:	8a000315 	stw	r8,12(r17)
    9cac:	8a000215 	stw	r8,8(r17)
    9cb0:	88e3883a 	add	r17,r17,r3
    9cb4:	88c00015 	stw	r3,0(r17)
    9cb8:	9009883a 	mov	r4,r18
    9cbc:	00115c00 	call	115c0 <__malloc_unlock>
    9cc0:	80800204 	addi	r2,r16,8
    9cc4:	00001b06 	br	9d34 <_malloc_r+0x2a4>
    9cc8:	04400404 	movi	r17,16
    9ccc:	89402536 	bltu	r17,r5,9d64 <_malloc_r+0x2d4>
    9cd0:	001159c0 	call	1159c <__malloc_lock>
    9cd4:	00800184 	movi	r2,6
    9cd8:	01000084 	movi	r4,2
    9cdc:	04c00074 	movhi	r19,1
    9ce0:	1085883a 	add	r2,r2,r2
    9ce4:	9cd66304 	addi	r19,r19,22924
    9ce8:	1085883a 	add	r2,r2,r2
    9cec:	9885883a 	add	r2,r19,r2
    9cf0:	14000117 	ldw	r16,4(r2)
    9cf4:	10fffe04 	addi	r3,r2,-8
    9cf8:	80c0d926 	beq	r16,r3,a060 <_malloc_r+0x5d0>
    9cfc:	80c00117 	ldw	r3,4(r16)
    9d00:	81000317 	ldw	r4,12(r16)
    9d04:	00bfff04 	movi	r2,-4
    9d08:	1884703a 	and	r2,r3,r2
    9d0c:	81400217 	ldw	r5,8(r16)
    9d10:	8085883a 	add	r2,r16,r2
    9d14:	10c00117 	ldw	r3,4(r2)
    9d18:	29000315 	stw	r4,12(r5)
    9d1c:	21400215 	stw	r5,8(r4)
    9d20:	18c00054 	ori	r3,r3,1
    9d24:	10c00115 	stw	r3,4(r2)
    9d28:	9009883a 	mov	r4,r18
    9d2c:	00115c00 	call	115c0 <__malloc_unlock>
    9d30:	80800204 	addi	r2,r16,8
    9d34:	dfc00a17 	ldw	ra,40(sp)
    9d38:	df000917 	ldw	fp,36(sp)
    9d3c:	ddc00817 	ldw	r23,32(sp)
    9d40:	dd800717 	ldw	r22,28(sp)
    9d44:	dd400617 	ldw	r21,24(sp)
    9d48:	dd000517 	ldw	r20,20(sp)
    9d4c:	dcc00417 	ldw	r19,16(sp)
    9d50:	dc800317 	ldw	r18,12(sp)
    9d54:	dc400217 	ldw	r17,8(sp)
    9d58:	dc000117 	ldw	r16,4(sp)
    9d5c:	dec00b04 	addi	sp,sp,44
    9d60:	f800283a 	ret
    9d64:	00800304 	movi	r2,12
    9d68:	90800015 	stw	r2,0(r18)
    9d6c:	0005883a 	mov	r2,zero
    9d70:	003ff006 	br	9d34 <_malloc_r+0x2a4>
    9d74:	01002004 	movi	r4,128
    9d78:	02001004 	movi	r8,64
    9d7c:	01c00fc4 	movi	r7,63
    9d80:	003f6106 	br	9b08 <_malloc_r+0x78>
    9d84:	4009883a 	mov	r4,r8
    9d88:	003f7506 	br	9b60 <_malloc_r+0xd0>
    9d8c:	81000317 	ldw	r4,12(r16)
    9d90:	003fde06 	br	9d0c <_malloc_r+0x27c>
    9d94:	81c5883a 	add	r2,r16,r7
    9d98:	11400117 	ldw	r5,4(r2)
    9d9c:	9009883a 	mov	r4,r18
    9da0:	29400054 	ori	r5,r5,1
    9da4:	11400115 	stw	r5,4(r2)
    9da8:	00115c00 	call	115c0 <__malloc_unlock>
    9dac:	80800204 	addi	r2,r16,8
    9db0:	003fe006 	br	9d34 <_malloc_r+0x2a4>
    9db4:	9c000217 	ldw	r16,8(r19)
    9db8:	00bfff04 	movi	r2,-4
    9dbc:	85800117 	ldw	r22,4(r16)
    9dc0:	b0ac703a 	and	r22,r22,r2
    9dc4:	b4400336 	bltu	r22,r17,9dd4 <_malloc_r+0x344>
    9dc8:	b445c83a 	sub	r2,r22,r17
    9dcc:	00c003c4 	movi	r3,15
    9dd0:	18805d16 	blt	r3,r2,9f48 <_malloc_r+0x4b8>
    9dd4:	05c00074 	movhi	r23,1
    9dd8:	008000b4 	movhi	r2,2
    9ddc:	10a35004 	addi	r2,r2,-29376
    9de0:	bddc3204 	addi	r23,r23,28872
    9de4:	15400017 	ldw	r21,0(r2)
    9de8:	b8c00017 	ldw	r3,0(r23)
    9dec:	00bfffc4 	movi	r2,-1
    9df0:	858d883a 	add	r6,r16,r22
    9df4:	8d6b883a 	add	r21,r17,r21
    9df8:	1880ea26 	beq	r3,r2,a1a4 <_malloc_r+0x714>
    9dfc:	ad4403c4 	addi	r21,r21,4111
    9e00:	00bc0004 	movi	r2,-4096
    9e04:	a8aa703a 	and	r21,r21,r2
    9e08:	a80b883a 	mov	r5,r21
    9e0c:	9009883a 	mov	r4,r18
    9e10:	d9800015 	stw	r6,0(sp)
    9e14:	000bd200 	call	bd20 <_sbrk_r>
    9e18:	1029883a 	mov	r20,r2
    9e1c:	00bfffc4 	movi	r2,-1
    9e20:	d9800017 	ldw	r6,0(sp)
    9e24:	a080e826 	beq	r20,r2,a1c8 <_malloc_r+0x738>
    9e28:	a180a636 	bltu	r20,r6,a0c4 <_malloc_r+0x634>
    9e2c:	070000b4 	movhi	fp,2
    9e30:	e7235804 	addi	fp,fp,-29344
    9e34:	e0800017 	ldw	r2,0(fp)
    9e38:	a887883a 	add	r3,r21,r2
    9e3c:	e0c00015 	stw	r3,0(fp)
    9e40:	3500e626 	beq	r6,r20,a1dc <_malloc_r+0x74c>
    9e44:	b9000017 	ldw	r4,0(r23)
    9e48:	00bfffc4 	movi	r2,-1
    9e4c:	2080ee26 	beq	r4,r2,a208 <_malloc_r+0x778>
    9e50:	a185c83a 	sub	r2,r20,r6
    9e54:	10c5883a 	add	r2,r2,r3
    9e58:	e0800015 	stw	r2,0(fp)
    9e5c:	a0c001cc 	andi	r3,r20,7
    9e60:	1800bc26 	beq	r3,zero,a154 <_malloc_r+0x6c4>
    9e64:	a0e9c83a 	sub	r20,r20,r3
    9e68:	00840204 	movi	r2,4104
    9e6c:	a5000204 	addi	r20,r20,8
    9e70:	10c7c83a 	sub	r3,r2,r3
    9e74:	a545883a 	add	r2,r20,r21
    9e78:	1083ffcc 	andi	r2,r2,4095
    9e7c:	18abc83a 	sub	r21,r3,r2
    9e80:	a80b883a 	mov	r5,r21
    9e84:	9009883a 	mov	r4,r18
    9e88:	000bd200 	call	bd20 <_sbrk_r>
    9e8c:	00ffffc4 	movi	r3,-1
    9e90:	10c0e126 	beq	r2,r3,a218 <_malloc_r+0x788>
    9e94:	1505c83a 	sub	r2,r2,r20
    9e98:	1545883a 	add	r2,r2,r21
    9e9c:	10800054 	ori	r2,r2,1
    9ea0:	e0c00017 	ldw	r3,0(fp)
    9ea4:	9d000215 	stw	r20,8(r19)
    9ea8:	a0800115 	stw	r2,4(r20)
    9eac:	a8c7883a 	add	r3,r21,r3
    9eb0:	e0c00015 	stw	r3,0(fp)
    9eb4:	84c00e26 	beq	r16,r19,9ef0 <_malloc_r+0x460>
    9eb8:	018003c4 	movi	r6,15
    9ebc:	3580a72e 	bgeu	r6,r22,a15c <_malloc_r+0x6cc>
    9ec0:	81400117 	ldw	r5,4(r16)
    9ec4:	013ffe04 	movi	r4,-8
    9ec8:	b0bffd04 	addi	r2,r22,-12
    9ecc:	1104703a 	and	r2,r2,r4
    9ed0:	2900004c 	andi	r4,r5,1
    9ed4:	2088b03a 	or	r4,r4,r2
    9ed8:	81000115 	stw	r4,4(r16)
    9edc:	01400144 	movi	r5,5
    9ee0:	8089883a 	add	r4,r16,r2
    9ee4:	21400115 	stw	r5,4(r4)
    9ee8:	21400215 	stw	r5,8(r4)
    9eec:	3080cd36 	bltu	r6,r2,a224 <_malloc_r+0x794>
    9ef0:	008000b4 	movhi	r2,2
    9ef4:	10a34f04 	addi	r2,r2,-29380
    9ef8:	11000017 	ldw	r4,0(r2)
    9efc:	20c0012e 	bgeu	r4,r3,9f04 <_malloc_r+0x474>
    9f00:	10c00015 	stw	r3,0(r2)
    9f04:	008000b4 	movhi	r2,2
    9f08:	10a34e04 	addi	r2,r2,-29384
    9f0c:	11000017 	ldw	r4,0(r2)
    9f10:	9c000217 	ldw	r16,8(r19)
    9f14:	20c0012e 	bgeu	r4,r3,9f1c <_malloc_r+0x48c>
    9f18:	10c00015 	stw	r3,0(r2)
    9f1c:	80c00117 	ldw	r3,4(r16)
    9f20:	00bfff04 	movi	r2,-4
    9f24:	1886703a 	and	r3,r3,r2
    9f28:	1c45c83a 	sub	r2,r3,r17
    9f2c:	1c400236 	bltu	r3,r17,9f38 <_malloc_r+0x4a8>
    9f30:	00c003c4 	movi	r3,15
    9f34:	18800416 	blt	r3,r2,9f48 <_malloc_r+0x4b8>
    9f38:	9009883a 	mov	r4,r18
    9f3c:	00115c00 	call	115c0 <__malloc_unlock>
    9f40:	0005883a 	mov	r2,zero
    9f44:	003f7b06 	br	9d34 <_malloc_r+0x2a4>
    9f48:	88c00054 	ori	r3,r17,1
    9f4c:	80c00115 	stw	r3,4(r16)
    9f50:	8463883a 	add	r17,r16,r17
    9f54:	10800054 	ori	r2,r2,1
    9f58:	9c400215 	stw	r17,8(r19)
    9f5c:	88800115 	stw	r2,4(r17)
    9f60:	9009883a 	mov	r4,r18
    9f64:	00115c00 	call	115c0 <__malloc_unlock>
    9f68:	80800204 	addi	r2,r16,8
    9f6c:	003f7106 	br	9d34 <_malloc_r+0x2a4>
    9f70:	00c00504 	movi	r3,20
    9f74:	18804a2e 	bgeu	r3,r2,a0a0 <_malloc_r+0x610>
    9f78:	00c01504 	movi	r3,84
    9f7c:	18806e36 	bltu	r3,r2,a138 <_malloc_r+0x6a8>
    9f80:	8804d33a 	srli	r2,r17,12
    9f84:	12001bc4 	addi	r8,r2,111
    9f88:	11c01b84 	addi	r7,r2,110
    9f8c:	4209883a 	add	r4,r8,r8
    9f90:	003edd06 	br	9b08 <_malloc_r+0x78>
    9f94:	3804d27a 	srli	r2,r7,9
    9f98:	00c00104 	movi	r3,4
    9f9c:	1880442e 	bgeu	r3,r2,a0b0 <_malloc_r+0x620>
    9fa0:	00c00504 	movi	r3,20
    9fa4:	18808136 	bltu	r3,r2,a1ac <_malloc_r+0x71c>
    9fa8:	11401704 	addi	r5,r2,92
    9fac:	10c016c4 	addi	r3,r2,91
    9fb0:	294b883a 	add	r5,r5,r5
    9fb4:	294b883a 	add	r5,r5,r5
    9fb8:	294b883a 	add	r5,r5,r5
    9fbc:	994b883a 	add	r5,r19,r5
    9fc0:	28800017 	ldw	r2,0(r5)
    9fc4:	01800074 	movhi	r6,1
    9fc8:	297ffe04 	addi	r5,r5,-8
    9fcc:	31966304 	addi	r6,r6,22924
    9fd0:	28806526 	beq	r5,r2,a168 <_malloc_r+0x6d8>
    9fd4:	01bfff04 	movi	r6,-4
    9fd8:	10c00117 	ldw	r3,4(r2)
    9fdc:	1986703a 	and	r3,r3,r6
    9fe0:	38c0022e 	bgeu	r7,r3,9fec <_malloc_r+0x55c>
    9fe4:	10800217 	ldw	r2,8(r2)
    9fe8:	28bffb1e 	bne	r5,r2,9fd8 <_malloc_r+0x548>
    9fec:	11400317 	ldw	r5,12(r2)
    9ff0:	98c00117 	ldw	r3,4(r19)
    9ff4:	81400315 	stw	r5,12(r16)
    9ff8:	80800215 	stw	r2,8(r16)
    9ffc:	2c000215 	stw	r16,8(r5)
    a000:	14000315 	stw	r16,12(r2)
    a004:	003ef806 	br	9be8 <_malloc_r+0x158>
    a008:	88c00054 	ori	r3,r17,1
    a00c:	80c00115 	stw	r3,4(r16)
    a010:	8463883a 	add	r17,r16,r17
    a014:	34400515 	stw	r17,20(r6)
    a018:	34400415 	stw	r17,16(r6)
    a01c:	10c00054 	ori	r3,r2,1
    a020:	8a000315 	stw	r8,12(r17)
    a024:	8a000215 	stw	r8,8(r17)
    a028:	88c00115 	stw	r3,4(r17)
    a02c:	88a3883a 	add	r17,r17,r2
    a030:	88800015 	stw	r2,0(r17)
    a034:	9009883a 	mov	r4,r18
    a038:	00115c00 	call	115c0 <__malloc_unlock>
    a03c:	80800204 	addi	r2,r16,8
    a040:	003f3c06 	br	9d34 <_malloc_r+0x2a4>
    a044:	30c00117 	ldw	r3,4(r6)
    a048:	003ee706 	br	9be8 <_malloc_r+0x158>
    a04c:	5ac00044 	addi	r11,r11,1
    a050:	588000cc 	andi	r2,r11,3
    a054:	31800204 	addi	r6,r6,8
    a058:	103efd1e 	bne	r2,zero,9c50 <_malloc_r+0x1c0>
    a05c:	00002406 	br	a0f0 <_malloc_r+0x660>
    a060:	14000317 	ldw	r16,12(r2)
    a064:	143f251e 	bne	r2,r16,9cfc <_malloc_r+0x26c>
    a068:	21000084 	addi	r4,r4,2
    a06c:	003ebc06 	br	9b60 <_malloc_r+0xd0>
    a070:	8085883a 	add	r2,r16,r2
    a074:	10c00117 	ldw	r3,4(r2)
    a078:	81000317 	ldw	r4,12(r16)
    a07c:	81400217 	ldw	r5,8(r16)
    a080:	18c00054 	ori	r3,r3,1
    a084:	10c00115 	stw	r3,4(r2)
    a088:	29000315 	stw	r4,12(r5)
    a08c:	21400215 	stw	r5,8(r4)
    a090:	9009883a 	mov	r4,r18
    a094:	00115c00 	call	115c0 <__malloc_unlock>
    a098:	80800204 	addi	r2,r16,8
    a09c:	003f2506 	br	9d34 <_malloc_r+0x2a4>
    a0a0:	12001704 	addi	r8,r2,92
    a0a4:	11c016c4 	addi	r7,r2,91
    a0a8:	4209883a 	add	r4,r8,r8
    a0ac:	003e9606 	br	9b08 <_malloc_r+0x78>
    a0b0:	3804d1ba 	srli	r2,r7,6
    a0b4:	11400e44 	addi	r5,r2,57
    a0b8:	10c00e04 	addi	r3,r2,56
    a0bc:	294b883a 	add	r5,r5,r5
    a0c0:	003fbc06 	br	9fb4 <_malloc_r+0x524>
    a0c4:	84ff5926 	beq	r16,r19,9e2c <_malloc_r+0x39c>
    a0c8:	00800074 	movhi	r2,1
    a0cc:	10966304 	addi	r2,r2,22924
    a0d0:	14000217 	ldw	r16,8(r2)
    a0d4:	00bfff04 	movi	r2,-4
    a0d8:	80c00117 	ldw	r3,4(r16)
    a0dc:	1886703a 	and	r3,r3,r2
    a0e0:	003f9106 	br	9f28 <_malloc_r+0x498>
    a0e4:	60800217 	ldw	r2,8(r12)
    a0e8:	213fffc4 	addi	r4,r4,-1
    a0ec:	1300651e 	bne	r2,r12,a284 <_malloc_r+0x7f4>
    a0f0:	208000cc 	andi	r2,r4,3
    a0f4:	633ffe04 	addi	r12,r12,-8
    a0f8:	103ffa1e 	bne	r2,zero,a0e4 <_malloc_r+0x654>
    a0fc:	98800117 	ldw	r2,4(r19)
    a100:	0146303a 	nor	r3,zero,r5
    a104:	1884703a 	and	r2,r3,r2
    a108:	98800115 	stw	r2,4(r19)
    a10c:	294b883a 	add	r5,r5,r5
    a110:	117f2836 	bltu	r2,r5,9db4 <_malloc_r+0x324>
    a114:	283f2726 	beq	r5,zero,9db4 <_malloc_r+0x324>
    a118:	2886703a 	and	r3,r5,r2
    a11c:	5809883a 	mov	r4,r11
    a120:	183ec31e 	bne	r3,zero,9c30 <_malloc_r+0x1a0>
    a124:	294b883a 	add	r5,r5,r5
    a128:	2886703a 	and	r3,r5,r2
    a12c:	21000104 	addi	r4,r4,4
    a130:	183ffc26 	beq	r3,zero,a124 <_malloc_r+0x694>
    a134:	003ebe06 	br	9c30 <_malloc_r+0x1a0>
    a138:	00c05504 	movi	r3,340
    a13c:	18801236 	bltu	r3,r2,a188 <_malloc_r+0x6f8>
    a140:	8804d3fa 	srli	r2,r17,15
    a144:	12001e04 	addi	r8,r2,120
    a148:	11c01dc4 	addi	r7,r2,119
    a14c:	4209883a 	add	r4,r8,r8
    a150:	003e6d06 	br	9b08 <_malloc_r+0x78>
    a154:	00c40004 	movi	r3,4096
    a158:	003f4606 	br	9e74 <_malloc_r+0x3e4>
    a15c:	00800044 	movi	r2,1
    a160:	a0800115 	stw	r2,4(r20)
    a164:	003f7406 	br	9f38 <_malloc_r+0x4a8>
    a168:	1805d0ba 	srai	r2,r3,2
    a16c:	01c00044 	movi	r7,1
    a170:	30c00117 	ldw	r3,4(r6)
    a174:	388e983a 	sll	r7,r7,r2
    a178:	2805883a 	mov	r2,r5
    a17c:	38c6b03a 	or	r3,r7,r3
    a180:	30c00115 	stw	r3,4(r6)
    a184:	003f9b06 	br	9ff4 <_malloc_r+0x564>
    a188:	00c15504 	movi	r3,1364
    a18c:	18801a36 	bltu	r3,r2,a1f8 <_malloc_r+0x768>
    a190:	8804d4ba 	srli	r2,r17,18
    a194:	12001f44 	addi	r8,r2,125
    a198:	11c01f04 	addi	r7,r2,124
    a19c:	4209883a 	add	r4,r8,r8
    a1a0:	003e5906 	br	9b08 <_malloc_r+0x78>
    a1a4:	ad400404 	addi	r21,r21,16
    a1a8:	003f1706 	br	9e08 <_malloc_r+0x378>
    a1ac:	00c01504 	movi	r3,84
    a1b0:	18802336 	bltu	r3,r2,a240 <_malloc_r+0x7b0>
    a1b4:	3804d33a 	srli	r2,r7,12
    a1b8:	11401bc4 	addi	r5,r2,111
    a1bc:	10c01b84 	addi	r3,r2,110
    a1c0:	294b883a 	add	r5,r5,r5
    a1c4:	003f7b06 	br	9fb4 <_malloc_r+0x524>
    a1c8:	9c000217 	ldw	r16,8(r19)
    a1cc:	00bfff04 	movi	r2,-4
    a1d0:	80c00117 	ldw	r3,4(r16)
    a1d4:	1886703a 	and	r3,r3,r2
    a1d8:	003f5306 	br	9f28 <_malloc_r+0x498>
    a1dc:	3083ffcc 	andi	r2,r6,4095
    a1e0:	103f181e 	bne	r2,zero,9e44 <_malloc_r+0x3b4>
    a1e4:	99000217 	ldw	r4,8(r19)
    a1e8:	b545883a 	add	r2,r22,r21
    a1ec:	10800054 	ori	r2,r2,1
    a1f0:	20800115 	stw	r2,4(r4)
    a1f4:	003f3e06 	br	9ef0 <_malloc_r+0x460>
    a1f8:	01003f84 	movi	r4,254
    a1fc:	02001fc4 	movi	r8,127
    a200:	01c01f84 	movi	r7,126
    a204:	003e4006 	br	9b08 <_malloc_r+0x78>
    a208:	00800074 	movhi	r2,1
    a20c:	109c3204 	addi	r2,r2,28872
    a210:	15000015 	stw	r20,0(r2)
    a214:	003f1106 	br	9e5c <_malloc_r+0x3cc>
    a218:	00800044 	movi	r2,1
    a21c:	002b883a 	mov	r21,zero
    a220:	003f1f06 	br	9ea0 <_malloc_r+0x410>
    a224:	81400204 	addi	r5,r16,8
    a228:	9009883a 	mov	r4,r18
    a22c:	0008ea40 	call	8ea4 <_free_r>
    a230:	008000b4 	movhi	r2,2
    a234:	10a35804 	addi	r2,r2,-29344
    a238:	10c00017 	ldw	r3,0(r2)
    a23c:	003f2c06 	br	9ef0 <_malloc_r+0x460>
    a240:	00c05504 	movi	r3,340
    a244:	18800536 	bltu	r3,r2,a25c <_malloc_r+0x7cc>
    a248:	3804d3fa 	srli	r2,r7,15
    a24c:	11401e04 	addi	r5,r2,120
    a250:	10c01dc4 	addi	r3,r2,119
    a254:	294b883a 	add	r5,r5,r5
    a258:	003f5606 	br	9fb4 <_malloc_r+0x524>
    a25c:	00c15504 	movi	r3,1364
    a260:	18800536 	bltu	r3,r2,a278 <_malloc_r+0x7e8>
    a264:	3804d4ba 	srli	r2,r7,18
    a268:	11401f44 	addi	r5,r2,125
    a26c:	10c01f04 	addi	r3,r2,124
    a270:	294b883a 	add	r5,r5,r5
    a274:	003f4f06 	br	9fb4 <_malloc_r+0x524>
    a278:	01403f84 	movi	r5,254
    a27c:	00c01f84 	movi	r3,126
    a280:	003f4c06 	br	9fb4 <_malloc_r+0x524>
    a284:	98800117 	ldw	r2,4(r19)
    a288:	003fa006 	br	a10c <_malloc_r+0x67c>
    a28c:	8808d0fa 	srli	r4,r17,3
    a290:	20800044 	addi	r2,r4,1
    a294:	1085883a 	add	r2,r2,r2
    a298:	003e9006 	br	9cdc <_malloc_r+0x24c>

0000a29c <memchr>:
    a29c:	208000cc 	andi	r2,r4,3
    a2a0:	280f883a 	mov	r7,r5
    a2a4:	10003426 	beq	r2,zero,a378 <memchr+0xdc>
    a2a8:	30bfffc4 	addi	r2,r6,-1
    a2ac:	30001a26 	beq	r6,zero,a318 <memchr+0x7c>
    a2b0:	20c00003 	ldbu	r3,0(r4)
    a2b4:	29803fcc 	andi	r6,r5,255
    a2b8:	30c0051e 	bne	r6,r3,a2d0 <memchr+0x34>
    a2bc:	00001806 	br	a320 <memchr+0x84>
    a2c0:	10001526 	beq	r2,zero,a318 <memchr+0x7c>
    a2c4:	20c00003 	ldbu	r3,0(r4)
    a2c8:	10bfffc4 	addi	r2,r2,-1
    a2cc:	30c01426 	beq	r6,r3,a320 <memchr+0x84>
    a2d0:	21000044 	addi	r4,r4,1
    a2d4:	20c000cc 	andi	r3,r4,3
    a2d8:	183ff91e 	bne	r3,zero,a2c0 <memchr+0x24>
    a2dc:	020000c4 	movi	r8,3
    a2e0:	40801136 	bltu	r8,r2,a328 <memchr+0x8c>
    a2e4:	10000c26 	beq	r2,zero,a318 <memchr+0x7c>
    a2e8:	20c00003 	ldbu	r3,0(r4)
    a2ec:	29403fcc 	andi	r5,r5,255
    a2f0:	28c00b26 	beq	r5,r3,a320 <memchr+0x84>
    a2f4:	20c00044 	addi	r3,r4,1
    a2f8:	39803fcc 	andi	r6,r7,255
    a2fc:	2089883a 	add	r4,r4,r2
    a300:	00000306 	br	a310 <memchr+0x74>
    a304:	18c00044 	addi	r3,r3,1
    a308:	197fffc3 	ldbu	r5,-1(r3)
    a30c:	31400526 	beq	r6,r5,a324 <memchr+0x88>
    a310:	1805883a 	mov	r2,r3
    a314:	20fffb1e 	bne	r4,r3,a304 <memchr+0x68>
    a318:	0005883a 	mov	r2,zero
    a31c:	f800283a 	ret
    a320:	2005883a 	mov	r2,r4
    a324:	f800283a 	ret
    a328:	28c03fcc 	andi	r3,r5,255
    a32c:	1812923a 	slli	r9,r3,8
    a330:	02ffbff4 	movhi	r11,65279
    a334:	02a02074 	movhi	r10,32897
    a338:	48d2b03a 	or	r9,r9,r3
    a33c:	4806943a 	slli	r3,r9,16
    a340:	5affbfc4 	addi	r11,r11,-257
    a344:	52a02004 	addi	r10,r10,-32640
    a348:	48d2b03a 	or	r9,r9,r3
    a34c:	20c00017 	ldw	r3,0(r4)
    a350:	48c6f03a 	xor	r3,r9,r3
    a354:	1acd883a 	add	r6,r3,r11
    a358:	00c6303a 	nor	r3,zero,r3
    a35c:	30c6703a 	and	r3,r6,r3
    a360:	1a86703a 	and	r3,r3,r10
    a364:	183fe01e 	bne	r3,zero,a2e8 <memchr+0x4c>
    a368:	10bfff04 	addi	r2,r2,-4
    a36c:	21000104 	addi	r4,r4,4
    a370:	40bff636 	bltu	r8,r2,a34c <memchr+0xb0>
    a374:	003fdb06 	br	a2e4 <memchr+0x48>
    a378:	3005883a 	mov	r2,r6
    a37c:	003fd706 	br	a2dc <memchr+0x40>

0000a380 <memcpy>:
    a380:	defffd04 	addi	sp,sp,-12
    a384:	dfc00215 	stw	ra,8(sp)
    a388:	dc400115 	stw	r17,4(sp)
    a38c:	dc000015 	stw	r16,0(sp)
    a390:	00c003c4 	movi	r3,15
    a394:	2005883a 	mov	r2,r4
    a398:	1980452e 	bgeu	r3,r6,a4b0 <memcpy+0x130>
    a39c:	2906b03a 	or	r3,r5,r4
    a3a0:	18c000cc 	andi	r3,r3,3
    a3a4:	1800441e 	bne	r3,zero,a4b8 <memcpy+0x138>
    a3a8:	347ffc04 	addi	r17,r6,-16
    a3ac:	8822d13a 	srli	r17,r17,4
    a3b0:	28c00104 	addi	r3,r5,4
    a3b4:	23400104 	addi	r13,r4,4
    a3b8:	8820913a 	slli	r16,r17,4
    a3bc:	2b000204 	addi	r12,r5,8
    a3c0:	22c00204 	addi	r11,r4,8
    a3c4:	84000504 	addi	r16,r16,20
    a3c8:	2a800304 	addi	r10,r5,12
    a3cc:	22400304 	addi	r9,r4,12
    a3d0:	2c21883a 	add	r16,r5,r16
    a3d4:	2811883a 	mov	r8,r5
    a3d8:	200f883a 	mov	r7,r4
    a3dc:	41000017 	ldw	r4,0(r8)
    a3e0:	1fc00017 	ldw	ra,0(r3)
    a3e4:	63c00017 	ldw	r15,0(r12)
    a3e8:	39000015 	stw	r4,0(r7)
    a3ec:	53800017 	ldw	r14,0(r10)
    a3f0:	6fc00015 	stw	ra,0(r13)
    a3f4:	5bc00015 	stw	r15,0(r11)
    a3f8:	4b800015 	stw	r14,0(r9)
    a3fc:	18c00404 	addi	r3,r3,16
    a400:	39c00404 	addi	r7,r7,16
    a404:	42000404 	addi	r8,r8,16
    a408:	6b400404 	addi	r13,r13,16
    a40c:	63000404 	addi	r12,r12,16
    a410:	5ac00404 	addi	r11,r11,16
    a414:	52800404 	addi	r10,r10,16
    a418:	4a400404 	addi	r9,r9,16
    a41c:	1c3fef1e 	bne	r3,r16,a3dc <memcpy+0x5c>
    a420:	89c00044 	addi	r7,r17,1
    a424:	380e913a 	slli	r7,r7,4
    a428:	310003cc 	andi	r4,r6,15
    a42c:	02c000c4 	movi	r11,3
    a430:	11c7883a 	add	r3,r2,r7
    a434:	29cb883a 	add	r5,r5,r7
    a438:	5900212e 	bgeu	r11,r4,a4c0 <memcpy+0x140>
    a43c:	1813883a 	mov	r9,r3
    a440:	2811883a 	mov	r8,r5
    a444:	200f883a 	mov	r7,r4
    a448:	42800017 	ldw	r10,0(r8)
    a44c:	4a400104 	addi	r9,r9,4
    a450:	39ffff04 	addi	r7,r7,-4
    a454:	4abfff15 	stw	r10,-4(r9)
    a458:	42000104 	addi	r8,r8,4
    a45c:	59fffa36 	bltu	r11,r7,a448 <memcpy+0xc8>
    a460:	213fff04 	addi	r4,r4,-4
    a464:	2008d0ba 	srli	r4,r4,2
    a468:	318000cc 	andi	r6,r6,3
    a46c:	21000044 	addi	r4,r4,1
    a470:	2109883a 	add	r4,r4,r4
    a474:	2109883a 	add	r4,r4,r4
    a478:	1907883a 	add	r3,r3,r4
    a47c:	290b883a 	add	r5,r5,r4
    a480:	30000626 	beq	r6,zero,a49c <memcpy+0x11c>
    a484:	198d883a 	add	r6,r3,r6
    a488:	29c00003 	ldbu	r7,0(r5)
    a48c:	18c00044 	addi	r3,r3,1
    a490:	29400044 	addi	r5,r5,1
    a494:	19ffffc5 	stb	r7,-1(r3)
    a498:	19bffb1e 	bne	r3,r6,a488 <memcpy+0x108>
    a49c:	dfc00217 	ldw	ra,8(sp)
    a4a0:	dc400117 	ldw	r17,4(sp)
    a4a4:	dc000017 	ldw	r16,0(sp)
    a4a8:	dec00304 	addi	sp,sp,12
    a4ac:	f800283a 	ret
    a4b0:	2007883a 	mov	r3,r4
    a4b4:	003ff206 	br	a480 <memcpy+0x100>
    a4b8:	2007883a 	mov	r3,r4
    a4bc:	003ff106 	br	a484 <memcpy+0x104>
    a4c0:	200d883a 	mov	r6,r4
    a4c4:	003fee06 	br	a480 <memcpy+0x100>

0000a4c8 <memmove>:
    a4c8:	2005883a 	mov	r2,r4
    a4cc:	29000b2e 	bgeu	r5,r4,a4fc <memmove+0x34>
    a4d0:	298f883a 	add	r7,r5,r6
    a4d4:	21c0092e 	bgeu	r4,r7,a4fc <memmove+0x34>
    a4d8:	2187883a 	add	r3,r4,r6
    a4dc:	198bc83a 	sub	r5,r3,r6
    a4e0:	30004826 	beq	r6,zero,a604 <memmove+0x13c>
    a4e4:	39ffffc4 	addi	r7,r7,-1
    a4e8:	39000003 	ldbu	r4,0(r7)
    a4ec:	18ffffc4 	addi	r3,r3,-1
    a4f0:	19000005 	stb	r4,0(r3)
    a4f4:	28fffb1e 	bne	r5,r3,a4e4 <memmove+0x1c>
    a4f8:	f800283a 	ret
    a4fc:	00c003c4 	movi	r3,15
    a500:	1980412e 	bgeu	r3,r6,a608 <memmove+0x140>
    a504:	2886b03a 	or	r3,r5,r2
    a508:	18c000cc 	andi	r3,r3,3
    a50c:	1800401e 	bne	r3,zero,a610 <memmove+0x148>
    a510:	33fffc04 	addi	r15,r6,-16
    a514:	781ed13a 	srli	r15,r15,4
    a518:	28c00104 	addi	r3,r5,4
    a51c:	13400104 	addi	r13,r2,4
    a520:	781c913a 	slli	r14,r15,4
    a524:	2b000204 	addi	r12,r5,8
    a528:	12c00204 	addi	r11,r2,8
    a52c:	73800504 	addi	r14,r14,20
    a530:	2a800304 	addi	r10,r5,12
    a534:	12400304 	addi	r9,r2,12
    a538:	2b9d883a 	add	r14,r5,r14
    a53c:	2811883a 	mov	r8,r5
    a540:	100f883a 	mov	r7,r2
    a544:	41000017 	ldw	r4,0(r8)
    a548:	39c00404 	addi	r7,r7,16
    a54c:	18c00404 	addi	r3,r3,16
    a550:	393ffc15 	stw	r4,-16(r7)
    a554:	193ffc17 	ldw	r4,-16(r3)
    a558:	6b400404 	addi	r13,r13,16
    a55c:	5ac00404 	addi	r11,r11,16
    a560:	693ffc15 	stw	r4,-16(r13)
    a564:	61000017 	ldw	r4,0(r12)
    a568:	4a400404 	addi	r9,r9,16
    a56c:	42000404 	addi	r8,r8,16
    a570:	593ffc15 	stw	r4,-16(r11)
    a574:	51000017 	ldw	r4,0(r10)
    a578:	63000404 	addi	r12,r12,16
    a57c:	52800404 	addi	r10,r10,16
    a580:	493ffc15 	stw	r4,-16(r9)
    a584:	1bbfef1e 	bne	r3,r14,a544 <memmove+0x7c>
    a588:	79000044 	addi	r4,r15,1
    a58c:	2008913a 	slli	r4,r4,4
    a590:	328003cc 	andi	r10,r6,15
    a594:	02c000c4 	movi	r11,3
    a598:	1107883a 	add	r3,r2,r4
    a59c:	290b883a 	add	r5,r5,r4
    a5a0:	5a801e2e 	bgeu	r11,r10,a61c <memmove+0x154>
    a5a4:	1813883a 	mov	r9,r3
    a5a8:	2811883a 	mov	r8,r5
    a5ac:	500f883a 	mov	r7,r10
    a5b0:	41000017 	ldw	r4,0(r8)
    a5b4:	4a400104 	addi	r9,r9,4
    a5b8:	39ffff04 	addi	r7,r7,-4
    a5bc:	493fff15 	stw	r4,-4(r9)
    a5c0:	42000104 	addi	r8,r8,4
    a5c4:	59fffa36 	bltu	r11,r7,a5b0 <memmove+0xe8>
    a5c8:	513fff04 	addi	r4,r10,-4
    a5cc:	2008d0ba 	srli	r4,r4,2
    a5d0:	318000cc 	andi	r6,r6,3
    a5d4:	21000044 	addi	r4,r4,1
    a5d8:	2109883a 	add	r4,r4,r4
    a5dc:	2109883a 	add	r4,r4,r4
    a5e0:	1907883a 	add	r3,r3,r4
    a5e4:	290b883a 	add	r5,r5,r4
    a5e8:	30000b26 	beq	r6,zero,a618 <memmove+0x150>
    a5ec:	198d883a 	add	r6,r3,r6
    a5f0:	29c00003 	ldbu	r7,0(r5)
    a5f4:	18c00044 	addi	r3,r3,1
    a5f8:	29400044 	addi	r5,r5,1
    a5fc:	19ffffc5 	stb	r7,-1(r3)
    a600:	19bffb1e 	bne	r3,r6,a5f0 <memmove+0x128>
    a604:	f800283a 	ret
    a608:	1007883a 	mov	r3,r2
    a60c:	003ff606 	br	a5e8 <memmove+0x120>
    a610:	1007883a 	mov	r3,r2
    a614:	003ff506 	br	a5ec <memmove+0x124>
    a618:	f800283a 	ret
    a61c:	500d883a 	mov	r6,r10
    a620:	003ff106 	br	a5e8 <memmove+0x120>

0000a624 <memset>:
    a624:	20c000cc 	andi	r3,r4,3
    a628:	2005883a 	mov	r2,r4
    a62c:	18004426 	beq	r3,zero,a740 <memset+0x11c>
    a630:	31ffffc4 	addi	r7,r6,-1
    a634:	30004026 	beq	r6,zero,a738 <memset+0x114>
    a638:	2813883a 	mov	r9,r5
    a63c:	200d883a 	mov	r6,r4
    a640:	2007883a 	mov	r3,r4
    a644:	00000406 	br	a658 <memset+0x34>
    a648:	3a3fffc4 	addi	r8,r7,-1
    a64c:	31800044 	addi	r6,r6,1
    a650:	38003926 	beq	r7,zero,a738 <memset+0x114>
    a654:	400f883a 	mov	r7,r8
    a658:	18c00044 	addi	r3,r3,1
    a65c:	32400005 	stb	r9,0(r6)
    a660:	1a0000cc 	andi	r8,r3,3
    a664:	403ff81e 	bne	r8,zero,a648 <memset+0x24>
    a668:	010000c4 	movi	r4,3
    a66c:	21c02d2e 	bgeu	r4,r7,a724 <memset+0x100>
    a670:	29003fcc 	andi	r4,r5,255
    a674:	200c923a 	slli	r6,r4,8
    a678:	3108b03a 	or	r4,r6,r4
    a67c:	200c943a 	slli	r6,r4,16
    a680:	218cb03a 	or	r6,r4,r6
    a684:	010003c4 	movi	r4,15
    a688:	21c0182e 	bgeu	r4,r7,a6ec <memset+0xc8>
    a68c:	3b3ffc04 	addi	r12,r7,-16
    a690:	6018d13a 	srli	r12,r12,4
    a694:	1a000104 	addi	r8,r3,4
    a698:	1ac00204 	addi	r11,r3,8
    a69c:	6008913a 	slli	r4,r12,4
    a6a0:	1a800304 	addi	r10,r3,12
    a6a4:	1813883a 	mov	r9,r3
    a6a8:	21000504 	addi	r4,r4,20
    a6ac:	1909883a 	add	r4,r3,r4
    a6b0:	49800015 	stw	r6,0(r9)
    a6b4:	41800015 	stw	r6,0(r8)
    a6b8:	59800015 	stw	r6,0(r11)
    a6bc:	51800015 	stw	r6,0(r10)
    a6c0:	42000404 	addi	r8,r8,16
    a6c4:	4a400404 	addi	r9,r9,16
    a6c8:	5ac00404 	addi	r11,r11,16
    a6cc:	52800404 	addi	r10,r10,16
    a6d0:	413ff71e 	bne	r8,r4,a6b0 <memset+0x8c>
    a6d4:	63000044 	addi	r12,r12,1
    a6d8:	6018913a 	slli	r12,r12,4
    a6dc:	39c003cc 	andi	r7,r7,15
    a6e0:	010000c4 	movi	r4,3
    a6e4:	1b07883a 	add	r3,r3,r12
    a6e8:	21c00e2e 	bgeu	r4,r7,a724 <memset+0x100>
    a6ec:	1813883a 	mov	r9,r3
    a6f0:	3811883a 	mov	r8,r7
    a6f4:	010000c4 	movi	r4,3
    a6f8:	49800015 	stw	r6,0(r9)
    a6fc:	423fff04 	addi	r8,r8,-4
    a700:	4a400104 	addi	r9,r9,4
    a704:	223ffc36 	bltu	r4,r8,a6f8 <memset+0xd4>
    a708:	393fff04 	addi	r4,r7,-4
    a70c:	2008d0ba 	srli	r4,r4,2
    a710:	39c000cc 	andi	r7,r7,3
    a714:	21000044 	addi	r4,r4,1
    a718:	2109883a 	add	r4,r4,r4
    a71c:	2109883a 	add	r4,r4,r4
    a720:	1907883a 	add	r3,r3,r4
    a724:	38000526 	beq	r7,zero,a73c <memset+0x118>
    a728:	19cf883a 	add	r7,r3,r7
    a72c:	19400005 	stb	r5,0(r3)
    a730:	18c00044 	addi	r3,r3,1
    a734:	38fffd1e 	bne	r7,r3,a72c <memset+0x108>
    a738:	f800283a 	ret
    a73c:	f800283a 	ret
    a740:	2007883a 	mov	r3,r4
    a744:	300f883a 	mov	r7,r6
    a748:	003fc706 	br	a668 <memset+0x44>

0000a74c <_Balloc>:
    a74c:	20801317 	ldw	r2,76(r4)
    a750:	defffc04 	addi	sp,sp,-16
    a754:	dc400115 	stw	r17,4(sp)
    a758:	dc000015 	stw	r16,0(sp)
    a75c:	dfc00315 	stw	ra,12(sp)
    a760:	dc800215 	stw	r18,8(sp)
    a764:	2023883a 	mov	r17,r4
    a768:	2821883a 	mov	r16,r5
    a76c:	10000f26 	beq	r2,zero,a7ac <_Balloc+0x60>
    a770:	8407883a 	add	r3,r16,r16
    a774:	18c7883a 	add	r3,r3,r3
    a778:	10c7883a 	add	r3,r2,r3
    a77c:	18800017 	ldw	r2,0(r3)
    a780:	10001126 	beq	r2,zero,a7c8 <_Balloc+0x7c>
    a784:	11000017 	ldw	r4,0(r2)
    a788:	19000015 	stw	r4,0(r3)
    a78c:	10000415 	stw	zero,16(r2)
    a790:	10000315 	stw	zero,12(r2)
    a794:	dfc00317 	ldw	ra,12(sp)
    a798:	dc800217 	ldw	r18,8(sp)
    a79c:	dc400117 	ldw	r17,4(sp)
    a7a0:	dc000017 	ldw	r16,0(sp)
    a7a4:	dec00404 	addi	sp,sp,16
    a7a8:	f800283a 	ret
    a7ac:	01800844 	movi	r6,33
    a7b0:	01400104 	movi	r5,4
    a7b4:	000d6880 	call	d688 <_calloc_r>
    a7b8:	88801315 	stw	r2,76(r17)
    a7bc:	103fec1e 	bne	r2,zero,a770 <_Balloc+0x24>
    a7c0:	0005883a 	mov	r2,zero
    a7c4:	003ff306 	br	a794 <_Balloc+0x48>
    a7c8:	01400044 	movi	r5,1
    a7cc:	2c24983a 	sll	r18,r5,r16
    a7d0:	8809883a 	mov	r4,r17
    a7d4:	91800144 	addi	r6,r18,5
    a7d8:	318d883a 	add	r6,r6,r6
    a7dc:	318d883a 	add	r6,r6,r6
    a7e0:	000d6880 	call	d688 <_calloc_r>
    a7e4:	103ff626 	beq	r2,zero,a7c0 <_Balloc+0x74>
    a7e8:	14000115 	stw	r16,4(r2)
    a7ec:	14800215 	stw	r18,8(r2)
    a7f0:	003fe606 	br	a78c <_Balloc+0x40>

0000a7f4 <_Bfree>:
    a7f4:	28000826 	beq	r5,zero,a818 <_Bfree+0x24>
    a7f8:	28c00117 	ldw	r3,4(r5)
    a7fc:	20801317 	ldw	r2,76(r4)
    a800:	18c7883a 	add	r3,r3,r3
    a804:	18c7883a 	add	r3,r3,r3
    a808:	10c5883a 	add	r2,r2,r3
    a80c:	10c00017 	ldw	r3,0(r2)
    a810:	28c00015 	stw	r3,0(r5)
    a814:	11400015 	stw	r5,0(r2)
    a818:	f800283a 	ret

0000a81c <__multadd>:
    a81c:	defffa04 	addi	sp,sp,-24
    a820:	dc800315 	stw	r18,12(sp)
    a824:	dc400215 	stw	r17,8(sp)
    a828:	dc000115 	stw	r16,4(sp)
    a82c:	2823883a 	mov	r17,r5
    a830:	2c000417 	ldw	r16,16(r5)
    a834:	dfc00515 	stw	ra,20(sp)
    a838:	dcc00415 	stw	r19,16(sp)
    a83c:	2025883a 	mov	r18,r4
    a840:	29400504 	addi	r5,r5,20
    a844:	0011883a 	mov	r8,zero
    a848:	28c00017 	ldw	r3,0(r5)
    a84c:	29400104 	addi	r5,r5,4
    a850:	42000044 	addi	r8,r8,1
    a854:	18bfffcc 	andi	r2,r3,65535
    a858:	1185383a 	mul	r2,r2,r6
    a85c:	1806d43a 	srli	r3,r3,16
    a860:	11cf883a 	add	r7,r2,r7
    a864:	3808d43a 	srli	r4,r7,16
    a868:	1987383a 	mul	r3,r3,r6
    a86c:	38bfffcc 	andi	r2,r7,65535
    a870:	1907883a 	add	r3,r3,r4
    a874:	1808943a 	slli	r4,r3,16
    a878:	180ed43a 	srli	r7,r3,16
    a87c:	2085883a 	add	r2,r4,r2
    a880:	28bfff15 	stw	r2,-4(r5)
    a884:	443ff016 	blt	r8,r16,a848 <__multadd+0x2c>
    a888:	38000926 	beq	r7,zero,a8b0 <__multadd+0x94>
    a88c:	88800217 	ldw	r2,8(r17)
    a890:	80800f0e 	bge	r16,r2,a8d0 <__multadd+0xb4>
    a894:	80800144 	addi	r2,r16,5
    a898:	1085883a 	add	r2,r2,r2
    a89c:	1085883a 	add	r2,r2,r2
    a8a0:	8885883a 	add	r2,r17,r2
    a8a4:	11c00015 	stw	r7,0(r2)
    a8a8:	84000044 	addi	r16,r16,1
    a8ac:	8c000415 	stw	r16,16(r17)
    a8b0:	8805883a 	mov	r2,r17
    a8b4:	dfc00517 	ldw	ra,20(sp)
    a8b8:	dcc00417 	ldw	r19,16(sp)
    a8bc:	dc800317 	ldw	r18,12(sp)
    a8c0:	dc400217 	ldw	r17,8(sp)
    a8c4:	dc000117 	ldw	r16,4(sp)
    a8c8:	dec00604 	addi	sp,sp,24
    a8cc:	f800283a 	ret
    a8d0:	89400117 	ldw	r5,4(r17)
    a8d4:	9009883a 	mov	r4,r18
    a8d8:	d9c00015 	stw	r7,0(sp)
    a8dc:	29400044 	addi	r5,r5,1
    a8e0:	000a74c0 	call	a74c <_Balloc>
    a8e4:	89800417 	ldw	r6,16(r17)
    a8e8:	89400304 	addi	r5,r17,12
    a8ec:	11000304 	addi	r4,r2,12
    a8f0:	31800084 	addi	r6,r6,2
    a8f4:	318d883a 	add	r6,r6,r6
    a8f8:	318d883a 	add	r6,r6,r6
    a8fc:	1027883a 	mov	r19,r2
    a900:	000a3800 	call	a380 <memcpy>
    a904:	d9c00017 	ldw	r7,0(sp)
    a908:	88000a26 	beq	r17,zero,a934 <__multadd+0x118>
    a90c:	88c00117 	ldw	r3,4(r17)
    a910:	90801317 	ldw	r2,76(r18)
    a914:	18c7883a 	add	r3,r3,r3
    a918:	18c7883a 	add	r3,r3,r3
    a91c:	10c5883a 	add	r2,r2,r3
    a920:	10c00017 	ldw	r3,0(r2)
    a924:	88c00015 	stw	r3,0(r17)
    a928:	14400015 	stw	r17,0(r2)
    a92c:	9823883a 	mov	r17,r19
    a930:	003fd806 	br	a894 <__multadd+0x78>
    a934:	9823883a 	mov	r17,r19
    a938:	003fd606 	br	a894 <__multadd+0x78>

0000a93c <__s2b>:
    a93c:	defff904 	addi	sp,sp,-28
    a940:	dc400115 	stw	r17,4(sp)
    a944:	dc000015 	stw	r16,0(sp)
    a948:	2023883a 	mov	r17,r4
    a94c:	2821883a 	mov	r16,r5
    a950:	39000204 	addi	r4,r7,8
    a954:	01400244 	movi	r5,9
    a958:	dcc00315 	stw	r19,12(sp)
    a95c:	dc800215 	stw	r18,8(sp)
    a960:	dfc00615 	stw	ra,24(sp)
    a964:	dd400515 	stw	r21,20(sp)
    a968:	dd000415 	stw	r20,16(sp)
    a96c:	3825883a 	mov	r18,r7
    a970:	3027883a 	mov	r19,r6
    a974:	00045380 	call	4538 <__divsi3>
    a978:	00c00044 	movi	r3,1
    a97c:	000b883a 	mov	r5,zero
    a980:	1880030e 	bge	r3,r2,a990 <__s2b+0x54>
    a984:	18c7883a 	add	r3,r3,r3
    a988:	29400044 	addi	r5,r5,1
    a98c:	18bffd16 	blt	r3,r2,a984 <__s2b+0x48>
    a990:	8809883a 	mov	r4,r17
    a994:	000a74c0 	call	a74c <_Balloc>
    a998:	d8c00717 	ldw	r3,28(sp)
    a99c:	10c00515 	stw	r3,20(r2)
    a9a0:	00c00044 	movi	r3,1
    a9a4:	10c00415 	stw	r3,16(r2)
    a9a8:	00c00244 	movi	r3,9
    a9ac:	1cc0210e 	bge	r3,r19,aa34 <__s2b+0xf8>
    a9b0:	80eb883a 	add	r21,r16,r3
    a9b4:	a829883a 	mov	r20,r21
    a9b8:	84e1883a 	add	r16,r16,r19
    a9bc:	a1c00007 	ldb	r7,0(r20)
    a9c0:	01800284 	movi	r6,10
    a9c4:	a5000044 	addi	r20,r20,1
    a9c8:	100b883a 	mov	r5,r2
    a9cc:	39fff404 	addi	r7,r7,-48
    a9d0:	8809883a 	mov	r4,r17
    a9d4:	000a81c0 	call	a81c <__multadd>
    a9d8:	a43ff81e 	bne	r20,r16,a9bc <__s2b+0x80>
    a9dc:	ace1883a 	add	r16,r21,r19
    a9e0:	843ffe04 	addi	r16,r16,-8
    a9e4:	9c800a0e 	bge	r19,r18,aa10 <__s2b+0xd4>
    a9e8:	94e5c83a 	sub	r18,r18,r19
    a9ec:	84a5883a 	add	r18,r16,r18
    a9f0:	81c00007 	ldb	r7,0(r16)
    a9f4:	01800284 	movi	r6,10
    a9f8:	84000044 	addi	r16,r16,1
    a9fc:	100b883a 	mov	r5,r2
    aa00:	39fff404 	addi	r7,r7,-48
    aa04:	8809883a 	mov	r4,r17
    aa08:	000a81c0 	call	a81c <__multadd>
    aa0c:	84bff81e 	bne	r16,r18,a9f0 <__s2b+0xb4>
    aa10:	dfc00617 	ldw	ra,24(sp)
    aa14:	dd400517 	ldw	r21,20(sp)
    aa18:	dd000417 	ldw	r20,16(sp)
    aa1c:	dcc00317 	ldw	r19,12(sp)
    aa20:	dc800217 	ldw	r18,8(sp)
    aa24:	dc400117 	ldw	r17,4(sp)
    aa28:	dc000017 	ldw	r16,0(sp)
    aa2c:	dec00704 	addi	sp,sp,28
    aa30:	f800283a 	ret
    aa34:	84000284 	addi	r16,r16,10
    aa38:	1827883a 	mov	r19,r3
    aa3c:	003fe906 	br	a9e4 <__s2b+0xa8>

0000aa40 <__hi0bits>:
    aa40:	20bfffec 	andhi	r2,r4,65535
    aa44:	1000141e 	bne	r2,zero,aa98 <__hi0bits+0x58>
    aa48:	2008943a 	slli	r4,r4,16
    aa4c:	00800404 	movi	r2,16
    aa50:	20ffc02c 	andhi	r3,r4,65280
    aa54:	1800021e 	bne	r3,zero,aa60 <__hi0bits+0x20>
    aa58:	2008923a 	slli	r4,r4,8
    aa5c:	10800204 	addi	r2,r2,8
    aa60:	20fc002c 	andhi	r3,r4,61440
    aa64:	1800021e 	bne	r3,zero,aa70 <__hi0bits+0x30>
    aa68:	2008913a 	slli	r4,r4,4
    aa6c:	10800104 	addi	r2,r2,4
    aa70:	20f0002c 	andhi	r3,r4,49152
    aa74:	1800031e 	bne	r3,zero,aa84 <__hi0bits+0x44>
    aa78:	2109883a 	add	r4,r4,r4
    aa7c:	10800084 	addi	r2,r2,2
    aa80:	2109883a 	add	r4,r4,r4
    aa84:	20000316 	blt	r4,zero,aa94 <__hi0bits+0x54>
    aa88:	2110002c 	andhi	r4,r4,16384
    aa8c:	2000041e 	bne	r4,zero,aaa0 <__hi0bits+0x60>
    aa90:	00800804 	movi	r2,32
    aa94:	f800283a 	ret
    aa98:	0005883a 	mov	r2,zero
    aa9c:	003fec06 	br	aa50 <__hi0bits+0x10>
    aaa0:	10800044 	addi	r2,r2,1
    aaa4:	f800283a 	ret

0000aaa8 <__lo0bits>:
    aaa8:	20c00017 	ldw	r3,0(r4)
    aaac:	188001cc 	andi	r2,r3,7
    aab0:	10000826 	beq	r2,zero,aad4 <__lo0bits+0x2c>
    aab4:	1880004c 	andi	r2,r3,1
    aab8:	1000211e 	bne	r2,zero,ab40 <__lo0bits+0x98>
    aabc:	1880008c 	andi	r2,r3,2
    aac0:	1000211e 	bne	r2,zero,ab48 <__lo0bits+0xa0>
    aac4:	1806d0ba 	srli	r3,r3,2
    aac8:	00800084 	movi	r2,2
    aacc:	20c00015 	stw	r3,0(r4)
    aad0:	f800283a 	ret
    aad4:	18bfffcc 	andi	r2,r3,65535
    aad8:	10001326 	beq	r2,zero,ab28 <__lo0bits+0x80>
    aadc:	0005883a 	mov	r2,zero
    aae0:	19403fcc 	andi	r5,r3,255
    aae4:	2800021e 	bne	r5,zero,aaf0 <__lo0bits+0x48>
    aae8:	1806d23a 	srli	r3,r3,8
    aaec:	10800204 	addi	r2,r2,8
    aaf0:	194003cc 	andi	r5,r3,15
    aaf4:	2800021e 	bne	r5,zero,ab00 <__lo0bits+0x58>
    aaf8:	1806d13a 	srli	r3,r3,4
    aafc:	10800104 	addi	r2,r2,4
    ab00:	194000cc 	andi	r5,r3,3
    ab04:	2800021e 	bne	r5,zero,ab10 <__lo0bits+0x68>
    ab08:	1806d0ba 	srli	r3,r3,2
    ab0c:	10800084 	addi	r2,r2,2
    ab10:	1940004c 	andi	r5,r3,1
    ab14:	2800081e 	bne	r5,zero,ab38 <__lo0bits+0x90>
    ab18:	1806d07a 	srli	r3,r3,1
    ab1c:	1800051e 	bne	r3,zero,ab34 <__lo0bits+0x8c>
    ab20:	00800804 	movi	r2,32
    ab24:	f800283a 	ret
    ab28:	1806d43a 	srli	r3,r3,16
    ab2c:	00800404 	movi	r2,16
    ab30:	003feb06 	br	aae0 <__lo0bits+0x38>
    ab34:	10800044 	addi	r2,r2,1
    ab38:	20c00015 	stw	r3,0(r4)
    ab3c:	f800283a 	ret
    ab40:	0005883a 	mov	r2,zero
    ab44:	f800283a 	ret
    ab48:	1806d07a 	srli	r3,r3,1
    ab4c:	00800044 	movi	r2,1
    ab50:	20c00015 	stw	r3,0(r4)
    ab54:	f800283a 	ret

0000ab58 <__i2b>:
    ab58:	defffd04 	addi	sp,sp,-12
    ab5c:	dc000015 	stw	r16,0(sp)
    ab60:	04000044 	movi	r16,1
    ab64:	dc400115 	stw	r17,4(sp)
    ab68:	2823883a 	mov	r17,r5
    ab6c:	800b883a 	mov	r5,r16
    ab70:	dfc00215 	stw	ra,8(sp)
    ab74:	000a74c0 	call	a74c <_Balloc>
    ab78:	14400515 	stw	r17,20(r2)
    ab7c:	14000415 	stw	r16,16(r2)
    ab80:	dfc00217 	ldw	ra,8(sp)
    ab84:	dc400117 	ldw	r17,4(sp)
    ab88:	dc000017 	ldw	r16,0(sp)
    ab8c:	dec00304 	addi	sp,sp,12
    ab90:	f800283a 	ret

0000ab94 <__multiply>:
    ab94:	defffa04 	addi	sp,sp,-24
    ab98:	dcc00315 	stw	r19,12(sp)
    ab9c:	dc800215 	stw	r18,8(sp)
    aba0:	34c00417 	ldw	r19,16(r6)
    aba4:	2c800417 	ldw	r18,16(r5)
    aba8:	dd000415 	stw	r20,16(sp)
    abac:	dc400115 	stw	r17,4(sp)
    abb0:	dfc00515 	stw	ra,20(sp)
    abb4:	dc000015 	stw	r16,0(sp)
    abb8:	2829883a 	mov	r20,r5
    abbc:	3023883a 	mov	r17,r6
    abc0:	94c0050e 	bge	r18,r19,abd8 <__multiply+0x44>
    abc4:	9007883a 	mov	r3,r18
    abc8:	3029883a 	mov	r20,r6
    abcc:	9825883a 	mov	r18,r19
    abd0:	2823883a 	mov	r17,r5
    abd4:	1827883a 	mov	r19,r3
    abd8:	a0800217 	ldw	r2,8(r20)
    abdc:	94e1883a 	add	r16,r18,r19
    abe0:	a1400117 	ldw	r5,4(r20)
    abe4:	1400010e 	bge	r2,r16,abec <__multiply+0x58>
    abe8:	29400044 	addi	r5,r5,1
    abec:	000a74c0 	call	a74c <_Balloc>
    abf0:	8415883a 	add	r10,r16,r16
    abf4:	12c00504 	addi	r11,r2,20
    abf8:	5295883a 	add	r10,r10,r10
    abfc:	5a95883a 	add	r10,r11,r10
    ac00:	5807883a 	mov	r3,r11
    ac04:	5a80032e 	bgeu	r11,r10,ac14 <__multiply+0x80>
    ac08:	18000015 	stw	zero,0(r3)
    ac0c:	18c00104 	addi	r3,r3,4
    ac10:	1abffd36 	bltu	r3,r10,ac08 <__multiply+0x74>
    ac14:	9ce7883a 	add	r19,r19,r19
    ac18:	94a5883a 	add	r18,r18,r18
    ac1c:	89800504 	addi	r6,r17,20
    ac20:	9ce7883a 	add	r19,r19,r19
    ac24:	a3400504 	addi	r13,r20,20
    ac28:	94a5883a 	add	r18,r18,r18
    ac2c:	34d9883a 	add	r12,r6,r19
    ac30:	6c93883a 	add	r9,r13,r18
    ac34:	3300422e 	bgeu	r6,r12,ad40 <__multiply+0x1ac>
    ac38:	37c00017 	ldw	ra,0(r6)
    ac3c:	fbffffcc 	andi	r15,ra,65535
    ac40:	78001b26 	beq	r15,zero,acb0 <__multiply+0x11c>
    ac44:	5811883a 	mov	r8,r11
    ac48:	681d883a 	mov	r14,r13
    ac4c:	000f883a 	mov	r7,zero
    ac50:	71000017 	ldw	r4,0(r14)
    ac54:	40c00017 	ldw	r3,0(r8)
    ac58:	73800104 	addi	r14,r14,4
    ac5c:	217fffcc 	andi	r5,r4,65535
    ac60:	2bcb383a 	mul	r5,r5,r15
    ac64:	2008d43a 	srli	r4,r4,16
    ac68:	1c7fffcc 	andi	r17,r3,65535
    ac6c:	2c4b883a 	add	r5,r5,r17
    ac70:	29cb883a 	add	r5,r5,r7
    ac74:	23c9383a 	mul	r4,r4,r15
    ac78:	1806d43a 	srli	r3,r3,16
    ac7c:	280ed43a 	srli	r7,r5,16
    ac80:	297fffcc 	andi	r5,r5,65535
    ac84:	20c7883a 	add	r3,r4,r3
    ac88:	19c7883a 	add	r3,r3,r7
    ac8c:	1808943a 	slli	r4,r3,16
    ac90:	4023883a 	mov	r17,r8
    ac94:	180ed43a 	srli	r7,r3,16
    ac98:	214ab03a 	or	r5,r4,r5
    ac9c:	41400015 	stw	r5,0(r8)
    aca0:	42000104 	addi	r8,r8,4
    aca4:	727fea36 	bltu	r14,r9,ac50 <__multiply+0xbc>
    aca8:	89c00115 	stw	r7,4(r17)
    acac:	37c00017 	ldw	ra,0(r6)
    acb0:	f83ed43a 	srli	ra,ra,16
    acb4:	f8001f26 	beq	ra,zero,ad34 <__multiply+0x1a0>
    acb8:	58c00017 	ldw	r3,0(r11)
    acbc:	681d883a 	mov	r14,r13
    acc0:	581f883a 	mov	r15,r11
    acc4:	1811883a 	mov	r8,r3
    acc8:	5825883a 	mov	r18,r11
    accc:	000f883a 	mov	r7,zero
    acd0:	00000106 	br	acd8 <__multiply+0x144>
    acd4:	8825883a 	mov	r18,r17
    acd8:	7140000b 	ldhu	r5,0(r14)
    acdc:	4010d43a 	srli	r8,r8,16
    ace0:	193fffcc 	andi	r4,r3,65535
    ace4:	2fcb383a 	mul	r5,r5,ra
    ace8:	7bc00104 	addi	r15,r15,4
    acec:	73800104 	addi	r14,r14,4
    acf0:	2a0b883a 	add	r5,r5,r8
    acf4:	29cb883a 	add	r5,r5,r7
    acf8:	2806943a 	slli	r3,r5,16
    acfc:	94400104 	addi	r17,r18,4
    ad00:	280ad43a 	srli	r5,r5,16
    ad04:	1908b03a 	or	r4,r3,r4
    ad08:	793fff15 	stw	r4,-4(r15)
    ad0c:	70ffff17 	ldw	r3,-4(r14)
    ad10:	8a000017 	ldw	r8,0(r17)
    ad14:	1806d43a 	srli	r3,r3,16
    ad18:	413fffcc 	andi	r4,r8,65535
    ad1c:	1fc7383a 	mul	r3,r3,ra
    ad20:	1907883a 	add	r3,r3,r4
    ad24:	1947883a 	add	r3,r3,r5
    ad28:	180ed43a 	srli	r7,r3,16
    ad2c:	727fe936 	bltu	r14,r9,acd4 <__multiply+0x140>
    ad30:	90c00115 	stw	r3,4(r18)
    ad34:	31800104 	addi	r6,r6,4
    ad38:	5ac00104 	addi	r11,r11,4
    ad3c:	333fbe36 	bltu	r6,r12,ac38 <__multiply+0xa4>
    ad40:	0400090e 	bge	zero,r16,ad68 <__multiply+0x1d4>
    ad44:	50ffff17 	ldw	r3,-4(r10)
    ad48:	52bfff04 	addi	r10,r10,-4
    ad4c:	18000326 	beq	r3,zero,ad5c <__multiply+0x1c8>
    ad50:	00000506 	br	ad68 <__multiply+0x1d4>
    ad54:	50c00017 	ldw	r3,0(r10)
    ad58:	1800031e 	bne	r3,zero,ad68 <__multiply+0x1d4>
    ad5c:	843fffc4 	addi	r16,r16,-1
    ad60:	52bfff04 	addi	r10,r10,-4
    ad64:	803ffb1e 	bne	r16,zero,ad54 <__multiply+0x1c0>
    ad68:	14000415 	stw	r16,16(r2)
    ad6c:	dfc00517 	ldw	ra,20(sp)
    ad70:	dd000417 	ldw	r20,16(sp)
    ad74:	dcc00317 	ldw	r19,12(sp)
    ad78:	dc800217 	ldw	r18,8(sp)
    ad7c:	dc400117 	ldw	r17,4(sp)
    ad80:	dc000017 	ldw	r16,0(sp)
    ad84:	dec00604 	addi	sp,sp,24
    ad88:	f800283a 	ret

0000ad8c <__pow5mult>:
    ad8c:	defffa04 	addi	sp,sp,-24
    ad90:	dcc00315 	stw	r19,12(sp)
    ad94:	dc000015 	stw	r16,0(sp)
    ad98:	dfc00515 	stw	ra,20(sp)
    ad9c:	dd000415 	stw	r20,16(sp)
    ada0:	dc800215 	stw	r18,8(sp)
    ada4:	dc400115 	stw	r17,4(sp)
    ada8:	308000cc 	andi	r2,r6,3
    adac:	3021883a 	mov	r16,r6
    adb0:	2027883a 	mov	r19,r4
    adb4:	10002f1e 	bne	r2,zero,ae74 <__pow5mult+0xe8>
    adb8:	2825883a 	mov	r18,r5
    adbc:	8021d0ba 	srai	r16,r16,2
    adc0:	80001a26 	beq	r16,zero,ae2c <__pow5mult+0xa0>
    adc4:	9c401217 	ldw	r17,72(r19)
    adc8:	8800061e 	bne	r17,zero,ade4 <__pow5mult+0x58>
    adcc:	00003406 	br	aea0 <__pow5mult+0x114>
    add0:	8021d07a 	srai	r16,r16,1
    add4:	80001526 	beq	r16,zero,ae2c <__pow5mult+0xa0>
    add8:	88800017 	ldw	r2,0(r17)
    addc:	10001c26 	beq	r2,zero,ae50 <__pow5mult+0xc4>
    ade0:	1023883a 	mov	r17,r2
    ade4:	8080004c 	andi	r2,r16,1
    ade8:	103ff926 	beq	r2,zero,add0 <__pow5mult+0x44>
    adec:	880d883a 	mov	r6,r17
    adf0:	900b883a 	mov	r5,r18
    adf4:	9809883a 	mov	r4,r19
    adf8:	000ab940 	call	ab94 <__multiply>
    adfc:	90001b26 	beq	r18,zero,ae6c <__pow5mult+0xe0>
    ae00:	91000117 	ldw	r4,4(r18)
    ae04:	98c01317 	ldw	r3,76(r19)
    ae08:	8021d07a 	srai	r16,r16,1
    ae0c:	2109883a 	add	r4,r4,r4
    ae10:	2109883a 	add	r4,r4,r4
    ae14:	1907883a 	add	r3,r3,r4
    ae18:	19000017 	ldw	r4,0(r3)
    ae1c:	91000015 	stw	r4,0(r18)
    ae20:	1c800015 	stw	r18,0(r3)
    ae24:	1025883a 	mov	r18,r2
    ae28:	803feb1e 	bne	r16,zero,add8 <__pow5mult+0x4c>
    ae2c:	9005883a 	mov	r2,r18
    ae30:	dfc00517 	ldw	ra,20(sp)
    ae34:	dd000417 	ldw	r20,16(sp)
    ae38:	dcc00317 	ldw	r19,12(sp)
    ae3c:	dc800217 	ldw	r18,8(sp)
    ae40:	dc400117 	ldw	r17,4(sp)
    ae44:	dc000017 	ldw	r16,0(sp)
    ae48:	dec00604 	addi	sp,sp,24
    ae4c:	f800283a 	ret
    ae50:	880d883a 	mov	r6,r17
    ae54:	880b883a 	mov	r5,r17
    ae58:	9809883a 	mov	r4,r19
    ae5c:	000ab940 	call	ab94 <__multiply>
    ae60:	88800015 	stw	r2,0(r17)
    ae64:	10000015 	stw	zero,0(r2)
    ae68:	003fdd06 	br	ade0 <__pow5mult+0x54>
    ae6c:	1025883a 	mov	r18,r2
    ae70:	003fd706 	br	add0 <__pow5mult+0x44>
    ae74:	10bfffc4 	addi	r2,r2,-1
    ae78:	1085883a 	add	r2,r2,r2
    ae7c:	00c00074 	movhi	r3,1
    ae80:	18d3f904 	addi	r3,r3,20452
    ae84:	1085883a 	add	r2,r2,r2
    ae88:	1885883a 	add	r2,r3,r2
    ae8c:	11800017 	ldw	r6,0(r2)
    ae90:	000f883a 	mov	r7,zero
    ae94:	000a81c0 	call	a81c <__multadd>
    ae98:	1025883a 	mov	r18,r2
    ae9c:	003fc706 	br	adbc <__pow5mult+0x30>
    aea0:	05000044 	movi	r20,1
    aea4:	a00b883a 	mov	r5,r20
    aea8:	9809883a 	mov	r4,r19
    aeac:	000a74c0 	call	a74c <_Balloc>
    aeb0:	1023883a 	mov	r17,r2
    aeb4:	00809c44 	movi	r2,625
    aeb8:	88800515 	stw	r2,20(r17)
    aebc:	8d000415 	stw	r20,16(r17)
    aec0:	9c401215 	stw	r17,72(r19)
    aec4:	88000015 	stw	zero,0(r17)
    aec8:	003fc606 	br	ade4 <__pow5mult+0x58>

0000aecc <__lshift>:
    aecc:	defff904 	addi	sp,sp,-28
    aed0:	dd400515 	stw	r21,20(sp)
    aed4:	dcc00315 	stw	r19,12(sp)
    aed8:	302bd17a 	srai	r21,r6,5
    aedc:	2cc00417 	ldw	r19,16(r5)
    aee0:	28800217 	ldw	r2,8(r5)
    aee4:	dd000415 	stw	r20,16(sp)
    aee8:	ace7883a 	add	r19,r21,r19
    aeec:	dc800215 	stw	r18,8(sp)
    aef0:	dc400115 	stw	r17,4(sp)
    aef4:	dc000015 	stw	r16,0(sp)
    aef8:	dfc00615 	stw	ra,24(sp)
    aefc:	9c000044 	addi	r16,r19,1
    af00:	2823883a 	mov	r17,r5
    af04:	3029883a 	mov	r20,r6
    af08:	2025883a 	mov	r18,r4
    af0c:	29400117 	ldw	r5,4(r5)
    af10:	1400030e 	bge	r2,r16,af20 <__lshift+0x54>
    af14:	1085883a 	add	r2,r2,r2
    af18:	29400044 	addi	r5,r5,1
    af1c:	143ffd16 	blt	r2,r16,af14 <__lshift+0x48>
    af20:	9009883a 	mov	r4,r18
    af24:	000a74c0 	call	a74c <_Balloc>
    af28:	10c00504 	addi	r3,r2,20
    af2c:	0540070e 	bge	zero,r21,af4c <__lshift+0x80>
    af30:	ad6b883a 	add	r21,r21,r21
    af34:	ad6b883a 	add	r21,r21,r21
    af38:	1809883a 	mov	r4,r3
    af3c:	1d47883a 	add	r3,r3,r21
    af40:	20000015 	stw	zero,0(r4)
    af44:	21000104 	addi	r4,r4,4
    af48:	193ffd1e 	bne	r3,r4,af40 <__lshift+0x74>
    af4c:	8a000417 	ldw	r8,16(r17)
    af50:	89000504 	addi	r4,r17,20
    af54:	a18007cc 	andi	r6,r20,31
    af58:	4211883a 	add	r8,r8,r8
    af5c:	4211883a 	add	r8,r8,r8
    af60:	2211883a 	add	r8,r4,r8
    af64:	30002326 	beq	r6,zero,aff4 <__lshift+0x128>
    af68:	02400804 	movi	r9,32
    af6c:	4993c83a 	sub	r9,r9,r6
    af70:	000b883a 	mov	r5,zero
    af74:	21c00017 	ldw	r7,0(r4)
    af78:	1815883a 	mov	r10,r3
    af7c:	18c00104 	addi	r3,r3,4
    af80:	398e983a 	sll	r7,r7,r6
    af84:	21000104 	addi	r4,r4,4
    af88:	394ab03a 	or	r5,r7,r5
    af8c:	197fff15 	stw	r5,-4(r3)
    af90:	217fff17 	ldw	r5,-4(r4)
    af94:	2a4ad83a 	srl	r5,r5,r9
    af98:	223ff636 	bltu	r4,r8,af74 <__lshift+0xa8>
    af9c:	51400115 	stw	r5,4(r10)
    afa0:	28001a1e 	bne	r5,zero,b00c <__lshift+0x140>
    afa4:	843fffc4 	addi	r16,r16,-1
    afa8:	14000415 	stw	r16,16(r2)
    afac:	88000826 	beq	r17,zero,afd0 <__lshift+0x104>
    afb0:	89000117 	ldw	r4,4(r17)
    afb4:	90c01317 	ldw	r3,76(r18)
    afb8:	2109883a 	add	r4,r4,r4
    afbc:	2109883a 	add	r4,r4,r4
    afc0:	1907883a 	add	r3,r3,r4
    afc4:	19000017 	ldw	r4,0(r3)
    afc8:	89000015 	stw	r4,0(r17)
    afcc:	1c400015 	stw	r17,0(r3)
    afd0:	dfc00617 	ldw	ra,24(sp)
    afd4:	dd400517 	ldw	r21,20(sp)
    afd8:	dd000417 	ldw	r20,16(sp)
    afdc:	dcc00317 	ldw	r19,12(sp)
    afe0:	dc800217 	ldw	r18,8(sp)
    afe4:	dc400117 	ldw	r17,4(sp)
    afe8:	dc000017 	ldw	r16,0(sp)
    afec:	dec00704 	addi	sp,sp,28
    aff0:	f800283a 	ret
    aff4:	21400017 	ldw	r5,0(r4)
    aff8:	18c00104 	addi	r3,r3,4
    affc:	21000104 	addi	r4,r4,4
    b000:	197fff15 	stw	r5,-4(r3)
    b004:	223ffb36 	bltu	r4,r8,aff4 <__lshift+0x128>
    b008:	003fe606 	br	afa4 <__lshift+0xd8>
    b00c:	9c000084 	addi	r16,r19,2
    b010:	003fe406 	br	afa4 <__lshift+0xd8>

0000b014 <__mcmp>:
    b014:	20800417 	ldw	r2,16(r4)
    b018:	28c00417 	ldw	r3,16(r5)
    b01c:	10c5c83a 	sub	r2,r2,r3
    b020:	1000111e 	bne	r2,zero,b068 <__mcmp+0x54>
    b024:	18c7883a 	add	r3,r3,r3
    b028:	18c7883a 	add	r3,r3,r3
    b02c:	21000504 	addi	r4,r4,20
    b030:	29400504 	addi	r5,r5,20
    b034:	20c5883a 	add	r2,r4,r3
    b038:	28cb883a 	add	r5,r5,r3
    b03c:	00000106 	br	b044 <__mcmp+0x30>
    b040:	20800a2e 	bgeu	r4,r2,b06c <__mcmp+0x58>
    b044:	10bfff04 	addi	r2,r2,-4
    b048:	297fff04 	addi	r5,r5,-4
    b04c:	11800017 	ldw	r6,0(r2)
    b050:	28c00017 	ldw	r3,0(r5)
    b054:	30fffa26 	beq	r6,r3,b040 <__mcmp+0x2c>
    b058:	30c00236 	bltu	r6,r3,b064 <__mcmp+0x50>
    b05c:	00800044 	movi	r2,1
    b060:	f800283a 	ret
    b064:	00bfffc4 	movi	r2,-1
    b068:	f800283a 	ret
    b06c:	0005883a 	mov	r2,zero
    b070:	f800283a 	ret

0000b074 <__mdiff>:
    b074:	28c00417 	ldw	r3,16(r5)
    b078:	30800417 	ldw	r2,16(r6)
    b07c:	defffa04 	addi	sp,sp,-24
    b080:	dcc00315 	stw	r19,12(sp)
    b084:	dc800215 	stw	r18,8(sp)
    b088:	dfc00515 	stw	ra,20(sp)
    b08c:	dd000415 	stw	r20,16(sp)
    b090:	dc400115 	stw	r17,4(sp)
    b094:	dc000015 	stw	r16,0(sp)
    b098:	1887c83a 	sub	r3,r3,r2
    b09c:	2825883a 	mov	r18,r5
    b0a0:	3027883a 	mov	r19,r6
    b0a4:	1800141e 	bne	r3,zero,b0f8 <__mdiff+0x84>
    b0a8:	1085883a 	add	r2,r2,r2
    b0ac:	1085883a 	add	r2,r2,r2
    b0b0:	2a000504 	addi	r8,r5,20
    b0b4:	34000504 	addi	r16,r6,20
    b0b8:	4087883a 	add	r3,r8,r2
    b0bc:	8085883a 	add	r2,r16,r2
    b0c0:	00000106 	br	b0c8 <__mdiff+0x54>
    b0c4:	40c0592e 	bgeu	r8,r3,b22c <__mdiff+0x1b8>
    b0c8:	18ffff04 	addi	r3,r3,-4
    b0cc:	10bfff04 	addi	r2,r2,-4
    b0d0:	19c00017 	ldw	r7,0(r3)
    b0d4:	11400017 	ldw	r5,0(r2)
    b0d8:	397ffa26 	beq	r7,r5,b0c4 <__mdiff+0x50>
    b0dc:	3940592e 	bgeu	r7,r5,b244 <__mdiff+0x1d0>
    b0e0:	9005883a 	mov	r2,r18
    b0e4:	4023883a 	mov	r17,r8
    b0e8:	9825883a 	mov	r18,r19
    b0ec:	05000044 	movi	r20,1
    b0f0:	1027883a 	mov	r19,r2
    b0f4:	00000406 	br	b108 <__mdiff+0x94>
    b0f8:	18005616 	blt	r3,zero,b254 <__mdiff+0x1e0>
    b0fc:	34400504 	addi	r17,r6,20
    b100:	2c000504 	addi	r16,r5,20
    b104:	0029883a 	mov	r20,zero
    b108:	91400117 	ldw	r5,4(r18)
    b10c:	000a74c0 	call	a74c <_Balloc>
    b110:	92400417 	ldw	r9,16(r18)
    b114:	9b000417 	ldw	r12,16(r19)
    b118:	12c00504 	addi	r11,r2,20
    b11c:	4a51883a 	add	r8,r9,r9
    b120:	6319883a 	add	r12,r12,r12
    b124:	4211883a 	add	r8,r8,r8
    b128:	6319883a 	add	r12,r12,r12
    b12c:	15000315 	stw	r20,12(r2)
    b130:	8211883a 	add	r8,r16,r8
    b134:	8b19883a 	add	r12,r17,r12
    b138:	0007883a 	mov	r3,zero
    b13c:	81400017 	ldw	r5,0(r16)
    b140:	89c00017 	ldw	r7,0(r17)
    b144:	59800104 	addi	r6,r11,4
    b148:	293fffcc 	andi	r4,r5,65535
    b14c:	20c7883a 	add	r3,r4,r3
    b150:	393fffcc 	andi	r4,r7,65535
    b154:	1909c83a 	sub	r4,r3,r4
    b158:	280ad43a 	srli	r5,r5,16
    b15c:	380ed43a 	srli	r7,r7,16
    b160:	2007d43a 	srai	r3,r4,16
    b164:	213fffcc 	andi	r4,r4,65535
    b168:	29cbc83a 	sub	r5,r5,r7
    b16c:	28c7883a 	add	r3,r5,r3
    b170:	180a943a 	slli	r5,r3,16
    b174:	8c400104 	addi	r17,r17,4
    b178:	84000104 	addi	r16,r16,4
    b17c:	2908b03a 	or	r4,r5,r4
    b180:	59000015 	stw	r4,0(r11)
    b184:	1807d43a 	srai	r3,r3,16
    b188:	3015883a 	mov	r10,r6
    b18c:	3017883a 	mov	r11,r6
    b190:	8b3fea36 	bltu	r17,r12,b13c <__mdiff+0xc8>
    b194:	8200162e 	bgeu	r16,r8,b1f0 <__mdiff+0x17c>
    b198:	8017883a 	mov	r11,r16
    b19c:	59400017 	ldw	r5,0(r11)
    b1a0:	31800104 	addi	r6,r6,4
    b1a4:	5ac00104 	addi	r11,r11,4
    b1a8:	293fffcc 	andi	r4,r5,65535
    b1ac:	20c7883a 	add	r3,r4,r3
    b1b0:	280ed43a 	srli	r7,r5,16
    b1b4:	180bd43a 	srai	r5,r3,16
    b1b8:	193fffcc 	andi	r4,r3,65535
    b1bc:	3947883a 	add	r3,r7,r5
    b1c0:	180a943a 	slli	r5,r3,16
    b1c4:	1807d43a 	srai	r3,r3,16
    b1c8:	2908b03a 	or	r4,r5,r4
    b1cc:	313fff15 	stw	r4,-4(r6)
    b1d0:	5a3ff236 	bltu	r11,r8,b19c <__mdiff+0x128>
    b1d4:	0406303a 	nor	r3,zero,r16
    b1d8:	1a07883a 	add	r3,r3,r8
    b1dc:	1806d0ba 	srli	r3,r3,2
    b1e0:	18c00044 	addi	r3,r3,1
    b1e4:	18c7883a 	add	r3,r3,r3
    b1e8:	18c7883a 	add	r3,r3,r3
    b1ec:	50d5883a 	add	r10,r10,r3
    b1f0:	50ffff04 	addi	r3,r10,-4
    b1f4:	2000041e 	bne	r4,zero,b208 <__mdiff+0x194>
    b1f8:	18ffff04 	addi	r3,r3,-4
    b1fc:	19000017 	ldw	r4,0(r3)
    b200:	4a7fffc4 	addi	r9,r9,-1
    b204:	203ffc26 	beq	r4,zero,b1f8 <__mdiff+0x184>
    b208:	12400415 	stw	r9,16(r2)
    b20c:	dfc00517 	ldw	ra,20(sp)
    b210:	dd000417 	ldw	r20,16(sp)
    b214:	dcc00317 	ldw	r19,12(sp)
    b218:	dc800217 	ldw	r18,8(sp)
    b21c:	dc400117 	ldw	r17,4(sp)
    b220:	dc000017 	ldw	r16,0(sp)
    b224:	dec00604 	addi	sp,sp,24
    b228:	f800283a 	ret
    b22c:	000b883a 	mov	r5,zero
    b230:	000a74c0 	call	a74c <_Balloc>
    b234:	00c00044 	movi	r3,1
    b238:	10c00415 	stw	r3,16(r2)
    b23c:	10000515 	stw	zero,20(r2)
    b240:	003ff206 	br	b20c <__mdiff+0x198>
    b244:	8023883a 	mov	r17,r16
    b248:	0029883a 	mov	r20,zero
    b24c:	4021883a 	mov	r16,r8
    b250:	003fad06 	br	b108 <__mdiff+0x94>
    b254:	9005883a 	mov	r2,r18
    b258:	94400504 	addi	r17,r18,20
    b25c:	9c000504 	addi	r16,r19,20
    b260:	9825883a 	mov	r18,r19
    b264:	05000044 	movi	r20,1
    b268:	1027883a 	mov	r19,r2
    b26c:	003fa606 	br	b108 <__mdiff+0x94>

0000b270 <__ulp>:
    b270:	295ffc2c 	andhi	r5,r5,32752
    b274:	00bf3034 	movhi	r2,64704
    b278:	2887883a 	add	r3,r5,r2
    b27c:	00c0020e 	bge	zero,r3,b288 <__ulp+0x18>
    b280:	0005883a 	mov	r2,zero
    b284:	f800283a 	ret
    b288:	00c7c83a 	sub	r3,zero,r3
    b28c:	1807d53a 	srai	r3,r3,20
    b290:	008004c4 	movi	r2,19
    b294:	10c00b0e 	bge	r2,r3,b2c4 <__ulp+0x54>
    b298:	18bffb04 	addi	r2,r3,-20
    b29c:	01000784 	movi	r4,30
    b2a0:	0007883a 	mov	r3,zero
    b2a4:	20800516 	blt	r4,r2,b2bc <__ulp+0x4c>
    b2a8:	010007c4 	movi	r4,31
    b2ac:	2089c83a 	sub	r4,r4,r2
    b2b0:	00800044 	movi	r2,1
    b2b4:	1104983a 	sll	r2,r2,r4
    b2b8:	f800283a 	ret
    b2bc:	00800044 	movi	r2,1
    b2c0:	f800283a 	ret
    b2c4:	01400234 	movhi	r5,8
    b2c8:	28c7d83a 	sra	r3,r5,r3
    b2cc:	0005883a 	mov	r2,zero
    b2d0:	f800283a 	ret

0000b2d4 <__b2d>:
    b2d4:	defffa04 	addi	sp,sp,-24
    b2d8:	dc000015 	stw	r16,0(sp)
    b2dc:	24000417 	ldw	r16,16(r4)
    b2e0:	dc400115 	stw	r17,4(sp)
    b2e4:	24400504 	addi	r17,r4,20
    b2e8:	8421883a 	add	r16,r16,r16
    b2ec:	8421883a 	add	r16,r16,r16
    b2f0:	8c21883a 	add	r16,r17,r16
    b2f4:	dc800215 	stw	r18,8(sp)
    b2f8:	84bfff17 	ldw	r18,-4(r16)
    b2fc:	dd000415 	stw	r20,16(sp)
    b300:	dcc00315 	stw	r19,12(sp)
    b304:	9009883a 	mov	r4,r18
    b308:	2829883a 	mov	r20,r5
    b30c:	dfc00515 	stw	ra,20(sp)
    b310:	000aa400 	call	aa40 <__hi0bits>
    b314:	00c00804 	movi	r3,32
    b318:	1889c83a 	sub	r4,r3,r2
    b31c:	a1000015 	stw	r4,0(r20)
    b320:	01000284 	movi	r4,10
    b324:	84ffff04 	addi	r19,r16,-4
    b328:	20801216 	blt	r4,r2,b374 <__b2d+0xa0>
    b32c:	018002c4 	movi	r6,11
    b330:	308dc83a 	sub	r6,r6,r2
    b334:	9186d83a 	srl	r3,r18,r6
    b338:	18cffc34 	orhi	r3,r3,16368
    b33c:	8cc0212e 	bgeu	r17,r19,b3c4 <__b2d+0xf0>
    b340:	813ffe17 	ldw	r4,-8(r16)
    b344:	218cd83a 	srl	r6,r4,r6
    b348:	10800544 	addi	r2,r2,21
    b34c:	9084983a 	sll	r2,r18,r2
    b350:	1184b03a 	or	r2,r2,r6
    b354:	dfc00517 	ldw	ra,20(sp)
    b358:	dd000417 	ldw	r20,16(sp)
    b35c:	dcc00317 	ldw	r19,12(sp)
    b360:	dc800217 	ldw	r18,8(sp)
    b364:	dc400117 	ldw	r17,4(sp)
    b368:	dc000017 	ldw	r16,0(sp)
    b36c:	dec00604 	addi	sp,sp,24
    b370:	f800283a 	ret
    b374:	8cc00f2e 	bgeu	r17,r19,b3b4 <__b2d+0xe0>
    b378:	117ffd44 	addi	r5,r2,-11
    b37c:	80bffe17 	ldw	r2,-8(r16)
    b380:	28000e26 	beq	r5,zero,b3bc <__b2d+0xe8>
    b384:	1949c83a 	sub	r4,r3,r5
    b388:	9164983a 	sll	r18,r18,r5
    b38c:	1106d83a 	srl	r3,r2,r4
    b390:	81bffe04 	addi	r6,r16,-8
    b394:	948ffc34 	orhi	r18,r18,16368
    b398:	90c6b03a 	or	r3,r18,r3
    b39c:	89800e2e 	bgeu	r17,r6,b3d8 <__b2d+0x104>
    b3a0:	81bffd17 	ldw	r6,-12(r16)
    b3a4:	1144983a 	sll	r2,r2,r5
    b3a8:	310ad83a 	srl	r5,r6,r4
    b3ac:	2884b03a 	or	r2,r5,r2
    b3b0:	003fe806 	br	b354 <__b2d+0x80>
    b3b4:	10bffd44 	addi	r2,r2,-11
    b3b8:	1000041e 	bne	r2,zero,b3cc <__b2d+0xf8>
    b3bc:	90cffc34 	orhi	r3,r18,16368
    b3c0:	003fe406 	br	b354 <__b2d+0x80>
    b3c4:	000d883a 	mov	r6,zero
    b3c8:	003fdf06 	br	b348 <__b2d+0x74>
    b3cc:	90a4983a 	sll	r18,r18,r2
    b3d0:	0005883a 	mov	r2,zero
    b3d4:	003ff906 	br	b3bc <__b2d+0xe8>
    b3d8:	1144983a 	sll	r2,r2,r5
    b3dc:	003fdd06 	br	b354 <__b2d+0x80>

0000b3e0 <__d2b>:
    b3e0:	defff804 	addi	sp,sp,-32
    b3e4:	dc000215 	stw	r16,8(sp)
    b3e8:	3021883a 	mov	r16,r6
    b3ec:	dc400315 	stw	r17,12(sp)
    b3f0:	8022907a 	slli	r17,r16,1
    b3f4:	dd000615 	stw	r20,24(sp)
    b3f8:	2829883a 	mov	r20,r5
    b3fc:	01400044 	movi	r5,1
    b400:	dcc00515 	stw	r19,20(sp)
    b404:	dc800415 	stw	r18,16(sp)
    b408:	dfc00715 	stw	ra,28(sp)
    b40c:	3825883a 	mov	r18,r7
    b410:	8822d57a 	srli	r17,r17,21
    b414:	000a74c0 	call	a74c <_Balloc>
    b418:	1027883a 	mov	r19,r2
    b41c:	00800434 	movhi	r2,16
    b420:	10bfffc4 	addi	r2,r2,-1
    b424:	808c703a 	and	r6,r16,r2
    b428:	88000126 	beq	r17,zero,b430 <__d2b+0x50>
    b42c:	31800434 	orhi	r6,r6,16
    b430:	d9800015 	stw	r6,0(sp)
    b434:	a0002426 	beq	r20,zero,b4c8 <__d2b+0xe8>
    b438:	d9000104 	addi	r4,sp,4
    b43c:	dd000115 	stw	r20,4(sp)
    b440:	000aaa80 	call	aaa8 <__lo0bits>
    b444:	d8c00017 	ldw	r3,0(sp)
    b448:	10002f1e 	bne	r2,zero,b508 <__d2b+0x128>
    b44c:	d9000117 	ldw	r4,4(sp)
    b450:	99000515 	stw	r4,20(r19)
    b454:	1821003a 	cmpeq	r16,r3,zero
    b458:	01000084 	movi	r4,2
    b45c:	2421c83a 	sub	r16,r4,r16
    b460:	98c00615 	stw	r3,24(r19)
    b464:	9c000415 	stw	r16,16(r19)
    b468:	88001f1e 	bne	r17,zero,b4e8 <__d2b+0x108>
    b46c:	10bef384 	addi	r2,r2,-1074
    b470:	90800015 	stw	r2,0(r18)
    b474:	00900034 	movhi	r2,16384
    b478:	10bfffc4 	addi	r2,r2,-1
    b47c:	8085883a 	add	r2,r16,r2
    b480:	1085883a 	add	r2,r2,r2
    b484:	1085883a 	add	r2,r2,r2
    b488:	9885883a 	add	r2,r19,r2
    b48c:	11000517 	ldw	r4,20(r2)
    b490:	8020917a 	slli	r16,r16,5
    b494:	000aa400 	call	aa40 <__hi0bits>
    b498:	d8c00817 	ldw	r3,32(sp)
    b49c:	8085c83a 	sub	r2,r16,r2
    b4a0:	18800015 	stw	r2,0(r3)
    b4a4:	9805883a 	mov	r2,r19
    b4a8:	dfc00717 	ldw	ra,28(sp)
    b4ac:	dd000617 	ldw	r20,24(sp)
    b4b0:	dcc00517 	ldw	r19,20(sp)
    b4b4:	dc800417 	ldw	r18,16(sp)
    b4b8:	dc400317 	ldw	r17,12(sp)
    b4bc:	dc000217 	ldw	r16,8(sp)
    b4c0:	dec00804 	addi	sp,sp,32
    b4c4:	f800283a 	ret
    b4c8:	d809883a 	mov	r4,sp
    b4cc:	000aaa80 	call	aaa8 <__lo0bits>
    b4d0:	d8c00017 	ldw	r3,0(sp)
    b4d4:	04000044 	movi	r16,1
    b4d8:	9c000415 	stw	r16,16(r19)
    b4dc:	98c00515 	stw	r3,20(r19)
    b4e0:	10800804 	addi	r2,r2,32
    b4e4:	883fe126 	beq	r17,zero,b46c <__d2b+0x8c>
    b4e8:	00c00d44 	movi	r3,53
    b4ec:	8c7ef344 	addi	r17,r17,-1075
    b4f0:	88a3883a 	add	r17,r17,r2
    b4f4:	1885c83a 	sub	r2,r3,r2
    b4f8:	d8c00817 	ldw	r3,32(sp)
    b4fc:	94400015 	stw	r17,0(r18)
    b500:	18800015 	stw	r2,0(r3)
    b504:	003fe706 	br	b4a4 <__d2b+0xc4>
    b508:	01000804 	movi	r4,32
    b50c:	2089c83a 	sub	r4,r4,r2
    b510:	1908983a 	sll	r4,r3,r4
    b514:	d9400117 	ldw	r5,4(sp)
    b518:	1886d83a 	srl	r3,r3,r2
    b51c:	2148b03a 	or	r4,r4,r5
    b520:	99000515 	stw	r4,20(r19)
    b524:	d8c00015 	stw	r3,0(sp)
    b528:	003fca06 	br	b454 <__d2b+0x74>

0000b52c <__ratio>:
    b52c:	defff904 	addi	sp,sp,-28
    b530:	dc400315 	stw	r17,12(sp)
    b534:	2823883a 	mov	r17,r5
    b538:	d9400104 	addi	r5,sp,4
    b53c:	dfc00615 	stw	ra,24(sp)
    b540:	dcc00515 	stw	r19,20(sp)
    b544:	dc800415 	stw	r18,16(sp)
    b548:	2027883a 	mov	r19,r4
    b54c:	dc000215 	stw	r16,8(sp)
    b550:	000b2d40 	call	b2d4 <__b2d>
    b554:	d80b883a 	mov	r5,sp
    b558:	8809883a 	mov	r4,r17
    b55c:	1025883a 	mov	r18,r2
    b560:	1821883a 	mov	r16,r3
    b564:	000b2d40 	call	b2d4 <__b2d>
    b568:	8a000417 	ldw	r8,16(r17)
    b56c:	99000417 	ldw	r4,16(r19)
    b570:	d9400117 	ldw	r5,4(sp)
    b574:	2209c83a 	sub	r4,r4,r8
    b578:	2010917a 	slli	r8,r4,5
    b57c:	d9000017 	ldw	r4,0(sp)
    b580:	2909c83a 	sub	r4,r5,r4
    b584:	4109883a 	add	r4,r8,r4
    b588:	01000e0e 	bge	zero,r4,b5c4 <__ratio+0x98>
    b58c:	2008953a 	slli	r4,r4,20
    b590:	2421883a 	add	r16,r4,r16
    b594:	100d883a 	mov	r6,r2
    b598:	180f883a 	mov	r7,r3
    b59c:	9009883a 	mov	r4,r18
    b5a0:	800b883a 	mov	r5,r16
    b5a4:	000f2640 	call	f264 <__divdf3>
    b5a8:	dfc00617 	ldw	ra,24(sp)
    b5ac:	dcc00517 	ldw	r19,20(sp)
    b5b0:	dc800417 	ldw	r18,16(sp)
    b5b4:	dc400317 	ldw	r17,12(sp)
    b5b8:	dc000217 	ldw	r16,8(sp)
    b5bc:	dec00704 	addi	sp,sp,28
    b5c0:	f800283a 	ret
    b5c4:	2008953a 	slli	r4,r4,20
    b5c8:	1907c83a 	sub	r3,r3,r4
    b5cc:	003ff106 	br	b594 <__ratio+0x68>

0000b5d0 <_mprec_log10>:
    b5d0:	defffe04 	addi	sp,sp,-8
    b5d4:	dc000015 	stw	r16,0(sp)
    b5d8:	dfc00115 	stw	ra,4(sp)
    b5dc:	008005c4 	movi	r2,23
    b5e0:	2021883a 	mov	r16,r4
    b5e4:	11000d0e 	bge	r2,r4,b61c <_mprec_log10+0x4c>
    b5e8:	0005883a 	mov	r2,zero
    b5ec:	00cffc34 	movhi	r3,16368
    b5f0:	843fffc4 	addi	r16,r16,-1
    b5f4:	000d883a 	mov	r6,zero
    b5f8:	01d00934 	movhi	r7,16420
    b5fc:	1009883a 	mov	r4,r2
    b600:	180b883a 	mov	r5,r3
    b604:	000fda40 	call	fda4 <__muldf3>
    b608:	803ff91e 	bne	r16,zero,b5f0 <_mprec_log10+0x20>
    b60c:	dfc00117 	ldw	ra,4(sp)
    b610:	dc000017 	ldw	r16,0(sp)
    b614:	dec00204 	addi	sp,sp,8
    b618:	f800283a 	ret
    b61c:	202090fa 	slli	r16,r4,3
    b620:	00800074 	movhi	r2,1
    b624:	10941004 	addi	r2,r2,20544
    b628:	1421883a 	add	r16,r2,r16
    b62c:	80800017 	ldw	r2,0(r16)
    b630:	80c00117 	ldw	r3,4(r16)
    b634:	dfc00117 	ldw	ra,4(sp)
    b638:	dc000017 	ldw	r16,0(sp)
    b63c:	dec00204 	addi	sp,sp,8
    b640:	f800283a 	ret

0000b644 <__copybits>:
    b644:	297fffc4 	addi	r5,r5,-1
    b648:	280fd17a 	srai	r7,r5,5
    b64c:	30c00417 	ldw	r3,16(r6)
    b650:	30800504 	addi	r2,r6,20
    b654:	39c00044 	addi	r7,r7,1
    b658:	18c7883a 	add	r3,r3,r3
    b65c:	39cf883a 	add	r7,r7,r7
    b660:	18c7883a 	add	r3,r3,r3
    b664:	39cf883a 	add	r7,r7,r7
    b668:	10c7883a 	add	r3,r2,r3
    b66c:	21cf883a 	add	r7,r4,r7
    b670:	10c00d2e 	bgeu	r2,r3,b6a8 <__copybits+0x64>
    b674:	200b883a 	mov	r5,r4
    b678:	12000017 	ldw	r8,0(r2)
    b67c:	29400104 	addi	r5,r5,4
    b680:	10800104 	addi	r2,r2,4
    b684:	2a3fff15 	stw	r8,-4(r5)
    b688:	10fffb36 	bltu	r2,r3,b678 <__copybits+0x34>
    b68c:	1985c83a 	sub	r2,r3,r6
    b690:	10bffac4 	addi	r2,r2,-21
    b694:	1004d0ba 	srli	r2,r2,2
    b698:	10800044 	addi	r2,r2,1
    b69c:	1085883a 	add	r2,r2,r2
    b6a0:	1085883a 	add	r2,r2,r2
    b6a4:	2089883a 	add	r4,r4,r2
    b6a8:	21c0032e 	bgeu	r4,r7,b6b8 <__copybits+0x74>
    b6ac:	20000015 	stw	zero,0(r4)
    b6b0:	21000104 	addi	r4,r4,4
    b6b4:	21fffd36 	bltu	r4,r7,b6ac <__copybits+0x68>
    b6b8:	f800283a 	ret

0000b6bc <__any_on>:
    b6bc:	20c00417 	ldw	r3,16(r4)
    b6c0:	2805d17a 	srai	r2,r5,5
    b6c4:	21000504 	addi	r4,r4,20
    b6c8:	18800d0e 	bge	r3,r2,b700 <__any_on+0x44>
    b6cc:	18c7883a 	add	r3,r3,r3
    b6d0:	18c7883a 	add	r3,r3,r3
    b6d4:	20c7883a 	add	r3,r4,r3
    b6d8:	20c0192e 	bgeu	r4,r3,b740 <__any_on+0x84>
    b6dc:	18bfff17 	ldw	r2,-4(r3)
    b6e0:	18ffff04 	addi	r3,r3,-4
    b6e4:	1000041e 	bne	r2,zero,b6f8 <__any_on+0x3c>
    b6e8:	20c0142e 	bgeu	r4,r3,b73c <__any_on+0x80>
    b6ec:	18ffff04 	addi	r3,r3,-4
    b6f0:	19400017 	ldw	r5,0(r3)
    b6f4:	283ffc26 	beq	r5,zero,b6e8 <__any_on+0x2c>
    b6f8:	00800044 	movi	r2,1
    b6fc:	f800283a 	ret
    b700:	10c00a0e 	bge	r2,r3,b72c <__any_on+0x70>
    b704:	1085883a 	add	r2,r2,r2
    b708:	1085883a 	add	r2,r2,r2
    b70c:	294007cc 	andi	r5,r5,31
    b710:	2087883a 	add	r3,r4,r2
    b714:	283ff026 	beq	r5,zero,b6d8 <__any_on+0x1c>
    b718:	19800017 	ldw	r6,0(r3)
    b71c:	3144d83a 	srl	r2,r6,r5
    b720:	114a983a 	sll	r5,r2,r5
    b724:	317ff41e 	bne	r6,r5,b6f8 <__any_on+0x3c>
    b728:	003feb06 	br	b6d8 <__any_on+0x1c>
    b72c:	1085883a 	add	r2,r2,r2
    b730:	1085883a 	add	r2,r2,r2
    b734:	2087883a 	add	r3,r4,r2
    b738:	003fe706 	br	b6d8 <__any_on+0x1c>
    b73c:	f800283a 	ret
    b740:	0005883a 	mov	r2,zero
    b744:	f800283a 	ret

0000b748 <_realloc_r>:
    b748:	defff604 	addi	sp,sp,-40
    b74c:	dc800215 	stw	r18,8(sp)
    b750:	dfc00915 	stw	ra,36(sp)
    b754:	df000815 	stw	fp,32(sp)
    b758:	ddc00715 	stw	r23,28(sp)
    b75c:	dd800615 	stw	r22,24(sp)
    b760:	dd400515 	stw	r21,20(sp)
    b764:	dd000415 	stw	r20,16(sp)
    b768:	dcc00315 	stw	r19,12(sp)
    b76c:	dc400115 	stw	r17,4(sp)
    b770:	dc000015 	stw	r16,0(sp)
    b774:	3025883a 	mov	r18,r6
    b778:	2800b726 	beq	r5,zero,ba58 <_realloc_r+0x310>
    b77c:	282b883a 	mov	r21,r5
    b780:	2029883a 	mov	r20,r4
    b784:	001159c0 	call	1159c <__malloc_lock>
    b788:	a8bfff17 	ldw	r2,-4(r21)
    b78c:	043fff04 	movi	r16,-4
    b790:	90c002c4 	addi	r3,r18,11
    b794:	01000584 	movi	r4,22
    b798:	acfffe04 	addi	r19,r21,-8
    b79c:	1420703a 	and	r16,r2,r16
    b7a0:	20c0332e 	bgeu	r4,r3,b870 <_realloc_r+0x128>
    b7a4:	047ffe04 	movi	r17,-8
    b7a8:	1c62703a 	and	r17,r3,r17
    b7ac:	8807883a 	mov	r3,r17
    b7b0:	88005816 	blt	r17,zero,b914 <_realloc_r+0x1cc>
    b7b4:	8c805736 	bltu	r17,r18,b914 <_realloc_r+0x1cc>
    b7b8:	80c0300e 	bge	r16,r3,b87c <_realloc_r+0x134>
    b7bc:	07000074 	movhi	fp,1
    b7c0:	e7166304 	addi	fp,fp,22924
    b7c4:	e1c00217 	ldw	r7,8(fp)
    b7c8:	9c09883a 	add	r4,r19,r16
    b7cc:	22000117 	ldw	r8,4(r4)
    b7d0:	21c06326 	beq	r4,r7,b960 <_realloc_r+0x218>
    b7d4:	017fff84 	movi	r5,-2
    b7d8:	414a703a 	and	r5,r8,r5
    b7dc:	214b883a 	add	r5,r4,r5
    b7e0:	29800117 	ldw	r6,4(r5)
    b7e4:	3180004c 	andi	r6,r6,1
    b7e8:	30003f26 	beq	r6,zero,b8e8 <_realloc_r+0x1a0>
    b7ec:	1080004c 	andi	r2,r2,1
    b7f0:	10008326 	beq	r2,zero,ba00 <_realloc_r+0x2b8>
    b7f4:	900b883a 	mov	r5,r18
    b7f8:	a009883a 	mov	r4,r20
    b7fc:	0009a900 	call	9a90 <_malloc_r>
    b800:	1025883a 	mov	r18,r2
    b804:	10011e26 	beq	r2,zero,bc80 <_realloc_r+0x538>
    b808:	a93fff17 	ldw	r4,-4(r21)
    b80c:	10fffe04 	addi	r3,r2,-8
    b810:	00bfff84 	movi	r2,-2
    b814:	2084703a 	and	r2,r4,r2
    b818:	9885883a 	add	r2,r19,r2
    b81c:	1880ee26 	beq	r3,r2,bbd8 <_realloc_r+0x490>
    b820:	81bfff04 	addi	r6,r16,-4
    b824:	00800904 	movi	r2,36
    b828:	1180b836 	bltu	r2,r6,bb0c <_realloc_r+0x3c4>
    b82c:	00c004c4 	movi	r3,19
    b830:	19809636 	bltu	r3,r6,ba8c <_realloc_r+0x344>
    b834:	9005883a 	mov	r2,r18
    b838:	a807883a 	mov	r3,r21
    b83c:	19000017 	ldw	r4,0(r3)
    b840:	11000015 	stw	r4,0(r2)
    b844:	19000117 	ldw	r4,4(r3)
    b848:	11000115 	stw	r4,4(r2)
    b84c:	18c00217 	ldw	r3,8(r3)
    b850:	10c00215 	stw	r3,8(r2)
    b854:	a80b883a 	mov	r5,r21
    b858:	a009883a 	mov	r4,r20
    b85c:	0008ea40 	call	8ea4 <_free_r>
    b860:	a009883a 	mov	r4,r20
    b864:	00115c00 	call	115c0 <__malloc_unlock>
    b868:	9005883a 	mov	r2,r18
    b86c:	00001206 	br	b8b8 <_realloc_r+0x170>
    b870:	00c00404 	movi	r3,16
    b874:	1823883a 	mov	r17,r3
    b878:	003fce06 	br	b7b4 <_realloc_r+0x6c>
    b87c:	a825883a 	mov	r18,r21
    b880:	8445c83a 	sub	r2,r16,r17
    b884:	00c003c4 	movi	r3,15
    b888:	18802636 	bltu	r3,r2,b924 <_realloc_r+0x1dc>
    b88c:	99800117 	ldw	r6,4(r19)
    b890:	9c07883a 	add	r3,r19,r16
    b894:	3180004c 	andi	r6,r6,1
    b898:	3420b03a 	or	r16,r6,r16
    b89c:	9c000115 	stw	r16,4(r19)
    b8a0:	18800117 	ldw	r2,4(r3)
    b8a4:	10800054 	ori	r2,r2,1
    b8a8:	18800115 	stw	r2,4(r3)
    b8ac:	a009883a 	mov	r4,r20
    b8b0:	00115c00 	call	115c0 <__malloc_unlock>
    b8b4:	9005883a 	mov	r2,r18
    b8b8:	dfc00917 	ldw	ra,36(sp)
    b8bc:	df000817 	ldw	fp,32(sp)
    b8c0:	ddc00717 	ldw	r23,28(sp)
    b8c4:	dd800617 	ldw	r22,24(sp)
    b8c8:	dd400517 	ldw	r21,20(sp)
    b8cc:	dd000417 	ldw	r20,16(sp)
    b8d0:	dcc00317 	ldw	r19,12(sp)
    b8d4:	dc800217 	ldw	r18,8(sp)
    b8d8:	dc400117 	ldw	r17,4(sp)
    b8dc:	dc000017 	ldw	r16,0(sp)
    b8e0:	dec00a04 	addi	sp,sp,40
    b8e4:	f800283a 	ret
    b8e8:	017fff04 	movi	r5,-4
    b8ec:	414a703a 	and	r5,r8,r5
    b8f0:	814d883a 	add	r6,r16,r5
    b8f4:	30c01f16 	blt	r6,r3,b974 <_realloc_r+0x22c>
    b8f8:	20800317 	ldw	r2,12(r4)
    b8fc:	20c00217 	ldw	r3,8(r4)
    b900:	a825883a 	mov	r18,r21
    b904:	3021883a 	mov	r16,r6
    b908:	18800315 	stw	r2,12(r3)
    b90c:	10c00215 	stw	r3,8(r2)
    b910:	003fdb06 	br	b880 <_realloc_r+0x138>
    b914:	00800304 	movi	r2,12
    b918:	a0800015 	stw	r2,0(r20)
    b91c:	0005883a 	mov	r2,zero
    b920:	003fe506 	br	b8b8 <_realloc_r+0x170>
    b924:	98c00117 	ldw	r3,4(r19)
    b928:	9c4b883a 	add	r5,r19,r17
    b92c:	11000054 	ori	r4,r2,1
    b930:	18c0004c 	andi	r3,r3,1
    b934:	1c62b03a 	or	r17,r3,r17
    b938:	9c400115 	stw	r17,4(r19)
    b93c:	29000115 	stw	r4,4(r5)
    b940:	2885883a 	add	r2,r5,r2
    b944:	10c00117 	ldw	r3,4(r2)
    b948:	29400204 	addi	r5,r5,8
    b94c:	a009883a 	mov	r4,r20
    b950:	18c00054 	ori	r3,r3,1
    b954:	10c00115 	stw	r3,4(r2)
    b958:	0008ea40 	call	8ea4 <_free_r>
    b95c:	003fd306 	br	b8ac <_realloc_r+0x164>
    b960:	017fff04 	movi	r5,-4
    b964:	414a703a 	and	r5,r8,r5
    b968:	89800404 	addi	r6,r17,16
    b96c:	8151883a 	add	r8,r16,r5
    b970:	4180590e 	bge	r8,r6,bad8 <_realloc_r+0x390>
    b974:	1080004c 	andi	r2,r2,1
    b978:	103f9e1e 	bne	r2,zero,b7f4 <_realloc_r+0xac>
    b97c:	adbffe17 	ldw	r22,-8(r21)
    b980:	00bfff04 	movi	r2,-4
    b984:	9dadc83a 	sub	r22,r19,r22
    b988:	b1800117 	ldw	r6,4(r22)
    b98c:	3084703a 	and	r2,r6,r2
    b990:	20002026 	beq	r4,zero,ba14 <_realloc_r+0x2cc>
    b994:	80af883a 	add	r23,r16,r2
    b998:	b96f883a 	add	r23,r23,r5
    b99c:	21c05f26 	beq	r4,r7,bb1c <_realloc_r+0x3d4>
    b9a0:	b8c01c16 	blt	r23,r3,ba14 <_realloc_r+0x2cc>
    b9a4:	20800317 	ldw	r2,12(r4)
    b9a8:	20c00217 	ldw	r3,8(r4)
    b9ac:	81bfff04 	addi	r6,r16,-4
    b9b0:	01000904 	movi	r4,36
    b9b4:	18800315 	stw	r2,12(r3)
    b9b8:	10c00215 	stw	r3,8(r2)
    b9bc:	b0c00217 	ldw	r3,8(r22)
    b9c0:	b0800317 	ldw	r2,12(r22)
    b9c4:	b4800204 	addi	r18,r22,8
    b9c8:	18800315 	stw	r2,12(r3)
    b9cc:	10c00215 	stw	r3,8(r2)
    b9d0:	21801b36 	bltu	r4,r6,ba40 <_realloc_r+0x2f8>
    b9d4:	008004c4 	movi	r2,19
    b9d8:	1180352e 	bgeu	r2,r6,bab0 <_realloc_r+0x368>
    b9dc:	a8800017 	ldw	r2,0(r21)
    b9e0:	b0800215 	stw	r2,8(r22)
    b9e4:	a8800117 	ldw	r2,4(r21)
    b9e8:	b0800315 	stw	r2,12(r22)
    b9ec:	008006c4 	movi	r2,27
    b9f0:	11807f36 	bltu	r2,r6,bbf0 <_realloc_r+0x4a8>
    b9f4:	b0800404 	addi	r2,r22,16
    b9f8:	ad400204 	addi	r21,r21,8
    b9fc:	00002d06 	br	bab4 <_realloc_r+0x36c>
    ba00:	adbffe17 	ldw	r22,-8(r21)
    ba04:	00bfff04 	movi	r2,-4
    ba08:	9dadc83a 	sub	r22,r19,r22
    ba0c:	b1000117 	ldw	r4,4(r22)
    ba10:	2084703a 	and	r2,r4,r2
    ba14:	b03f7726 	beq	r22,zero,b7f4 <_realloc_r+0xac>
    ba18:	80af883a 	add	r23,r16,r2
    ba1c:	b8ff7516 	blt	r23,r3,b7f4 <_realloc_r+0xac>
    ba20:	b0800317 	ldw	r2,12(r22)
    ba24:	b0c00217 	ldw	r3,8(r22)
    ba28:	81bfff04 	addi	r6,r16,-4
    ba2c:	01000904 	movi	r4,36
    ba30:	18800315 	stw	r2,12(r3)
    ba34:	10c00215 	stw	r3,8(r2)
    ba38:	b4800204 	addi	r18,r22,8
    ba3c:	21bfe52e 	bgeu	r4,r6,b9d4 <_realloc_r+0x28c>
    ba40:	a80b883a 	mov	r5,r21
    ba44:	9009883a 	mov	r4,r18
    ba48:	000a4c80 	call	a4c8 <memmove>
    ba4c:	b821883a 	mov	r16,r23
    ba50:	b027883a 	mov	r19,r22
    ba54:	003f8a06 	br	b880 <_realloc_r+0x138>
    ba58:	300b883a 	mov	r5,r6
    ba5c:	dfc00917 	ldw	ra,36(sp)
    ba60:	df000817 	ldw	fp,32(sp)
    ba64:	ddc00717 	ldw	r23,28(sp)
    ba68:	dd800617 	ldw	r22,24(sp)
    ba6c:	dd400517 	ldw	r21,20(sp)
    ba70:	dd000417 	ldw	r20,16(sp)
    ba74:	dcc00317 	ldw	r19,12(sp)
    ba78:	dc800217 	ldw	r18,8(sp)
    ba7c:	dc400117 	ldw	r17,4(sp)
    ba80:	dc000017 	ldw	r16,0(sp)
    ba84:	dec00a04 	addi	sp,sp,40
    ba88:	0009a901 	jmpi	9a90 <_malloc_r>
    ba8c:	a8c00017 	ldw	r3,0(r21)
    ba90:	90c00015 	stw	r3,0(r18)
    ba94:	a8c00117 	ldw	r3,4(r21)
    ba98:	90c00115 	stw	r3,4(r18)
    ba9c:	00c006c4 	movi	r3,27
    baa0:	19804536 	bltu	r3,r6,bbb8 <_realloc_r+0x470>
    baa4:	90800204 	addi	r2,r18,8
    baa8:	a8c00204 	addi	r3,r21,8
    baac:	003f6306 	br	b83c <_realloc_r+0xf4>
    bab0:	9005883a 	mov	r2,r18
    bab4:	a8c00017 	ldw	r3,0(r21)
    bab8:	b821883a 	mov	r16,r23
    babc:	b027883a 	mov	r19,r22
    bac0:	10c00015 	stw	r3,0(r2)
    bac4:	a8c00117 	ldw	r3,4(r21)
    bac8:	10c00115 	stw	r3,4(r2)
    bacc:	a8c00217 	ldw	r3,8(r21)
    bad0:	10c00215 	stw	r3,8(r2)
    bad4:	003f6a06 	br	b880 <_realloc_r+0x138>
    bad8:	9c67883a 	add	r19,r19,r17
    badc:	4445c83a 	sub	r2,r8,r17
    bae0:	e4c00215 	stw	r19,8(fp)
    bae4:	10800054 	ori	r2,r2,1
    bae8:	98800115 	stw	r2,4(r19)
    baec:	a8bfff17 	ldw	r2,-4(r21)
    baf0:	a009883a 	mov	r4,r20
    baf4:	1080004c 	andi	r2,r2,1
    baf8:	1462b03a 	or	r17,r2,r17
    bafc:	ac7fff15 	stw	r17,-4(r21)
    bb00:	00115c00 	call	115c0 <__malloc_unlock>
    bb04:	a805883a 	mov	r2,r21
    bb08:	003f6b06 	br	b8b8 <_realloc_r+0x170>
    bb0c:	a80b883a 	mov	r5,r21
    bb10:	9009883a 	mov	r4,r18
    bb14:	000a4c80 	call	a4c8 <memmove>
    bb18:	003f4e06 	br	b854 <_realloc_r+0x10c>
    bb1c:	89000404 	addi	r4,r17,16
    bb20:	b93fbc16 	blt	r23,r4,ba14 <_realloc_r+0x2cc>
    bb24:	b0800317 	ldw	r2,12(r22)
    bb28:	b0c00217 	ldw	r3,8(r22)
    bb2c:	81bfff04 	addi	r6,r16,-4
    bb30:	01000904 	movi	r4,36
    bb34:	18800315 	stw	r2,12(r3)
    bb38:	10c00215 	stw	r3,8(r2)
    bb3c:	b4800204 	addi	r18,r22,8
    bb40:	21804336 	bltu	r4,r6,bc50 <_realloc_r+0x508>
    bb44:	008004c4 	movi	r2,19
    bb48:	11803f2e 	bgeu	r2,r6,bc48 <_realloc_r+0x500>
    bb4c:	a8800017 	ldw	r2,0(r21)
    bb50:	b0800215 	stw	r2,8(r22)
    bb54:	a8800117 	ldw	r2,4(r21)
    bb58:	b0800315 	stw	r2,12(r22)
    bb5c:	008006c4 	movi	r2,27
    bb60:	11803f36 	bltu	r2,r6,bc60 <_realloc_r+0x518>
    bb64:	b0800404 	addi	r2,r22,16
    bb68:	ad400204 	addi	r21,r21,8
    bb6c:	a8c00017 	ldw	r3,0(r21)
    bb70:	10c00015 	stw	r3,0(r2)
    bb74:	a8c00117 	ldw	r3,4(r21)
    bb78:	10c00115 	stw	r3,4(r2)
    bb7c:	a8c00217 	ldw	r3,8(r21)
    bb80:	10c00215 	stw	r3,8(r2)
    bb84:	b447883a 	add	r3,r22,r17
    bb88:	bc45c83a 	sub	r2,r23,r17
    bb8c:	e0c00215 	stw	r3,8(fp)
    bb90:	10800054 	ori	r2,r2,1
    bb94:	18800115 	stw	r2,4(r3)
    bb98:	b0800117 	ldw	r2,4(r22)
    bb9c:	a009883a 	mov	r4,r20
    bba0:	1080004c 	andi	r2,r2,1
    bba4:	1462b03a 	or	r17,r2,r17
    bba8:	b4400115 	stw	r17,4(r22)
    bbac:	00115c00 	call	115c0 <__malloc_unlock>
    bbb0:	9005883a 	mov	r2,r18
    bbb4:	003f4006 	br	b8b8 <_realloc_r+0x170>
    bbb8:	a8c00217 	ldw	r3,8(r21)
    bbbc:	90c00215 	stw	r3,8(r18)
    bbc0:	a8c00317 	ldw	r3,12(r21)
    bbc4:	90c00315 	stw	r3,12(r18)
    bbc8:	30801126 	beq	r6,r2,bc10 <_realloc_r+0x4c8>
    bbcc:	90800404 	addi	r2,r18,16
    bbd0:	a8c00404 	addi	r3,r21,16
    bbd4:	003f1906 	br	b83c <_realloc_r+0xf4>
    bbd8:	90ffff17 	ldw	r3,-4(r18)
    bbdc:	00bfff04 	movi	r2,-4
    bbe0:	a825883a 	mov	r18,r21
    bbe4:	1884703a 	and	r2,r3,r2
    bbe8:	80a1883a 	add	r16,r16,r2
    bbec:	003f2406 	br	b880 <_realloc_r+0x138>
    bbf0:	a8800217 	ldw	r2,8(r21)
    bbf4:	b0800415 	stw	r2,16(r22)
    bbf8:	a8800317 	ldw	r2,12(r21)
    bbfc:	b0800515 	stw	r2,20(r22)
    bc00:	31000a26 	beq	r6,r4,bc2c <_realloc_r+0x4e4>
    bc04:	b0800604 	addi	r2,r22,24
    bc08:	ad400404 	addi	r21,r21,16
    bc0c:	003fa906 	br	bab4 <_realloc_r+0x36c>
    bc10:	a9000417 	ldw	r4,16(r21)
    bc14:	90800604 	addi	r2,r18,24
    bc18:	a8c00604 	addi	r3,r21,24
    bc1c:	91000415 	stw	r4,16(r18)
    bc20:	a9000517 	ldw	r4,20(r21)
    bc24:	91000515 	stw	r4,20(r18)
    bc28:	003f0406 	br	b83c <_realloc_r+0xf4>
    bc2c:	a8c00417 	ldw	r3,16(r21)
    bc30:	ad400604 	addi	r21,r21,24
    bc34:	b0800804 	addi	r2,r22,32
    bc38:	b0c00615 	stw	r3,24(r22)
    bc3c:	a8ffff17 	ldw	r3,-4(r21)
    bc40:	b0c00715 	stw	r3,28(r22)
    bc44:	003f9b06 	br	bab4 <_realloc_r+0x36c>
    bc48:	9005883a 	mov	r2,r18
    bc4c:	003fc706 	br	bb6c <_realloc_r+0x424>
    bc50:	a80b883a 	mov	r5,r21
    bc54:	9009883a 	mov	r4,r18
    bc58:	000a4c80 	call	a4c8 <memmove>
    bc5c:	003fc906 	br	bb84 <_realloc_r+0x43c>
    bc60:	a8800217 	ldw	r2,8(r21)
    bc64:	b0800415 	stw	r2,16(r22)
    bc68:	a8800317 	ldw	r2,12(r21)
    bc6c:	b0800515 	stw	r2,20(r22)
    bc70:	31000726 	beq	r6,r4,bc90 <_realloc_r+0x548>
    bc74:	b0800604 	addi	r2,r22,24
    bc78:	ad400404 	addi	r21,r21,16
    bc7c:	003fbb06 	br	bb6c <_realloc_r+0x424>
    bc80:	a009883a 	mov	r4,r20
    bc84:	00115c00 	call	115c0 <__malloc_unlock>
    bc88:	0005883a 	mov	r2,zero
    bc8c:	003f0a06 	br	b8b8 <_realloc_r+0x170>
    bc90:	a8c00417 	ldw	r3,16(r21)
    bc94:	ad400604 	addi	r21,r21,24
    bc98:	b0800804 	addi	r2,r22,32
    bc9c:	b0c00615 	stw	r3,24(r22)
    bca0:	a8ffff17 	ldw	r3,-4(r21)
    bca4:	b0c00715 	stw	r3,28(r22)
    bca8:	003fb006 	br	bb6c <_realloc_r+0x424>

0000bcac <__fpclassifyd>:
    bcac:	00a00034 	movhi	r2,32768
    bcb0:	10bfffc4 	addi	r2,r2,-1
    bcb4:	2884703a 	and	r2,r5,r2
    bcb8:	10000726 	beq	r2,zero,bcd8 <__fpclassifyd+0x2c>
    bcbc:	00fffc34 	movhi	r3,65520
    bcc0:	019ff834 	movhi	r6,32736
    bcc4:	28c7883a 	add	r3,r5,r3
    bcc8:	31bfffc4 	addi	r6,r6,-1
    bccc:	30c00536 	bltu	r6,r3,bce4 <__fpclassifyd+0x38>
    bcd0:	00800104 	movi	r2,4
    bcd4:	f800283a 	ret
    bcd8:	2000021e 	bne	r4,zero,bce4 <__fpclassifyd+0x38>
    bcdc:	00800084 	movi	r2,2
    bce0:	f800283a 	ret
    bce4:	00dffc34 	movhi	r3,32752
    bce8:	019ff834 	movhi	r6,32736
    bcec:	28cb883a 	add	r5,r5,r3
    bcf0:	31bfffc4 	addi	r6,r6,-1
    bcf4:	317ff62e 	bgeu	r6,r5,bcd0 <__fpclassifyd+0x24>
    bcf8:	01400434 	movhi	r5,16
    bcfc:	297fffc4 	addi	r5,r5,-1
    bd00:	28800236 	bltu	r5,r2,bd0c <__fpclassifyd+0x60>
    bd04:	008000c4 	movi	r2,3
    bd08:	f800283a 	ret
    bd0c:	10c00226 	beq	r2,r3,bd18 <__fpclassifyd+0x6c>
    bd10:	0005883a 	mov	r2,zero
    bd14:	f800283a 	ret
    bd18:	2005003a 	cmpeq	r2,r4,zero
    bd1c:	f800283a 	ret

0000bd20 <_sbrk_r>:
    bd20:	defffd04 	addi	sp,sp,-12
    bd24:	dc000015 	stw	r16,0(sp)
    bd28:	040000b4 	movhi	r16,2
    bd2c:	dc400115 	stw	r17,4(sp)
    bd30:	84235104 	addi	r16,r16,-29372
    bd34:	2023883a 	mov	r17,r4
    bd38:	2809883a 	mov	r4,r5
    bd3c:	dfc00215 	stw	ra,8(sp)
    bd40:	80000015 	stw	zero,0(r16)
    bd44:	00117800 	call	11780 <sbrk>
    bd48:	00ffffc4 	movi	r3,-1
    bd4c:	10c00526 	beq	r2,r3,bd64 <_sbrk_r+0x44>
    bd50:	dfc00217 	ldw	ra,8(sp)
    bd54:	dc400117 	ldw	r17,4(sp)
    bd58:	dc000017 	ldw	r16,0(sp)
    bd5c:	dec00304 	addi	sp,sp,12
    bd60:	f800283a 	ret
    bd64:	80c00017 	ldw	r3,0(r16)
    bd68:	183ff926 	beq	r3,zero,bd50 <_sbrk_r+0x30>
    bd6c:	88c00015 	stw	r3,0(r17)
    bd70:	003ff706 	br	bd50 <_sbrk_r+0x30>

0000bd74 <__sread>:
    bd74:	defffe04 	addi	sp,sp,-8
    bd78:	dc000015 	stw	r16,0(sp)
    bd7c:	2821883a 	mov	r16,r5
    bd80:	2940038f 	ldh	r5,14(r5)
    bd84:	dfc00115 	stw	ra,4(sp)
    bd88:	000db680 	call	db68 <_read_r>
    bd8c:	10000716 	blt	r2,zero,bdac <__sread+0x38>
    bd90:	80c01417 	ldw	r3,80(r16)
    bd94:	1887883a 	add	r3,r3,r2
    bd98:	80c01415 	stw	r3,80(r16)
    bd9c:	dfc00117 	ldw	ra,4(sp)
    bda0:	dc000017 	ldw	r16,0(sp)
    bda4:	dec00204 	addi	sp,sp,8
    bda8:	f800283a 	ret
    bdac:	80c0030b 	ldhu	r3,12(r16)
    bdb0:	18fbffcc 	andi	r3,r3,61439
    bdb4:	80c0030d 	sth	r3,12(r16)
    bdb8:	dfc00117 	ldw	ra,4(sp)
    bdbc:	dc000017 	ldw	r16,0(sp)
    bdc0:	dec00204 	addi	sp,sp,8
    bdc4:	f800283a 	ret

0000bdc8 <__seofread>:
    bdc8:	0005883a 	mov	r2,zero
    bdcc:	f800283a 	ret

0000bdd0 <__swrite>:
    bdd0:	2880030b 	ldhu	r2,12(r5)
    bdd4:	defffb04 	addi	sp,sp,-20
    bdd8:	dcc00315 	stw	r19,12(sp)
    bddc:	dc800215 	stw	r18,8(sp)
    bde0:	dc400115 	stw	r17,4(sp)
    bde4:	dc000015 	stw	r16,0(sp)
    bde8:	dfc00415 	stw	ra,16(sp)
    bdec:	10c0400c 	andi	r3,r2,256
    bdf0:	2821883a 	mov	r16,r5
    bdf4:	2023883a 	mov	r17,r4
    bdf8:	3025883a 	mov	r18,r6
    bdfc:	3827883a 	mov	r19,r7
    be00:	18000526 	beq	r3,zero,be18 <__swrite+0x48>
    be04:	2940038f 	ldh	r5,14(r5)
    be08:	01c00084 	movi	r7,2
    be0c:	000d883a 	mov	r6,zero
    be10:	000db080 	call	db08 <_lseek_r>
    be14:	8080030b 	ldhu	r2,12(r16)
    be18:	8140038f 	ldh	r5,14(r16)
    be1c:	10bbffcc 	andi	r2,r2,61439
    be20:	980f883a 	mov	r7,r19
    be24:	900d883a 	mov	r6,r18
    be28:	8809883a 	mov	r4,r17
    be2c:	8080030d 	sth	r2,12(r16)
    be30:	dfc00417 	ldw	ra,16(sp)
    be34:	dcc00317 	ldw	r19,12(sp)
    be38:	dc800217 	ldw	r18,8(sp)
    be3c:	dc400117 	ldw	r17,4(sp)
    be40:	dc000017 	ldw	r16,0(sp)
    be44:	dec00504 	addi	sp,sp,20
    be48:	000d5d41 	jmpi	d5d4 <_write_r>

0000be4c <__sseek>:
    be4c:	defffe04 	addi	sp,sp,-8
    be50:	dc000015 	stw	r16,0(sp)
    be54:	2821883a 	mov	r16,r5
    be58:	2940038f 	ldh	r5,14(r5)
    be5c:	dfc00115 	stw	ra,4(sp)
    be60:	000db080 	call	db08 <_lseek_r>
    be64:	00ffffc4 	movi	r3,-1
    be68:	10c00826 	beq	r2,r3,be8c <__sseek+0x40>
    be6c:	80c0030b 	ldhu	r3,12(r16)
    be70:	80801415 	stw	r2,80(r16)
    be74:	18c40014 	ori	r3,r3,4096
    be78:	80c0030d 	sth	r3,12(r16)
    be7c:	dfc00117 	ldw	ra,4(sp)
    be80:	dc000017 	ldw	r16,0(sp)
    be84:	dec00204 	addi	sp,sp,8
    be88:	f800283a 	ret
    be8c:	80c0030b 	ldhu	r3,12(r16)
    be90:	18fbffcc 	andi	r3,r3,61439
    be94:	80c0030d 	sth	r3,12(r16)
    be98:	dfc00117 	ldw	ra,4(sp)
    be9c:	dc000017 	ldw	r16,0(sp)
    bea0:	dec00204 	addi	sp,sp,8
    bea4:	f800283a 	ret

0000bea8 <__sclose>:
    bea8:	2940038f 	ldh	r5,14(r5)
    beac:	000d6341 	jmpi	d634 <_close_r>

0000beb0 <strcmp>:
    beb0:	2144b03a 	or	r2,r4,r5
    beb4:	108000cc 	andi	r2,r2,3
    beb8:	1000171e 	bne	r2,zero,bf18 <strcmp+0x68>
    bebc:	20800017 	ldw	r2,0(r4)
    bec0:	28c00017 	ldw	r3,0(r5)
    bec4:	10c0141e 	bne	r2,r3,bf18 <strcmp+0x68>
    bec8:	027fbff4 	movhi	r9,65279
    becc:	4a7fbfc4 	addi	r9,r9,-257
    bed0:	0086303a 	nor	r3,zero,r2
    bed4:	02202074 	movhi	r8,32897
    bed8:	1245883a 	add	r2,r2,r9
    bedc:	42202004 	addi	r8,r8,-32640
    bee0:	10c4703a 	and	r2,r2,r3
    bee4:	1204703a 	and	r2,r2,r8
    bee8:	10000226 	beq	r2,zero,bef4 <strcmp+0x44>
    beec:	00002306 	br	bf7c <strcmp+0xcc>
    bef0:	1000221e 	bne	r2,zero,bf7c <strcmp+0xcc>
    bef4:	21000104 	addi	r4,r4,4
    bef8:	20c00017 	ldw	r3,0(r4)
    befc:	29400104 	addi	r5,r5,4
    bf00:	29800017 	ldw	r6,0(r5)
    bf04:	1a4f883a 	add	r7,r3,r9
    bf08:	00c4303a 	nor	r2,zero,r3
    bf0c:	3884703a 	and	r2,r7,r2
    bf10:	1204703a 	and	r2,r2,r8
    bf14:	19bff626 	beq	r3,r6,bef0 <strcmp+0x40>
    bf18:	20800003 	ldbu	r2,0(r4)
    bf1c:	10c03fcc 	andi	r3,r2,255
    bf20:	18c0201c 	xori	r3,r3,128
    bf24:	18ffe004 	addi	r3,r3,-128
    bf28:	18000c26 	beq	r3,zero,bf5c <strcmp+0xac>
    bf2c:	29800007 	ldb	r6,0(r5)
    bf30:	19800326 	beq	r3,r6,bf40 <strcmp+0x90>
    bf34:	00001306 	br	bf84 <strcmp+0xd4>
    bf38:	29800007 	ldb	r6,0(r5)
    bf3c:	11800b1e 	bne	r2,r6,bf6c <strcmp+0xbc>
    bf40:	21000044 	addi	r4,r4,1
    bf44:	20c00003 	ldbu	r3,0(r4)
    bf48:	29400044 	addi	r5,r5,1
    bf4c:	18803fcc 	andi	r2,r3,255
    bf50:	1080201c 	xori	r2,r2,128
    bf54:	10bfe004 	addi	r2,r2,-128
    bf58:	103ff71e 	bne	r2,zero,bf38 <strcmp+0x88>
    bf5c:	0007883a 	mov	r3,zero
    bf60:	28800003 	ldbu	r2,0(r5)
    bf64:	1885c83a 	sub	r2,r3,r2
    bf68:	f800283a 	ret
    bf6c:	28800003 	ldbu	r2,0(r5)
    bf70:	18c03fcc 	andi	r3,r3,255
    bf74:	1885c83a 	sub	r2,r3,r2
    bf78:	f800283a 	ret
    bf7c:	0005883a 	mov	r2,zero
    bf80:	f800283a 	ret
    bf84:	10c03fcc 	andi	r3,r2,255
    bf88:	003ff506 	br	bf60 <strcmp+0xb0>

0000bf8c <__sprint_r.part.0>:
    bf8c:	28801917 	ldw	r2,100(r5)
    bf90:	defff604 	addi	sp,sp,-40
    bf94:	dd400515 	stw	r21,20(sp)
    bf98:	dfc00915 	stw	ra,36(sp)
    bf9c:	df000815 	stw	fp,32(sp)
    bfa0:	ddc00715 	stw	r23,28(sp)
    bfa4:	dd800615 	stw	r22,24(sp)
    bfa8:	dd000415 	stw	r20,16(sp)
    bfac:	dcc00315 	stw	r19,12(sp)
    bfb0:	dc800215 	stw	r18,8(sp)
    bfb4:	dc400115 	stw	r17,4(sp)
    bfb8:	dc000015 	stw	r16,0(sp)
    bfbc:	1088000c 	andi	r2,r2,8192
    bfc0:	302b883a 	mov	r21,r6
    bfc4:	10002e26 	beq	r2,zero,c080 <__sprint_r.part.0+0xf4>
    bfc8:	30800217 	ldw	r2,8(r6)
    bfcc:	35800017 	ldw	r22,0(r6)
    bfd0:	10002926 	beq	r2,zero,c078 <__sprint_r.part.0+0xec>
    bfd4:	2827883a 	mov	r19,r5
    bfd8:	2029883a 	mov	r20,r4
    bfdc:	b5c00104 	addi	r23,r22,4
    bfe0:	04bfffc4 	movi	r18,-1
    bfe4:	bc400017 	ldw	r17,0(r23)
    bfe8:	b4000017 	ldw	r16,0(r22)
    bfec:	0039883a 	mov	fp,zero
    bff0:	8822d0ba 	srli	r17,r17,2
    bff4:	8800031e 	bne	r17,zero,c004 <__sprint_r.part.0+0x78>
    bff8:	00001806 	br	c05c <__sprint_r.part.0+0xd0>
    bffc:	84000104 	addi	r16,r16,4
    c000:	8f001526 	beq	r17,fp,c058 <__sprint_r.part.0+0xcc>
    c004:	81400017 	ldw	r5,0(r16)
    c008:	980d883a 	mov	r6,r19
    c00c:	a009883a 	mov	r4,r20
    c010:	000d9b40 	call	d9b4 <_fputwc_r>
    c014:	e7000044 	addi	fp,fp,1
    c018:	14bff81e 	bne	r2,r18,bffc <__sprint_r.part.0+0x70>
    c01c:	9005883a 	mov	r2,r18
    c020:	a8000215 	stw	zero,8(r21)
    c024:	a8000115 	stw	zero,4(r21)
    c028:	dfc00917 	ldw	ra,36(sp)
    c02c:	df000817 	ldw	fp,32(sp)
    c030:	ddc00717 	ldw	r23,28(sp)
    c034:	dd800617 	ldw	r22,24(sp)
    c038:	dd400517 	ldw	r21,20(sp)
    c03c:	dd000417 	ldw	r20,16(sp)
    c040:	dcc00317 	ldw	r19,12(sp)
    c044:	dc800217 	ldw	r18,8(sp)
    c048:	dc400117 	ldw	r17,4(sp)
    c04c:	dc000017 	ldw	r16,0(sp)
    c050:	dec00a04 	addi	sp,sp,40
    c054:	f800283a 	ret
    c058:	a8800217 	ldw	r2,8(r21)
    c05c:	8c63883a 	add	r17,r17,r17
    c060:	8c63883a 	add	r17,r17,r17
    c064:	1445c83a 	sub	r2,r2,r17
    c068:	a8800215 	stw	r2,8(r21)
    c06c:	b5800204 	addi	r22,r22,8
    c070:	bdc00204 	addi	r23,r23,8
    c074:	103fdb1e 	bne	r2,zero,bfe4 <__sprint_r.part.0+0x58>
    c078:	0005883a 	mov	r2,zero
    c07c:	003fe806 	br	c020 <__sprint_r.part.0+0x94>
    c080:	00091b40 	call	91b4 <__sfvwrite_r>
    c084:	003fe606 	br	c020 <__sprint_r.part.0+0x94>

0000c088 <__sprint_r>:
    c088:	30c00217 	ldw	r3,8(r6)
    c08c:	18000126 	beq	r3,zero,c094 <__sprint_r+0xc>
    c090:	000bf8c1 	jmpi	bf8c <__sprint_r.part.0>
    c094:	30000115 	stw	zero,4(r6)
    c098:	0005883a 	mov	r2,zero
    c09c:	f800283a 	ret

0000c0a0 <___vfiprintf_internal_r>:
    c0a0:	deffc904 	addi	sp,sp,-220
    c0a4:	df003515 	stw	fp,212(sp)
    c0a8:	dd003115 	stw	r20,196(sp)
    c0ac:	dfc03615 	stw	ra,216(sp)
    c0b0:	ddc03415 	stw	r23,208(sp)
    c0b4:	dd803315 	stw	r22,204(sp)
    c0b8:	dd403215 	stw	r21,200(sp)
    c0bc:	dcc03015 	stw	r19,192(sp)
    c0c0:	dc802f15 	stw	r18,188(sp)
    c0c4:	dc402e15 	stw	r17,184(sp)
    c0c8:	dc002d15 	stw	r16,180(sp)
    c0cc:	d9002015 	stw	r4,128(sp)
    c0d0:	d9c02215 	stw	r7,136(sp)
    c0d4:	2829883a 	mov	r20,r5
    c0d8:	3039883a 	mov	fp,r6
    c0dc:	20000226 	beq	r4,zero,c0e8 <___vfiprintf_internal_r+0x48>
    c0e0:	20800e17 	ldw	r2,56(r4)
    c0e4:	1000cf26 	beq	r2,zero,c424 <___vfiprintf_internal_r+0x384>
    c0e8:	a080030b 	ldhu	r2,12(r20)
    c0ec:	10c8000c 	andi	r3,r2,8192
    c0f0:	1800061e 	bne	r3,zero,c10c <___vfiprintf_internal_r+0x6c>
    c0f4:	a1001917 	ldw	r4,100(r20)
    c0f8:	00f7ffc4 	movi	r3,-8193
    c0fc:	10880014 	ori	r2,r2,8192
    c100:	20c6703a 	and	r3,r4,r3
    c104:	a080030d 	sth	r2,12(r20)
    c108:	a0c01915 	stw	r3,100(r20)
    c10c:	10c0020c 	andi	r3,r2,8
    c110:	1800a926 	beq	r3,zero,c3b8 <___vfiprintf_internal_r+0x318>
    c114:	a0c00417 	ldw	r3,16(r20)
    c118:	1800a726 	beq	r3,zero,c3b8 <___vfiprintf_internal_r+0x318>
    c11c:	1080068c 	andi	r2,r2,26
    c120:	00c00284 	movi	r3,10
    c124:	10c0ac26 	beq	r2,r3,c3d8 <___vfiprintf_internal_r+0x338>
    c128:	da801a04 	addi	r10,sp,104
    c12c:	da801e15 	stw	r10,120(sp)
    c130:	d8801e17 	ldw	r2,120(sp)
    c134:	da8019c4 	addi	r10,sp,103
    c138:	05800074 	movhi	r22,1
    c13c:	05c00074 	movhi	r23,1
    c140:	da801f15 	stw	r10,124(sp)
    c144:	1295c83a 	sub	r10,r2,r10
    c148:	b5944604 	addi	r22,r22,20760
    c14c:	bdd44204 	addi	r23,r23,20744
    c150:	dec01a15 	stw	sp,104(sp)
    c154:	d8001c15 	stw	zero,112(sp)
    c158:	d8001b15 	stw	zero,108(sp)
    c15c:	d8002615 	stw	zero,152(sp)
    c160:	d8002315 	stw	zero,140(sp)
    c164:	da802715 	stw	r10,156(sp)
    c168:	d811883a 	mov	r8,sp
    c16c:	dd002115 	stw	r20,132(sp)
    c170:	e021883a 	mov	r16,fp
    c174:	80800007 	ldb	r2,0(r16)
    c178:	1003ea26 	beq	r2,zero,d124 <___vfiprintf_internal_r+0x1084>
    c17c:	00c00944 	movi	r3,37
    c180:	8025883a 	mov	r18,r16
    c184:	10c0021e 	bne	r2,r3,c190 <___vfiprintf_internal_r+0xf0>
    c188:	00001606 	br	c1e4 <___vfiprintf_internal_r+0x144>
    c18c:	10c00326 	beq	r2,r3,c19c <___vfiprintf_internal_r+0xfc>
    c190:	94800044 	addi	r18,r18,1
    c194:	90800007 	ldb	r2,0(r18)
    c198:	103ffc1e 	bne	r2,zero,c18c <___vfiprintf_internal_r+0xec>
    c19c:	9423c83a 	sub	r17,r18,r16
    c1a0:	88001026 	beq	r17,zero,c1e4 <___vfiprintf_internal_r+0x144>
    c1a4:	d8c01c17 	ldw	r3,112(sp)
    c1a8:	d8801b17 	ldw	r2,108(sp)
    c1ac:	44000015 	stw	r16,0(r8)
    c1b0:	88c7883a 	add	r3,r17,r3
    c1b4:	10800044 	addi	r2,r2,1
    c1b8:	44400115 	stw	r17,4(r8)
    c1bc:	d8c01c15 	stw	r3,112(sp)
    c1c0:	d8801b15 	stw	r2,108(sp)
    c1c4:	010001c4 	movi	r4,7
    c1c8:	2080760e 	bge	r4,r2,c3a4 <___vfiprintf_internal_r+0x304>
    c1cc:	1803821e 	bne	r3,zero,cfd8 <___vfiprintf_internal_r+0xf38>
    c1d0:	da802317 	ldw	r10,140(sp)
    c1d4:	d8001b15 	stw	zero,108(sp)
    c1d8:	d811883a 	mov	r8,sp
    c1dc:	5455883a 	add	r10,r10,r17
    c1e0:	da802315 	stw	r10,140(sp)
    c1e4:	90800007 	ldb	r2,0(r18)
    c1e8:	10044626 	beq	r2,zero,d304 <___vfiprintf_internal_r+0x1264>
    c1ec:	90c00047 	ldb	r3,1(r18)
    c1f0:	94000044 	addi	r16,r18,1
    c1f4:	d8001d85 	stb	zero,118(sp)
    c1f8:	0009883a 	mov	r4,zero
    c1fc:	000f883a 	mov	r7,zero
    c200:	027fffc4 	movi	r9,-1
    c204:	0023883a 	mov	r17,zero
    c208:	0029883a 	mov	r20,zero
    c20c:	01401604 	movi	r5,88
    c210:	01800244 	movi	r6,9
    c214:	03400a84 	movi	r13,42
    c218:	03001b04 	movi	r12,108
    c21c:	84000044 	addi	r16,r16,1
    c220:	18bff804 	addi	r2,r3,-32
    c224:	28827336 	bltu	r5,r2,cbf4 <___vfiprintf_internal_r+0xb54>
    c228:	100490ba 	slli	r2,r2,2
    c22c:	02800074 	movhi	r10,1
    c230:	52b09004 	addi	r10,r10,-15808
    c234:	1285883a 	add	r2,r2,r10
    c238:	10800017 	ldw	r2,0(r2)
    c23c:	1000683a 	jmp	r2
    c240:	0000c928 	cmpgeui	zero,zero,804
    c244:	0000cbf4 	movhi	zero,815
    c248:	0000cbf4 	movhi	zero,815
    c24c:	0000c948 	cmpgei	zero,zero,805
    c250:	0000cbf4 	movhi	zero,815
    c254:	0000cbf4 	movhi	zero,815
    c258:	0000cbf4 	movhi	zero,815
    c25c:	0000cbf4 	movhi	zero,815
    c260:	0000cbf4 	movhi	zero,815
    c264:	0000cbf4 	movhi	zero,815
    c268:	0000cb30 	cmpltui	zero,zero,812
    c26c:	0000cb4c 	andi	zero,zero,813
    c270:	0000cbf4 	movhi	zero,815
    c274:	0000c434 	movhi	zero,784
    c278:	0000cb5c 	xori	zero,zero,813
    c27c:	0000cbf4 	movhi	zero,815
    c280:	0000c954 	movui	zero,805
    c284:	0000c960 	cmpeqi	zero,zero,805
    c288:	0000c960 	cmpeqi	zero,zero,805
    c28c:	0000c960 	cmpeqi	zero,zero,805
    c290:	0000c960 	cmpeqi	zero,zero,805
    c294:	0000c960 	cmpeqi	zero,zero,805
    c298:	0000c960 	cmpeqi	zero,zero,805
    c29c:	0000c960 	cmpeqi	zero,zero,805
    c2a0:	0000c960 	cmpeqi	zero,zero,805
    c2a4:	0000c960 	cmpeqi	zero,zero,805
    c2a8:	0000cbf4 	movhi	zero,815
    c2ac:	0000cbf4 	movhi	zero,815
    c2b0:	0000cbf4 	movhi	zero,815
    c2b4:	0000cbf4 	movhi	zero,815
    c2b8:	0000cbf4 	movhi	zero,815
    c2bc:	0000cbf4 	movhi	zero,815
    c2c0:	0000cbf4 	movhi	zero,815
    c2c4:	0000cbf4 	movhi	zero,815
    c2c8:	0000cbf4 	movhi	zero,815
    c2cc:	0000cbf4 	movhi	zero,815
    c2d0:	0000c98c 	andi	zero,zero,806
    c2d4:	0000cbf4 	movhi	zero,815
    c2d8:	0000cbf4 	movhi	zero,815
    c2dc:	0000cbf4 	movhi	zero,815
    c2e0:	0000cbf4 	movhi	zero,815
    c2e4:	0000cbf4 	movhi	zero,815
    c2e8:	0000cbf4 	movhi	zero,815
    c2ec:	0000cbf4 	movhi	zero,815
    c2f0:	0000cbf4 	movhi	zero,815
    c2f4:	0000cbf4 	movhi	zero,815
    c2f8:	0000cbf4 	movhi	zero,815
    c2fc:	0000c9c4 	movi	zero,807
    c300:	0000cbf4 	movhi	zero,815
    c304:	0000cbf4 	movhi	zero,815
    c308:	0000cbf4 	movhi	zero,815
    c30c:	0000cbf4 	movhi	zero,815
    c310:	0000cbf4 	movhi	zero,815
    c314:	0000ca1c 	xori	zero,zero,808
    c318:	0000cbf4 	movhi	zero,815
    c31c:	0000cbf4 	movhi	zero,815
    c320:	0000ca8c 	andi	zero,zero,810
    c324:	0000cbf4 	movhi	zero,815
    c328:	0000cbf4 	movhi	zero,815
    c32c:	0000cbf4 	movhi	zero,815
    c330:	0000cbf4 	movhi	zero,815
    c334:	0000cbf4 	movhi	zero,815
    c338:	0000cbf4 	movhi	zero,815
    c33c:	0000cbf4 	movhi	zero,815
    c340:	0000cbf4 	movhi	zero,815
    c344:	0000cbf4 	movhi	zero,815
    c348:	0000cbf4 	movhi	zero,815
    c34c:	0000c838 	rdprs	zero,zero,800
    c350:	0000c864 	muli	zero,zero,801
    c354:	0000cbf4 	movhi	zero,815
    c358:	0000cbf4 	movhi	zero,815
    c35c:	0000cbf4 	movhi	zero,815
    c360:	0000cb9c 	xori	zero,zero,814
    c364:	0000c864 	muli	zero,zero,801
    c368:	0000cbf4 	movhi	zero,815
    c36c:	0000cbf4 	movhi	zero,815
    c370:	0000c6f8 	rdprs	zero,zero,795
    c374:	0000cbf4 	movhi	zero,815
    c378:	0000c708 	cmpgei	zero,zero,796
    c37c:	0000c744 	movi	zero,797
    c380:	0000c440 	call	c44 <main+0x954>
    c384:	0000c6ec 	andhi	zero,zero,795
    c388:	0000cbf4 	movhi	zero,815
    c38c:	0000cac8 	cmpgei	zero,zero,811
    c390:	0000cbf4 	movhi	zero,815
    c394:	0000cb20 	cmpeqi	zero,zero,812
    c398:	0000cbf4 	movhi	zero,815
    c39c:	0000cbf4 	movhi	zero,815
    c3a0:	0000c7e4 	muli	zero,zero,799
    c3a4:	42000204 	addi	r8,r8,8
    c3a8:	da802317 	ldw	r10,140(sp)
    c3ac:	5455883a 	add	r10,r10,r17
    c3b0:	da802315 	stw	r10,140(sp)
    c3b4:	003f8b06 	br	c1e4 <___vfiprintf_internal_r+0x144>
    c3b8:	d9002017 	ldw	r4,128(sp)
    c3bc:	a00b883a 	mov	r5,r20
    c3c0:	0006d5c0 	call	6d5c <__swsetup_r>
    c3c4:	1003b11e 	bne	r2,zero,d28c <___vfiprintf_internal_r+0x11ec>
    c3c8:	a080030b 	ldhu	r2,12(r20)
    c3cc:	00c00284 	movi	r3,10
    c3d0:	1080068c 	andi	r2,r2,26
    c3d4:	10ff541e 	bne	r2,r3,c128 <___vfiprintf_internal_r+0x88>
    c3d8:	a080038f 	ldh	r2,14(r20)
    c3dc:	103f5216 	blt	r2,zero,c128 <___vfiprintf_internal_r+0x88>
    c3e0:	d9c02217 	ldw	r7,136(sp)
    c3e4:	d9002017 	ldw	r4,128(sp)
    c3e8:	e00d883a 	mov	r6,fp
    c3ec:	a00b883a 	mov	r5,r20
    c3f0:	000d5180 	call	d518 <__sbprintf>
    c3f4:	dfc03617 	ldw	ra,216(sp)
    c3f8:	df003517 	ldw	fp,212(sp)
    c3fc:	ddc03417 	ldw	r23,208(sp)
    c400:	dd803317 	ldw	r22,204(sp)
    c404:	dd403217 	ldw	r21,200(sp)
    c408:	dd003117 	ldw	r20,196(sp)
    c40c:	dcc03017 	ldw	r19,192(sp)
    c410:	dc802f17 	ldw	r18,188(sp)
    c414:	dc402e17 	ldw	r17,184(sp)
    c418:	dc002d17 	ldw	r16,180(sp)
    c41c:	dec03704 	addi	sp,sp,220
    c420:	f800283a 	ret
    c424:	0008d300 	call	8d30 <__sinit>
    c428:	003f2f06 	br	c0e8 <___vfiprintf_internal_r+0x48>
    c42c:	0463c83a 	sub	r17,zero,r17
    c430:	d8802215 	stw	r2,136(sp)
    c434:	a5000114 	ori	r20,r20,4
    c438:	80c00007 	ldb	r3,0(r16)
    c43c:	003f7706 	br	c21c <___vfiprintf_internal_r+0x17c>
    c440:	00800c04 	movi	r2,48
    c444:	da802217 	ldw	r10,136(sp)
    c448:	d8801d05 	stb	r2,116(sp)
    c44c:	00801e04 	movi	r2,120
    c450:	d8801d45 	stb	r2,117(sp)
    c454:	d8001d85 	stb	zero,118(sp)
    c458:	50c00104 	addi	r3,r10,4
    c45c:	54800017 	ldw	r18,0(r10)
    c460:	0027883a 	mov	r19,zero
    c464:	a0800094 	ori	r2,r20,2
    c468:	48030b16 	blt	r9,zero,d098 <___vfiprintf_internal_r+0xff8>
    c46c:	00bfdfc4 	movi	r2,-129
    c470:	a096703a 	and	r11,r20,r2
    c474:	d8c02215 	stw	r3,136(sp)
    c478:	5d000094 	ori	r20,r11,2
    c47c:	90032b1e 	bne	r18,zero,d12c <___vfiprintf_internal_r+0x108c>
    c480:	00800074 	movhi	r2,1
    c484:	1093e104 	addi	r2,r2,20356
    c488:	d8802615 	stw	r2,152(sp)
    c48c:	0039883a 	mov	fp,zero
    c490:	48017b1e 	bne	r9,zero,ca80 <___vfiprintf_internal_r+0x9e0>
    c494:	0013883a 	mov	r9,zero
    c498:	0027883a 	mov	r19,zero
    c49c:	dd401a04 	addi	r21,sp,104
    c4a0:	4825883a 	mov	r18,r9
    c4a4:	4cc0010e 	bge	r9,r19,c4ac <___vfiprintf_internal_r+0x40c>
    c4a8:	9825883a 	mov	r18,r19
    c4ac:	e7003fcc 	andi	fp,fp,255
    c4b0:	e700201c 	xori	fp,fp,128
    c4b4:	e73fe004 	addi	fp,fp,-128
    c4b8:	e0000126 	beq	fp,zero,c4c0 <___vfiprintf_internal_r+0x420>
    c4bc:	94800044 	addi	r18,r18,1
    c4c0:	a380008c 	andi	r14,r20,2
    c4c4:	70000126 	beq	r14,zero,c4cc <___vfiprintf_internal_r+0x42c>
    c4c8:	94800084 	addi	r18,r18,2
    c4cc:	a700210c 	andi	fp,r20,132
    c4d0:	e001df1e 	bne	fp,zero,cc50 <___vfiprintf_internal_r+0xbb0>
    c4d4:	8c87c83a 	sub	r3,r17,r18
    c4d8:	00c1dd0e 	bge	zero,r3,cc50 <___vfiprintf_internal_r+0xbb0>
    c4dc:	01c00404 	movi	r7,16
    c4e0:	d8801c17 	ldw	r2,112(sp)
    c4e4:	38c3ad0e 	bge	r7,r3,d39c <___vfiprintf_internal_r+0x12fc>
    c4e8:	02800074 	movhi	r10,1
    c4ec:	52944604 	addi	r10,r10,20760
    c4f0:	dc002915 	stw	r16,164(sp)
    c4f4:	d9801b17 	ldw	r6,108(sp)
    c4f8:	da802415 	stw	r10,144(sp)
    c4fc:	03c001c4 	movi	r15,7
    c500:	da402515 	stw	r9,148(sp)
    c504:	db802815 	stw	r14,160(sp)
    c508:	1821883a 	mov	r16,r3
    c50c:	00000506 	br	c524 <___vfiprintf_internal_r+0x484>
    c510:	31400084 	addi	r5,r6,2
    c514:	42000204 	addi	r8,r8,8
    c518:	200d883a 	mov	r6,r4
    c51c:	843ffc04 	addi	r16,r16,-16
    c520:	3c000d0e 	bge	r7,r16,c558 <___vfiprintf_internal_r+0x4b8>
    c524:	10800404 	addi	r2,r2,16
    c528:	31000044 	addi	r4,r6,1
    c52c:	45800015 	stw	r22,0(r8)
    c530:	41c00115 	stw	r7,4(r8)
    c534:	d8801c15 	stw	r2,112(sp)
    c538:	d9001b15 	stw	r4,108(sp)
    c53c:	793ff40e 	bge	r15,r4,c510 <___vfiprintf_internal_r+0x470>
    c540:	1001b51e 	bne	r2,zero,cc18 <___vfiprintf_internal_r+0xb78>
    c544:	843ffc04 	addi	r16,r16,-16
    c548:	000d883a 	mov	r6,zero
    c54c:	01400044 	movi	r5,1
    c550:	d811883a 	mov	r8,sp
    c554:	3c3ff316 	blt	r7,r16,c524 <___vfiprintf_internal_r+0x484>
    c558:	8007883a 	mov	r3,r16
    c55c:	da402517 	ldw	r9,148(sp)
    c560:	db802817 	ldw	r14,160(sp)
    c564:	dc002917 	ldw	r16,164(sp)
    c568:	da802417 	ldw	r10,144(sp)
    c56c:	1885883a 	add	r2,r3,r2
    c570:	40c00115 	stw	r3,4(r8)
    c574:	42800015 	stw	r10,0(r8)
    c578:	d8801c15 	stw	r2,112(sp)
    c57c:	d9401b15 	stw	r5,108(sp)
    c580:	00c001c4 	movi	r3,7
    c584:	19426016 	blt	r3,r5,cf08 <___vfiprintf_internal_r+0xe68>
    c588:	d8c01d87 	ldb	r3,118(sp)
    c58c:	42000204 	addi	r8,r8,8
    c590:	29000044 	addi	r4,r5,1
    c594:	1801b31e 	bne	r3,zero,cc64 <___vfiprintf_internal_r+0xbc4>
    c598:	7001c026 	beq	r14,zero,cc9c <___vfiprintf_internal_r+0xbfc>
    c59c:	d8c01d04 	addi	r3,sp,116
    c5a0:	10800084 	addi	r2,r2,2
    c5a4:	40c00015 	stw	r3,0(r8)
    c5a8:	00c00084 	movi	r3,2
    c5ac:	40c00115 	stw	r3,4(r8)
    c5b0:	d8801c15 	stw	r2,112(sp)
    c5b4:	d9001b15 	stw	r4,108(sp)
    c5b8:	00c001c4 	movi	r3,7
    c5bc:	1902650e 	bge	r3,r4,cf54 <___vfiprintf_internal_r+0xeb4>
    c5c0:	10029a1e 	bne	r2,zero,d02c <___vfiprintf_internal_r+0xf8c>
    c5c4:	00c02004 	movi	r3,128
    c5c8:	01000044 	movi	r4,1
    c5cc:	000b883a 	mov	r5,zero
    c5d0:	d811883a 	mov	r8,sp
    c5d4:	e0c1b31e 	bne	fp,r3,cca4 <___vfiprintf_internal_r+0xc04>
    c5d8:	8cb9c83a 	sub	fp,r17,r18
    c5dc:	0701b10e 	bge	zero,fp,cca4 <___vfiprintf_internal_r+0xc04>
    c5e0:	01c00404 	movi	r7,16
    c5e4:	3f03890e 	bge	r7,fp,d40c <___vfiprintf_internal_r+0x136c>
    c5e8:	00c00074 	movhi	r3,1
    c5ec:	18d44204 	addi	r3,r3,20744
    c5f0:	d8c02415 	stw	r3,144(sp)
    c5f4:	8007883a 	mov	r3,r16
    c5f8:	034001c4 	movi	r13,7
    c5fc:	e021883a 	mov	r16,fp
    c600:	da402515 	stw	r9,148(sp)
    c604:	1839883a 	mov	fp,r3
    c608:	00000506 	br	c620 <___vfiprintf_internal_r+0x580>
    c60c:	29800084 	addi	r6,r5,2
    c610:	42000204 	addi	r8,r8,8
    c614:	180b883a 	mov	r5,r3
    c618:	843ffc04 	addi	r16,r16,-16
    c61c:	3c000d0e 	bge	r7,r16,c654 <___vfiprintf_internal_r+0x5b4>
    c620:	10800404 	addi	r2,r2,16
    c624:	28c00044 	addi	r3,r5,1
    c628:	45c00015 	stw	r23,0(r8)
    c62c:	41c00115 	stw	r7,4(r8)
    c630:	d8801c15 	stw	r2,112(sp)
    c634:	d8c01b15 	stw	r3,108(sp)
    c638:	68fff40e 	bge	r13,r3,c60c <___vfiprintf_internal_r+0x56c>
    c63c:	1002241e 	bne	r2,zero,ced0 <___vfiprintf_internal_r+0xe30>
    c640:	843ffc04 	addi	r16,r16,-16
    c644:	01800044 	movi	r6,1
    c648:	000b883a 	mov	r5,zero
    c64c:	d811883a 	mov	r8,sp
    c650:	3c3ff316 	blt	r7,r16,c620 <___vfiprintf_internal_r+0x580>
    c654:	da402517 	ldw	r9,148(sp)
    c658:	e007883a 	mov	r3,fp
    c65c:	8039883a 	mov	fp,r16
    c660:	1821883a 	mov	r16,r3
    c664:	d8c02417 	ldw	r3,144(sp)
    c668:	1705883a 	add	r2,r2,fp
    c66c:	47000115 	stw	fp,4(r8)
    c670:	40c00015 	stw	r3,0(r8)
    c674:	d8801c15 	stw	r2,112(sp)
    c678:	d9801b15 	stw	r6,108(sp)
    c67c:	00c001c4 	movi	r3,7
    c680:	19827616 	blt	r3,r6,d05c <___vfiprintf_internal_r+0xfbc>
    c684:	4cf9c83a 	sub	fp,r9,r19
    c688:	42000204 	addi	r8,r8,8
    c68c:	31000044 	addi	r4,r6,1
    c690:	300b883a 	mov	r5,r6
    c694:	07018516 	blt	zero,fp,ccac <___vfiprintf_internal_r+0xc0c>
    c698:	9885883a 	add	r2,r19,r2
    c69c:	45400015 	stw	r21,0(r8)
    c6a0:	44c00115 	stw	r19,4(r8)
    c6a4:	d8801c15 	stw	r2,112(sp)
    c6a8:	d9001b15 	stw	r4,108(sp)
    c6ac:	00c001c4 	movi	r3,7
    c6b0:	1901dd0e 	bge	r3,r4,ce28 <___vfiprintf_internal_r+0xd88>
    c6b4:	1002401e 	bne	r2,zero,cfb8 <___vfiprintf_internal_r+0xf18>
    c6b8:	d8001b15 	stw	zero,108(sp)
    c6bc:	a2c0010c 	andi	r11,r20,4
    c6c0:	58000226 	beq	r11,zero,c6cc <___vfiprintf_internal_r+0x62c>
    c6c4:	8ca7c83a 	sub	r19,r17,r18
    c6c8:	04c2f216 	blt	zero,r19,d294 <___vfiprintf_internal_r+0x11f4>
    c6cc:	8c80010e 	bge	r17,r18,c6d4 <___vfiprintf_internal_r+0x634>
    c6d0:	9023883a 	mov	r17,r18
    c6d4:	da802317 	ldw	r10,140(sp)
    c6d8:	5455883a 	add	r10,r10,r17
    c6dc:	da802315 	stw	r10,140(sp)
    c6e0:	d8001b15 	stw	zero,108(sp)
    c6e4:	d811883a 	mov	r8,sp
    c6e8:	003ea206 	br	c174 <___vfiprintf_internal_r+0xd4>
    c6ec:	a5000814 	ori	r20,r20,32
    c6f0:	80c00007 	ldb	r3,0(r16)
    c6f4:	003ec906 	br	c21c <___vfiprintf_internal_r+0x17c>
    c6f8:	80c00007 	ldb	r3,0(r16)
    c6fc:	1b030926 	beq	r3,r12,d324 <___vfiprintf_internal_r+0x1284>
    c700:	a5000414 	ori	r20,r20,16
    c704:	003ec506 	br	c21c <___vfiprintf_internal_r+0x17c>
    c708:	21003fcc 	andi	r4,r4,255
    c70c:	20035e1e 	bne	r4,zero,d488 <___vfiprintf_internal_r+0x13e8>
    c710:	a080080c 	andi	r2,r20,32
    c714:	1002a526 	beq	r2,zero,d1ac <___vfiprintf_internal_r+0x110c>
    c718:	da802217 	ldw	r10,136(sp)
    c71c:	50800017 	ldw	r2,0(r10)
    c720:	da802317 	ldw	r10,140(sp)
    c724:	5007d7fa 	srai	r3,r10,31
    c728:	da802217 	ldw	r10,136(sp)
    c72c:	10c00115 	stw	r3,4(r2)
    c730:	52800104 	addi	r10,r10,4
    c734:	da802215 	stw	r10,136(sp)
    c738:	da802317 	ldw	r10,140(sp)
    c73c:	12800015 	stw	r10,0(r2)
    c740:	003e8c06 	br	c174 <___vfiprintf_internal_r+0xd4>
    c744:	21003fcc 	andi	r4,r4,255
    c748:	2003511e 	bne	r4,zero,d490 <___vfiprintf_internal_r+0x13f0>
    c74c:	a080080c 	andi	r2,r20,32
    c750:	1000a126 	beq	r2,zero,c9d8 <___vfiprintf_internal_r+0x938>
    c754:	da802217 	ldw	r10,136(sp)
    c758:	d8001d85 	stb	zero,118(sp)
    c75c:	50800204 	addi	r2,r10,8
    c760:	54800017 	ldw	r18,0(r10)
    c764:	54c00117 	ldw	r19,4(r10)
    c768:	4802b416 	blt	r9,zero,d23c <___vfiprintf_internal_r+0x119c>
    c76c:	013fdfc4 	movi	r4,-129
    c770:	94c6b03a 	or	r3,r18,r19
    c774:	d8802215 	stw	r2,136(sp)
    c778:	a128703a 	and	r20,r20,r4
    c77c:	1800a226 	beq	r3,zero,ca08 <___vfiprintf_internal_r+0x968>
    c780:	0039883a 	mov	fp,zero
    c784:	dd401a04 	addi	r21,sp,104
    c788:	9006d0fa 	srli	r3,r18,3
    c78c:	9808977a 	slli	r4,r19,29
    c790:	9826d0fa 	srli	r19,r19,3
    c794:	948001cc 	andi	r18,r18,7
    c798:	90800c04 	addi	r2,r18,48
    c79c:	ad7fffc4 	addi	r21,r21,-1
    c7a0:	20e4b03a 	or	r18,r4,r3
    c7a4:	a8800005 	stb	r2,0(r21)
    c7a8:	94c6b03a 	or	r3,r18,r19
    c7ac:	183ff61e 	bne	r3,zero,c788 <___vfiprintf_internal_r+0x6e8>
    c7b0:	a0c0004c 	andi	r3,r20,1
    c7b4:	18005926 	beq	r3,zero,c91c <___vfiprintf_internal_r+0x87c>
    c7b8:	10803fcc 	andi	r2,r2,255
    c7bc:	1080201c 	xori	r2,r2,128
    c7c0:	10bfe004 	addi	r2,r2,-128
    c7c4:	00c00c04 	movi	r3,48
    c7c8:	10c05426 	beq	r2,r3,c91c <___vfiprintf_internal_r+0x87c>
    c7cc:	da801e17 	ldw	r10,120(sp)
    c7d0:	a8bfffc4 	addi	r2,r21,-1
    c7d4:	a8ffffc5 	stb	r3,-1(r21)
    c7d8:	50a7c83a 	sub	r19,r10,r2
    c7dc:	102b883a 	mov	r21,r2
    c7e0:	003f2f06 	br	c4a0 <___vfiprintf_internal_r+0x400>
    c7e4:	21003fcc 	andi	r4,r4,255
    c7e8:	2003421e 	bne	r4,zero,d4f4 <___vfiprintf_internal_r+0x1454>
    c7ec:	00800074 	movhi	r2,1
    c7f0:	1093e104 	addi	r2,r2,20356
    c7f4:	d8802615 	stw	r2,152(sp)
    c7f8:	a080080c 	andi	r2,r20,32
    c7fc:	1000aa26 	beq	r2,zero,caa8 <___vfiprintf_internal_r+0xa08>
    c800:	da802217 	ldw	r10,136(sp)
    c804:	54800017 	ldw	r18,0(r10)
    c808:	54c00117 	ldw	r19,4(r10)
    c80c:	52800204 	addi	r10,r10,8
    c810:	da802215 	stw	r10,136(sp)
    c814:	a080004c 	andi	r2,r20,1
    c818:	1001d226 	beq	r2,zero,cf64 <___vfiprintf_internal_r+0xec4>
    c81c:	94c4b03a 	or	r2,r18,r19
    c820:	1002351e 	bne	r2,zero,d0f8 <___vfiprintf_internal_r+0x1058>
    c824:	d8001d85 	stb	zero,118(sp)
    c828:	48022216 	blt	r9,zero,d0b4 <___vfiprintf_internal_r+0x1014>
    c82c:	00bfdfc4 	movi	r2,-129
    c830:	a0a8703a 	and	r20,r20,r2
    c834:	003f1506 	br	c48c <___vfiprintf_internal_r+0x3ec>
    c838:	da802217 	ldw	r10,136(sp)
    c83c:	04800044 	movi	r18,1
    c840:	d8001d85 	stb	zero,118(sp)
    c844:	50800017 	ldw	r2,0(r10)
    c848:	52800104 	addi	r10,r10,4
    c84c:	da802215 	stw	r10,136(sp)
    c850:	d8801005 	stb	r2,64(sp)
    c854:	9027883a 	mov	r19,r18
    c858:	dd401004 	addi	r21,sp,64
    c85c:	0013883a 	mov	r9,zero
    c860:	003f1706 	br	c4c0 <___vfiprintf_internal_r+0x420>
    c864:	21003fcc 	andi	r4,r4,255
    c868:	2003201e 	bne	r4,zero,d4ec <___vfiprintf_internal_r+0x144c>
    c86c:	a080080c 	andi	r2,r20,32
    c870:	10004b26 	beq	r2,zero,c9a0 <___vfiprintf_internal_r+0x900>
    c874:	da802217 	ldw	r10,136(sp)
    c878:	50800117 	ldw	r2,4(r10)
    c87c:	54800017 	ldw	r18,0(r10)
    c880:	52800204 	addi	r10,r10,8
    c884:	da802215 	stw	r10,136(sp)
    c888:	1027883a 	mov	r19,r2
    c88c:	10022c16 	blt	r2,zero,d140 <___vfiprintf_internal_r+0x10a0>
    c890:	df001d83 	ldbu	fp,118(sp)
    c894:	48007216 	blt	r9,zero,ca60 <___vfiprintf_internal_r+0x9c0>
    c898:	00ffdfc4 	movi	r3,-129
    c89c:	94c4b03a 	or	r2,r18,r19
    c8a0:	a0e8703a 	and	r20,r20,r3
    c8a4:	1000cc26 	beq	r2,zero,cbd8 <___vfiprintf_internal_r+0xb38>
    c8a8:	98021026 	beq	r19,zero,d0ec <___vfiprintf_internal_r+0x104c>
    c8ac:	dc402415 	stw	r17,144(sp)
    c8b0:	dc002515 	stw	r16,148(sp)
    c8b4:	9823883a 	mov	r17,r19
    c8b8:	9021883a 	mov	r16,r18
    c8bc:	dd401a04 	addi	r21,sp,104
    c8c0:	4825883a 	mov	r18,r9
    c8c4:	4027883a 	mov	r19,r8
    c8c8:	8009883a 	mov	r4,r16
    c8cc:	880b883a 	mov	r5,r17
    c8d0:	01800284 	movi	r6,10
    c8d4:	000f883a 	mov	r7,zero
    c8d8:	000e4800 	call	e480 <__umoddi3>
    c8dc:	10800c04 	addi	r2,r2,48
    c8e0:	ad7fffc4 	addi	r21,r21,-1
    c8e4:	8009883a 	mov	r4,r16
    c8e8:	880b883a 	mov	r5,r17
    c8ec:	a8800005 	stb	r2,0(r21)
    c8f0:	01800284 	movi	r6,10
    c8f4:	000f883a 	mov	r7,zero
    c8f8:	000df080 	call	df08 <__udivdi3>
    c8fc:	1021883a 	mov	r16,r2
    c900:	10c4b03a 	or	r2,r2,r3
    c904:	1823883a 	mov	r17,r3
    c908:	103fef1e 	bne	r2,zero,c8c8 <___vfiprintf_internal_r+0x828>
    c90c:	dc402417 	ldw	r17,144(sp)
    c910:	dc002517 	ldw	r16,148(sp)
    c914:	9013883a 	mov	r9,r18
    c918:	9811883a 	mov	r8,r19
    c91c:	da801e17 	ldw	r10,120(sp)
    c920:	5567c83a 	sub	r19,r10,r21
    c924:	003ede06 	br	c4a0 <___vfiprintf_internal_r+0x400>
    c928:	38803fcc 	andi	r2,r7,255
    c92c:	1080201c 	xori	r2,r2,128
    c930:	10bfe004 	addi	r2,r2,-128
    c934:	1002371e 	bne	r2,zero,d214 <___vfiprintf_internal_r+0x1174>
    c938:	01000044 	movi	r4,1
    c93c:	01c00804 	movi	r7,32
    c940:	80c00007 	ldb	r3,0(r16)
    c944:	003e3506 	br	c21c <___vfiprintf_internal_r+0x17c>
    c948:	a5000054 	ori	r20,r20,1
    c94c:	80c00007 	ldb	r3,0(r16)
    c950:	003e3206 	br	c21c <___vfiprintf_internal_r+0x17c>
    c954:	a5002014 	ori	r20,r20,128
    c958:	80c00007 	ldb	r3,0(r16)
    c95c:	003e2f06 	br	c21c <___vfiprintf_internal_r+0x17c>
    c960:	8015883a 	mov	r10,r16
    c964:	0023883a 	mov	r17,zero
    c968:	18bff404 	addi	r2,r3,-48
    c96c:	50c00007 	ldb	r3,0(r10)
    c970:	8c4002a4 	muli	r17,r17,10
    c974:	84000044 	addi	r16,r16,1
    c978:	8015883a 	mov	r10,r16
    c97c:	1463883a 	add	r17,r2,r17
    c980:	18bff404 	addi	r2,r3,-48
    c984:	30bff92e 	bgeu	r6,r2,c96c <___vfiprintf_internal_r+0x8cc>
    c988:	003e2506 	br	c220 <___vfiprintf_internal_r+0x180>
    c98c:	21003fcc 	andi	r4,r4,255
    c990:	2002d41e 	bne	r4,zero,d4e4 <___vfiprintf_internal_r+0x1444>
    c994:	a5000414 	ori	r20,r20,16
    c998:	a080080c 	andi	r2,r20,32
    c99c:	103fb51e 	bne	r2,zero,c874 <___vfiprintf_internal_r+0x7d4>
    c9a0:	a080040c 	andi	r2,r20,16
    c9a4:	1001f826 	beq	r2,zero,d188 <___vfiprintf_internal_r+0x10e8>
    c9a8:	da802217 	ldw	r10,136(sp)
    c9ac:	54800017 	ldw	r18,0(r10)
    c9b0:	52800104 	addi	r10,r10,4
    c9b4:	da802215 	stw	r10,136(sp)
    c9b8:	9027d7fa 	srai	r19,r18,31
    c9bc:	9805883a 	mov	r2,r19
    c9c0:	003fb206 	br	c88c <___vfiprintf_internal_r+0x7ec>
    c9c4:	21003fcc 	andi	r4,r4,255
    c9c8:	2002c41e 	bne	r4,zero,d4dc <___vfiprintf_internal_r+0x143c>
    c9cc:	a5000414 	ori	r20,r20,16
    c9d0:	a080080c 	andi	r2,r20,32
    c9d4:	103f5f1e 	bne	r2,zero,c754 <___vfiprintf_internal_r+0x6b4>
    c9d8:	a080040c 	andi	r2,r20,16
    c9dc:	10020f26 	beq	r2,zero,d21c <___vfiprintf_internal_r+0x117c>
    c9e0:	da802217 	ldw	r10,136(sp)
    c9e4:	d8001d85 	stb	zero,118(sp)
    c9e8:	0027883a 	mov	r19,zero
    c9ec:	50800104 	addi	r2,r10,4
    c9f0:	54800017 	ldw	r18,0(r10)
    c9f4:	48021116 	blt	r9,zero,d23c <___vfiprintf_internal_r+0x119c>
    c9f8:	00ffdfc4 	movi	r3,-129
    c9fc:	d8802215 	stw	r2,136(sp)
    ca00:	a0e8703a 	and	r20,r20,r3
    ca04:	903f5e1e 	bne	r18,zero,c780 <___vfiprintf_internal_r+0x6e0>
    ca08:	0039883a 	mov	fp,zero
    ca0c:	4802a626 	beq	r9,zero,d4a8 <___vfiprintf_internal_r+0x1408>
    ca10:	0025883a 	mov	r18,zero
    ca14:	0027883a 	mov	r19,zero
    ca18:	003f5a06 	br	c784 <___vfiprintf_internal_r+0x6e4>
    ca1c:	21003fcc 	andi	r4,r4,255
    ca20:	20029f1e 	bne	r4,zero,d4a0 <___vfiprintf_internal_r+0x1400>
    ca24:	a5000414 	ori	r20,r20,16
    ca28:	a080080c 	andi	r2,r20,32
    ca2c:	10005e1e 	bne	r2,zero,cba8 <___vfiprintf_internal_r+0xb08>
    ca30:	a080040c 	andi	r2,r20,16
    ca34:	1001a21e 	bne	r2,zero,d0c0 <___vfiprintf_internal_r+0x1020>
    ca38:	a080100c 	andi	r2,r20,64
    ca3c:	d8001d85 	stb	zero,118(sp)
    ca40:	da802217 	ldw	r10,136(sp)
    ca44:	1002231e 	bne	r2,zero,d2d4 <___vfiprintf_internal_r+0x1234>
    ca48:	50800104 	addi	r2,r10,4
    ca4c:	54800017 	ldw	r18,0(r10)
    ca50:	0027883a 	mov	r19,zero
    ca54:	4801a00e 	bge	r9,zero,d0d8 <___vfiprintf_internal_r+0x1038>
    ca58:	d8802215 	stw	r2,136(sp)
    ca5c:	0039883a 	mov	fp,zero
    ca60:	94c4b03a 	or	r2,r18,r19
    ca64:	103f901e 	bne	r2,zero,c8a8 <___vfiprintf_internal_r+0x808>
    ca68:	00800044 	movi	r2,1
    ca6c:	10803fcc 	andi	r2,r2,255
    ca70:	00c00044 	movi	r3,1
    ca74:	10c05926 	beq	r2,r3,cbdc <___vfiprintf_internal_r+0xb3c>
    ca78:	00c00084 	movi	r3,2
    ca7c:	10ffe41e 	bne	r2,r3,ca10 <___vfiprintf_internal_r+0x970>
    ca80:	0025883a 	mov	r18,zero
    ca84:	0027883a 	mov	r19,zero
    ca88:	00013d06 	br	cf80 <___vfiprintf_internal_r+0xee0>
    ca8c:	21003fcc 	andi	r4,r4,255
    ca90:	2002811e 	bne	r4,zero,d498 <___vfiprintf_internal_r+0x13f8>
    ca94:	00800074 	movhi	r2,1
    ca98:	1093dc04 	addi	r2,r2,20336
    ca9c:	d8802615 	stw	r2,152(sp)
    caa0:	a080080c 	andi	r2,r20,32
    caa4:	103f561e 	bne	r2,zero,c800 <___vfiprintf_internal_r+0x760>
    caa8:	a080040c 	andi	r2,r20,16
    caac:	1001d126 	beq	r2,zero,d1f4 <___vfiprintf_internal_r+0x1154>
    cab0:	da802217 	ldw	r10,136(sp)
    cab4:	0027883a 	mov	r19,zero
    cab8:	54800017 	ldw	r18,0(r10)
    cabc:	52800104 	addi	r10,r10,4
    cac0:	da802215 	stw	r10,136(sp)
    cac4:	003f5306 	br	c814 <___vfiprintf_internal_r+0x774>
    cac8:	da802217 	ldw	r10,136(sp)
    cacc:	d8001d85 	stb	zero,118(sp)
    cad0:	55400017 	ldw	r21,0(r10)
    cad4:	50c00104 	addi	r3,r10,4
    cad8:	a8024226 	beq	r21,zero,d3e4 <___vfiprintf_internal_r+0x1344>
    cadc:	48021816 	blt	r9,zero,d340 <___vfiprintf_internal_r+0x12a0>
    cae0:	480d883a 	mov	r6,r9
    cae4:	000b883a 	mov	r5,zero
    cae8:	a809883a 	mov	r4,r21
    caec:	d8c02a15 	stw	r3,168(sp)
    caf0:	da002b15 	stw	r8,172(sp)
    caf4:	da402c15 	stw	r9,176(sp)
    caf8:	000a29c0 	call	a29c <memchr>
    cafc:	d8c02a17 	ldw	r3,168(sp)
    cb00:	da002b17 	ldw	r8,172(sp)
    cb04:	da402c17 	ldw	r9,176(sp)
    cb08:	10024826 	beq	r2,zero,d42c <___vfiprintf_internal_r+0x138c>
    cb0c:	1567c83a 	sub	r19,r2,r21
    cb10:	df001d83 	ldbu	fp,118(sp)
    cb14:	d8c02215 	stw	r3,136(sp)
    cb18:	0013883a 	mov	r9,zero
    cb1c:	003e6006 	br	c4a0 <___vfiprintf_internal_r+0x400>
    cb20:	21003fcc 	andi	r4,r4,255
    cb24:	203fc026 	beq	r4,zero,ca28 <___vfiprintf_internal_r+0x988>
    cb28:	d9c01d85 	stb	r7,118(sp)
    cb2c:	003fbe06 	br	ca28 <___vfiprintf_internal_r+0x988>
    cb30:	da802217 	ldw	r10,136(sp)
    cb34:	54400017 	ldw	r17,0(r10)
    cb38:	50800104 	addi	r2,r10,4
    cb3c:	883e3b16 	blt	r17,zero,c42c <___vfiprintf_internal_r+0x38c>
    cb40:	d8802215 	stw	r2,136(sp)
    cb44:	80c00007 	ldb	r3,0(r16)
    cb48:	003db406 	br	c21c <___vfiprintf_internal_r+0x17c>
    cb4c:	01000044 	movi	r4,1
    cb50:	01c00ac4 	movi	r7,43
    cb54:	80c00007 	ldb	r3,0(r16)
    cb58:	003db006 	br	c21c <___vfiprintf_internal_r+0x17c>
    cb5c:	80c00007 	ldb	r3,0(r16)
    cb60:	82800044 	addi	r10,r16,1
    cb64:	1b423c26 	beq	r3,r13,d458 <___vfiprintf_internal_r+0x13b8>
    cb68:	18bff404 	addi	r2,r3,-48
    cb6c:	0013883a 	mov	r9,zero
    cb70:	30822b36 	bltu	r6,r2,d420 <___vfiprintf_internal_r+0x1380>
    cb74:	50c00007 	ldb	r3,0(r10)
    cb78:	4a4002a4 	muli	r9,r9,10
    cb7c:	54000044 	addi	r16,r10,1
    cb80:	8015883a 	mov	r10,r16
    cb84:	4893883a 	add	r9,r9,r2
    cb88:	18bff404 	addi	r2,r3,-48
    cb8c:	30bff92e 	bgeu	r6,r2,cb74 <___vfiprintf_internal_r+0xad4>
    cb90:	483da30e 	bge	r9,zero,c220 <___vfiprintf_internal_r+0x180>
    cb94:	027fffc4 	movi	r9,-1
    cb98:	003da106 	br	c220 <___vfiprintf_internal_r+0x180>
    cb9c:	a5001014 	ori	r20,r20,64
    cba0:	80c00007 	ldb	r3,0(r16)
    cba4:	003d9d06 	br	c21c <___vfiprintf_internal_r+0x17c>
    cba8:	da802217 	ldw	r10,136(sp)
    cbac:	d8001d85 	stb	zero,118(sp)
    cbb0:	50c00204 	addi	r3,r10,8
    cbb4:	54800017 	ldw	r18,0(r10)
    cbb8:	54c00117 	ldw	r19,4(r10)
    cbbc:	4801ca16 	blt	r9,zero,d2e8 <___vfiprintf_internal_r+0x1248>
    cbc0:	013fdfc4 	movi	r4,-129
    cbc4:	94c4b03a 	or	r2,r18,r19
    cbc8:	d8c02215 	stw	r3,136(sp)
    cbcc:	a128703a 	and	r20,r20,r4
    cbd0:	0039883a 	mov	fp,zero
    cbd4:	103f341e 	bne	r2,zero,c8a8 <___vfiprintf_internal_r+0x808>
    cbd8:	483e2e26 	beq	r9,zero,c494 <___vfiprintf_internal_r+0x3f4>
    cbdc:	0025883a 	mov	r18,zero
    cbe0:	94800c04 	addi	r18,r18,48
    cbe4:	dc8019c5 	stb	r18,103(sp)
    cbe8:	dcc02717 	ldw	r19,156(sp)
    cbec:	dd4019c4 	addi	r21,sp,103
    cbf0:	003e2b06 	br	c4a0 <___vfiprintf_internal_r+0x400>
    cbf4:	21003fcc 	andi	r4,r4,255
    cbf8:	2002361e 	bne	r4,zero,d4d4 <___vfiprintf_internal_r+0x1434>
    cbfc:	1801c126 	beq	r3,zero,d304 <___vfiprintf_internal_r+0x1264>
    cc00:	04800044 	movi	r18,1
    cc04:	d8c01005 	stb	r3,64(sp)
    cc08:	d8001d85 	stb	zero,118(sp)
    cc0c:	9027883a 	mov	r19,r18
    cc10:	dd401004 	addi	r21,sp,64
    cc14:	003f1106 	br	c85c <___vfiprintf_internal_r+0x7bc>
    cc18:	d9402117 	ldw	r5,132(sp)
    cc1c:	d9002017 	ldw	r4,128(sp)
    cc20:	d9801a04 	addi	r6,sp,104
    cc24:	d9c02b15 	stw	r7,172(sp)
    cc28:	dbc02a15 	stw	r15,168(sp)
    cc2c:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    cc30:	d9c02b17 	ldw	r7,172(sp)
    cc34:	dbc02a17 	ldw	r15,168(sp)
    cc38:	10006d1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    cc3c:	d9801b17 	ldw	r6,108(sp)
    cc40:	d8801c17 	ldw	r2,112(sp)
    cc44:	d811883a 	mov	r8,sp
    cc48:	31400044 	addi	r5,r6,1
    cc4c:	003e3306 	br	c51c <___vfiprintf_internal_r+0x47c>
    cc50:	d9401b17 	ldw	r5,108(sp)
    cc54:	d8801c17 	ldw	r2,112(sp)
    cc58:	29000044 	addi	r4,r5,1
    cc5c:	d8c01d87 	ldb	r3,118(sp)
    cc60:	183e4d26 	beq	r3,zero,c598 <___vfiprintf_internal_r+0x4f8>
    cc64:	00c00044 	movi	r3,1
    cc68:	d9401d84 	addi	r5,sp,118
    cc6c:	10c5883a 	add	r2,r2,r3
    cc70:	41400015 	stw	r5,0(r8)
    cc74:	40c00115 	stw	r3,4(r8)
    cc78:	d8801c15 	stw	r2,112(sp)
    cc7c:	d9001b15 	stw	r4,108(sp)
    cc80:	014001c4 	movi	r5,7
    cc84:	2900a90e 	bge	r5,r4,cf2c <___vfiprintf_internal_r+0xe8c>
    cc88:	1000da1e 	bne	r2,zero,cff4 <___vfiprintf_internal_r+0xf54>
    cc8c:	7000ab1e 	bne	r14,zero,cf3c <___vfiprintf_internal_r+0xe9c>
    cc90:	000b883a 	mov	r5,zero
    cc94:	1809883a 	mov	r4,r3
    cc98:	d811883a 	mov	r8,sp
    cc9c:	00c02004 	movi	r3,128
    cca0:	e0fe4d26 	beq	fp,r3,c5d8 <___vfiprintf_internal_r+0x538>
    cca4:	4cf9c83a 	sub	fp,r9,r19
    cca8:	073e7b0e 	bge	zero,fp,c698 <___vfiprintf_internal_r+0x5f8>
    ccac:	01c00404 	movi	r7,16
    ccb0:	3f01900e 	bge	r7,fp,d2f4 <___vfiprintf_internal_r+0x1254>
    ccb4:	00c00074 	movhi	r3,1
    ccb8:	18d44204 	addi	r3,r3,20744
    ccbc:	d8c02415 	stw	r3,144(sp)
    ccc0:	034001c4 	movi	r13,7
    ccc4:	00000506 	br	ccdc <___vfiprintf_internal_r+0xc3c>
    ccc8:	29000084 	addi	r4,r5,2
    cccc:	42000204 	addi	r8,r8,8
    ccd0:	180b883a 	mov	r5,r3
    ccd4:	e73ffc04 	addi	fp,fp,-16
    ccd8:	3f000d0e 	bge	r7,fp,cd10 <___vfiprintf_internal_r+0xc70>
    ccdc:	10800404 	addi	r2,r2,16
    cce0:	28c00044 	addi	r3,r5,1
    cce4:	45c00015 	stw	r23,0(r8)
    cce8:	41c00115 	stw	r7,4(r8)
    ccec:	d8801c15 	stw	r2,112(sp)
    ccf0:	d8c01b15 	stw	r3,108(sp)
    ccf4:	68fff40e 	bge	r13,r3,ccc8 <___vfiprintf_internal_r+0xc28>
    ccf8:	1000101e 	bne	r2,zero,cd3c <___vfiprintf_internal_r+0xc9c>
    ccfc:	e73ffc04 	addi	fp,fp,-16
    cd00:	01000044 	movi	r4,1
    cd04:	000b883a 	mov	r5,zero
    cd08:	d811883a 	mov	r8,sp
    cd0c:	3f3ff316 	blt	r7,fp,ccdc <___vfiprintf_internal_r+0xc3c>
    cd10:	da802417 	ldw	r10,144(sp)
    cd14:	1705883a 	add	r2,r2,fp
    cd18:	47000115 	stw	fp,4(r8)
    cd1c:	42800015 	stw	r10,0(r8)
    cd20:	d8801c15 	stw	r2,112(sp)
    cd24:	d9001b15 	stw	r4,108(sp)
    cd28:	00c001c4 	movi	r3,7
    cd2c:	19003616 	blt	r3,r4,ce08 <___vfiprintf_internal_r+0xd68>
    cd30:	42000204 	addi	r8,r8,8
    cd34:	21000044 	addi	r4,r4,1
    cd38:	003e5706 	br	c698 <___vfiprintf_internal_r+0x5f8>
    cd3c:	d9402117 	ldw	r5,132(sp)
    cd40:	d9002017 	ldw	r4,128(sp)
    cd44:	d9801a04 	addi	r6,sp,104
    cd48:	d9c02b15 	stw	r7,172(sp)
    cd4c:	db402a15 	stw	r13,168(sp)
    cd50:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    cd54:	d9c02b17 	ldw	r7,172(sp)
    cd58:	db402a17 	ldw	r13,168(sp)
    cd5c:	1000241e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    cd60:	d9401b17 	ldw	r5,108(sp)
    cd64:	d8801c17 	ldw	r2,112(sp)
    cd68:	d811883a 	mov	r8,sp
    cd6c:	29000044 	addi	r4,r5,1
    cd70:	003fd806 	br	ccd4 <___vfiprintf_internal_r+0xc34>
    cd74:	d9401b17 	ldw	r5,108(sp)
    cd78:	00c00074 	movhi	r3,1
    cd7c:	18d44604 	addi	r3,r3,20760
    cd80:	d8c02415 	stw	r3,144(sp)
    cd84:	29400044 	addi	r5,r5,1
    cd88:	d8c02417 	ldw	r3,144(sp)
    cd8c:	14c5883a 	add	r2,r2,r19
    cd90:	44c00115 	stw	r19,4(r8)
    cd94:	40c00015 	stw	r3,0(r8)
    cd98:	d8801c15 	stw	r2,112(sp)
    cd9c:	d9401b15 	stw	r5,108(sp)
    cda0:	00c001c4 	movi	r3,7
    cda4:	1940070e 	bge	r3,r5,cdc4 <___vfiprintf_internal_r+0xd24>
    cda8:	103e4826 	beq	r2,zero,c6cc <___vfiprintf_internal_r+0x62c>
    cdac:	d9402117 	ldw	r5,132(sp)
    cdb0:	d9002017 	ldw	r4,128(sp)
    cdb4:	d9801a04 	addi	r6,sp,104
    cdb8:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    cdbc:	10000c1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    cdc0:	d8801c17 	ldw	r2,112(sp)
    cdc4:	8c80010e 	bge	r17,r18,cdcc <___vfiprintf_internal_r+0xd2c>
    cdc8:	9023883a 	mov	r17,r18
    cdcc:	da802317 	ldw	r10,140(sp)
    cdd0:	5455883a 	add	r10,r10,r17
    cdd4:	da802315 	stw	r10,140(sp)
    cdd8:	103e4126 	beq	r2,zero,c6e0 <___vfiprintf_internal_r+0x640>
    cddc:	d9402117 	ldw	r5,132(sp)
    cde0:	d9002017 	ldw	r4,128(sp)
    cde4:	d9801a04 	addi	r6,sp,104
    cde8:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    cdec:	103e3c26 	beq	r2,zero,c6e0 <___vfiprintf_internal_r+0x640>
    cdf0:	dd002117 	ldw	r20,132(sp)
    cdf4:	a080030b 	ldhu	r2,12(r20)
    cdf8:	1080100c 	andi	r2,r2,64
    cdfc:	1001231e 	bne	r2,zero,d28c <___vfiprintf_internal_r+0x11ec>
    ce00:	d8802317 	ldw	r2,140(sp)
    ce04:	003d7b06 	br	c3f4 <___vfiprintf_internal_r+0x354>
    ce08:	1000991e 	bne	r2,zero,d070 <___vfiprintf_internal_r+0xfd0>
    ce0c:	00c00044 	movi	r3,1
    ce10:	9805883a 	mov	r2,r19
    ce14:	dd400015 	stw	r21,0(sp)
    ce18:	dcc00115 	stw	r19,4(sp)
    ce1c:	dcc01c15 	stw	r19,112(sp)
    ce20:	d8c01b15 	stw	r3,108(sp)
    ce24:	d811883a 	mov	r8,sp
    ce28:	42000204 	addi	r8,r8,8
    ce2c:	a2c0010c 	andi	r11,r20,4
    ce30:	583fe426 	beq	r11,zero,cdc4 <___vfiprintf_internal_r+0xd24>
    ce34:	8ca7c83a 	sub	r19,r17,r18
    ce38:	04ffe20e 	bge	zero,r19,cdc4 <___vfiprintf_internal_r+0xd24>
    ce3c:	01c00404 	movi	r7,16
    ce40:	3cffcc0e 	bge	r7,r19,cd74 <___vfiprintf_internal_r+0xcd4>
    ce44:	02800074 	movhi	r10,1
    ce48:	52944604 	addi	r10,r10,20760
    ce4c:	d9001b17 	ldw	r4,108(sp)
    ce50:	da802415 	stw	r10,144(sp)
    ce54:	382b883a 	mov	r21,r7
    ce58:	050001c4 	movi	r20,7
    ce5c:	df002017 	ldw	fp,128(sp)
    ce60:	00000506 	br	ce78 <___vfiprintf_internal_r+0xdd8>
    ce64:	21400084 	addi	r5,r4,2
    ce68:	42000204 	addi	r8,r8,8
    ce6c:	1809883a 	mov	r4,r3
    ce70:	9cfffc04 	addi	r19,r19,-16
    ce74:	acffc40e 	bge	r21,r19,cd88 <___vfiprintf_internal_r+0xce8>
    ce78:	10800404 	addi	r2,r2,16
    ce7c:	20c00044 	addi	r3,r4,1
    ce80:	45800015 	stw	r22,0(r8)
    ce84:	45400115 	stw	r21,4(r8)
    ce88:	d8801c15 	stw	r2,112(sp)
    ce8c:	d8c01b15 	stw	r3,108(sp)
    ce90:	a0fff40e 	bge	r20,r3,ce64 <___vfiprintf_internal_r+0xdc4>
    ce94:	1000041e 	bne	r2,zero,cea8 <___vfiprintf_internal_r+0xe08>
    ce98:	01400044 	movi	r5,1
    ce9c:	0009883a 	mov	r4,zero
    cea0:	d811883a 	mov	r8,sp
    cea4:	003ff206 	br	ce70 <___vfiprintf_internal_r+0xdd0>
    cea8:	d9402117 	ldw	r5,132(sp)
    ceac:	d9801a04 	addi	r6,sp,104
    ceb0:	e009883a 	mov	r4,fp
    ceb4:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    ceb8:	103fcd1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    cebc:	d9001b17 	ldw	r4,108(sp)
    cec0:	d8801c17 	ldw	r2,112(sp)
    cec4:	d811883a 	mov	r8,sp
    cec8:	21400044 	addi	r5,r4,1
    cecc:	003fe806 	br	ce70 <___vfiprintf_internal_r+0xdd0>
    ced0:	d9402117 	ldw	r5,132(sp)
    ced4:	d9002017 	ldw	r4,128(sp)
    ced8:	d9801a04 	addi	r6,sp,104
    cedc:	d9c02b15 	stw	r7,172(sp)
    cee0:	db402a15 	stw	r13,168(sp)
    cee4:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    cee8:	d9c02b17 	ldw	r7,172(sp)
    ceec:	db402a17 	ldw	r13,168(sp)
    cef0:	103fbf1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    cef4:	d9401b17 	ldw	r5,108(sp)
    cef8:	d8801c17 	ldw	r2,112(sp)
    cefc:	d811883a 	mov	r8,sp
    cf00:	29800044 	addi	r6,r5,1
    cf04:	003dc406 	br	c618 <___vfiprintf_internal_r+0x578>
    cf08:	1000d21e 	bne	r2,zero,d254 <___vfiprintf_internal_r+0x11b4>
    cf0c:	d8c01d87 	ldb	r3,118(sp)
    cf10:	18009526 	beq	r3,zero,d168 <___vfiprintf_internal_r+0x10c8>
    cf14:	00800044 	movi	r2,1
    cf18:	d8c01d84 	addi	r3,sp,118
    cf1c:	1009883a 	mov	r4,r2
    cf20:	d8c00015 	stw	r3,0(sp)
    cf24:	d8800115 	stw	r2,4(sp)
    cf28:	d811883a 	mov	r8,sp
    cf2c:	200b883a 	mov	r5,r4
    cf30:	42000204 	addi	r8,r8,8
    cf34:	21000044 	addi	r4,r4,1
    cf38:	003d9706 	br	c598 <___vfiprintf_internal_r+0x4f8>
    cf3c:	d9001d04 	addi	r4,sp,116
    cf40:	00800084 	movi	r2,2
    cf44:	d9000015 	stw	r4,0(sp)
    cf48:	d8800115 	stw	r2,4(sp)
    cf4c:	1809883a 	mov	r4,r3
    cf50:	d811883a 	mov	r8,sp
    cf54:	200b883a 	mov	r5,r4
    cf58:	42000204 	addi	r8,r8,8
    cf5c:	21000044 	addi	r4,r4,1
    cf60:	003f4e06 	br	cc9c <___vfiprintf_internal_r+0xbfc>
    cf64:	d8001d85 	stb	zero,118(sp)
    cf68:	48005016 	blt	r9,zero,d0ac <___vfiprintf_internal_r+0x100c>
    cf6c:	00ffdfc4 	movi	r3,-129
    cf70:	94c4b03a 	or	r2,r18,r19
    cf74:	a0e8703a 	and	r20,r20,r3
    cf78:	103d4426 	beq	r2,zero,c48c <___vfiprintf_internal_r+0x3ec>
    cf7c:	0039883a 	mov	fp,zero
    cf80:	d9002617 	ldw	r4,152(sp)
    cf84:	dd401a04 	addi	r21,sp,104
    cf88:	908003cc 	andi	r2,r18,15
    cf8c:	9806973a 	slli	r3,r19,28
    cf90:	2085883a 	add	r2,r4,r2
    cf94:	9024d13a 	srli	r18,r18,4
    cf98:	10800003 	ldbu	r2,0(r2)
    cf9c:	9826d13a 	srli	r19,r19,4
    cfa0:	ad7fffc4 	addi	r21,r21,-1
    cfa4:	1ca4b03a 	or	r18,r3,r18
    cfa8:	a8800005 	stb	r2,0(r21)
    cfac:	94c4b03a 	or	r2,r18,r19
    cfb0:	103ff51e 	bne	r2,zero,cf88 <___vfiprintf_internal_r+0xee8>
    cfb4:	003e5906 	br	c91c <___vfiprintf_internal_r+0x87c>
    cfb8:	d9402117 	ldw	r5,132(sp)
    cfbc:	d9002017 	ldw	r4,128(sp)
    cfc0:	d9801a04 	addi	r6,sp,104
    cfc4:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    cfc8:	103f891e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    cfcc:	d8801c17 	ldw	r2,112(sp)
    cfd0:	d811883a 	mov	r8,sp
    cfd4:	003f9506 	br	ce2c <___vfiprintf_internal_r+0xd8c>
    cfd8:	d9402117 	ldw	r5,132(sp)
    cfdc:	d9002017 	ldw	r4,128(sp)
    cfe0:	d9801a04 	addi	r6,sp,104
    cfe4:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    cfe8:	103f811e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    cfec:	d811883a 	mov	r8,sp
    cff0:	003ced06 	br	c3a8 <___vfiprintf_internal_r+0x308>
    cff4:	d9402117 	ldw	r5,132(sp)
    cff8:	d9002017 	ldw	r4,128(sp)
    cffc:	d9801a04 	addi	r6,sp,104
    d000:	da402c15 	stw	r9,176(sp)
    d004:	db802a15 	stw	r14,168(sp)
    d008:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    d00c:	da402c17 	ldw	r9,176(sp)
    d010:	db802a17 	ldw	r14,168(sp)
    d014:	103f761e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    d018:	d9401b17 	ldw	r5,108(sp)
    d01c:	d8801c17 	ldw	r2,112(sp)
    d020:	d811883a 	mov	r8,sp
    d024:	29000044 	addi	r4,r5,1
    d028:	003d5b06 	br	c598 <___vfiprintf_internal_r+0x4f8>
    d02c:	d9402117 	ldw	r5,132(sp)
    d030:	d9002017 	ldw	r4,128(sp)
    d034:	d9801a04 	addi	r6,sp,104
    d038:	da402c15 	stw	r9,176(sp)
    d03c:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    d040:	da402c17 	ldw	r9,176(sp)
    d044:	103f6a1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    d048:	d9401b17 	ldw	r5,108(sp)
    d04c:	d8801c17 	ldw	r2,112(sp)
    d050:	d811883a 	mov	r8,sp
    d054:	29000044 	addi	r4,r5,1
    d058:	003f1006 	br	cc9c <___vfiprintf_internal_r+0xbfc>
    d05c:	1000c31e 	bne	r2,zero,d36c <___vfiprintf_internal_r+0x12cc>
    d060:	01000044 	movi	r4,1
    d064:	000b883a 	mov	r5,zero
    d068:	d811883a 	mov	r8,sp
    d06c:	003f0d06 	br	cca4 <___vfiprintf_internal_r+0xc04>
    d070:	d9402117 	ldw	r5,132(sp)
    d074:	d9002017 	ldw	r4,128(sp)
    d078:	d9801a04 	addi	r6,sp,104
    d07c:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    d080:	103f5b1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    d084:	d9001b17 	ldw	r4,108(sp)
    d088:	d8801c17 	ldw	r2,112(sp)
    d08c:	d811883a 	mov	r8,sp
    d090:	21000044 	addi	r4,r4,1
    d094:	003d8006 	br	c698 <___vfiprintf_internal_r+0x5f8>
    d098:	01000074 	movhi	r4,1
    d09c:	2113e104 	addi	r4,r4,20356
    d0a0:	d9002615 	stw	r4,152(sp)
    d0a4:	d8c02215 	stw	r3,136(sp)
    d0a8:	1029883a 	mov	r20,r2
    d0ac:	94c4b03a 	or	r2,r18,r19
    d0b0:	103fb21e 	bne	r2,zero,cf7c <___vfiprintf_internal_r+0xedc>
    d0b4:	0039883a 	mov	fp,zero
    d0b8:	00800084 	movi	r2,2
    d0bc:	003e6b06 	br	ca6c <___vfiprintf_internal_r+0x9cc>
    d0c0:	da802217 	ldw	r10,136(sp)
    d0c4:	d8001d85 	stb	zero,118(sp)
    d0c8:	0027883a 	mov	r19,zero
    d0cc:	50800104 	addi	r2,r10,4
    d0d0:	54800017 	ldw	r18,0(r10)
    d0d4:	483e6016 	blt	r9,zero,ca58 <___vfiprintf_internal_r+0x9b8>
    d0d8:	00ffdfc4 	movi	r3,-129
    d0dc:	d8802215 	stw	r2,136(sp)
    d0e0:	a0e8703a 	and	r20,r20,r3
    d0e4:	0039883a 	mov	fp,zero
    d0e8:	903ebb26 	beq	r18,zero,cbd8 <___vfiprintf_internal_r+0xb38>
    d0ec:	00800244 	movi	r2,9
    d0f0:	14bdee36 	bltu	r2,r18,c8ac <___vfiprintf_internal_r+0x80c>
    d0f4:	003eba06 	br	cbe0 <___vfiprintf_internal_r+0xb40>
    d0f8:	00800c04 	movi	r2,48
    d0fc:	d8c01d45 	stb	r3,117(sp)
    d100:	d8801d05 	stb	r2,116(sp)
    d104:	d8001d85 	stb	zero,118(sp)
    d108:	a0c00094 	ori	r3,r20,2
    d10c:	4800a916 	blt	r9,zero,d3b4 <___vfiprintf_internal_r+0x1314>
    d110:	00bfdfc4 	movi	r2,-129
    d114:	a096703a 	and	r11,r20,r2
    d118:	5d000094 	ori	r20,r11,2
    d11c:	0039883a 	mov	fp,zero
    d120:	003f9706 	br	cf80 <___vfiprintf_internal_r+0xee0>
    d124:	8025883a 	mov	r18,r16
    d128:	003c2e06 	br	c1e4 <___vfiprintf_internal_r+0x144>
    d12c:	00800074 	movhi	r2,1
    d130:	1093e104 	addi	r2,r2,20356
    d134:	0039883a 	mov	fp,zero
    d138:	d8802615 	stw	r2,152(sp)
    d13c:	003f9006 	br	cf80 <___vfiprintf_internal_r+0xee0>
    d140:	04a5c83a 	sub	r18,zero,r18
    d144:	07000b44 	movi	fp,45
    d148:	9004c03a 	cmpne	r2,r18,zero
    d14c:	04e7c83a 	sub	r19,zero,r19
    d150:	df001d85 	stb	fp,118(sp)
    d154:	98a7c83a 	sub	r19,r19,r2
    d158:	48009f16 	blt	r9,zero,d3d8 <___vfiprintf_internal_r+0x1338>
    d15c:	00bfdfc4 	movi	r2,-129
    d160:	a0a8703a 	and	r20,r20,r2
    d164:	003dd006 	br	c8a8 <___vfiprintf_internal_r+0x808>
    d168:	70004c26 	beq	r14,zero,d29c <___vfiprintf_internal_r+0x11fc>
    d16c:	00800084 	movi	r2,2
    d170:	d8c01d04 	addi	r3,sp,116
    d174:	d8c00015 	stw	r3,0(sp)
    d178:	d8800115 	stw	r2,4(sp)
    d17c:	01000044 	movi	r4,1
    d180:	d811883a 	mov	r8,sp
    d184:	003f7306 	br	cf54 <___vfiprintf_internal_r+0xeb4>
    d188:	a080100c 	andi	r2,r20,64
    d18c:	da802217 	ldw	r10,136(sp)
    d190:	103e0626 	beq	r2,zero,c9ac <___vfiprintf_internal_r+0x90c>
    d194:	5480000f 	ldh	r18,0(r10)
    d198:	52800104 	addi	r10,r10,4
    d19c:	da802215 	stw	r10,136(sp)
    d1a0:	9027d7fa 	srai	r19,r18,31
    d1a4:	9805883a 	mov	r2,r19
    d1a8:	003db806 	br	c88c <___vfiprintf_internal_r+0x7ec>
    d1ac:	a080040c 	andi	r2,r20,16
    d1b0:	1000091e 	bne	r2,zero,d1d8 <___vfiprintf_internal_r+0x1138>
    d1b4:	a2c0100c 	andi	r11,r20,64
    d1b8:	58000726 	beq	r11,zero,d1d8 <___vfiprintf_internal_r+0x1138>
    d1bc:	da802217 	ldw	r10,136(sp)
    d1c0:	50800017 	ldw	r2,0(r10)
    d1c4:	52800104 	addi	r10,r10,4
    d1c8:	da802215 	stw	r10,136(sp)
    d1cc:	da802317 	ldw	r10,140(sp)
    d1d0:	1280000d 	sth	r10,0(r2)
    d1d4:	003be706 	br	c174 <___vfiprintf_internal_r+0xd4>
    d1d8:	da802217 	ldw	r10,136(sp)
    d1dc:	50800017 	ldw	r2,0(r10)
    d1e0:	52800104 	addi	r10,r10,4
    d1e4:	da802215 	stw	r10,136(sp)
    d1e8:	da802317 	ldw	r10,140(sp)
    d1ec:	12800015 	stw	r10,0(r2)
    d1f0:	003be006 	br	c174 <___vfiprintf_internal_r+0xd4>
    d1f4:	a080100c 	andi	r2,r20,64
    d1f8:	da802217 	ldw	r10,136(sp)
    d1fc:	10003026 	beq	r2,zero,d2c0 <___vfiprintf_internal_r+0x1220>
    d200:	5480000b 	ldhu	r18,0(r10)
    d204:	52800104 	addi	r10,r10,4
    d208:	0027883a 	mov	r19,zero
    d20c:	da802215 	stw	r10,136(sp)
    d210:	003d8006 	br	c814 <___vfiprintf_internal_r+0x774>
    d214:	80c00007 	ldb	r3,0(r16)
    d218:	003c0006 	br	c21c <___vfiprintf_internal_r+0x17c>
    d21c:	a080100c 	andi	r2,r20,64
    d220:	d8001d85 	stb	zero,118(sp)
    d224:	da802217 	ldw	r10,136(sp)
    d228:	1000201e 	bne	r2,zero,d2ac <___vfiprintf_internal_r+0x120c>
    d22c:	50800104 	addi	r2,r10,4
    d230:	54800017 	ldw	r18,0(r10)
    d234:	0027883a 	mov	r19,zero
    d238:	483def0e 	bge	r9,zero,c9f8 <___vfiprintf_internal_r+0x958>
    d23c:	94c6b03a 	or	r3,r18,r19
    d240:	d8802215 	stw	r2,136(sp)
    d244:	183d4e1e 	bne	r3,zero,c780 <___vfiprintf_internal_r+0x6e0>
    d248:	0039883a 	mov	fp,zero
    d24c:	0005883a 	mov	r2,zero
    d250:	003e0606 	br	ca6c <___vfiprintf_internal_r+0x9cc>
    d254:	d9402117 	ldw	r5,132(sp)
    d258:	d9002017 	ldw	r4,128(sp)
    d25c:	d9801a04 	addi	r6,sp,104
    d260:	da402c15 	stw	r9,176(sp)
    d264:	db802a15 	stw	r14,168(sp)
    d268:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    d26c:	da402c17 	ldw	r9,176(sp)
    d270:	db802a17 	ldw	r14,168(sp)
    d274:	103ede1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    d278:	d9401b17 	ldw	r5,108(sp)
    d27c:	d8801c17 	ldw	r2,112(sp)
    d280:	d811883a 	mov	r8,sp
    d284:	29000044 	addi	r4,r5,1
    d288:	003e7406 	br	cc5c <___vfiprintf_internal_r+0xbbc>
    d28c:	00bfffc4 	movi	r2,-1
    d290:	003c5806 	br	c3f4 <___vfiprintf_internal_r+0x354>
    d294:	d811883a 	mov	r8,sp
    d298:	003ee806 	br	ce3c <___vfiprintf_internal_r+0xd9c>
    d29c:	000b883a 	mov	r5,zero
    d2a0:	01000044 	movi	r4,1
    d2a4:	d811883a 	mov	r8,sp
    d2a8:	003e7c06 	br	cc9c <___vfiprintf_internal_r+0xbfc>
    d2ac:	50800104 	addi	r2,r10,4
    d2b0:	5480000b 	ldhu	r18,0(r10)
    d2b4:	0027883a 	mov	r19,zero
    d2b8:	483dcf0e 	bge	r9,zero,c9f8 <___vfiprintf_internal_r+0x958>
    d2bc:	003fdf06 	br	d23c <___vfiprintf_internal_r+0x119c>
    d2c0:	54800017 	ldw	r18,0(r10)
    d2c4:	52800104 	addi	r10,r10,4
    d2c8:	0027883a 	mov	r19,zero
    d2cc:	da802215 	stw	r10,136(sp)
    d2d0:	003d5006 	br	c814 <___vfiprintf_internal_r+0x774>
    d2d4:	50800104 	addi	r2,r10,4
    d2d8:	5480000b 	ldhu	r18,0(r10)
    d2dc:	0027883a 	mov	r19,zero
    d2e0:	483f7d0e 	bge	r9,zero,d0d8 <___vfiprintf_internal_r+0x1038>
    d2e4:	003ddc06 	br	ca58 <___vfiprintf_internal_r+0x9b8>
    d2e8:	d8c02215 	stw	r3,136(sp)
    d2ec:	0039883a 	mov	fp,zero
    d2f0:	003ddb06 	br	ca60 <___vfiprintf_internal_r+0x9c0>
    d2f4:	02800074 	movhi	r10,1
    d2f8:	52944204 	addi	r10,r10,20744
    d2fc:	da802415 	stw	r10,144(sp)
    d300:	003e8306 	br	cd10 <___vfiprintf_internal_r+0xc70>
    d304:	d8801c17 	ldw	r2,112(sp)
    d308:	dd002117 	ldw	r20,132(sp)
    d30c:	103eb926 	beq	r2,zero,cdf4 <___vfiprintf_internal_r+0xd54>
    d310:	d9002017 	ldw	r4,128(sp)
    d314:	d9801a04 	addi	r6,sp,104
    d318:	a00b883a 	mov	r5,r20
    d31c:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    d320:	003eb406 	br	cdf4 <___vfiprintf_internal_r+0xd54>
    d324:	80c00043 	ldbu	r3,1(r16)
    d328:	a5000814 	ori	r20,r20,32
    d32c:	84000044 	addi	r16,r16,1
    d330:	18c03fcc 	andi	r3,r3,255
    d334:	18c0201c 	xori	r3,r3,128
    d338:	18ffe004 	addi	r3,r3,-128
    d33c:	003bb706 	br	c21c <___vfiprintf_internal_r+0x17c>
    d340:	a809883a 	mov	r4,r21
    d344:	d8c02a15 	stw	r3,168(sp)
    d348:	da002b15 	stw	r8,172(sp)
    d34c:	00048980 	call	4898 <strlen>
    d350:	d8c02a17 	ldw	r3,168(sp)
    d354:	1027883a 	mov	r19,r2
    d358:	df001d83 	ldbu	fp,118(sp)
    d35c:	d8c02215 	stw	r3,136(sp)
    d360:	0013883a 	mov	r9,zero
    d364:	da002b17 	ldw	r8,172(sp)
    d368:	003c4d06 	br	c4a0 <___vfiprintf_internal_r+0x400>
    d36c:	d9402117 	ldw	r5,132(sp)
    d370:	d9002017 	ldw	r4,128(sp)
    d374:	d9801a04 	addi	r6,sp,104
    d378:	da402c15 	stw	r9,176(sp)
    d37c:	000bf8c0 	call	bf8c <__sprint_r.part.0>
    d380:	da402c17 	ldw	r9,176(sp)
    d384:	103e9a1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xd50>
    d388:	d9401b17 	ldw	r5,108(sp)
    d38c:	d8801c17 	ldw	r2,112(sp)
    d390:	d811883a 	mov	r8,sp
    d394:	29000044 	addi	r4,r5,1
    d398:	003e4206 	br	cca4 <___vfiprintf_internal_r+0xc04>
    d39c:	d9401b17 	ldw	r5,108(sp)
    d3a0:	01000074 	movhi	r4,1
    d3a4:	21144604 	addi	r4,r4,20760
    d3a8:	d9002415 	stw	r4,144(sp)
    d3ac:	29400044 	addi	r5,r5,1
    d3b0:	003c6d06 	br	c568 <___vfiprintf_internal_r+0x4c8>
    d3b4:	0039883a 	mov	fp,zero
    d3b8:	00800084 	movi	r2,2
    d3bc:	10803fcc 	andi	r2,r2,255
    d3c0:	01000044 	movi	r4,1
    d3c4:	11001e26 	beq	r2,r4,d440 <___vfiprintf_internal_r+0x13a0>
    d3c8:	01000084 	movi	r4,2
    d3cc:	11001e1e 	bne	r2,r4,d448 <___vfiprintf_internal_r+0x13a8>
    d3d0:	1829883a 	mov	r20,r3
    d3d4:	003eea06 	br	cf80 <___vfiprintf_internal_r+0xee0>
    d3d8:	a007883a 	mov	r3,r20
    d3dc:	00800044 	movi	r2,1
    d3e0:	003ff606 	br	d3bc <___vfiprintf_internal_r+0x131c>
    d3e4:	00800184 	movi	r2,6
    d3e8:	1240012e 	bgeu	r2,r9,d3f0 <___vfiprintf_internal_r+0x1350>
    d3ec:	1013883a 	mov	r9,r2
    d3f0:	4827883a 	mov	r19,r9
    d3f4:	4825883a 	mov	r18,r9
    d3f8:	48001516 	blt	r9,zero,d450 <___vfiprintf_internal_r+0x13b0>
    d3fc:	05400074 	movhi	r21,1
    d400:	d8c02215 	stw	r3,136(sp)
    d404:	ad53e604 	addi	r21,r21,20376
    d408:	003d1406 	br	c85c <___vfiprintf_internal_r+0x7bc>
    d40c:	02800074 	movhi	r10,1
    d410:	52944204 	addi	r10,r10,20744
    d414:	da802415 	stw	r10,144(sp)
    d418:	200d883a 	mov	r6,r4
    d41c:	003c9106 	br	c664 <___vfiprintf_internal_r+0x5c4>
    d420:	5021883a 	mov	r16,r10
    d424:	0013883a 	mov	r9,zero
    d428:	003b7d06 	br	c220 <___vfiprintf_internal_r+0x180>
    d42c:	4827883a 	mov	r19,r9
    d430:	df001d83 	ldbu	fp,118(sp)
    d434:	d8c02215 	stw	r3,136(sp)
    d438:	0013883a 	mov	r9,zero
    d43c:	003c1806 	br	c4a0 <___vfiprintf_internal_r+0x400>
    d440:	1829883a 	mov	r20,r3
    d444:	003d1806 	br	c8a8 <___vfiprintf_internal_r+0x808>
    d448:	1829883a 	mov	r20,r3
    d44c:	003ccd06 	br	c784 <___vfiprintf_internal_r+0x6e4>
    d450:	0025883a 	mov	r18,zero
    d454:	003fe906 	br	d3fc <___vfiprintf_internal_r+0x135c>
    d458:	d8802217 	ldw	r2,136(sp)
    d45c:	80c00043 	ldbu	r3,1(r16)
    d460:	5021883a 	mov	r16,r10
    d464:	12400017 	ldw	r9,0(r2)
    d468:	10800104 	addi	r2,r2,4
    d46c:	d8802215 	stw	r2,136(sp)
    d470:	483faf0e 	bge	r9,zero,d330 <___vfiprintf_internal_r+0x1290>
    d474:	18c03fcc 	andi	r3,r3,255
    d478:	18c0201c 	xori	r3,r3,128
    d47c:	027fffc4 	movi	r9,-1
    d480:	18ffe004 	addi	r3,r3,-128
    d484:	003b6506 	br	c21c <___vfiprintf_internal_r+0x17c>
    d488:	d9c01d85 	stb	r7,118(sp)
    d48c:	003ca006 	br	c710 <___vfiprintf_internal_r+0x670>
    d490:	d9c01d85 	stb	r7,118(sp)
    d494:	003cad06 	br	c74c <___vfiprintf_internal_r+0x6ac>
    d498:	d9c01d85 	stb	r7,118(sp)
    d49c:	003d7d06 	br	ca94 <___vfiprintf_internal_r+0x9f4>
    d4a0:	d9c01d85 	stb	r7,118(sp)
    d4a4:	003d5f06 	br	ca24 <___vfiprintf_internal_r+0x984>
    d4a8:	a080004c 	andi	r2,r20,1
    d4ac:	0039883a 	mov	fp,zero
    d4b0:	10000526 	beq	r2,zero,d4c8 <___vfiprintf_internal_r+0x1428>
    d4b4:	00800c04 	movi	r2,48
    d4b8:	d88019c5 	stb	r2,103(sp)
    d4bc:	dcc02717 	ldw	r19,156(sp)
    d4c0:	dd4019c4 	addi	r21,sp,103
    d4c4:	003bf606 	br	c4a0 <___vfiprintf_internal_r+0x400>
    d4c8:	0027883a 	mov	r19,zero
    d4cc:	dd401a04 	addi	r21,sp,104
    d4d0:	003bf306 	br	c4a0 <___vfiprintf_internal_r+0x400>
    d4d4:	d9c01d85 	stb	r7,118(sp)
    d4d8:	003dc806 	br	cbfc <___vfiprintf_internal_r+0xb5c>
    d4dc:	d9c01d85 	stb	r7,118(sp)
    d4e0:	003d3a06 	br	c9cc <___vfiprintf_internal_r+0x92c>
    d4e4:	d9c01d85 	stb	r7,118(sp)
    d4e8:	003d2a06 	br	c994 <___vfiprintf_internal_r+0x8f4>
    d4ec:	d9c01d85 	stb	r7,118(sp)
    d4f0:	003cde06 	br	c86c <___vfiprintf_internal_r+0x7cc>
    d4f4:	d9c01d85 	stb	r7,118(sp)
    d4f8:	003cbc06 	br	c7ec <___vfiprintf_internal_r+0x74c>

0000d4fc <__vfiprintf_internal>:
    d4fc:	00800074 	movhi	r2,1
    d500:	109c3004 	addi	r2,r2,28864
    d504:	300f883a 	mov	r7,r6
    d508:	280d883a 	mov	r6,r5
    d50c:	200b883a 	mov	r5,r4
    d510:	11000017 	ldw	r4,0(r2)
    d514:	000c0a01 	jmpi	c0a0 <___vfiprintf_internal_r>

0000d518 <__sbprintf>:
    d518:	2880030b 	ldhu	r2,12(r5)
    d51c:	2ac01917 	ldw	r11,100(r5)
    d520:	2a80038b 	ldhu	r10,14(r5)
    d524:	2a400717 	ldw	r9,28(r5)
    d528:	2a000917 	ldw	r8,36(r5)
    d52c:	defee204 	addi	sp,sp,-1144
    d530:	00c10004 	movi	r3,1024
    d534:	dc011a15 	stw	r16,1128(sp)
    d538:	10bfff4c 	andi	r2,r2,65533
    d53c:	2821883a 	mov	r16,r5
    d540:	d8cb883a 	add	r5,sp,r3
    d544:	dc811c15 	stw	r18,1136(sp)
    d548:	dc411b15 	stw	r17,1132(sp)
    d54c:	dfc11d15 	stw	ra,1140(sp)
    d550:	2025883a 	mov	r18,r4
    d554:	d881030d 	sth	r2,1036(sp)
    d558:	dac11915 	stw	r11,1124(sp)
    d55c:	da81038d 	sth	r10,1038(sp)
    d560:	da410715 	stw	r9,1052(sp)
    d564:	da010915 	stw	r8,1060(sp)
    d568:	dec10015 	stw	sp,1024(sp)
    d56c:	dec10415 	stw	sp,1040(sp)
    d570:	d8c10215 	stw	r3,1032(sp)
    d574:	d8c10515 	stw	r3,1044(sp)
    d578:	d8010615 	stw	zero,1048(sp)
    d57c:	000c0a00 	call	c0a0 <___vfiprintf_internal_r>
    d580:	1023883a 	mov	r17,r2
    d584:	10000416 	blt	r2,zero,d598 <__sbprintf+0x80>
    d588:	d9410004 	addi	r5,sp,1024
    d58c:	9009883a 	mov	r4,r18
    d590:	00089540 	call	8954 <_fflush_r>
    d594:	10000d1e 	bne	r2,zero,d5cc <__sbprintf+0xb4>
    d598:	d881030b 	ldhu	r2,1036(sp)
    d59c:	1080100c 	andi	r2,r2,64
    d5a0:	10000326 	beq	r2,zero,d5b0 <__sbprintf+0x98>
    d5a4:	8080030b 	ldhu	r2,12(r16)
    d5a8:	10801014 	ori	r2,r2,64
    d5ac:	8080030d 	sth	r2,12(r16)
    d5b0:	8805883a 	mov	r2,r17
    d5b4:	dfc11d17 	ldw	ra,1140(sp)
    d5b8:	dc811c17 	ldw	r18,1136(sp)
    d5bc:	dc411b17 	ldw	r17,1132(sp)
    d5c0:	dc011a17 	ldw	r16,1128(sp)
    d5c4:	dec11e04 	addi	sp,sp,1144
    d5c8:	f800283a 	ret
    d5cc:	047fffc4 	movi	r17,-1
    d5d0:	003ff106 	br	d598 <__sbprintf+0x80>

0000d5d4 <_write_r>:
    d5d4:	defffd04 	addi	sp,sp,-12
    d5d8:	2805883a 	mov	r2,r5
    d5dc:	dc000015 	stw	r16,0(sp)
    d5e0:	040000b4 	movhi	r16,2
    d5e4:	dc400115 	stw	r17,4(sp)
    d5e8:	300b883a 	mov	r5,r6
    d5ec:	84235104 	addi	r16,r16,-29372
    d5f0:	2023883a 	mov	r17,r4
    d5f4:	380d883a 	mov	r6,r7
    d5f8:	1009883a 	mov	r4,r2
    d5fc:	dfc00215 	stw	ra,8(sp)
    d600:	80000015 	stw	zero,0(r16)
    d604:	001189c0 	call	1189c <write>
    d608:	00ffffc4 	movi	r3,-1
    d60c:	10c00526 	beq	r2,r3,d624 <_write_r+0x50>
    d610:	dfc00217 	ldw	ra,8(sp)
    d614:	dc400117 	ldw	r17,4(sp)
    d618:	dc000017 	ldw	r16,0(sp)
    d61c:	dec00304 	addi	sp,sp,12
    d620:	f800283a 	ret
    d624:	80c00017 	ldw	r3,0(r16)
    d628:	183ff926 	beq	r3,zero,d610 <_write_r+0x3c>
    d62c:	88c00015 	stw	r3,0(r17)
    d630:	003ff706 	br	d610 <_write_r+0x3c>

0000d634 <_close_r>:
    d634:	defffd04 	addi	sp,sp,-12
    d638:	dc000015 	stw	r16,0(sp)
    d63c:	040000b4 	movhi	r16,2
    d640:	dc400115 	stw	r17,4(sp)
    d644:	84235104 	addi	r16,r16,-29372
    d648:	2023883a 	mov	r17,r4
    d64c:	2809883a 	mov	r4,r5
    d650:	dfc00215 	stw	ra,8(sp)
    d654:	80000015 	stw	zero,0(r16)
    d658:	001105c0 	call	1105c <close>
    d65c:	00ffffc4 	movi	r3,-1
    d660:	10c00526 	beq	r2,r3,d678 <_close_r+0x44>
    d664:	dfc00217 	ldw	ra,8(sp)
    d668:	dc400117 	ldw	r17,4(sp)
    d66c:	dc000017 	ldw	r16,0(sp)
    d670:	dec00304 	addi	sp,sp,12
    d674:	f800283a 	ret
    d678:	80c00017 	ldw	r3,0(r16)
    d67c:	183ff926 	beq	r3,zero,d664 <_close_r+0x30>
    d680:	88c00015 	stw	r3,0(r17)
    d684:	003ff706 	br	d664 <_close_r+0x30>

0000d688 <_calloc_r>:
    d688:	298b383a 	mul	r5,r5,r6
    d68c:	defffe04 	addi	sp,sp,-8
    d690:	dfc00115 	stw	ra,4(sp)
    d694:	dc000015 	stw	r16,0(sp)
    d698:	0009a900 	call	9a90 <_malloc_r>
    d69c:	10002926 	beq	r2,zero,d744 <_calloc_r+0xbc>
    d6a0:	11bfff17 	ldw	r6,-4(r2)
    d6a4:	1021883a 	mov	r16,r2
    d6a8:	00bfff04 	movi	r2,-4
    d6ac:	308c703a 	and	r6,r6,r2
    d6b0:	00c00904 	movi	r3,36
    d6b4:	308d883a 	add	r6,r6,r2
    d6b8:	19801636 	bltu	r3,r6,d714 <_calloc_r+0x8c>
    d6bc:	008004c4 	movi	r2,19
    d6c0:	11800b2e 	bgeu	r2,r6,d6f0 <_calloc_r+0x68>
    d6c4:	80000015 	stw	zero,0(r16)
    d6c8:	80000115 	stw	zero,4(r16)
    d6cc:	008006c4 	movi	r2,27
    d6d0:	11801a2e 	bgeu	r2,r6,d73c <_calloc_r+0xb4>
    d6d4:	80000215 	stw	zero,8(r16)
    d6d8:	80000315 	stw	zero,12(r16)
    d6dc:	30c0151e 	bne	r6,r3,d734 <_calloc_r+0xac>
    d6e0:	80000415 	stw	zero,16(r16)
    d6e4:	80800604 	addi	r2,r16,24
    d6e8:	80000515 	stw	zero,20(r16)
    d6ec:	00000106 	br	d6f4 <_calloc_r+0x6c>
    d6f0:	8005883a 	mov	r2,r16
    d6f4:	10000015 	stw	zero,0(r2)
    d6f8:	10000115 	stw	zero,4(r2)
    d6fc:	10000215 	stw	zero,8(r2)
    d700:	8005883a 	mov	r2,r16
    d704:	dfc00117 	ldw	ra,4(sp)
    d708:	dc000017 	ldw	r16,0(sp)
    d70c:	dec00204 	addi	sp,sp,8
    d710:	f800283a 	ret
    d714:	000b883a 	mov	r5,zero
    d718:	8009883a 	mov	r4,r16
    d71c:	000a6240 	call	a624 <memset>
    d720:	8005883a 	mov	r2,r16
    d724:	dfc00117 	ldw	ra,4(sp)
    d728:	dc000017 	ldw	r16,0(sp)
    d72c:	dec00204 	addi	sp,sp,8
    d730:	f800283a 	ret
    d734:	80800404 	addi	r2,r16,16
    d738:	003fee06 	br	d6f4 <_calloc_r+0x6c>
    d73c:	80800204 	addi	r2,r16,8
    d740:	003fec06 	br	d6f4 <_calloc_r+0x6c>
    d744:	0005883a 	mov	r2,zero
    d748:	003fee06 	br	d704 <_calloc_r+0x7c>

0000d74c <_fclose_r>:
    d74c:	28003926 	beq	r5,zero,d834 <_fclose_r+0xe8>
    d750:	defffc04 	addi	sp,sp,-16
    d754:	dc400115 	stw	r17,4(sp)
    d758:	dc000015 	stw	r16,0(sp)
    d75c:	dfc00315 	stw	ra,12(sp)
    d760:	dc800215 	stw	r18,8(sp)
    d764:	2023883a 	mov	r17,r4
    d768:	2821883a 	mov	r16,r5
    d76c:	20000226 	beq	r4,zero,d778 <_fclose_r+0x2c>
    d770:	20800e17 	ldw	r2,56(r4)
    d774:	10002726 	beq	r2,zero,d814 <_fclose_r+0xc8>
    d778:	8080030f 	ldh	r2,12(r16)
    d77c:	1000071e 	bne	r2,zero,d79c <_fclose_r+0x50>
    d780:	0005883a 	mov	r2,zero
    d784:	dfc00317 	ldw	ra,12(sp)
    d788:	dc800217 	ldw	r18,8(sp)
    d78c:	dc400117 	ldw	r17,4(sp)
    d790:	dc000017 	ldw	r16,0(sp)
    d794:	dec00404 	addi	sp,sp,16
    d798:	f800283a 	ret
    d79c:	800b883a 	mov	r5,r16
    d7a0:	8809883a 	mov	r4,r17
    d7a4:	00087380 	call	8738 <__sflush_r>
    d7a8:	1025883a 	mov	r18,r2
    d7ac:	80800b17 	ldw	r2,44(r16)
    d7b0:	10000426 	beq	r2,zero,d7c4 <_fclose_r+0x78>
    d7b4:	81400717 	ldw	r5,28(r16)
    d7b8:	8809883a 	mov	r4,r17
    d7bc:	103ee83a 	callr	r2
    d7c0:	10001616 	blt	r2,zero,d81c <_fclose_r+0xd0>
    d7c4:	8080030b 	ldhu	r2,12(r16)
    d7c8:	1080200c 	andi	r2,r2,128
    d7cc:	1000151e 	bne	r2,zero,d824 <_fclose_r+0xd8>
    d7d0:	81400c17 	ldw	r5,48(r16)
    d7d4:	28000526 	beq	r5,zero,d7ec <_fclose_r+0xa0>
    d7d8:	80801004 	addi	r2,r16,64
    d7dc:	28800226 	beq	r5,r2,d7e8 <_fclose_r+0x9c>
    d7e0:	8809883a 	mov	r4,r17
    d7e4:	0008ea40 	call	8ea4 <_free_r>
    d7e8:	80000c15 	stw	zero,48(r16)
    d7ec:	81401117 	ldw	r5,68(r16)
    d7f0:	28000326 	beq	r5,zero,d800 <_fclose_r+0xb4>
    d7f4:	8809883a 	mov	r4,r17
    d7f8:	0008ea40 	call	8ea4 <_free_r>
    d7fc:	80001115 	stw	zero,68(r16)
    d800:	0008d400 	call	8d40 <__sfp_lock_acquire>
    d804:	8000030d 	sth	zero,12(r16)
    d808:	0008d440 	call	8d44 <__sfp_lock_release>
    d80c:	9005883a 	mov	r2,r18
    d810:	003fdc06 	br	d784 <_fclose_r+0x38>
    d814:	0008d300 	call	8d30 <__sinit>
    d818:	003fd706 	br	d778 <_fclose_r+0x2c>
    d81c:	04bfffc4 	movi	r18,-1
    d820:	003fe806 	br	d7c4 <_fclose_r+0x78>
    d824:	81400417 	ldw	r5,16(r16)
    d828:	8809883a 	mov	r4,r17
    d82c:	0008ea40 	call	8ea4 <_free_r>
    d830:	003fe706 	br	d7d0 <_fclose_r+0x84>
    d834:	0005883a 	mov	r2,zero
    d838:	f800283a 	ret

0000d83c <fclose>:
    d83c:	00800074 	movhi	r2,1
    d840:	109c3004 	addi	r2,r2,28864
    d844:	200b883a 	mov	r5,r4
    d848:	11000017 	ldw	r4,0(r2)
    d84c:	000d74c1 	jmpi	d74c <_fclose_r>

0000d850 <__fputwc>:
    d850:	defff804 	addi	sp,sp,-32
    d854:	dcc00415 	stw	r19,16(sp)
    d858:	dc800315 	stw	r18,12(sp)
    d85c:	dc000115 	stw	r16,4(sp)
    d860:	dfc00715 	stw	ra,28(sp)
    d864:	dd400615 	stw	r21,24(sp)
    d868:	dd000515 	stw	r20,20(sp)
    d86c:	dc400215 	stw	r17,8(sp)
    d870:	2027883a 	mov	r19,r4
    d874:	2825883a 	mov	r18,r5
    d878:	3021883a 	mov	r16,r6
    d87c:	00098800 	call	9880 <__locale_mb_cur_max>
    d880:	00c00044 	movi	r3,1
    d884:	10c03e26 	beq	r2,r3,d980 <__fputwc+0x130>
    d888:	81c01704 	addi	r7,r16,92
    d88c:	900d883a 	mov	r6,r18
    d890:	d80b883a 	mov	r5,sp
    d894:	9809883a 	mov	r4,r19
    d898:	000dd200 	call	dd20 <_wcrtomb_r>
    d89c:	1029883a 	mov	r20,r2
    d8a0:	00bfffc4 	movi	r2,-1
    d8a4:	a0802026 	beq	r20,r2,d928 <__fputwc+0xd8>
    d8a8:	d9400003 	ldbu	r5,0(sp)
    d8ac:	a0001c26 	beq	r20,zero,d920 <__fputwc+0xd0>
    d8b0:	0023883a 	mov	r17,zero
    d8b4:	05400284 	movi	r21,10
    d8b8:	00000906 	br	d8e0 <__fputwc+0x90>
    d8bc:	80800017 	ldw	r2,0(r16)
    d8c0:	11400005 	stb	r5,0(r2)
    d8c4:	80c00017 	ldw	r3,0(r16)
    d8c8:	18c00044 	addi	r3,r3,1
    d8cc:	80c00015 	stw	r3,0(r16)
    d8d0:	8c400044 	addi	r17,r17,1
    d8d4:	dc45883a 	add	r2,sp,r17
    d8d8:	8d00112e 	bgeu	r17,r20,d920 <__fputwc+0xd0>
    d8dc:	11400003 	ldbu	r5,0(r2)
    d8e0:	80c00217 	ldw	r3,8(r16)
    d8e4:	18ffffc4 	addi	r3,r3,-1
    d8e8:	80c00215 	stw	r3,8(r16)
    d8ec:	183ff30e 	bge	r3,zero,d8bc <__fputwc+0x6c>
    d8f0:	80800617 	ldw	r2,24(r16)
    d8f4:	18801916 	blt	r3,r2,d95c <__fputwc+0x10c>
    d8f8:	80800017 	ldw	r2,0(r16)
    d8fc:	11400005 	stb	r5,0(r2)
    d900:	80800017 	ldw	r2,0(r16)
    d904:	10c00003 	ldbu	r3,0(r2)
    d908:	10800044 	addi	r2,r2,1
    d90c:	1d402326 	beq	r3,r21,d99c <__fputwc+0x14c>
    d910:	80800015 	stw	r2,0(r16)
    d914:	8c400044 	addi	r17,r17,1
    d918:	dc45883a 	add	r2,sp,r17
    d91c:	8d3fef36 	bltu	r17,r20,d8dc <__fputwc+0x8c>
    d920:	9005883a 	mov	r2,r18
    d924:	00000406 	br	d938 <__fputwc+0xe8>
    d928:	80c0030b 	ldhu	r3,12(r16)
    d92c:	a005883a 	mov	r2,r20
    d930:	18c01014 	ori	r3,r3,64
    d934:	80c0030d 	sth	r3,12(r16)
    d938:	dfc00717 	ldw	ra,28(sp)
    d93c:	dd400617 	ldw	r21,24(sp)
    d940:	dd000517 	ldw	r20,20(sp)
    d944:	dcc00417 	ldw	r19,16(sp)
    d948:	dc800317 	ldw	r18,12(sp)
    d94c:	dc400217 	ldw	r17,8(sp)
    d950:	dc000117 	ldw	r16,4(sp)
    d954:	dec00804 	addi	sp,sp,32
    d958:	f800283a 	ret
    d95c:	800d883a 	mov	r6,r16
    d960:	29403fcc 	andi	r5,r5,255
    d964:	9809883a 	mov	r4,r19
    d968:	000dbc80 	call	dbc8 <__swbuf_r>
    d96c:	10bfffe0 	cmpeqi	r2,r2,-1
    d970:	10803fcc 	andi	r2,r2,255
    d974:	103fd626 	beq	r2,zero,d8d0 <__fputwc+0x80>
    d978:	00bfffc4 	movi	r2,-1
    d97c:	003fee06 	br	d938 <__fputwc+0xe8>
    d980:	90ffffc4 	addi	r3,r18,-1
    d984:	01003f84 	movi	r4,254
    d988:	20ffbf36 	bltu	r4,r3,d888 <__fputwc+0x38>
    d98c:	900b883a 	mov	r5,r18
    d990:	dc800005 	stb	r18,0(sp)
    d994:	1029883a 	mov	r20,r2
    d998:	003fc506 	br	d8b0 <__fputwc+0x60>
    d99c:	800d883a 	mov	r6,r16
    d9a0:	a80b883a 	mov	r5,r21
    d9a4:	9809883a 	mov	r4,r19
    d9a8:	000dbc80 	call	dbc8 <__swbuf_r>
    d9ac:	10bfffe0 	cmpeqi	r2,r2,-1
    d9b0:	003fef06 	br	d970 <__fputwc+0x120>

0000d9b4 <_fputwc_r>:
    d9b4:	3080030b 	ldhu	r2,12(r6)
    d9b8:	10c8000c 	andi	r3,r2,8192
    d9bc:	1800051e 	bne	r3,zero,d9d4 <_fputwc_r+0x20>
    d9c0:	30c01917 	ldw	r3,100(r6)
    d9c4:	10880014 	ori	r2,r2,8192
    d9c8:	3080030d 	sth	r2,12(r6)
    d9cc:	18880014 	ori	r2,r3,8192
    d9d0:	30801915 	stw	r2,100(r6)
    d9d4:	000d8501 	jmpi	d850 <__fputwc>

0000d9d8 <fputwc>:
    d9d8:	00800074 	movhi	r2,1
    d9dc:	defffc04 	addi	sp,sp,-16
    d9e0:	109c3004 	addi	r2,r2,28864
    d9e4:	dc000115 	stw	r16,4(sp)
    d9e8:	14000017 	ldw	r16,0(r2)
    d9ec:	dc400215 	stw	r17,8(sp)
    d9f0:	dfc00315 	stw	ra,12(sp)
    d9f4:	2023883a 	mov	r17,r4
    d9f8:	80000226 	beq	r16,zero,da04 <fputwc+0x2c>
    d9fc:	80800e17 	ldw	r2,56(r16)
    da00:	10001026 	beq	r2,zero,da44 <fputwc+0x6c>
    da04:	2880030b 	ldhu	r2,12(r5)
    da08:	10c8000c 	andi	r3,r2,8192
    da0c:	1800051e 	bne	r3,zero,da24 <fputwc+0x4c>
    da10:	28c01917 	ldw	r3,100(r5)
    da14:	10880014 	ori	r2,r2,8192
    da18:	2880030d 	sth	r2,12(r5)
    da1c:	18880014 	ori	r2,r3,8192
    da20:	28801915 	stw	r2,100(r5)
    da24:	280d883a 	mov	r6,r5
    da28:	8009883a 	mov	r4,r16
    da2c:	880b883a 	mov	r5,r17
    da30:	dfc00317 	ldw	ra,12(sp)
    da34:	dc400217 	ldw	r17,8(sp)
    da38:	dc000117 	ldw	r16,4(sp)
    da3c:	dec00404 	addi	sp,sp,16
    da40:	000d8501 	jmpi	d850 <__fputwc>
    da44:	8009883a 	mov	r4,r16
    da48:	d9400015 	stw	r5,0(sp)
    da4c:	0008d300 	call	8d30 <__sinit>
    da50:	d9400017 	ldw	r5,0(sp)
    da54:	003feb06 	br	da04 <fputwc+0x2c>

0000da58 <_fstat_r>:
    da58:	defffd04 	addi	sp,sp,-12
    da5c:	2805883a 	mov	r2,r5
    da60:	dc000015 	stw	r16,0(sp)
    da64:	040000b4 	movhi	r16,2
    da68:	dc400115 	stw	r17,4(sp)
    da6c:	84235104 	addi	r16,r16,-29372
    da70:	2023883a 	mov	r17,r4
    da74:	300b883a 	mov	r5,r6
    da78:	1009883a 	mov	r4,r2
    da7c:	dfc00215 	stw	ra,8(sp)
    da80:	80000015 	stw	zero,0(r16)
    da84:	00111940 	call	11194 <fstat>
    da88:	00ffffc4 	movi	r3,-1
    da8c:	10c00526 	beq	r2,r3,daa4 <_fstat_r+0x4c>
    da90:	dfc00217 	ldw	ra,8(sp)
    da94:	dc400117 	ldw	r17,4(sp)
    da98:	dc000017 	ldw	r16,0(sp)
    da9c:	dec00304 	addi	sp,sp,12
    daa0:	f800283a 	ret
    daa4:	80c00017 	ldw	r3,0(r16)
    daa8:	183ff926 	beq	r3,zero,da90 <_fstat_r+0x38>
    daac:	88c00015 	stw	r3,0(r17)
    dab0:	003ff706 	br	da90 <_fstat_r+0x38>

0000dab4 <_isatty_r>:
    dab4:	defffd04 	addi	sp,sp,-12
    dab8:	dc000015 	stw	r16,0(sp)
    dabc:	040000b4 	movhi	r16,2
    dac0:	dc400115 	stw	r17,4(sp)
    dac4:	84235104 	addi	r16,r16,-29372
    dac8:	2023883a 	mov	r17,r4
    dacc:	2809883a 	mov	r4,r5
    dad0:	dfc00215 	stw	ra,8(sp)
    dad4:	80000015 	stw	zero,0(r16)
    dad8:	00112800 	call	11280 <isatty>
    dadc:	00ffffc4 	movi	r3,-1
    dae0:	10c00526 	beq	r2,r3,daf8 <_isatty_r+0x44>
    dae4:	dfc00217 	ldw	ra,8(sp)
    dae8:	dc400117 	ldw	r17,4(sp)
    daec:	dc000017 	ldw	r16,0(sp)
    daf0:	dec00304 	addi	sp,sp,12
    daf4:	f800283a 	ret
    daf8:	80c00017 	ldw	r3,0(r16)
    dafc:	183ff926 	beq	r3,zero,dae4 <_isatty_r+0x30>
    db00:	88c00015 	stw	r3,0(r17)
    db04:	003ff706 	br	dae4 <_isatty_r+0x30>

0000db08 <_lseek_r>:
    db08:	defffd04 	addi	sp,sp,-12
    db0c:	2805883a 	mov	r2,r5
    db10:	dc000015 	stw	r16,0(sp)
    db14:	040000b4 	movhi	r16,2
    db18:	dc400115 	stw	r17,4(sp)
    db1c:	300b883a 	mov	r5,r6
    db20:	84235104 	addi	r16,r16,-29372
    db24:	2023883a 	mov	r17,r4
    db28:	380d883a 	mov	r6,r7
    db2c:	1009883a 	mov	r4,r2
    db30:	dfc00215 	stw	ra,8(sp)
    db34:	80000015 	stw	zero,0(r16)
    db38:	001144c0 	call	1144c <lseek>
    db3c:	00ffffc4 	movi	r3,-1
    db40:	10c00526 	beq	r2,r3,db58 <_lseek_r+0x50>
    db44:	dfc00217 	ldw	ra,8(sp)
    db48:	dc400117 	ldw	r17,4(sp)
    db4c:	dc000017 	ldw	r16,0(sp)
    db50:	dec00304 	addi	sp,sp,12
    db54:	f800283a 	ret
    db58:	80c00017 	ldw	r3,0(r16)
    db5c:	183ff926 	beq	r3,zero,db44 <_lseek_r+0x3c>
    db60:	88c00015 	stw	r3,0(r17)
    db64:	003ff706 	br	db44 <_lseek_r+0x3c>

0000db68 <_read_r>:
    db68:	defffd04 	addi	sp,sp,-12
    db6c:	2805883a 	mov	r2,r5
    db70:	dc000015 	stw	r16,0(sp)
    db74:	040000b4 	movhi	r16,2
    db78:	dc400115 	stw	r17,4(sp)
    db7c:	300b883a 	mov	r5,r6
    db80:	84235104 	addi	r16,r16,-29372
    db84:	2023883a 	mov	r17,r4
    db88:	380d883a 	mov	r6,r7
    db8c:	1009883a 	mov	r4,r2
    db90:	dfc00215 	stw	ra,8(sp)
    db94:	80000015 	stw	zero,0(r16)
    db98:	00116200 	call	11620 <read>
    db9c:	00ffffc4 	movi	r3,-1
    dba0:	10c00526 	beq	r2,r3,dbb8 <_read_r+0x50>
    dba4:	dfc00217 	ldw	ra,8(sp)
    dba8:	dc400117 	ldw	r17,4(sp)
    dbac:	dc000017 	ldw	r16,0(sp)
    dbb0:	dec00304 	addi	sp,sp,12
    dbb4:	f800283a 	ret
    dbb8:	80c00017 	ldw	r3,0(r16)
    dbbc:	183ff926 	beq	r3,zero,dba4 <_read_r+0x3c>
    dbc0:	88c00015 	stw	r3,0(r17)
    dbc4:	003ff706 	br	dba4 <_read_r+0x3c>

0000dbc8 <__swbuf_r>:
    dbc8:	defffb04 	addi	sp,sp,-20
    dbcc:	dcc00315 	stw	r19,12(sp)
    dbd0:	dc800215 	stw	r18,8(sp)
    dbd4:	dc000015 	stw	r16,0(sp)
    dbd8:	dfc00415 	stw	ra,16(sp)
    dbdc:	dc400115 	stw	r17,4(sp)
    dbe0:	2025883a 	mov	r18,r4
    dbe4:	2827883a 	mov	r19,r5
    dbe8:	3021883a 	mov	r16,r6
    dbec:	20000226 	beq	r4,zero,dbf8 <__swbuf_r+0x30>
    dbf0:	20800e17 	ldw	r2,56(r4)
    dbf4:	10004226 	beq	r2,zero,dd00 <__swbuf_r+0x138>
    dbf8:	80800617 	ldw	r2,24(r16)
    dbfc:	8100030b 	ldhu	r4,12(r16)
    dc00:	80800215 	stw	r2,8(r16)
    dc04:	2080020c 	andi	r2,r4,8
    dc08:	10003626 	beq	r2,zero,dce4 <__swbuf_r+0x11c>
    dc0c:	80c00417 	ldw	r3,16(r16)
    dc10:	18003426 	beq	r3,zero,dce4 <__swbuf_r+0x11c>
    dc14:	2088000c 	andi	r2,r4,8192
    dc18:	9c403fcc 	andi	r17,r19,255
    dc1c:	10001a26 	beq	r2,zero,dc88 <__swbuf_r+0xc0>
    dc20:	80800017 	ldw	r2,0(r16)
    dc24:	81000517 	ldw	r4,20(r16)
    dc28:	10c7c83a 	sub	r3,r2,r3
    dc2c:	1900200e 	bge	r3,r4,dcb0 <__swbuf_r+0xe8>
    dc30:	18c00044 	addi	r3,r3,1
    dc34:	81000217 	ldw	r4,8(r16)
    dc38:	11400044 	addi	r5,r2,1
    dc3c:	81400015 	stw	r5,0(r16)
    dc40:	213fffc4 	addi	r4,r4,-1
    dc44:	81000215 	stw	r4,8(r16)
    dc48:	14c00005 	stb	r19,0(r2)
    dc4c:	80800517 	ldw	r2,20(r16)
    dc50:	10c01e26 	beq	r2,r3,dccc <__swbuf_r+0x104>
    dc54:	8080030b 	ldhu	r2,12(r16)
    dc58:	1080004c 	andi	r2,r2,1
    dc5c:	10000226 	beq	r2,zero,dc68 <__swbuf_r+0xa0>
    dc60:	00800284 	movi	r2,10
    dc64:	88801926 	beq	r17,r2,dccc <__swbuf_r+0x104>
    dc68:	8805883a 	mov	r2,r17
    dc6c:	dfc00417 	ldw	ra,16(sp)
    dc70:	dcc00317 	ldw	r19,12(sp)
    dc74:	dc800217 	ldw	r18,8(sp)
    dc78:	dc400117 	ldw	r17,4(sp)
    dc7c:	dc000017 	ldw	r16,0(sp)
    dc80:	dec00504 	addi	sp,sp,20
    dc84:	f800283a 	ret
    dc88:	81401917 	ldw	r5,100(r16)
    dc8c:	00b7ffc4 	movi	r2,-8193
    dc90:	21080014 	ori	r4,r4,8192
    dc94:	2884703a 	and	r2,r5,r2
    dc98:	80801915 	stw	r2,100(r16)
    dc9c:	80800017 	ldw	r2,0(r16)
    dca0:	8100030d 	sth	r4,12(r16)
    dca4:	81000517 	ldw	r4,20(r16)
    dca8:	10c7c83a 	sub	r3,r2,r3
    dcac:	193fe016 	blt	r3,r4,dc30 <__swbuf_r+0x68>
    dcb0:	800b883a 	mov	r5,r16
    dcb4:	9009883a 	mov	r4,r18
    dcb8:	00089540 	call	8954 <_fflush_r>
    dcbc:	1000071e 	bne	r2,zero,dcdc <__swbuf_r+0x114>
    dcc0:	80800017 	ldw	r2,0(r16)
    dcc4:	00c00044 	movi	r3,1
    dcc8:	003fda06 	br	dc34 <__swbuf_r+0x6c>
    dccc:	800b883a 	mov	r5,r16
    dcd0:	9009883a 	mov	r4,r18
    dcd4:	00089540 	call	8954 <_fflush_r>
    dcd8:	103fe326 	beq	r2,zero,dc68 <__swbuf_r+0xa0>
    dcdc:	00bfffc4 	movi	r2,-1
    dce0:	003fe206 	br	dc6c <__swbuf_r+0xa4>
    dce4:	800b883a 	mov	r5,r16
    dce8:	9009883a 	mov	r4,r18
    dcec:	0006d5c0 	call	6d5c <__swsetup_r>
    dcf0:	103ffa1e 	bne	r2,zero,dcdc <__swbuf_r+0x114>
    dcf4:	8100030b 	ldhu	r4,12(r16)
    dcf8:	80c00417 	ldw	r3,16(r16)
    dcfc:	003fc506 	br	dc14 <__swbuf_r+0x4c>
    dd00:	0008d300 	call	8d30 <__sinit>
    dd04:	003fbc06 	br	dbf8 <__swbuf_r+0x30>

0000dd08 <__swbuf>:
    dd08:	00800074 	movhi	r2,1
    dd0c:	109c3004 	addi	r2,r2,28864
    dd10:	280d883a 	mov	r6,r5
    dd14:	200b883a 	mov	r5,r4
    dd18:	11000017 	ldw	r4,0(r2)
    dd1c:	000dbc81 	jmpi	dbc8 <__swbuf_r>

0000dd20 <_wcrtomb_r>:
    dd20:	defff604 	addi	sp,sp,-40
    dd24:	00800074 	movhi	r2,1
    dd28:	dc800815 	stw	r18,32(sp)
    dd2c:	dc400715 	stw	r17,28(sp)
    dd30:	dc000615 	stw	r16,24(sp)
    dd34:	109c3404 	addi	r2,r2,28880
    dd38:	dfc00915 	stw	ra,36(sp)
    dd3c:	2021883a 	mov	r16,r4
    dd40:	3823883a 	mov	r17,r7
    dd44:	14800017 	ldw	r18,0(r2)
    dd48:	28001426 	beq	r5,zero,dd9c <_wcrtomb_r+0x7c>
    dd4c:	d9400415 	stw	r5,16(sp)
    dd50:	d9800515 	stw	r6,20(sp)
    dd54:	00098740 	call	9874 <__locale_charset>
    dd58:	d9800517 	ldw	r6,20(sp)
    dd5c:	d9400417 	ldw	r5,16(sp)
    dd60:	100f883a 	mov	r7,r2
    dd64:	dc400015 	stw	r17,0(sp)
    dd68:	8009883a 	mov	r4,r16
    dd6c:	903ee83a 	callr	r18
    dd70:	00ffffc4 	movi	r3,-1
    dd74:	10c0031e 	bne	r2,r3,dd84 <_wcrtomb_r+0x64>
    dd78:	88000015 	stw	zero,0(r17)
    dd7c:	00c02284 	movi	r3,138
    dd80:	80c00015 	stw	r3,0(r16)
    dd84:	dfc00917 	ldw	ra,36(sp)
    dd88:	dc800817 	ldw	r18,32(sp)
    dd8c:	dc400717 	ldw	r17,28(sp)
    dd90:	dc000617 	ldw	r16,24(sp)
    dd94:	dec00a04 	addi	sp,sp,40
    dd98:	f800283a 	ret
    dd9c:	00098740 	call	9874 <__locale_charset>
    dda0:	100f883a 	mov	r7,r2
    dda4:	dc400015 	stw	r17,0(sp)
    dda8:	000d883a 	mov	r6,zero
    ddac:	d9400104 	addi	r5,sp,4
    ddb0:	8009883a 	mov	r4,r16
    ddb4:	903ee83a 	callr	r18
    ddb8:	003fed06 	br	dd70 <_wcrtomb_r+0x50>

0000ddbc <wcrtomb>:
    ddbc:	defff604 	addi	sp,sp,-40
    ddc0:	00800074 	movhi	r2,1
    ddc4:	dc800615 	stw	r18,24(sp)
    ddc8:	dc400515 	stw	r17,20(sp)
    ddcc:	109c3004 	addi	r2,r2,28864
    ddd0:	dfc00915 	stw	ra,36(sp)
    ddd4:	dd000815 	stw	r20,32(sp)
    ddd8:	dcc00715 	stw	r19,28(sp)
    dddc:	dc000415 	stw	r16,16(sp)
    dde0:	3025883a 	mov	r18,r6
    dde4:	14400017 	ldw	r17,0(r2)
    dde8:	20001926 	beq	r4,zero,de50 <wcrtomb+0x94>
    ddec:	00800074 	movhi	r2,1
    ddf0:	109c3404 	addi	r2,r2,28880
    ddf4:	15000017 	ldw	r20,0(r2)
    ddf8:	2021883a 	mov	r16,r4
    ddfc:	2827883a 	mov	r19,r5
    de00:	00098740 	call	9874 <__locale_charset>
    de04:	100f883a 	mov	r7,r2
    de08:	dc800015 	stw	r18,0(sp)
    de0c:	980d883a 	mov	r6,r19
    de10:	800b883a 	mov	r5,r16
    de14:	8809883a 	mov	r4,r17
    de18:	a03ee83a 	callr	r20
    de1c:	00ffffc4 	movi	r3,-1
    de20:	10c0031e 	bne	r2,r3,de30 <wcrtomb+0x74>
    de24:	90000015 	stw	zero,0(r18)
    de28:	00c02284 	movi	r3,138
    de2c:	88c00015 	stw	r3,0(r17)
    de30:	dfc00917 	ldw	ra,36(sp)
    de34:	dd000817 	ldw	r20,32(sp)
    de38:	dcc00717 	ldw	r19,28(sp)
    de3c:	dc800617 	ldw	r18,24(sp)
    de40:	dc400517 	ldw	r17,20(sp)
    de44:	dc000417 	ldw	r16,16(sp)
    de48:	dec00a04 	addi	sp,sp,40
    de4c:	f800283a 	ret
    de50:	00800074 	movhi	r2,1
    de54:	109c3404 	addi	r2,r2,28880
    de58:	14000017 	ldw	r16,0(r2)
    de5c:	00098740 	call	9874 <__locale_charset>
    de60:	100f883a 	mov	r7,r2
    de64:	dc800015 	stw	r18,0(sp)
    de68:	000d883a 	mov	r6,zero
    de6c:	d9400104 	addi	r5,sp,4
    de70:	8809883a 	mov	r4,r17
    de74:	803ee83a 	callr	r16
    de78:	003fe806 	br	de1c <wcrtomb+0x60>

0000de7c <__ascii_wctomb>:
    de7c:	28000526 	beq	r5,zero,de94 <__ascii_wctomb+0x18>
    de80:	00803fc4 	movi	r2,255
    de84:	11800536 	bltu	r2,r6,de9c <__ascii_wctomb+0x20>
    de88:	29800005 	stb	r6,0(r5)
    de8c:	00800044 	movi	r2,1
    de90:	f800283a 	ret
    de94:	0005883a 	mov	r2,zero
    de98:	f800283a 	ret
    de9c:	00802284 	movi	r2,138
    dea0:	20800015 	stw	r2,0(r4)
    dea4:	00bfffc4 	movi	r2,-1
    dea8:	f800283a 	ret

0000deac <_wctomb_r>:
    deac:	00800074 	movhi	r2,1
    deb0:	defff904 	addi	sp,sp,-28
    deb4:	109c3404 	addi	r2,r2,28880
    deb8:	dfc00615 	stw	ra,24(sp)
    debc:	dc400515 	stw	r17,20(sp)
    dec0:	dc000415 	stw	r16,16(sp)
    dec4:	3823883a 	mov	r17,r7
    dec8:	14000017 	ldw	r16,0(r2)
    decc:	d9000115 	stw	r4,4(sp)
    ded0:	d9400215 	stw	r5,8(sp)
    ded4:	d9800315 	stw	r6,12(sp)
    ded8:	00098740 	call	9874 <__locale_charset>
    dedc:	d9800317 	ldw	r6,12(sp)
    dee0:	d9400217 	ldw	r5,8(sp)
    dee4:	d9000117 	ldw	r4,4(sp)
    dee8:	100f883a 	mov	r7,r2
    deec:	dc400015 	stw	r17,0(sp)
    def0:	803ee83a 	callr	r16
    def4:	dfc00617 	ldw	ra,24(sp)
    def8:	dc400517 	ldw	r17,20(sp)
    defc:	dc000417 	ldw	r16,16(sp)
    df00:	dec00704 	addi	sp,sp,28
    df04:	f800283a 	ret

0000df08 <__udivdi3>:
    df08:	defff504 	addi	sp,sp,-44
    df0c:	dcc00415 	stw	r19,16(sp)
    df10:	dc000115 	stw	r16,4(sp)
    df14:	dfc00a15 	stw	ra,40(sp)
    df18:	df000915 	stw	fp,36(sp)
    df1c:	ddc00815 	stw	r23,32(sp)
    df20:	dd800715 	stw	r22,28(sp)
    df24:	dd400615 	stw	r21,24(sp)
    df28:	dd000515 	stw	r20,20(sp)
    df2c:	dc800315 	stw	r18,12(sp)
    df30:	dc400215 	stw	r17,8(sp)
    df34:	2027883a 	mov	r19,r4
    df38:	2821883a 	mov	r16,r5
    df3c:	3800411e 	bne	r7,zero,e044 <__udivdi3+0x13c>
    df40:	3023883a 	mov	r17,r6
    df44:	2025883a 	mov	r18,r4
    df48:	2980522e 	bgeu	r5,r6,e094 <__udivdi3+0x18c>
    df4c:	00bfffd4 	movui	r2,65535
    df50:	282d883a 	mov	r22,r5
    df54:	1180a836 	bltu	r2,r6,e1f8 <__udivdi3+0x2f0>
    df58:	00803fc4 	movi	r2,255
    df5c:	1185803a 	cmpltu	r2,r2,r6
    df60:	100490fa 	slli	r2,r2,3
    df64:	3086d83a 	srl	r3,r6,r2
    df68:	01000074 	movhi	r4,1
    df6c:	21144a04 	addi	r4,r4,20776
    df70:	20c7883a 	add	r3,r4,r3
    df74:	18c00003 	ldbu	r3,0(r3)
    df78:	1885883a 	add	r2,r3,r2
    df7c:	00c00804 	movi	r3,32
    df80:	1887c83a 	sub	r3,r3,r2
    df84:	18000526 	beq	r3,zero,df9c <__udivdi3+0x94>
    df88:	80e0983a 	sll	r16,r16,r3
    df8c:	9884d83a 	srl	r2,r19,r2
    df90:	30e2983a 	sll	r17,r6,r3
    df94:	98e4983a 	sll	r18,r19,r3
    df98:	142cb03a 	or	r22,r2,r16
    df9c:	882ad43a 	srli	r21,r17,16
    dfa0:	b009883a 	mov	r4,r22
    dfa4:	8d3fffcc 	andi	r20,r17,65535
    dfa8:	a80b883a 	mov	r5,r21
    dfac:	00046940 	call	4694 <__umodsi3>
    dfb0:	b009883a 	mov	r4,r22
    dfb4:	a80b883a 	mov	r5,r21
    dfb8:	1027883a 	mov	r19,r2
    dfbc:	00046300 	call	4630 <__udivsi3>
    dfc0:	102d883a 	mov	r22,r2
    dfc4:	9826943a 	slli	r19,r19,16
    dfc8:	9004d43a 	srli	r2,r18,16
    dfcc:	a5a1383a 	mul	r16,r20,r22
    dfd0:	14c4b03a 	or	r2,r2,r19
    dfd4:	1400052e 	bgeu	r2,r16,dfec <__udivdi3+0xe4>
    dfd8:	1445883a 	add	r2,r2,r17
    dfdc:	b0ffffc4 	addi	r3,r22,-1
    dfe0:	14400136 	bltu	r2,r17,dfe8 <__udivdi3+0xe0>
    dfe4:	14012336 	bltu	r2,r16,e474 <__udivdi3+0x56c>
    dfe8:	182d883a 	mov	r22,r3
    dfec:	1421c83a 	sub	r16,r2,r16
    dff0:	a80b883a 	mov	r5,r21
    dff4:	8009883a 	mov	r4,r16
    dff8:	00046940 	call	4694 <__umodsi3>
    dffc:	1027883a 	mov	r19,r2
    e000:	a80b883a 	mov	r5,r21
    e004:	8009883a 	mov	r4,r16
    e008:	00046300 	call	4630 <__udivsi3>
    e00c:	9826943a 	slli	r19,r19,16
    e010:	a0a9383a 	mul	r20,r20,r2
    e014:	94bfffcc 	andi	r18,r18,65535
    e018:	94e4b03a 	or	r18,r18,r19
    e01c:	9500052e 	bgeu	r18,r20,e034 <__udivdi3+0x12c>
    e020:	8ca5883a 	add	r18,r17,r18
    e024:	10ffffc4 	addi	r3,r2,-1
    e028:	9440f136 	bltu	r18,r17,e3f0 <__udivdi3+0x4e8>
    e02c:	9500f02e 	bgeu	r18,r20,e3f0 <__udivdi3+0x4e8>
    e030:	10bfff84 	addi	r2,r2,-2
    e034:	b00c943a 	slli	r6,r22,16
    e038:	0007883a 	mov	r3,zero
    e03c:	3084b03a 	or	r2,r6,r2
    e040:	00005906 	br	e1a8 <__udivdi3+0x2a0>
    e044:	29c05636 	bltu	r5,r7,e1a0 <__udivdi3+0x298>
    e048:	00bfffd4 	movui	r2,65535
    e04c:	11c0622e 	bgeu	r2,r7,e1d8 <__udivdi3+0x2d0>
    e050:	00804034 	movhi	r2,256
    e054:	10bfffc4 	addi	r2,r2,-1
    e058:	11c0ee36 	bltu	r2,r7,e414 <__udivdi3+0x50c>
    e05c:	00800404 	movi	r2,16
    e060:	3886d83a 	srl	r3,r7,r2
    e064:	01000074 	movhi	r4,1
    e068:	21144a04 	addi	r4,r4,20776
    e06c:	20c7883a 	add	r3,r4,r3
    e070:	18c00003 	ldbu	r3,0(r3)
    e074:	05400804 	movi	r21,32
    e078:	1885883a 	add	r2,r3,r2
    e07c:	a8abc83a 	sub	r21,r21,r2
    e080:	a800621e 	bne	r21,zero,e20c <__udivdi3+0x304>
    e084:	3c00e936 	bltu	r7,r16,e42c <__udivdi3+0x524>
    e088:	9985403a 	cmpgeu	r2,r19,r6
    e08c:	0007883a 	mov	r3,zero
    e090:	00004506 	br	e1a8 <__udivdi3+0x2a0>
    e094:	3000041e 	bne	r6,zero,e0a8 <__udivdi3+0x1a0>
    e098:	000b883a 	mov	r5,zero
    e09c:	01000044 	movi	r4,1
    e0a0:	00046300 	call	4630 <__udivsi3>
    e0a4:	1023883a 	mov	r17,r2
    e0a8:	00bfffd4 	movui	r2,65535
    e0ac:	14404e2e 	bgeu	r2,r17,e1e8 <__udivdi3+0x2e0>
    e0b0:	00804034 	movhi	r2,256
    e0b4:	10bfffc4 	addi	r2,r2,-1
    e0b8:	1440d836 	bltu	r2,r17,e41c <__udivdi3+0x514>
    e0bc:	00800404 	movi	r2,16
    e0c0:	8886d83a 	srl	r3,r17,r2
    e0c4:	01000074 	movhi	r4,1
    e0c8:	21144a04 	addi	r4,r4,20776
    e0cc:	20c7883a 	add	r3,r4,r3
    e0d0:	18c00003 	ldbu	r3,0(r3)
    e0d4:	1885883a 	add	r2,r3,r2
    e0d8:	00c00804 	movi	r3,32
    e0dc:	1887c83a 	sub	r3,r3,r2
    e0e0:	18008f1e 	bne	r3,zero,e320 <__udivdi3+0x418>
    e0e4:	882ad43a 	srli	r21,r17,16
    e0e8:	8461c83a 	sub	r16,r16,r17
    e0ec:	8d3fffcc 	andi	r20,r17,65535
    e0f0:	00c00044 	movi	r3,1
    e0f4:	8009883a 	mov	r4,r16
    e0f8:	a80b883a 	mov	r5,r21
    e0fc:	d8c00015 	stw	r3,0(sp)
    e100:	00046940 	call	4694 <__umodsi3>
    e104:	8009883a 	mov	r4,r16
    e108:	a80b883a 	mov	r5,r21
    e10c:	1027883a 	mov	r19,r2
    e110:	00046300 	call	4630 <__udivsi3>
    e114:	9826943a 	slli	r19,r19,16
    e118:	9008d43a 	srli	r4,r18,16
    e11c:	1521383a 	mul	r16,r2,r20
    e120:	102d883a 	mov	r22,r2
    e124:	24c8b03a 	or	r4,r4,r19
    e128:	d8c00017 	ldw	r3,0(sp)
    e12c:	2400052e 	bgeu	r4,r16,e144 <__udivdi3+0x23c>
    e130:	2449883a 	add	r4,r4,r17
    e134:	b0bfffc4 	addi	r2,r22,-1
    e138:	24400136 	bltu	r4,r17,e140 <__udivdi3+0x238>
    e13c:	2400ca36 	bltu	r4,r16,e468 <__udivdi3+0x560>
    e140:	102d883a 	mov	r22,r2
    e144:	2421c83a 	sub	r16,r4,r16
    e148:	a80b883a 	mov	r5,r21
    e14c:	8009883a 	mov	r4,r16
    e150:	d8c00015 	stw	r3,0(sp)
    e154:	00046940 	call	4694 <__umodsi3>
    e158:	1027883a 	mov	r19,r2
    e15c:	a80b883a 	mov	r5,r21
    e160:	8009883a 	mov	r4,r16
    e164:	00046300 	call	4630 <__udivsi3>
    e168:	9826943a 	slli	r19,r19,16
    e16c:	1529383a 	mul	r20,r2,r20
    e170:	94bfffcc 	andi	r18,r18,65535
    e174:	94e4b03a 	or	r18,r18,r19
    e178:	d8c00017 	ldw	r3,0(sp)
    e17c:	9500052e 	bgeu	r18,r20,e194 <__udivdi3+0x28c>
    e180:	8ca5883a 	add	r18,r17,r18
    e184:	113fffc4 	addi	r4,r2,-1
    e188:	94409736 	bltu	r18,r17,e3e8 <__udivdi3+0x4e0>
    e18c:	9500962e 	bgeu	r18,r20,e3e8 <__udivdi3+0x4e0>
    e190:	10bfff84 	addi	r2,r2,-2
    e194:	b00c943a 	slli	r6,r22,16
    e198:	3084b03a 	or	r2,r6,r2
    e19c:	00000206 	br	e1a8 <__udivdi3+0x2a0>
    e1a0:	0007883a 	mov	r3,zero
    e1a4:	0005883a 	mov	r2,zero
    e1a8:	dfc00a17 	ldw	ra,40(sp)
    e1ac:	df000917 	ldw	fp,36(sp)
    e1b0:	ddc00817 	ldw	r23,32(sp)
    e1b4:	dd800717 	ldw	r22,28(sp)
    e1b8:	dd400617 	ldw	r21,24(sp)
    e1bc:	dd000517 	ldw	r20,20(sp)
    e1c0:	dcc00417 	ldw	r19,16(sp)
    e1c4:	dc800317 	ldw	r18,12(sp)
    e1c8:	dc400217 	ldw	r17,8(sp)
    e1cc:	dc000117 	ldw	r16,4(sp)
    e1d0:	dec00b04 	addi	sp,sp,44
    e1d4:	f800283a 	ret
    e1d8:	00803fc4 	movi	r2,255
    e1dc:	11c5803a 	cmpltu	r2,r2,r7
    e1e0:	100490fa 	slli	r2,r2,3
    e1e4:	003f9e06 	br	e060 <__udivdi3+0x158>
    e1e8:	00803fc4 	movi	r2,255
    e1ec:	1445803a 	cmpltu	r2,r2,r17
    e1f0:	100490fa 	slli	r2,r2,3
    e1f4:	003fb206 	br	e0c0 <__udivdi3+0x1b8>
    e1f8:	00804034 	movhi	r2,256
    e1fc:	10bfffc4 	addi	r2,r2,-1
    e200:	11808836 	bltu	r2,r6,e424 <__udivdi3+0x51c>
    e204:	00800404 	movi	r2,16
    e208:	003f5606 	br	df64 <__udivdi3+0x5c>
    e20c:	30aed83a 	srl	r23,r6,r2
    e210:	3d4e983a 	sll	r7,r7,r21
    e214:	80acd83a 	srl	r22,r16,r2
    e218:	9884d83a 	srl	r2,r19,r2
    e21c:	3deeb03a 	or	r23,r7,r23
    e220:	b824d43a 	srli	r18,r23,16
    e224:	8560983a 	sll	r16,r16,r21
    e228:	b009883a 	mov	r4,r22
    e22c:	900b883a 	mov	r5,r18
    e230:	3568983a 	sll	r20,r6,r21
    e234:	1420b03a 	or	r16,r2,r16
    e238:	00046940 	call	4694 <__umodsi3>
    e23c:	b009883a 	mov	r4,r22
    e240:	900b883a 	mov	r5,r18
    e244:	1023883a 	mov	r17,r2
    e248:	00046300 	call	4630 <__udivsi3>
    e24c:	8808943a 	slli	r4,r17,16
    e250:	bf3fffcc 	andi	fp,r23,65535
    e254:	8006d43a 	srli	r3,r16,16
    e258:	e0a3383a 	mul	r17,fp,r2
    e25c:	100d883a 	mov	r6,r2
    e260:	1906b03a 	or	r3,r3,r4
    e264:	1c40042e 	bgeu	r3,r17,e278 <__udivdi3+0x370>
    e268:	1dc7883a 	add	r3,r3,r23
    e26c:	10bfffc4 	addi	r2,r2,-1
    e270:	1dc0752e 	bgeu	r3,r23,e448 <__udivdi3+0x540>
    e274:	100d883a 	mov	r6,r2
    e278:	1c63c83a 	sub	r17,r3,r17
    e27c:	900b883a 	mov	r5,r18
    e280:	8809883a 	mov	r4,r17
    e284:	d9800015 	stw	r6,0(sp)
    e288:	00046940 	call	4694 <__umodsi3>
    e28c:	102d883a 	mov	r22,r2
    e290:	8809883a 	mov	r4,r17
    e294:	900b883a 	mov	r5,r18
    e298:	00046300 	call	4630 <__udivsi3>
    e29c:	b02c943a 	slli	r22,r22,16
    e2a0:	e089383a 	mul	r4,fp,r2
    e2a4:	843fffcc 	andi	r16,r16,65535
    e2a8:	85a0b03a 	or	r16,r16,r22
    e2ac:	d9800017 	ldw	r6,0(sp)
    e2b0:	8100042e 	bgeu	r16,r4,e2c4 <__udivdi3+0x3bc>
    e2b4:	85e1883a 	add	r16,r16,r23
    e2b8:	10ffffc4 	addi	r3,r2,-1
    e2bc:	85c05e2e 	bgeu	r16,r23,e438 <__udivdi3+0x530>
    e2c0:	1805883a 	mov	r2,r3
    e2c4:	300c943a 	slli	r6,r6,16
    e2c8:	a17fffcc 	andi	r5,r20,65535
    e2cc:	a028d43a 	srli	r20,r20,16
    e2d0:	3084b03a 	or	r2,r6,r2
    e2d4:	10ffffcc 	andi	r3,r2,65535
    e2d8:	100cd43a 	srli	r6,r2,16
    e2dc:	194f383a 	mul	r7,r3,r5
    e2e0:	1d07383a 	mul	r3,r3,r20
    e2e4:	314b383a 	mul	r5,r6,r5
    e2e8:	3810d43a 	srli	r8,r7,16
    e2ec:	8121c83a 	sub	r16,r16,r4
    e2f0:	1947883a 	add	r3,r3,r5
    e2f4:	40c7883a 	add	r3,r8,r3
    e2f8:	350d383a 	mul	r6,r6,r20
    e2fc:	1940022e 	bgeu	r3,r5,e308 <__udivdi3+0x400>
    e300:	01000074 	movhi	r4,1
    e304:	310d883a 	add	r6,r6,r4
    e308:	1828d43a 	srli	r20,r3,16
    e30c:	a18d883a 	add	r6,r20,r6
    e310:	81803e36 	bltu	r16,r6,e40c <__udivdi3+0x504>
    e314:	81803826 	beq	r16,r6,e3f8 <__udivdi3+0x4f0>
    e318:	0007883a 	mov	r3,zero
    e31c:	003fa206 	br	e1a8 <__udivdi3+0x2a0>
    e320:	88e2983a 	sll	r17,r17,r3
    e324:	80a8d83a 	srl	r20,r16,r2
    e328:	80e0983a 	sll	r16,r16,r3
    e32c:	882ad43a 	srli	r21,r17,16
    e330:	9884d83a 	srl	r2,r19,r2
    e334:	a009883a 	mov	r4,r20
    e338:	a80b883a 	mov	r5,r21
    e33c:	142eb03a 	or	r23,r2,r16
    e340:	98e4983a 	sll	r18,r19,r3
    e344:	00046940 	call	4694 <__umodsi3>
    e348:	a009883a 	mov	r4,r20
    e34c:	a80b883a 	mov	r5,r21
    e350:	1021883a 	mov	r16,r2
    e354:	00046300 	call	4630 <__udivsi3>
    e358:	1039883a 	mov	fp,r2
    e35c:	8d3fffcc 	andi	r20,r17,65535
    e360:	8020943a 	slli	r16,r16,16
    e364:	b804d43a 	srli	r2,r23,16
    e368:	a72d383a 	mul	r22,r20,fp
    e36c:	1404b03a 	or	r2,r2,r16
    e370:	1580062e 	bgeu	r2,r22,e38c <__udivdi3+0x484>
    e374:	1445883a 	add	r2,r2,r17
    e378:	e0ffffc4 	addi	r3,fp,-1
    e37c:	14403836 	bltu	r2,r17,e460 <__udivdi3+0x558>
    e380:	1580372e 	bgeu	r2,r22,e460 <__udivdi3+0x558>
    e384:	e73fff84 	addi	fp,fp,-2
    e388:	1445883a 	add	r2,r2,r17
    e38c:	15adc83a 	sub	r22,r2,r22
    e390:	a80b883a 	mov	r5,r21
    e394:	b009883a 	mov	r4,r22
    e398:	00046940 	call	4694 <__umodsi3>
    e39c:	1027883a 	mov	r19,r2
    e3a0:	b009883a 	mov	r4,r22
    e3a4:	a80b883a 	mov	r5,r21
    e3a8:	00046300 	call	4630 <__udivsi3>
    e3ac:	9826943a 	slli	r19,r19,16
    e3b0:	a0a1383a 	mul	r16,r20,r2
    e3b4:	b93fffcc 	andi	r4,r23,65535
    e3b8:	24c8b03a 	or	r4,r4,r19
    e3bc:	2400062e 	bgeu	r4,r16,e3d8 <__udivdi3+0x4d0>
    e3c0:	2449883a 	add	r4,r4,r17
    e3c4:	10ffffc4 	addi	r3,r2,-1
    e3c8:	24402336 	bltu	r4,r17,e458 <__udivdi3+0x550>
    e3cc:	2400222e 	bgeu	r4,r16,e458 <__udivdi3+0x550>
    e3d0:	10bfff84 	addi	r2,r2,-2
    e3d4:	2449883a 	add	r4,r4,r17
    e3d8:	e038943a 	slli	fp,fp,16
    e3dc:	2421c83a 	sub	r16,r4,r16
    e3e0:	e086b03a 	or	r3,fp,r2
    e3e4:	003f4306 	br	e0f4 <__udivdi3+0x1ec>
    e3e8:	2005883a 	mov	r2,r4
    e3ec:	003f6906 	br	e194 <__udivdi3+0x28c>
    e3f0:	1805883a 	mov	r2,r3
    e3f4:	003f0f06 	br	e034 <__udivdi3+0x12c>
    e3f8:	1806943a 	slli	r3,r3,16
    e3fc:	9d66983a 	sll	r19,r19,r21
    e400:	39ffffcc 	andi	r7,r7,65535
    e404:	19c7883a 	add	r3,r3,r7
    e408:	98ffc32e 	bgeu	r19,r3,e318 <__udivdi3+0x410>
    e40c:	10bfffc4 	addi	r2,r2,-1
    e410:	003fc106 	br	e318 <__udivdi3+0x410>
    e414:	00800604 	movi	r2,24
    e418:	003f1106 	br	e060 <__udivdi3+0x158>
    e41c:	00800604 	movi	r2,24
    e420:	003f2706 	br	e0c0 <__udivdi3+0x1b8>
    e424:	00800604 	movi	r2,24
    e428:	003ece06 	br	df64 <__udivdi3+0x5c>
    e42c:	0007883a 	mov	r3,zero
    e430:	00800044 	movi	r2,1
    e434:	003f5c06 	br	e1a8 <__udivdi3+0x2a0>
    e438:	813fa12e 	bgeu	r16,r4,e2c0 <__udivdi3+0x3b8>
    e43c:	10bfff84 	addi	r2,r2,-2
    e440:	85e1883a 	add	r16,r16,r23
    e444:	003f9f06 	br	e2c4 <__udivdi3+0x3bc>
    e448:	1c7f8a2e 	bgeu	r3,r17,e274 <__udivdi3+0x36c>
    e44c:	31bfff84 	addi	r6,r6,-2
    e450:	1dc7883a 	add	r3,r3,r23
    e454:	003f8806 	br	e278 <__udivdi3+0x370>
    e458:	1805883a 	mov	r2,r3
    e45c:	003fde06 	br	e3d8 <__udivdi3+0x4d0>
    e460:	1839883a 	mov	fp,r3
    e464:	003fc906 	br	e38c <__udivdi3+0x484>
    e468:	b5bfff84 	addi	r22,r22,-2
    e46c:	2449883a 	add	r4,r4,r17
    e470:	003f3406 	br	e144 <__udivdi3+0x23c>
    e474:	b5bfff84 	addi	r22,r22,-2
    e478:	1445883a 	add	r2,r2,r17
    e47c:	003edb06 	br	dfec <__udivdi3+0xe4>

0000e480 <__umoddi3>:
    e480:	defff404 	addi	sp,sp,-48
    e484:	df000a15 	stw	fp,40(sp)
    e488:	dc400315 	stw	r17,12(sp)
    e48c:	dc000215 	stw	r16,8(sp)
    e490:	dfc00b15 	stw	ra,44(sp)
    e494:	ddc00915 	stw	r23,36(sp)
    e498:	dd800815 	stw	r22,32(sp)
    e49c:	dd400715 	stw	r21,28(sp)
    e4a0:	dd000615 	stw	r20,24(sp)
    e4a4:	dcc00515 	stw	r19,20(sp)
    e4a8:	dc800415 	stw	r18,16(sp)
    e4ac:	2021883a 	mov	r16,r4
    e4b0:	2823883a 	mov	r17,r5
    e4b4:	2839883a 	mov	fp,r5
    e4b8:	38003c1e 	bne	r7,zero,e5ac <__umoddi3+0x12c>
    e4bc:	3027883a 	mov	r19,r6
    e4c0:	2029883a 	mov	r20,r4
    e4c4:	2980512e 	bgeu	r5,r6,e60c <__umoddi3+0x18c>
    e4c8:	00bfffd4 	movui	r2,65535
    e4cc:	11809a36 	bltu	r2,r6,e738 <__umoddi3+0x2b8>
    e4d0:	01003fc4 	movi	r4,255
    e4d4:	2189803a 	cmpltu	r4,r4,r6
    e4d8:	200890fa 	slli	r4,r4,3
    e4dc:	3104d83a 	srl	r2,r6,r4
    e4e0:	00c00074 	movhi	r3,1
    e4e4:	18d44a04 	addi	r3,r3,20776
    e4e8:	1885883a 	add	r2,r3,r2
    e4ec:	10c00003 	ldbu	r3,0(r2)
    e4f0:	00800804 	movi	r2,32
    e4f4:	1909883a 	add	r4,r3,r4
    e4f8:	1125c83a 	sub	r18,r2,r4
    e4fc:	90000526 	beq	r18,zero,e514 <__umoddi3+0x94>
    e500:	8ca2983a 	sll	r17,r17,r18
    e504:	8108d83a 	srl	r4,r16,r4
    e508:	34a6983a 	sll	r19,r6,r18
    e50c:	84a8983a 	sll	r20,r16,r18
    e510:	2478b03a 	or	fp,r4,r17
    e514:	982ed43a 	srli	r23,r19,16
    e518:	e009883a 	mov	r4,fp
    e51c:	9dbfffcc 	andi	r22,r19,65535
    e520:	b80b883a 	mov	r5,r23
    e524:	00046940 	call	4694 <__umodsi3>
    e528:	e009883a 	mov	r4,fp
    e52c:	b80b883a 	mov	r5,r23
    e530:	102b883a 	mov	r21,r2
    e534:	00046300 	call	4630 <__udivsi3>
    e538:	a806943a 	slli	r3,r21,16
    e53c:	a008d43a 	srli	r4,r20,16
    e540:	b085383a 	mul	r2,r22,r2
    e544:	20c8b03a 	or	r4,r4,r3
    e548:	2080032e 	bgeu	r4,r2,e558 <__umoddi3+0xd8>
    e54c:	24c9883a 	add	r4,r4,r19
    e550:	24c00136 	bltu	r4,r19,e558 <__umoddi3+0xd8>
    e554:	20811036 	bltu	r4,r2,e998 <__umoddi3+0x518>
    e558:	20abc83a 	sub	r21,r4,r2
    e55c:	b80b883a 	mov	r5,r23
    e560:	a809883a 	mov	r4,r21
    e564:	00046940 	call	4694 <__umodsi3>
    e568:	1023883a 	mov	r17,r2
    e56c:	b80b883a 	mov	r5,r23
    e570:	a809883a 	mov	r4,r21
    e574:	00046300 	call	4630 <__udivsi3>
    e578:	8822943a 	slli	r17,r17,16
    e57c:	b085383a 	mul	r2,r22,r2
    e580:	a0ffffcc 	andi	r3,r20,65535
    e584:	1c46b03a 	or	r3,r3,r17
    e588:	1880042e 	bgeu	r3,r2,e59c <__umoddi3+0x11c>
    e58c:	1cc7883a 	add	r3,r3,r19
    e590:	1cc00236 	bltu	r3,r19,e59c <__umoddi3+0x11c>
    e594:	1880012e 	bgeu	r3,r2,e59c <__umoddi3+0x11c>
    e598:	1cc7883a 	add	r3,r3,r19
    e59c:	1885c83a 	sub	r2,r3,r2
    e5a0:	1484d83a 	srl	r2,r2,r18
    e5a4:	0007883a 	mov	r3,zero
    e5a8:	00004f06 	br	e6e8 <__umoddi3+0x268>
    e5ac:	29c04c36 	bltu	r5,r7,e6e0 <__umoddi3+0x260>
    e5b0:	00bfffd4 	movui	r2,65535
    e5b4:	11c0582e 	bgeu	r2,r7,e718 <__umoddi3+0x298>
    e5b8:	00804034 	movhi	r2,256
    e5bc:	10bfffc4 	addi	r2,r2,-1
    e5c0:	11c0e736 	bltu	r2,r7,e960 <__umoddi3+0x4e0>
    e5c4:	01000404 	movi	r4,16
    e5c8:	3904d83a 	srl	r2,r7,r4
    e5cc:	00c00074 	movhi	r3,1
    e5d0:	18d44a04 	addi	r3,r3,20776
    e5d4:	1885883a 	add	r2,r3,r2
    e5d8:	14c00003 	ldbu	r19,0(r2)
    e5dc:	00c00804 	movi	r3,32
    e5e0:	9927883a 	add	r19,r19,r4
    e5e4:	1ce9c83a 	sub	r20,r3,r19
    e5e8:	a000581e 	bne	r20,zero,e74c <__umoddi3+0x2cc>
    e5ec:	3c400136 	bltu	r7,r17,e5f4 <__umoddi3+0x174>
    e5f0:	8180eb36 	bltu	r16,r6,e9a0 <__umoddi3+0x520>
    e5f4:	8185c83a 	sub	r2,r16,r6
    e5f8:	89e3c83a 	sub	r17,r17,r7
    e5fc:	8089803a 	cmpltu	r4,r16,r2
    e600:	8939c83a 	sub	fp,r17,r4
    e604:	e007883a 	mov	r3,fp
    e608:	00003706 	br	e6e8 <__umoddi3+0x268>
    e60c:	3000041e 	bne	r6,zero,e620 <__umoddi3+0x1a0>
    e610:	000b883a 	mov	r5,zero
    e614:	01000044 	movi	r4,1
    e618:	00046300 	call	4630 <__udivsi3>
    e61c:	1027883a 	mov	r19,r2
    e620:	00bfffd4 	movui	r2,65535
    e624:	14c0402e 	bgeu	r2,r19,e728 <__umoddi3+0x2a8>
    e628:	00804034 	movhi	r2,256
    e62c:	10bfffc4 	addi	r2,r2,-1
    e630:	14c0cd36 	bltu	r2,r19,e968 <__umoddi3+0x4e8>
    e634:	00800404 	movi	r2,16
    e638:	9886d83a 	srl	r3,r19,r2
    e63c:	01000074 	movhi	r4,1
    e640:	21144a04 	addi	r4,r4,20776
    e644:	20c7883a 	add	r3,r4,r3
    e648:	18c00003 	ldbu	r3,0(r3)
    e64c:	1887883a 	add	r3,r3,r2
    e650:	00800804 	movi	r2,32
    e654:	10e5c83a 	sub	r18,r2,r3
    e658:	9000901e 	bne	r18,zero,e89c <__umoddi3+0x41c>
    e65c:	982cd43a 	srli	r22,r19,16
    e660:	8ce3c83a 	sub	r17,r17,r19
    e664:	9d7fffcc 	andi	r21,r19,65535
    e668:	b00b883a 	mov	r5,r22
    e66c:	8809883a 	mov	r4,r17
    e670:	00046940 	call	4694 <__umodsi3>
    e674:	8809883a 	mov	r4,r17
    e678:	b00b883a 	mov	r5,r22
    e67c:	1021883a 	mov	r16,r2
    e680:	00046300 	call	4630 <__udivsi3>
    e684:	8006943a 	slli	r3,r16,16
    e688:	a008d43a 	srli	r4,r20,16
    e68c:	1545383a 	mul	r2,r2,r21
    e690:	20c8b03a 	or	r4,r4,r3
    e694:	2080042e 	bgeu	r4,r2,e6a8 <__umoddi3+0x228>
    e698:	24c9883a 	add	r4,r4,r19
    e69c:	24c00236 	bltu	r4,r19,e6a8 <__umoddi3+0x228>
    e6a0:	2080012e 	bgeu	r4,r2,e6a8 <__umoddi3+0x228>
    e6a4:	24c9883a 	add	r4,r4,r19
    e6a8:	20a1c83a 	sub	r16,r4,r2
    e6ac:	b00b883a 	mov	r5,r22
    e6b0:	8009883a 	mov	r4,r16
    e6b4:	00046940 	call	4694 <__umodsi3>
    e6b8:	1023883a 	mov	r17,r2
    e6bc:	b00b883a 	mov	r5,r22
    e6c0:	8009883a 	mov	r4,r16
    e6c4:	00046300 	call	4630 <__udivsi3>
    e6c8:	8822943a 	slli	r17,r17,16
    e6cc:	1545383a 	mul	r2,r2,r21
    e6d0:	a53fffcc 	andi	r20,r20,65535
    e6d4:	a446b03a 	or	r3,r20,r17
    e6d8:	18bfb02e 	bgeu	r3,r2,e59c <__umoddi3+0x11c>
    e6dc:	003fab06 	br	e58c <__umoddi3+0x10c>
    e6e0:	2005883a 	mov	r2,r4
    e6e4:	2807883a 	mov	r3,r5
    e6e8:	dfc00b17 	ldw	ra,44(sp)
    e6ec:	df000a17 	ldw	fp,40(sp)
    e6f0:	ddc00917 	ldw	r23,36(sp)
    e6f4:	dd800817 	ldw	r22,32(sp)
    e6f8:	dd400717 	ldw	r21,28(sp)
    e6fc:	dd000617 	ldw	r20,24(sp)
    e700:	dcc00517 	ldw	r19,20(sp)
    e704:	dc800417 	ldw	r18,16(sp)
    e708:	dc400317 	ldw	r17,12(sp)
    e70c:	dc000217 	ldw	r16,8(sp)
    e710:	dec00c04 	addi	sp,sp,48
    e714:	f800283a 	ret
    e718:	04c03fc4 	movi	r19,255
    e71c:	99c9803a 	cmpltu	r4,r19,r7
    e720:	200890fa 	slli	r4,r4,3
    e724:	003fa806 	br	e5c8 <__umoddi3+0x148>
    e728:	00803fc4 	movi	r2,255
    e72c:	14c5803a 	cmpltu	r2,r2,r19
    e730:	100490fa 	slli	r2,r2,3
    e734:	003fc006 	br	e638 <__umoddi3+0x1b8>
    e738:	00804034 	movhi	r2,256
    e73c:	10bfffc4 	addi	r2,r2,-1
    e740:	11808b36 	bltu	r2,r6,e970 <__umoddi3+0x4f0>
    e744:	01000404 	movi	r4,16
    e748:	003f6406 	br	e4dc <__umoddi3+0x5c>
    e74c:	34c4d83a 	srl	r2,r6,r19
    e750:	3d0e983a 	sll	r7,r7,r20
    e754:	8cf8d83a 	srl	fp,r17,r19
    e758:	8d10983a 	sll	r8,r17,r20
    e75c:	38aab03a 	or	r21,r7,r2
    e760:	a82cd43a 	srli	r22,r21,16
    e764:	84e2d83a 	srl	r17,r16,r19
    e768:	e009883a 	mov	r4,fp
    e76c:	b00b883a 	mov	r5,r22
    e770:	8a22b03a 	or	r17,r17,r8
    e774:	3524983a 	sll	r18,r6,r20
    e778:	00046940 	call	4694 <__umodsi3>
    e77c:	e009883a 	mov	r4,fp
    e780:	b00b883a 	mov	r5,r22
    e784:	102f883a 	mov	r23,r2
    e788:	00046300 	call	4630 <__udivsi3>
    e78c:	100d883a 	mov	r6,r2
    e790:	b808943a 	slli	r4,r23,16
    e794:	aa3fffcc 	andi	r8,r21,65535
    e798:	8804d43a 	srli	r2,r17,16
    e79c:	41af383a 	mul	r23,r8,r6
    e7a0:	8520983a 	sll	r16,r16,r20
    e7a4:	1104b03a 	or	r2,r2,r4
    e7a8:	15c0042e 	bgeu	r2,r23,e7bc <__umoddi3+0x33c>
    e7ac:	1545883a 	add	r2,r2,r21
    e7b0:	30ffffc4 	addi	r3,r6,-1
    e7b4:	1540742e 	bgeu	r2,r21,e988 <__umoddi3+0x508>
    e7b8:	180d883a 	mov	r6,r3
    e7bc:	15efc83a 	sub	r23,r2,r23
    e7c0:	b00b883a 	mov	r5,r22
    e7c4:	b809883a 	mov	r4,r23
    e7c8:	d9800115 	stw	r6,4(sp)
    e7cc:	da000015 	stw	r8,0(sp)
    e7d0:	00046940 	call	4694 <__umodsi3>
    e7d4:	b00b883a 	mov	r5,r22
    e7d8:	b809883a 	mov	r4,r23
    e7dc:	1039883a 	mov	fp,r2
    e7e0:	00046300 	call	4630 <__udivsi3>
    e7e4:	da000017 	ldw	r8,0(sp)
    e7e8:	e038943a 	slli	fp,fp,16
    e7ec:	100b883a 	mov	r5,r2
    e7f0:	4089383a 	mul	r4,r8,r2
    e7f4:	8a3fffcc 	andi	r8,r17,65535
    e7f8:	4710b03a 	or	r8,r8,fp
    e7fc:	d9800117 	ldw	r6,4(sp)
    e800:	4100042e 	bgeu	r8,r4,e814 <__umoddi3+0x394>
    e804:	4551883a 	add	r8,r8,r21
    e808:	10bfffc4 	addi	r2,r2,-1
    e80c:	45405a2e 	bgeu	r8,r21,e978 <__umoddi3+0x4f8>
    e810:	100b883a 	mov	r5,r2
    e814:	300c943a 	slli	r6,r6,16
    e818:	91ffffcc 	andi	r7,r18,65535
    e81c:	9004d43a 	srli	r2,r18,16
    e820:	314cb03a 	or	r6,r6,r5
    e824:	317fffcc 	andi	r5,r6,65535
    e828:	300cd43a 	srli	r6,r6,16
    e82c:	29d3383a 	mul	r9,r5,r7
    e830:	288b383a 	mul	r5,r5,r2
    e834:	31cf383a 	mul	r7,r6,r7
    e838:	4806d43a 	srli	r3,r9,16
    e83c:	4111c83a 	sub	r8,r8,r4
    e840:	29cb883a 	add	r5,r5,r7
    e844:	194b883a 	add	r5,r3,r5
    e848:	3085383a 	mul	r2,r6,r2
    e84c:	29c0022e 	bgeu	r5,r7,e858 <__umoddi3+0x3d8>
    e850:	00c00074 	movhi	r3,1
    e854:	10c5883a 	add	r2,r2,r3
    e858:	2808d43a 	srli	r4,r5,16
    e85c:	280a943a 	slli	r5,r5,16
    e860:	4a7fffcc 	andi	r9,r9,65535
    e864:	2085883a 	add	r2,r4,r2
    e868:	2a4b883a 	add	r5,r5,r9
    e86c:	40803636 	bltu	r8,r2,e948 <__umoddi3+0x4c8>
    e870:	40804d26 	beq	r8,r2,e9a8 <__umoddi3+0x528>
    e874:	4089c83a 	sub	r4,r8,r2
    e878:	280f883a 	mov	r7,r5
    e87c:	81cfc83a 	sub	r7,r16,r7
    e880:	81c7803a 	cmpltu	r3,r16,r7
    e884:	20c7c83a 	sub	r3,r4,r3
    e888:	1cc4983a 	sll	r2,r3,r19
    e88c:	3d0ed83a 	srl	r7,r7,r20
    e890:	1d06d83a 	srl	r3,r3,r20
    e894:	11c4b03a 	or	r2,r2,r7
    e898:	003f9306 	br	e6e8 <__umoddi3+0x268>
    e89c:	9ca6983a 	sll	r19,r19,r18
    e8a0:	88e8d83a 	srl	r20,r17,r3
    e8a4:	80c4d83a 	srl	r2,r16,r3
    e8a8:	982cd43a 	srli	r22,r19,16
    e8ac:	8ca2983a 	sll	r17,r17,r18
    e8b0:	a009883a 	mov	r4,r20
    e8b4:	b00b883a 	mov	r5,r22
    e8b8:	1478b03a 	or	fp,r2,r17
    e8bc:	00046940 	call	4694 <__umodsi3>
    e8c0:	a009883a 	mov	r4,r20
    e8c4:	b00b883a 	mov	r5,r22
    e8c8:	1023883a 	mov	r17,r2
    e8cc:	00046300 	call	4630 <__udivsi3>
    e8d0:	9d7fffcc 	andi	r21,r19,65535
    e8d4:	880a943a 	slli	r5,r17,16
    e8d8:	e008d43a 	srli	r4,fp,16
    e8dc:	a885383a 	mul	r2,r21,r2
    e8e0:	84a8983a 	sll	r20,r16,r18
    e8e4:	2148b03a 	or	r4,r4,r5
    e8e8:	2080042e 	bgeu	r4,r2,e8fc <__umoddi3+0x47c>
    e8ec:	24c9883a 	add	r4,r4,r19
    e8f0:	24c00236 	bltu	r4,r19,e8fc <__umoddi3+0x47c>
    e8f4:	2080012e 	bgeu	r4,r2,e8fc <__umoddi3+0x47c>
    e8f8:	24c9883a 	add	r4,r4,r19
    e8fc:	20a3c83a 	sub	r17,r4,r2
    e900:	b00b883a 	mov	r5,r22
    e904:	8809883a 	mov	r4,r17
    e908:	00046940 	call	4694 <__umodsi3>
    e90c:	102f883a 	mov	r23,r2
    e910:	8809883a 	mov	r4,r17
    e914:	b00b883a 	mov	r5,r22
    e918:	00046300 	call	4630 <__udivsi3>
    e91c:	b82e943a 	slli	r23,r23,16
    e920:	a885383a 	mul	r2,r21,r2
    e924:	e13fffcc 	andi	r4,fp,65535
    e928:	25c8b03a 	or	r4,r4,r23
    e92c:	2080042e 	bgeu	r4,r2,e940 <__umoddi3+0x4c0>
    e930:	24c9883a 	add	r4,r4,r19
    e934:	24c00236 	bltu	r4,r19,e940 <__umoddi3+0x4c0>
    e938:	2080012e 	bgeu	r4,r2,e940 <__umoddi3+0x4c0>
    e93c:	24c9883a 	add	r4,r4,r19
    e940:	20a3c83a 	sub	r17,r4,r2
    e944:	003f4806 	br	e668 <__umoddi3+0x1e8>
    e948:	2c8fc83a 	sub	r7,r5,r18
    e94c:	1545c83a 	sub	r2,r2,r21
    e950:	29cb803a 	cmpltu	r5,r5,r7
    e954:	1145c83a 	sub	r2,r2,r5
    e958:	4089c83a 	sub	r4,r8,r2
    e95c:	003fc706 	br	e87c <__umoddi3+0x3fc>
    e960:	01000604 	movi	r4,24
    e964:	003f1806 	br	e5c8 <__umoddi3+0x148>
    e968:	00800604 	movi	r2,24
    e96c:	003f3206 	br	e638 <__umoddi3+0x1b8>
    e970:	01000604 	movi	r4,24
    e974:	003ed906 	br	e4dc <__umoddi3+0x5c>
    e978:	413fa52e 	bgeu	r8,r4,e810 <__umoddi3+0x390>
    e97c:	297fff84 	addi	r5,r5,-2
    e980:	4551883a 	add	r8,r8,r21
    e984:	003fa306 	br	e814 <__umoddi3+0x394>
    e988:	15ff8b2e 	bgeu	r2,r23,e7b8 <__umoddi3+0x338>
    e98c:	31bfff84 	addi	r6,r6,-2
    e990:	1545883a 	add	r2,r2,r21
    e994:	003f8906 	br	e7bc <__umoddi3+0x33c>
    e998:	24c9883a 	add	r4,r4,r19
    e99c:	003eee06 	br	e558 <__umoddi3+0xd8>
    e9a0:	8005883a 	mov	r2,r16
    e9a4:	003f1706 	br	e604 <__umoddi3+0x184>
    e9a8:	817fe736 	bltu	r16,r5,e948 <__umoddi3+0x4c8>
    e9ac:	280f883a 	mov	r7,r5
    e9b0:	0009883a 	mov	r4,zero
    e9b4:	003fb106 	br	e87c <__umoddi3+0x3fc>

0000e9b8 <__adddf3>:
    e9b8:	02c00434 	movhi	r11,16
    e9bc:	5affffc4 	addi	r11,r11,-1
    e9c0:	2806d7fa 	srli	r3,r5,31
    e9c4:	2ad4703a 	and	r10,r5,r11
    e9c8:	3ad2703a 	and	r9,r7,r11
    e9cc:	3804d53a 	srli	r2,r7,20
    e9d0:	3018d77a 	srli	r12,r6,29
    e9d4:	280ad53a 	srli	r5,r5,20
    e9d8:	501490fa 	slli	r10,r10,3
    e9dc:	2010d77a 	srli	r8,r4,29
    e9e0:	481290fa 	slli	r9,r9,3
    e9e4:	380ed7fa 	srli	r7,r7,31
    e9e8:	defffb04 	addi	sp,sp,-20
    e9ec:	dc800215 	stw	r18,8(sp)
    e9f0:	dc400115 	stw	r17,4(sp)
    e9f4:	dc000015 	stw	r16,0(sp)
    e9f8:	dfc00415 	stw	ra,16(sp)
    e9fc:	dcc00315 	stw	r19,12(sp)
    ea00:	1c803fcc 	andi	r18,r3,255
    ea04:	2c01ffcc 	andi	r16,r5,2047
    ea08:	5210b03a 	or	r8,r10,r8
    ea0c:	202290fa 	slli	r17,r4,3
    ea10:	1081ffcc 	andi	r2,r2,2047
    ea14:	4b12b03a 	or	r9,r9,r12
    ea18:	300c90fa 	slli	r6,r6,3
    ea1c:	91c07526 	beq	r18,r7,ebf4 <__adddf3+0x23c>
    ea20:	8087c83a 	sub	r3,r16,r2
    ea24:	00c0ab0e 	bge	zero,r3,ecd4 <__adddf3+0x31c>
    ea28:	10002a1e 	bne	r2,zero,ead4 <__adddf3+0x11c>
    ea2c:	4984b03a 	or	r2,r9,r6
    ea30:	1000961e 	bne	r2,zero,ec8c <__adddf3+0x2d4>
    ea34:	888001cc 	andi	r2,r17,7
    ea38:	10000726 	beq	r2,zero,ea58 <__adddf3+0xa0>
    ea3c:	888003cc 	andi	r2,r17,15
    ea40:	00c00104 	movi	r3,4
    ea44:	10c00426 	beq	r2,r3,ea58 <__adddf3+0xa0>
    ea48:	88c7883a 	add	r3,r17,r3
    ea4c:	1c63803a 	cmpltu	r17,r3,r17
    ea50:	4451883a 	add	r8,r8,r17
    ea54:	1823883a 	mov	r17,r3
    ea58:	4080202c 	andhi	r2,r8,128
    ea5c:	10005926 	beq	r2,zero,ebc4 <__adddf3+0x20c>
    ea60:	84000044 	addi	r16,r16,1
    ea64:	0081ffc4 	movi	r2,2047
    ea68:	8080ba26 	beq	r16,r2,ed54 <__adddf3+0x39c>
    ea6c:	00bfe034 	movhi	r2,65408
    ea70:	10bfffc4 	addi	r2,r2,-1
    ea74:	4090703a 	and	r8,r8,r2
    ea78:	4004977a 	slli	r2,r8,29
    ea7c:	4010927a 	slli	r8,r8,9
    ea80:	8822d0fa 	srli	r17,r17,3
    ea84:	8401ffcc 	andi	r16,r16,2047
    ea88:	4010d33a 	srli	r8,r8,12
    ea8c:	9007883a 	mov	r3,r18
    ea90:	1444b03a 	or	r2,r2,r17
    ea94:	8401ffcc 	andi	r16,r16,2047
    ea98:	8020953a 	slli	r16,r16,20
    ea9c:	18c03fcc 	andi	r3,r3,255
    eaa0:	01000434 	movhi	r4,16
    eaa4:	213fffc4 	addi	r4,r4,-1
    eaa8:	180697fa 	slli	r3,r3,31
    eaac:	4110703a 	and	r8,r8,r4
    eab0:	4410b03a 	or	r8,r8,r16
    eab4:	40c6b03a 	or	r3,r8,r3
    eab8:	dfc00417 	ldw	ra,16(sp)
    eabc:	dcc00317 	ldw	r19,12(sp)
    eac0:	dc800217 	ldw	r18,8(sp)
    eac4:	dc400117 	ldw	r17,4(sp)
    eac8:	dc000017 	ldw	r16,0(sp)
    eacc:	dec00504 	addi	sp,sp,20
    ead0:	f800283a 	ret
    ead4:	0081ffc4 	movi	r2,2047
    ead8:	80bfd626 	beq	r16,r2,ea34 <__adddf3+0x7c>
    eadc:	4a402034 	orhi	r9,r9,128
    eae0:	00800e04 	movi	r2,56
    eae4:	10c09f16 	blt	r2,r3,ed64 <__adddf3+0x3ac>
    eae8:	008007c4 	movi	r2,31
    eaec:	10c0c216 	blt	r2,r3,edf8 <__adddf3+0x440>
    eaf0:	00800804 	movi	r2,32
    eaf4:	10c5c83a 	sub	r2,r2,r3
    eaf8:	488a983a 	sll	r5,r9,r2
    eafc:	30c8d83a 	srl	r4,r6,r3
    eb00:	3084983a 	sll	r2,r6,r2
    eb04:	48c6d83a 	srl	r3,r9,r3
    eb08:	290cb03a 	or	r6,r5,r4
    eb0c:	1004c03a 	cmpne	r2,r2,zero
    eb10:	308cb03a 	or	r6,r6,r2
    eb14:	898dc83a 	sub	r6,r17,r6
    eb18:	89a3803a 	cmpltu	r17,r17,r6
    eb1c:	40d1c83a 	sub	r8,r8,r3
    eb20:	4451c83a 	sub	r8,r8,r17
    eb24:	3023883a 	mov	r17,r6
    eb28:	4080202c 	andhi	r2,r8,128
    eb2c:	10002326 	beq	r2,zero,ebbc <__adddf3+0x204>
    eb30:	04c02034 	movhi	r19,128
    eb34:	9cffffc4 	addi	r19,r19,-1
    eb38:	44e6703a 	and	r19,r8,r19
    eb3c:	98007626 	beq	r19,zero,ed18 <__adddf3+0x360>
    eb40:	9809883a 	mov	r4,r19
    eb44:	0010fbc0 	call	10fbc <__clzsi2>
    eb48:	10fffe04 	addi	r3,r2,-8
    eb4c:	010007c4 	movi	r4,31
    eb50:	20c07716 	blt	r4,r3,ed30 <__adddf3+0x378>
    eb54:	00800804 	movi	r2,32
    eb58:	10c5c83a 	sub	r2,r2,r3
    eb5c:	8884d83a 	srl	r2,r17,r2
    eb60:	98d0983a 	sll	r8,r19,r3
    eb64:	88e2983a 	sll	r17,r17,r3
    eb68:	1204b03a 	or	r2,r2,r8
    eb6c:	1c007416 	blt	r3,r16,ed40 <__adddf3+0x388>
    eb70:	1c21c83a 	sub	r16,r3,r16
    eb74:	82000044 	addi	r8,r16,1
    eb78:	00c007c4 	movi	r3,31
    eb7c:	1a009116 	blt	r3,r8,edc4 <__adddf3+0x40c>
    eb80:	00c00804 	movi	r3,32
    eb84:	1a07c83a 	sub	r3,r3,r8
    eb88:	8a08d83a 	srl	r4,r17,r8
    eb8c:	88e2983a 	sll	r17,r17,r3
    eb90:	10c6983a 	sll	r3,r2,r3
    eb94:	1210d83a 	srl	r8,r2,r8
    eb98:	8804c03a 	cmpne	r2,r17,zero
    eb9c:	1906b03a 	or	r3,r3,r4
    eba0:	18a2b03a 	or	r17,r3,r2
    eba4:	0021883a 	mov	r16,zero
    eba8:	003fa206 	br	ea34 <__adddf3+0x7c>
    ebac:	1890b03a 	or	r8,r3,r2
    ebb0:	40017d26 	beq	r8,zero,f1a8 <__adddf3+0x7f0>
    ebb4:	1011883a 	mov	r8,r2
    ebb8:	1823883a 	mov	r17,r3
    ebbc:	888001cc 	andi	r2,r17,7
    ebc0:	103f9e1e 	bne	r2,zero,ea3c <__adddf3+0x84>
    ebc4:	4004977a 	slli	r2,r8,29
    ebc8:	8822d0fa 	srli	r17,r17,3
    ebcc:	4010d0fa 	srli	r8,r8,3
    ebd0:	9007883a 	mov	r3,r18
    ebd4:	1444b03a 	or	r2,r2,r17
    ebd8:	0101ffc4 	movi	r4,2047
    ebdc:	81002426 	beq	r16,r4,ec70 <__adddf3+0x2b8>
    ebe0:	8120703a 	and	r16,r16,r4
    ebe4:	01000434 	movhi	r4,16
    ebe8:	213fffc4 	addi	r4,r4,-1
    ebec:	4110703a 	and	r8,r8,r4
    ebf0:	003fa806 	br	ea94 <__adddf3+0xdc>
    ebf4:	8089c83a 	sub	r4,r16,r2
    ebf8:	01005e0e 	bge	zero,r4,ed74 <__adddf3+0x3bc>
    ebfc:	10002b26 	beq	r2,zero,ecac <__adddf3+0x2f4>
    ec00:	0081ffc4 	movi	r2,2047
    ec04:	80bf8b26 	beq	r16,r2,ea34 <__adddf3+0x7c>
    ec08:	4a402034 	orhi	r9,r9,128
    ec0c:	00800e04 	movi	r2,56
    ec10:	1100a40e 	bge	r2,r4,eea4 <__adddf3+0x4ec>
    ec14:	498cb03a 	or	r6,r9,r6
    ec18:	300ac03a 	cmpne	r5,r6,zero
    ec1c:	0013883a 	mov	r9,zero
    ec20:	2c4b883a 	add	r5,r5,r17
    ec24:	2c63803a 	cmpltu	r17,r5,r17
    ec28:	4a11883a 	add	r8,r9,r8
    ec2c:	8a11883a 	add	r8,r17,r8
    ec30:	2823883a 	mov	r17,r5
    ec34:	4080202c 	andhi	r2,r8,128
    ec38:	103fe026 	beq	r2,zero,ebbc <__adddf3+0x204>
    ec3c:	84000044 	addi	r16,r16,1
    ec40:	0081ffc4 	movi	r2,2047
    ec44:	8080d226 	beq	r16,r2,ef90 <__adddf3+0x5d8>
    ec48:	00bfe034 	movhi	r2,65408
    ec4c:	10bfffc4 	addi	r2,r2,-1
    ec50:	4090703a 	and	r8,r8,r2
    ec54:	880ad07a 	srli	r5,r17,1
    ec58:	400897fa 	slli	r4,r8,31
    ec5c:	88c0004c 	andi	r3,r17,1
    ec60:	28e2b03a 	or	r17,r5,r3
    ec64:	4010d07a 	srli	r8,r8,1
    ec68:	2462b03a 	or	r17,r4,r17
    ec6c:	003f7106 	br	ea34 <__adddf3+0x7c>
    ec70:	4088b03a 	or	r4,r8,r2
    ec74:	20014526 	beq	r4,zero,f18c <__adddf3+0x7d4>
    ec78:	01000434 	movhi	r4,16
    ec7c:	42000234 	orhi	r8,r8,8
    ec80:	213fffc4 	addi	r4,r4,-1
    ec84:	4110703a 	and	r8,r8,r4
    ec88:	003f8206 	br	ea94 <__adddf3+0xdc>
    ec8c:	18ffffc4 	addi	r3,r3,-1
    ec90:	1800491e 	bne	r3,zero,edb8 <__adddf3+0x400>
    ec94:	898bc83a 	sub	r5,r17,r6
    ec98:	8963803a 	cmpltu	r17,r17,r5
    ec9c:	4251c83a 	sub	r8,r8,r9
    eca0:	4451c83a 	sub	r8,r8,r17
    eca4:	2823883a 	mov	r17,r5
    eca8:	003f9f06 	br	eb28 <__adddf3+0x170>
    ecac:	4984b03a 	or	r2,r9,r6
    ecb0:	103f6026 	beq	r2,zero,ea34 <__adddf3+0x7c>
    ecb4:	213fffc4 	addi	r4,r4,-1
    ecb8:	2000931e 	bne	r4,zero,ef08 <__adddf3+0x550>
    ecbc:	898d883a 	add	r6,r17,r6
    ecc0:	3463803a 	cmpltu	r17,r6,r17
    ecc4:	4251883a 	add	r8,r8,r9
    ecc8:	8a11883a 	add	r8,r17,r8
    eccc:	3023883a 	mov	r17,r6
    ecd0:	003fd806 	br	ec34 <__adddf3+0x27c>
    ecd4:	1800541e 	bne	r3,zero,ee28 <__adddf3+0x470>
    ecd8:	80800044 	addi	r2,r16,1
    ecdc:	1081ffcc 	andi	r2,r2,2047
    ece0:	00c00044 	movi	r3,1
    ece4:	1880a00e 	bge	r3,r2,ef68 <__adddf3+0x5b0>
    ece8:	8989c83a 	sub	r4,r17,r6
    ecec:	8905803a 	cmpltu	r2,r17,r4
    ecf0:	4267c83a 	sub	r19,r8,r9
    ecf4:	98a7c83a 	sub	r19,r19,r2
    ecf8:	9880202c 	andhi	r2,r19,128
    ecfc:	10006326 	beq	r2,zero,ee8c <__adddf3+0x4d4>
    ed00:	3463c83a 	sub	r17,r6,r17
    ed04:	4a07c83a 	sub	r3,r9,r8
    ed08:	344d803a 	cmpltu	r6,r6,r17
    ed0c:	19a7c83a 	sub	r19,r3,r6
    ed10:	3825883a 	mov	r18,r7
    ed14:	983f8a1e 	bne	r19,zero,eb40 <__adddf3+0x188>
    ed18:	8809883a 	mov	r4,r17
    ed1c:	0010fbc0 	call	10fbc <__clzsi2>
    ed20:	10800804 	addi	r2,r2,32
    ed24:	10fffe04 	addi	r3,r2,-8
    ed28:	010007c4 	movi	r4,31
    ed2c:	20ff890e 	bge	r4,r3,eb54 <__adddf3+0x19c>
    ed30:	10bff604 	addi	r2,r2,-40
    ed34:	8884983a 	sll	r2,r17,r2
    ed38:	0023883a 	mov	r17,zero
    ed3c:	1c3f8c0e 	bge	r3,r16,eb70 <__adddf3+0x1b8>
    ed40:	023fe034 	movhi	r8,65408
    ed44:	423fffc4 	addi	r8,r8,-1
    ed48:	80e1c83a 	sub	r16,r16,r3
    ed4c:	1210703a 	and	r8,r2,r8
    ed50:	003f3806 	br	ea34 <__adddf3+0x7c>
    ed54:	9007883a 	mov	r3,r18
    ed58:	0011883a 	mov	r8,zero
    ed5c:	0005883a 	mov	r2,zero
    ed60:	003f4c06 	br	ea94 <__adddf3+0xdc>
    ed64:	498cb03a 	or	r6,r9,r6
    ed68:	300cc03a 	cmpne	r6,r6,zero
    ed6c:	0007883a 	mov	r3,zero
    ed70:	003f6806 	br	eb14 <__adddf3+0x15c>
    ed74:	20009c1e 	bne	r4,zero,efe8 <__adddf3+0x630>
    ed78:	80800044 	addi	r2,r16,1
    ed7c:	1141ffcc 	andi	r5,r2,2047
    ed80:	01000044 	movi	r4,1
    ed84:	2140670e 	bge	r4,r5,ef24 <__adddf3+0x56c>
    ed88:	0101ffc4 	movi	r4,2047
    ed8c:	11007f26 	beq	r2,r4,ef8c <__adddf3+0x5d4>
    ed90:	898d883a 	add	r6,r17,r6
    ed94:	4247883a 	add	r3,r8,r9
    ed98:	3451803a 	cmpltu	r8,r6,r17
    ed9c:	40d1883a 	add	r8,r8,r3
    eda0:	402297fa 	slli	r17,r8,31
    eda4:	300cd07a 	srli	r6,r6,1
    eda8:	4010d07a 	srli	r8,r8,1
    edac:	1021883a 	mov	r16,r2
    edb0:	89a2b03a 	or	r17,r17,r6
    edb4:	003f1f06 	br	ea34 <__adddf3+0x7c>
    edb8:	0081ffc4 	movi	r2,2047
    edbc:	80bf481e 	bne	r16,r2,eae0 <__adddf3+0x128>
    edc0:	003f1c06 	br	ea34 <__adddf3+0x7c>
    edc4:	843ff844 	addi	r16,r16,-31
    edc8:	01000804 	movi	r4,32
    edcc:	1406d83a 	srl	r3,r2,r16
    edd0:	41005026 	beq	r8,r4,ef14 <__adddf3+0x55c>
    edd4:	01001004 	movi	r4,64
    edd8:	2211c83a 	sub	r8,r4,r8
    eddc:	1204983a 	sll	r2,r2,r8
    ede0:	88a2b03a 	or	r17,r17,r2
    ede4:	8822c03a 	cmpne	r17,r17,zero
    ede8:	1c62b03a 	or	r17,r3,r17
    edec:	0011883a 	mov	r8,zero
    edf0:	0021883a 	mov	r16,zero
    edf4:	003f7106 	br	ebbc <__adddf3+0x204>
    edf8:	193ff804 	addi	r4,r3,-32
    edfc:	00800804 	movi	r2,32
    ee00:	4908d83a 	srl	r4,r9,r4
    ee04:	18804526 	beq	r3,r2,ef1c <__adddf3+0x564>
    ee08:	00801004 	movi	r2,64
    ee0c:	10c5c83a 	sub	r2,r2,r3
    ee10:	4886983a 	sll	r3,r9,r2
    ee14:	198cb03a 	or	r6,r3,r6
    ee18:	300cc03a 	cmpne	r6,r6,zero
    ee1c:	218cb03a 	or	r6,r4,r6
    ee20:	0007883a 	mov	r3,zero
    ee24:	003f3b06 	br	eb14 <__adddf3+0x15c>
    ee28:	80002a26 	beq	r16,zero,eed4 <__adddf3+0x51c>
    ee2c:	0101ffc4 	movi	r4,2047
    ee30:	11006826 	beq	r2,r4,efd4 <__adddf3+0x61c>
    ee34:	00c7c83a 	sub	r3,zero,r3
    ee38:	42002034 	orhi	r8,r8,128
    ee3c:	01000e04 	movi	r4,56
    ee40:	20c07c16 	blt	r4,r3,f034 <__adddf3+0x67c>
    ee44:	010007c4 	movi	r4,31
    ee48:	20c0da16 	blt	r4,r3,f1b4 <__adddf3+0x7fc>
    ee4c:	01000804 	movi	r4,32
    ee50:	20c9c83a 	sub	r4,r4,r3
    ee54:	4114983a 	sll	r10,r8,r4
    ee58:	88cad83a 	srl	r5,r17,r3
    ee5c:	8908983a 	sll	r4,r17,r4
    ee60:	40c6d83a 	srl	r3,r8,r3
    ee64:	5162b03a 	or	r17,r10,r5
    ee68:	2008c03a 	cmpne	r4,r4,zero
    ee6c:	8922b03a 	or	r17,r17,r4
    ee70:	3463c83a 	sub	r17,r6,r17
    ee74:	48c7c83a 	sub	r3,r9,r3
    ee78:	344d803a 	cmpltu	r6,r6,r17
    ee7c:	1991c83a 	sub	r8,r3,r6
    ee80:	1021883a 	mov	r16,r2
    ee84:	3825883a 	mov	r18,r7
    ee88:	003f2706 	br	eb28 <__adddf3+0x170>
    ee8c:	24d0b03a 	or	r8,r4,r19
    ee90:	40001b1e 	bne	r8,zero,ef00 <__adddf3+0x548>
    ee94:	0005883a 	mov	r2,zero
    ee98:	0007883a 	mov	r3,zero
    ee9c:	0021883a 	mov	r16,zero
    eea0:	003f4d06 	br	ebd8 <__adddf3+0x220>
    eea4:	008007c4 	movi	r2,31
    eea8:	11003c16 	blt	r2,r4,ef9c <__adddf3+0x5e4>
    eeac:	00800804 	movi	r2,32
    eeb0:	1105c83a 	sub	r2,r2,r4
    eeb4:	488e983a 	sll	r7,r9,r2
    eeb8:	310ad83a 	srl	r5,r6,r4
    eebc:	3084983a 	sll	r2,r6,r2
    eec0:	4912d83a 	srl	r9,r9,r4
    eec4:	394ab03a 	or	r5,r7,r5
    eec8:	1004c03a 	cmpne	r2,r2,zero
    eecc:	288ab03a 	or	r5,r5,r2
    eed0:	003f5306 	br	ec20 <__adddf3+0x268>
    eed4:	4448b03a 	or	r4,r8,r17
    eed8:	20003e26 	beq	r4,zero,efd4 <__adddf3+0x61c>
    eedc:	00c6303a 	nor	r3,zero,r3
    eee0:	18003a1e 	bne	r3,zero,efcc <__adddf3+0x614>
    eee4:	3463c83a 	sub	r17,r6,r17
    eee8:	4a07c83a 	sub	r3,r9,r8
    eeec:	344d803a 	cmpltu	r6,r6,r17
    eef0:	1991c83a 	sub	r8,r3,r6
    eef4:	1021883a 	mov	r16,r2
    eef8:	3825883a 	mov	r18,r7
    eefc:	003f0a06 	br	eb28 <__adddf3+0x170>
    ef00:	2023883a 	mov	r17,r4
    ef04:	003f0d06 	br	eb3c <__adddf3+0x184>
    ef08:	0081ffc4 	movi	r2,2047
    ef0c:	80bf3f1e 	bne	r16,r2,ec0c <__adddf3+0x254>
    ef10:	003ec806 	br	ea34 <__adddf3+0x7c>
    ef14:	0005883a 	mov	r2,zero
    ef18:	003fb106 	br	ede0 <__adddf3+0x428>
    ef1c:	0007883a 	mov	r3,zero
    ef20:	003fbc06 	br	ee14 <__adddf3+0x45c>
    ef24:	4444b03a 	or	r2,r8,r17
    ef28:	8000871e 	bne	r16,zero,f148 <__adddf3+0x790>
    ef2c:	1000ba26 	beq	r2,zero,f218 <__adddf3+0x860>
    ef30:	4984b03a 	or	r2,r9,r6
    ef34:	103ebf26 	beq	r2,zero,ea34 <__adddf3+0x7c>
    ef38:	8985883a 	add	r2,r17,r6
    ef3c:	4247883a 	add	r3,r8,r9
    ef40:	1451803a 	cmpltu	r8,r2,r17
    ef44:	40d1883a 	add	r8,r8,r3
    ef48:	40c0202c 	andhi	r3,r8,128
    ef4c:	1023883a 	mov	r17,r2
    ef50:	183f1a26 	beq	r3,zero,ebbc <__adddf3+0x204>
    ef54:	00bfe034 	movhi	r2,65408
    ef58:	10bfffc4 	addi	r2,r2,-1
    ef5c:	2021883a 	mov	r16,r4
    ef60:	4090703a 	and	r8,r8,r2
    ef64:	003eb306 	br	ea34 <__adddf3+0x7c>
    ef68:	4444b03a 	or	r2,r8,r17
    ef6c:	8000291e 	bne	r16,zero,f014 <__adddf3+0x65c>
    ef70:	10004b1e 	bne	r2,zero,f0a0 <__adddf3+0x6e8>
    ef74:	4990b03a 	or	r8,r9,r6
    ef78:	40008b26 	beq	r8,zero,f1a8 <__adddf3+0x7f0>
    ef7c:	4811883a 	mov	r8,r9
    ef80:	3023883a 	mov	r17,r6
    ef84:	3825883a 	mov	r18,r7
    ef88:	003eaa06 	br	ea34 <__adddf3+0x7c>
    ef8c:	1021883a 	mov	r16,r2
    ef90:	0011883a 	mov	r8,zero
    ef94:	0005883a 	mov	r2,zero
    ef98:	003f0f06 	br	ebd8 <__adddf3+0x220>
    ef9c:	217ff804 	addi	r5,r4,-32
    efa0:	00800804 	movi	r2,32
    efa4:	494ad83a 	srl	r5,r9,r5
    efa8:	20807d26 	beq	r4,r2,f1a0 <__adddf3+0x7e8>
    efac:	00801004 	movi	r2,64
    efb0:	1109c83a 	sub	r4,r2,r4
    efb4:	4912983a 	sll	r9,r9,r4
    efb8:	498cb03a 	or	r6,r9,r6
    efbc:	300cc03a 	cmpne	r6,r6,zero
    efc0:	298ab03a 	or	r5,r5,r6
    efc4:	0013883a 	mov	r9,zero
    efc8:	003f1506 	br	ec20 <__adddf3+0x268>
    efcc:	0101ffc4 	movi	r4,2047
    efd0:	113f9a1e 	bne	r2,r4,ee3c <__adddf3+0x484>
    efd4:	4811883a 	mov	r8,r9
    efd8:	3023883a 	mov	r17,r6
    efdc:	1021883a 	mov	r16,r2
    efe0:	3825883a 	mov	r18,r7
    efe4:	003e9306 	br	ea34 <__adddf3+0x7c>
    efe8:	8000161e 	bne	r16,zero,f044 <__adddf3+0x68c>
    efec:	444ab03a 	or	r5,r8,r17
    eff0:	28005126 	beq	r5,zero,f138 <__adddf3+0x780>
    eff4:	0108303a 	nor	r4,zero,r4
    eff8:	20004d1e 	bne	r4,zero,f130 <__adddf3+0x778>
    effc:	89a3883a 	add	r17,r17,r6
    f000:	4253883a 	add	r9,r8,r9
    f004:	898d803a 	cmpltu	r6,r17,r6
    f008:	3251883a 	add	r8,r6,r9
    f00c:	1021883a 	mov	r16,r2
    f010:	003f0806 	br	ec34 <__adddf3+0x27c>
    f014:	1000301e 	bne	r2,zero,f0d8 <__adddf3+0x720>
    f018:	4984b03a 	or	r2,r9,r6
    f01c:	10007126 	beq	r2,zero,f1e4 <__adddf3+0x82c>
    f020:	4811883a 	mov	r8,r9
    f024:	3023883a 	mov	r17,r6
    f028:	3825883a 	mov	r18,r7
    f02c:	0401ffc4 	movi	r16,2047
    f030:	003e8006 	br	ea34 <__adddf3+0x7c>
    f034:	4462b03a 	or	r17,r8,r17
    f038:	8822c03a 	cmpne	r17,r17,zero
    f03c:	0007883a 	mov	r3,zero
    f040:	003f8b06 	br	ee70 <__adddf3+0x4b8>
    f044:	0141ffc4 	movi	r5,2047
    f048:	11403b26 	beq	r2,r5,f138 <__adddf3+0x780>
    f04c:	0109c83a 	sub	r4,zero,r4
    f050:	42002034 	orhi	r8,r8,128
    f054:	01400e04 	movi	r5,56
    f058:	29006716 	blt	r5,r4,f1f8 <__adddf3+0x840>
    f05c:	014007c4 	movi	r5,31
    f060:	29007016 	blt	r5,r4,f224 <__adddf3+0x86c>
    f064:	01400804 	movi	r5,32
    f068:	290bc83a 	sub	r5,r5,r4
    f06c:	4154983a 	sll	r10,r8,r5
    f070:	890ed83a 	srl	r7,r17,r4
    f074:	894a983a 	sll	r5,r17,r5
    f078:	4108d83a 	srl	r4,r8,r4
    f07c:	51e2b03a 	or	r17,r10,r7
    f080:	280ac03a 	cmpne	r5,r5,zero
    f084:	8962b03a 	or	r17,r17,r5
    f088:	89a3883a 	add	r17,r17,r6
    f08c:	2253883a 	add	r9,r4,r9
    f090:	898d803a 	cmpltu	r6,r17,r6
    f094:	3251883a 	add	r8,r6,r9
    f098:	1021883a 	mov	r16,r2
    f09c:	003ee506 	br	ec34 <__adddf3+0x27c>
    f0a0:	4984b03a 	or	r2,r9,r6
    f0a4:	103e6326 	beq	r2,zero,ea34 <__adddf3+0x7c>
    f0a8:	8987c83a 	sub	r3,r17,r6
    f0ac:	88c9803a 	cmpltu	r4,r17,r3
    f0b0:	4245c83a 	sub	r2,r8,r9
    f0b4:	1105c83a 	sub	r2,r2,r4
    f0b8:	1100202c 	andhi	r4,r2,128
    f0bc:	203ebb26 	beq	r4,zero,ebac <__adddf3+0x1f4>
    f0c0:	3463c83a 	sub	r17,r6,r17
    f0c4:	4a07c83a 	sub	r3,r9,r8
    f0c8:	344d803a 	cmpltu	r6,r6,r17
    f0cc:	1991c83a 	sub	r8,r3,r6
    f0d0:	3825883a 	mov	r18,r7
    f0d4:	003e5706 	br	ea34 <__adddf3+0x7c>
    f0d8:	4984b03a 	or	r2,r9,r6
    f0dc:	10002e26 	beq	r2,zero,f198 <__adddf3+0x7e0>
    f0e0:	4004d0fa 	srli	r2,r8,3
    f0e4:	8822d0fa 	srli	r17,r17,3
    f0e8:	4010977a 	slli	r8,r8,29
    f0ec:	10c0022c 	andhi	r3,r2,8
    f0f0:	4462b03a 	or	r17,r8,r17
    f0f4:	18000826 	beq	r3,zero,f118 <__adddf3+0x760>
    f0f8:	4808d0fa 	srli	r4,r9,3
    f0fc:	20c0022c 	andhi	r3,r4,8
    f100:	1800051e 	bne	r3,zero,f118 <__adddf3+0x760>
    f104:	300cd0fa 	srli	r6,r6,3
    f108:	4806977a 	slli	r3,r9,29
    f10c:	2005883a 	mov	r2,r4
    f110:	3825883a 	mov	r18,r7
    f114:	19a2b03a 	or	r17,r3,r6
    f118:	8810d77a 	srli	r8,r17,29
    f11c:	100490fa 	slli	r2,r2,3
    f120:	882290fa 	slli	r17,r17,3
    f124:	0401ffc4 	movi	r16,2047
    f128:	4090b03a 	or	r8,r8,r2
    f12c:	003e4106 	br	ea34 <__adddf3+0x7c>
    f130:	0141ffc4 	movi	r5,2047
    f134:	117fc71e 	bne	r2,r5,f054 <__adddf3+0x69c>
    f138:	4811883a 	mov	r8,r9
    f13c:	3023883a 	mov	r17,r6
    f140:	1021883a 	mov	r16,r2
    f144:	003e3b06 	br	ea34 <__adddf3+0x7c>
    f148:	10002f26 	beq	r2,zero,f208 <__adddf3+0x850>
    f14c:	4984b03a 	or	r2,r9,r6
    f150:	10001126 	beq	r2,zero,f198 <__adddf3+0x7e0>
    f154:	4004d0fa 	srli	r2,r8,3
    f158:	8822d0fa 	srli	r17,r17,3
    f15c:	4010977a 	slli	r8,r8,29
    f160:	10c0022c 	andhi	r3,r2,8
    f164:	4462b03a 	or	r17,r8,r17
    f168:	183feb26 	beq	r3,zero,f118 <__adddf3+0x760>
    f16c:	4808d0fa 	srli	r4,r9,3
    f170:	20c0022c 	andhi	r3,r4,8
    f174:	183fe81e 	bne	r3,zero,f118 <__adddf3+0x760>
    f178:	300cd0fa 	srli	r6,r6,3
    f17c:	4806977a 	slli	r3,r9,29
    f180:	2005883a 	mov	r2,r4
    f184:	19a2b03a 	or	r17,r3,r6
    f188:	003fe306 	br	f118 <__adddf3+0x760>
    f18c:	0011883a 	mov	r8,zero
    f190:	0005883a 	mov	r2,zero
    f194:	003e3f06 	br	ea94 <__adddf3+0xdc>
    f198:	0401ffc4 	movi	r16,2047
    f19c:	003e2506 	br	ea34 <__adddf3+0x7c>
    f1a0:	0013883a 	mov	r9,zero
    f1a4:	003f8406 	br	efb8 <__adddf3+0x600>
    f1a8:	0005883a 	mov	r2,zero
    f1ac:	0007883a 	mov	r3,zero
    f1b0:	003e8906 	br	ebd8 <__adddf3+0x220>
    f1b4:	197ff804 	addi	r5,r3,-32
    f1b8:	01000804 	movi	r4,32
    f1bc:	414ad83a 	srl	r5,r8,r5
    f1c0:	19002426 	beq	r3,r4,f254 <__adddf3+0x89c>
    f1c4:	01001004 	movi	r4,64
    f1c8:	20c7c83a 	sub	r3,r4,r3
    f1cc:	40c6983a 	sll	r3,r8,r3
    f1d0:	1c46b03a 	or	r3,r3,r17
    f1d4:	1806c03a 	cmpne	r3,r3,zero
    f1d8:	28e2b03a 	or	r17,r5,r3
    f1dc:	0007883a 	mov	r3,zero
    f1e0:	003f2306 	br	ee70 <__adddf3+0x4b8>
    f1e4:	0007883a 	mov	r3,zero
    f1e8:	5811883a 	mov	r8,r11
    f1ec:	00bfffc4 	movi	r2,-1
    f1f0:	0401ffc4 	movi	r16,2047
    f1f4:	003e7806 	br	ebd8 <__adddf3+0x220>
    f1f8:	4462b03a 	or	r17,r8,r17
    f1fc:	8822c03a 	cmpne	r17,r17,zero
    f200:	0009883a 	mov	r4,zero
    f204:	003fa006 	br	f088 <__adddf3+0x6d0>
    f208:	4811883a 	mov	r8,r9
    f20c:	3023883a 	mov	r17,r6
    f210:	0401ffc4 	movi	r16,2047
    f214:	003e0706 	br	ea34 <__adddf3+0x7c>
    f218:	4811883a 	mov	r8,r9
    f21c:	3023883a 	mov	r17,r6
    f220:	003e0406 	br	ea34 <__adddf3+0x7c>
    f224:	21fff804 	addi	r7,r4,-32
    f228:	01400804 	movi	r5,32
    f22c:	41ced83a 	srl	r7,r8,r7
    f230:	21400a26 	beq	r4,r5,f25c <__adddf3+0x8a4>
    f234:	01401004 	movi	r5,64
    f238:	2909c83a 	sub	r4,r5,r4
    f23c:	4108983a 	sll	r4,r8,r4
    f240:	2448b03a 	or	r4,r4,r17
    f244:	2008c03a 	cmpne	r4,r4,zero
    f248:	3922b03a 	or	r17,r7,r4
    f24c:	0009883a 	mov	r4,zero
    f250:	003f8d06 	br	f088 <__adddf3+0x6d0>
    f254:	0007883a 	mov	r3,zero
    f258:	003fdd06 	br	f1d0 <__adddf3+0x818>
    f25c:	0009883a 	mov	r4,zero
    f260:	003ff706 	br	f240 <__adddf3+0x888>

0000f264 <__divdf3>:
    f264:	defff204 	addi	sp,sp,-56
    f268:	dd400915 	stw	r21,36(sp)
    f26c:	282ad53a 	srli	r21,r5,20
    f270:	dd000815 	stw	r20,32(sp)
    f274:	2828d7fa 	srli	r20,r5,31
    f278:	dc000415 	stw	r16,16(sp)
    f27c:	04000434 	movhi	r16,16
    f280:	df000c15 	stw	fp,48(sp)
    f284:	843fffc4 	addi	r16,r16,-1
    f288:	dfc00d15 	stw	ra,52(sp)
    f28c:	ddc00b15 	stw	r23,44(sp)
    f290:	dd800a15 	stw	r22,40(sp)
    f294:	dcc00715 	stw	r19,28(sp)
    f298:	dc800615 	stw	r18,24(sp)
    f29c:	dc400515 	stw	r17,20(sp)
    f2a0:	ad41ffcc 	andi	r21,r21,2047
    f2a4:	2c20703a 	and	r16,r5,r16
    f2a8:	a7003fcc 	andi	fp,r20,255
    f2ac:	a8006126 	beq	r21,zero,f434 <__divdf3+0x1d0>
    f2b0:	0081ffc4 	movi	r2,2047
    f2b4:	2025883a 	mov	r18,r4
    f2b8:	a8803726 	beq	r21,r2,f398 <__divdf3+0x134>
    f2bc:	80800434 	orhi	r2,r16,16
    f2c0:	100490fa 	slli	r2,r2,3
    f2c4:	2020d77a 	srli	r16,r4,29
    f2c8:	202490fa 	slli	r18,r4,3
    f2cc:	ad7f0044 	addi	r21,r21,-1023
    f2d0:	80a0b03a 	or	r16,r16,r2
    f2d4:	0027883a 	mov	r19,zero
    f2d8:	0013883a 	mov	r9,zero
    f2dc:	3804d53a 	srli	r2,r7,20
    f2e0:	382cd7fa 	srli	r22,r7,31
    f2e4:	04400434 	movhi	r17,16
    f2e8:	8c7fffc4 	addi	r17,r17,-1
    f2ec:	1081ffcc 	andi	r2,r2,2047
    f2f0:	3011883a 	mov	r8,r6
    f2f4:	3c62703a 	and	r17,r7,r17
    f2f8:	b5c03fcc 	andi	r23,r22,255
    f2fc:	10006c26 	beq	r2,zero,f4b0 <__divdf3+0x24c>
    f300:	00c1ffc4 	movi	r3,2047
    f304:	10c06426 	beq	r2,r3,f498 <__divdf3+0x234>
    f308:	88c00434 	orhi	r3,r17,16
    f30c:	180690fa 	slli	r3,r3,3
    f310:	3022d77a 	srli	r17,r6,29
    f314:	301090fa 	slli	r8,r6,3
    f318:	10bf0044 	addi	r2,r2,-1023
    f31c:	88e2b03a 	or	r17,r17,r3
    f320:	000f883a 	mov	r7,zero
    f324:	a58cf03a 	xor	r6,r20,r22
    f328:	3cc8b03a 	or	r4,r7,r19
    f32c:	a8abc83a 	sub	r21,r21,r2
    f330:	008003c4 	movi	r2,15
    f334:	3007883a 	mov	r3,r6
    f338:	34c03fcc 	andi	r19,r6,255
    f33c:	11009036 	bltu	r2,r4,f580 <__divdf3+0x31c>
    f340:	200890ba 	slli	r4,r4,2
    f344:	00800074 	movhi	r2,1
    f348:	10bcd604 	addi	r2,r2,-3240
    f34c:	2089883a 	add	r4,r4,r2
    f350:	20800017 	ldw	r2,0(r4)
    f354:	1000683a 	jmp	r2
    f358:	0000f580 	call	f58 <main+0xc68>
    f35c:	0000f3d0 	cmplti	zero,zero,975
    f360:	0000f570 	cmpltui	zero,zero,981
    f364:	0000f3c4 	movi	zero,975
    f368:	0000f570 	cmpltui	zero,zero,981
    f36c:	0000f544 	movi	zero,981
    f370:	0000f570 	cmpltui	zero,zero,981
    f374:	0000f3c4 	movi	zero,975
    f378:	0000f3d0 	cmplti	zero,zero,975
    f37c:	0000f3d0 	cmplti	zero,zero,975
    f380:	0000f544 	movi	zero,981
    f384:	0000f3c4 	movi	zero,975
    f388:	0000f3b4 	movhi	zero,974
    f38c:	0000f3b4 	movhi	zero,974
    f390:	0000f3b4 	movhi	zero,974
    f394:	0000f864 	muli	zero,zero,993
    f398:	2404b03a 	or	r2,r4,r16
    f39c:	1000661e 	bne	r2,zero,f538 <__divdf3+0x2d4>
    f3a0:	04c00204 	movi	r19,8
    f3a4:	0021883a 	mov	r16,zero
    f3a8:	0025883a 	mov	r18,zero
    f3ac:	02400084 	movi	r9,2
    f3b0:	003fca06 	br	f2dc <__divdf3+0x78>
    f3b4:	8023883a 	mov	r17,r16
    f3b8:	9011883a 	mov	r8,r18
    f3bc:	e02f883a 	mov	r23,fp
    f3c0:	480f883a 	mov	r7,r9
    f3c4:	00800084 	movi	r2,2
    f3c8:	3881311e 	bne	r7,r2,f890 <__divdf3+0x62c>
    f3cc:	b827883a 	mov	r19,r23
    f3d0:	98c0004c 	andi	r3,r19,1
    f3d4:	0081ffc4 	movi	r2,2047
    f3d8:	000b883a 	mov	r5,zero
    f3dc:	0025883a 	mov	r18,zero
    f3e0:	1004953a 	slli	r2,r2,20
    f3e4:	18c03fcc 	andi	r3,r3,255
    f3e8:	04400434 	movhi	r17,16
    f3ec:	8c7fffc4 	addi	r17,r17,-1
    f3f0:	180697fa 	slli	r3,r3,31
    f3f4:	2c4a703a 	and	r5,r5,r17
    f3f8:	288ab03a 	or	r5,r5,r2
    f3fc:	28c6b03a 	or	r3,r5,r3
    f400:	9005883a 	mov	r2,r18
    f404:	dfc00d17 	ldw	ra,52(sp)
    f408:	df000c17 	ldw	fp,48(sp)
    f40c:	ddc00b17 	ldw	r23,44(sp)
    f410:	dd800a17 	ldw	r22,40(sp)
    f414:	dd400917 	ldw	r21,36(sp)
    f418:	dd000817 	ldw	r20,32(sp)
    f41c:	dcc00717 	ldw	r19,28(sp)
    f420:	dc800617 	ldw	r18,24(sp)
    f424:	dc400517 	ldw	r17,20(sp)
    f428:	dc000417 	ldw	r16,16(sp)
    f42c:	dec00e04 	addi	sp,sp,56
    f430:	f800283a 	ret
    f434:	2404b03a 	or	r2,r4,r16
    f438:	2027883a 	mov	r19,r4
    f43c:	10003926 	beq	r2,zero,f524 <__divdf3+0x2c0>
    f440:	80012e26 	beq	r16,zero,f8fc <__divdf3+0x698>
    f444:	8009883a 	mov	r4,r16
    f448:	d9800315 	stw	r6,12(sp)
    f44c:	d9c00215 	stw	r7,8(sp)
    f450:	0010fbc0 	call	10fbc <__clzsi2>
    f454:	d9800317 	ldw	r6,12(sp)
    f458:	d9c00217 	ldw	r7,8(sp)
    f45c:	113ffd44 	addi	r4,r2,-11
    f460:	00c00704 	movi	r3,28
    f464:	19012116 	blt	r3,r4,f8ec <__divdf3+0x688>
    f468:	00c00744 	movi	r3,29
    f46c:	147ffe04 	addi	r17,r2,-8
    f470:	1907c83a 	sub	r3,r3,r4
    f474:	8460983a 	sll	r16,r16,r17
    f478:	98c6d83a 	srl	r3,r19,r3
    f47c:	9c64983a 	sll	r18,r19,r17
    f480:	1c20b03a 	or	r16,r3,r16
    f484:	1080fcc4 	addi	r2,r2,1011
    f488:	00abc83a 	sub	r21,zero,r2
    f48c:	0027883a 	mov	r19,zero
    f490:	0013883a 	mov	r9,zero
    f494:	003f9106 	br	f2dc <__divdf3+0x78>
    f498:	3446b03a 	or	r3,r6,r17
    f49c:	18001f1e 	bne	r3,zero,f51c <__divdf3+0x2b8>
    f4a0:	0023883a 	mov	r17,zero
    f4a4:	0011883a 	mov	r8,zero
    f4a8:	01c00084 	movi	r7,2
    f4ac:	003f9d06 	br	f324 <__divdf3+0xc0>
    f4b0:	3446b03a 	or	r3,r6,r17
    f4b4:	18001526 	beq	r3,zero,f50c <__divdf3+0x2a8>
    f4b8:	88011b26 	beq	r17,zero,f928 <__divdf3+0x6c4>
    f4bc:	8809883a 	mov	r4,r17
    f4c0:	d9800315 	stw	r6,12(sp)
    f4c4:	da400115 	stw	r9,4(sp)
    f4c8:	0010fbc0 	call	10fbc <__clzsi2>
    f4cc:	d9800317 	ldw	r6,12(sp)
    f4d0:	da400117 	ldw	r9,4(sp)
    f4d4:	113ffd44 	addi	r4,r2,-11
    f4d8:	00c00704 	movi	r3,28
    f4dc:	19010e16 	blt	r3,r4,f918 <__divdf3+0x6b4>
    f4e0:	00c00744 	movi	r3,29
    f4e4:	123ffe04 	addi	r8,r2,-8
    f4e8:	1907c83a 	sub	r3,r3,r4
    f4ec:	8a22983a 	sll	r17,r17,r8
    f4f0:	30c6d83a 	srl	r3,r6,r3
    f4f4:	3210983a 	sll	r8,r6,r8
    f4f8:	1c62b03a 	or	r17,r3,r17
    f4fc:	1080fcc4 	addi	r2,r2,1011
    f500:	0085c83a 	sub	r2,zero,r2
    f504:	000f883a 	mov	r7,zero
    f508:	003f8606 	br	f324 <__divdf3+0xc0>
    f50c:	0023883a 	mov	r17,zero
    f510:	0011883a 	mov	r8,zero
    f514:	01c00044 	movi	r7,1
    f518:	003f8206 	br	f324 <__divdf3+0xc0>
    f51c:	01c000c4 	movi	r7,3
    f520:	003f8006 	br	f324 <__divdf3+0xc0>
    f524:	04c00104 	movi	r19,4
    f528:	0021883a 	mov	r16,zero
    f52c:	0025883a 	mov	r18,zero
    f530:	02400044 	movi	r9,1
    f534:	003f6906 	br	f2dc <__divdf3+0x78>
    f538:	04c00304 	movi	r19,12
    f53c:	024000c4 	movi	r9,3
    f540:	003f6606 	br	f2dc <__divdf3+0x78>
    f544:	01400434 	movhi	r5,16
    f548:	0007883a 	mov	r3,zero
    f54c:	297fffc4 	addi	r5,r5,-1
    f550:	04bfffc4 	movi	r18,-1
    f554:	0081ffc4 	movi	r2,2047
    f558:	003fa106 	br	f3e0 <__divdf3+0x17c>
    f55c:	00c00044 	movi	r3,1
    f560:	1887c83a 	sub	r3,r3,r2
    f564:	01000e04 	movi	r4,56
    f568:	20c1210e 	bge	r4,r3,f9f0 <__divdf3+0x78c>
    f56c:	98c0004c 	andi	r3,r19,1
    f570:	0005883a 	mov	r2,zero
    f574:	000b883a 	mov	r5,zero
    f578:	0025883a 	mov	r18,zero
    f57c:	003f9806 	br	f3e0 <__divdf3+0x17c>
    f580:	8c00fd36 	bltu	r17,r16,f978 <__divdf3+0x714>
    f584:	8440fb26 	beq	r16,r17,f974 <__divdf3+0x710>
    f588:	8007883a 	mov	r3,r16
    f58c:	ad7fffc4 	addi	r21,r21,-1
    f590:	0021883a 	mov	r16,zero
    f594:	4004d63a 	srli	r2,r8,24
    f598:	8822923a 	slli	r17,r17,8
    f59c:	1809883a 	mov	r4,r3
    f5a0:	402c923a 	slli	r22,r8,8
    f5a4:	88b8b03a 	or	fp,r17,r2
    f5a8:	e028d43a 	srli	r20,fp,16
    f5ac:	d8c00015 	stw	r3,0(sp)
    f5b0:	e5ffffcc 	andi	r23,fp,65535
    f5b4:	a00b883a 	mov	r5,r20
    f5b8:	00046300 	call	4630 <__udivsi3>
    f5bc:	d8c00017 	ldw	r3,0(sp)
    f5c0:	a00b883a 	mov	r5,r20
    f5c4:	d8800315 	stw	r2,12(sp)
    f5c8:	1809883a 	mov	r4,r3
    f5cc:	00046940 	call	4694 <__umodsi3>
    f5d0:	d9800317 	ldw	r6,12(sp)
    f5d4:	1006943a 	slli	r3,r2,16
    f5d8:	9004d43a 	srli	r2,r18,16
    f5dc:	b9a3383a 	mul	r17,r23,r6
    f5e0:	10c4b03a 	or	r2,r2,r3
    f5e4:	1440062e 	bgeu	r2,r17,f600 <__divdf3+0x39c>
    f5e8:	1705883a 	add	r2,r2,fp
    f5ec:	30ffffc4 	addi	r3,r6,-1
    f5f0:	1700ee36 	bltu	r2,fp,f9ac <__divdf3+0x748>
    f5f4:	1440ed2e 	bgeu	r2,r17,f9ac <__divdf3+0x748>
    f5f8:	31bfff84 	addi	r6,r6,-2
    f5fc:	1705883a 	add	r2,r2,fp
    f600:	1463c83a 	sub	r17,r2,r17
    f604:	a00b883a 	mov	r5,r20
    f608:	8809883a 	mov	r4,r17
    f60c:	d9800315 	stw	r6,12(sp)
    f610:	00046300 	call	4630 <__udivsi3>
    f614:	a00b883a 	mov	r5,r20
    f618:	8809883a 	mov	r4,r17
    f61c:	d8800215 	stw	r2,8(sp)
    f620:	00046940 	call	4694 <__umodsi3>
    f624:	d9c00217 	ldw	r7,8(sp)
    f628:	1004943a 	slli	r2,r2,16
    f62c:	94bfffcc 	andi	r18,r18,65535
    f630:	b9d1383a 	mul	r8,r23,r7
    f634:	90a4b03a 	or	r18,r18,r2
    f638:	d9800317 	ldw	r6,12(sp)
    f63c:	9200062e 	bgeu	r18,r8,f658 <__divdf3+0x3f4>
    f640:	9725883a 	add	r18,r18,fp
    f644:	38bfffc4 	addi	r2,r7,-1
    f648:	9700d636 	bltu	r18,fp,f9a4 <__divdf3+0x740>
    f64c:	9200d52e 	bgeu	r18,r8,f9a4 <__divdf3+0x740>
    f650:	39ffff84 	addi	r7,r7,-2
    f654:	9725883a 	add	r18,r18,fp
    f658:	3004943a 	slli	r2,r6,16
    f65c:	b012d43a 	srli	r9,r22,16
    f660:	b1bfffcc 	andi	r6,r22,65535
    f664:	11e2b03a 	or	r17,r2,r7
    f668:	8806d43a 	srli	r3,r17,16
    f66c:	893fffcc 	andi	r4,r17,65535
    f670:	218b383a 	mul	r5,r4,r6
    f674:	30c5383a 	mul	r2,r6,r3
    f678:	2249383a 	mul	r4,r4,r9
    f67c:	280ed43a 	srli	r7,r5,16
    f680:	9225c83a 	sub	r18,r18,r8
    f684:	2089883a 	add	r4,r4,r2
    f688:	3909883a 	add	r4,r7,r4
    f68c:	1a47383a 	mul	r3,r3,r9
    f690:	2080022e 	bgeu	r4,r2,f69c <__divdf3+0x438>
    f694:	00800074 	movhi	r2,1
    f698:	1887883a 	add	r3,r3,r2
    f69c:	2004d43a 	srli	r2,r4,16
    f6a0:	2008943a 	slli	r4,r4,16
    f6a4:	297fffcc 	andi	r5,r5,65535
    f6a8:	10c7883a 	add	r3,r2,r3
    f6ac:	2149883a 	add	r4,r4,r5
    f6b0:	90c0a536 	bltu	r18,r3,f948 <__divdf3+0x6e4>
    f6b4:	90c0bf26 	beq	r18,r3,f9b4 <__divdf3+0x750>
    f6b8:	90c7c83a 	sub	r3,r18,r3
    f6bc:	810fc83a 	sub	r7,r16,r4
    f6c0:	81e5803a 	cmpltu	r18,r16,r7
    f6c4:	1ca5c83a 	sub	r18,r3,r18
    f6c8:	e480c126 	beq	fp,r18,f9d0 <__divdf3+0x76c>
    f6cc:	a00b883a 	mov	r5,r20
    f6d0:	9009883a 	mov	r4,r18
    f6d4:	d9800315 	stw	r6,12(sp)
    f6d8:	d9c00215 	stw	r7,8(sp)
    f6dc:	da400115 	stw	r9,4(sp)
    f6e0:	00046300 	call	4630 <__udivsi3>
    f6e4:	a00b883a 	mov	r5,r20
    f6e8:	9009883a 	mov	r4,r18
    f6ec:	d8800015 	stw	r2,0(sp)
    f6f0:	00046940 	call	4694 <__umodsi3>
    f6f4:	d9c00217 	ldw	r7,8(sp)
    f6f8:	da000017 	ldw	r8,0(sp)
    f6fc:	1006943a 	slli	r3,r2,16
    f700:	3804d43a 	srli	r2,r7,16
    f704:	ba21383a 	mul	r16,r23,r8
    f708:	d9800317 	ldw	r6,12(sp)
    f70c:	10c4b03a 	or	r2,r2,r3
    f710:	da400117 	ldw	r9,4(sp)
    f714:	1400062e 	bgeu	r2,r16,f730 <__divdf3+0x4cc>
    f718:	1705883a 	add	r2,r2,fp
    f71c:	40ffffc4 	addi	r3,r8,-1
    f720:	1700ad36 	bltu	r2,fp,f9d8 <__divdf3+0x774>
    f724:	1400ac2e 	bgeu	r2,r16,f9d8 <__divdf3+0x774>
    f728:	423fff84 	addi	r8,r8,-2
    f72c:	1705883a 	add	r2,r2,fp
    f730:	1421c83a 	sub	r16,r2,r16
    f734:	a00b883a 	mov	r5,r20
    f738:	8009883a 	mov	r4,r16
    f73c:	d9800315 	stw	r6,12(sp)
    f740:	d9c00215 	stw	r7,8(sp)
    f744:	da000015 	stw	r8,0(sp)
    f748:	da400115 	stw	r9,4(sp)
    f74c:	00046300 	call	4630 <__udivsi3>
    f750:	8009883a 	mov	r4,r16
    f754:	a00b883a 	mov	r5,r20
    f758:	1025883a 	mov	r18,r2
    f75c:	00046940 	call	4694 <__umodsi3>
    f760:	d9c00217 	ldw	r7,8(sp)
    f764:	1004943a 	slli	r2,r2,16
    f768:	bcaf383a 	mul	r23,r23,r18
    f76c:	393fffcc 	andi	r4,r7,65535
    f770:	2088b03a 	or	r4,r4,r2
    f774:	d9800317 	ldw	r6,12(sp)
    f778:	da000017 	ldw	r8,0(sp)
    f77c:	da400117 	ldw	r9,4(sp)
    f780:	25c0062e 	bgeu	r4,r23,f79c <__divdf3+0x538>
    f784:	2709883a 	add	r4,r4,fp
    f788:	90bfffc4 	addi	r2,r18,-1
    f78c:	27009436 	bltu	r4,fp,f9e0 <__divdf3+0x77c>
    f790:	25c0932e 	bgeu	r4,r23,f9e0 <__divdf3+0x77c>
    f794:	94bfff84 	addi	r18,r18,-2
    f798:	2709883a 	add	r4,r4,fp
    f79c:	4004943a 	slli	r2,r8,16
    f7a0:	25efc83a 	sub	r23,r4,r23
    f7a4:	1490b03a 	or	r8,r2,r18
    f7a8:	4008d43a 	srli	r4,r8,16
    f7ac:	40ffffcc 	andi	r3,r8,65535
    f7b0:	30c5383a 	mul	r2,r6,r3
    f7b4:	1a47383a 	mul	r3,r3,r9
    f7b8:	310d383a 	mul	r6,r6,r4
    f7bc:	100ad43a 	srli	r5,r2,16
    f7c0:	4913383a 	mul	r9,r9,r4
    f7c4:	1987883a 	add	r3,r3,r6
    f7c8:	28c7883a 	add	r3,r5,r3
    f7cc:	1980022e 	bgeu	r3,r6,f7d8 <__divdf3+0x574>
    f7d0:	01000074 	movhi	r4,1
    f7d4:	4913883a 	add	r9,r9,r4
    f7d8:	1808d43a 	srli	r4,r3,16
    f7dc:	1806943a 	slli	r3,r3,16
    f7e0:	10bfffcc 	andi	r2,r2,65535
    f7e4:	2253883a 	add	r9,r4,r9
    f7e8:	1887883a 	add	r3,r3,r2
    f7ec:	ba403836 	bltu	r23,r9,f8d0 <__divdf3+0x66c>
    f7f0:	ba403626 	beq	r23,r9,f8cc <__divdf3+0x668>
    f7f4:	42000054 	ori	r8,r8,1
    f7f8:	a880ffc4 	addi	r2,r21,1023
    f7fc:	00bf570e 	bge	zero,r2,f55c <__divdf3+0x2f8>
    f800:	40c001cc 	andi	r3,r8,7
    f804:	18000726 	beq	r3,zero,f824 <__divdf3+0x5c0>
    f808:	40c003cc 	andi	r3,r8,15
    f80c:	01000104 	movi	r4,4
    f810:	19000426 	beq	r3,r4,f824 <__divdf3+0x5c0>
    f814:	4107883a 	add	r3,r8,r4
    f818:	1a11803a 	cmpltu	r8,r3,r8
    f81c:	8a23883a 	add	r17,r17,r8
    f820:	1811883a 	mov	r8,r3
    f824:	88c0402c 	andhi	r3,r17,256
    f828:	18000426 	beq	r3,zero,f83c <__divdf3+0x5d8>
    f82c:	00ffc034 	movhi	r3,65280
    f830:	18ffffc4 	addi	r3,r3,-1
    f834:	a8810004 	addi	r2,r21,1024
    f838:	88e2703a 	and	r17,r17,r3
    f83c:	00c1ff84 	movi	r3,2046
    f840:	18bee316 	blt	r3,r2,f3d0 <__divdf3+0x16c>
    f844:	8824977a 	slli	r18,r17,29
    f848:	4010d0fa 	srli	r8,r8,3
    f84c:	8822927a 	slli	r17,r17,9
    f850:	1081ffcc 	andi	r2,r2,2047
    f854:	9224b03a 	or	r18,r18,r8
    f858:	880ad33a 	srli	r5,r17,12
    f85c:	98c0004c 	andi	r3,r19,1
    f860:	003edf06 	br	f3e0 <__divdf3+0x17c>
    f864:	8080022c 	andhi	r2,r16,8
    f868:	10001226 	beq	r2,zero,f8b4 <__divdf3+0x650>
    f86c:	8880022c 	andhi	r2,r17,8
    f870:	1000101e 	bne	r2,zero,f8b4 <__divdf3+0x650>
    f874:	00800434 	movhi	r2,16
    f878:	89400234 	orhi	r5,r17,8
    f87c:	10bfffc4 	addi	r2,r2,-1
    f880:	b007883a 	mov	r3,r22
    f884:	288a703a 	and	r5,r5,r2
    f888:	4025883a 	mov	r18,r8
    f88c:	003f3106 	br	f554 <__divdf3+0x2f0>
    f890:	008000c4 	movi	r2,3
    f894:	3880a626 	beq	r7,r2,fb30 <__divdf3+0x8cc>
    f898:	00800044 	movi	r2,1
    f89c:	3880521e 	bne	r7,r2,f9e8 <__divdf3+0x784>
    f8a0:	b807883a 	mov	r3,r23
    f8a4:	0005883a 	mov	r2,zero
    f8a8:	000b883a 	mov	r5,zero
    f8ac:	0025883a 	mov	r18,zero
    f8b0:	003ecb06 	br	f3e0 <__divdf3+0x17c>
    f8b4:	00800434 	movhi	r2,16
    f8b8:	81400234 	orhi	r5,r16,8
    f8bc:	10bfffc4 	addi	r2,r2,-1
    f8c0:	a007883a 	mov	r3,r20
    f8c4:	288a703a 	and	r5,r5,r2
    f8c8:	003f2206 	br	f554 <__divdf3+0x2f0>
    f8cc:	183fca26 	beq	r3,zero,f7f8 <__divdf3+0x594>
    f8d0:	e5ef883a 	add	r23,fp,r23
    f8d4:	40bfffc4 	addi	r2,r8,-1
    f8d8:	bf00392e 	bgeu	r23,fp,f9c0 <__divdf3+0x75c>
    f8dc:	1011883a 	mov	r8,r2
    f8e0:	ba7fc41e 	bne	r23,r9,f7f4 <__divdf3+0x590>
    f8e4:	b0ffc31e 	bne	r22,r3,f7f4 <__divdf3+0x590>
    f8e8:	003fc306 	br	f7f8 <__divdf3+0x594>
    f8ec:	143ff604 	addi	r16,r2,-40
    f8f0:	9c20983a 	sll	r16,r19,r16
    f8f4:	0025883a 	mov	r18,zero
    f8f8:	003ee206 	br	f484 <__divdf3+0x220>
    f8fc:	d9800315 	stw	r6,12(sp)
    f900:	d9c00215 	stw	r7,8(sp)
    f904:	0010fbc0 	call	10fbc <__clzsi2>
    f908:	10800804 	addi	r2,r2,32
    f90c:	d9c00217 	ldw	r7,8(sp)
    f910:	d9800317 	ldw	r6,12(sp)
    f914:	003ed106 	br	f45c <__divdf3+0x1f8>
    f918:	147ff604 	addi	r17,r2,-40
    f91c:	3462983a 	sll	r17,r6,r17
    f920:	0011883a 	mov	r8,zero
    f924:	003ef506 	br	f4fc <__divdf3+0x298>
    f928:	3009883a 	mov	r4,r6
    f92c:	d9800315 	stw	r6,12(sp)
    f930:	da400115 	stw	r9,4(sp)
    f934:	0010fbc0 	call	10fbc <__clzsi2>
    f938:	10800804 	addi	r2,r2,32
    f93c:	da400117 	ldw	r9,4(sp)
    f940:	d9800317 	ldw	r6,12(sp)
    f944:	003ee306 	br	f4d4 <__divdf3+0x270>
    f948:	85a1883a 	add	r16,r16,r22
    f94c:	8585803a 	cmpltu	r2,r16,r22
    f950:	1705883a 	add	r2,r2,fp
    f954:	14a5883a 	add	r18,r2,r18
    f958:	88bfffc4 	addi	r2,r17,-1
    f95c:	e4800c2e 	bgeu	fp,r18,f990 <__divdf3+0x72c>
    f960:	90c03e36 	bltu	r18,r3,fa5c <__divdf3+0x7f8>
    f964:	1c806926 	beq	r3,r18,fb0c <__divdf3+0x8a8>
    f968:	90c7c83a 	sub	r3,r18,r3
    f96c:	1023883a 	mov	r17,r2
    f970:	003f5206 	br	f6bc <__divdf3+0x458>
    f974:	923f0436 	bltu	r18,r8,f588 <__divdf3+0x324>
    f978:	800897fa 	slli	r4,r16,31
    f97c:	9004d07a 	srli	r2,r18,1
    f980:	8006d07a 	srli	r3,r16,1
    f984:	902097fa 	slli	r16,r18,31
    f988:	20a4b03a 	or	r18,r4,r2
    f98c:	003f0106 	br	f594 <__divdf3+0x330>
    f990:	e4bff51e 	bne	fp,r18,f968 <__divdf3+0x704>
    f994:	85bff22e 	bgeu	r16,r22,f960 <__divdf3+0x6fc>
    f998:	e0c7c83a 	sub	r3,fp,r3
    f99c:	1023883a 	mov	r17,r2
    f9a0:	003f4606 	br	f6bc <__divdf3+0x458>
    f9a4:	100f883a 	mov	r7,r2
    f9a8:	003f2b06 	br	f658 <__divdf3+0x3f4>
    f9ac:	180d883a 	mov	r6,r3
    f9b0:	003f1306 	br	f600 <__divdf3+0x39c>
    f9b4:	813fe436 	bltu	r16,r4,f948 <__divdf3+0x6e4>
    f9b8:	0007883a 	mov	r3,zero
    f9bc:	003f3f06 	br	f6bc <__divdf3+0x458>
    f9c0:	ba402c36 	bltu	r23,r9,fa74 <__divdf3+0x810>
    f9c4:	4dc05426 	beq	r9,r23,fb18 <__divdf3+0x8b4>
    f9c8:	1011883a 	mov	r8,r2
    f9cc:	003f8906 	br	f7f4 <__divdf3+0x590>
    f9d0:	023fffc4 	movi	r8,-1
    f9d4:	003f8806 	br	f7f8 <__divdf3+0x594>
    f9d8:	1811883a 	mov	r8,r3
    f9dc:	003f5406 	br	f730 <__divdf3+0x4cc>
    f9e0:	1025883a 	mov	r18,r2
    f9e4:	003f6d06 	br	f79c <__divdf3+0x538>
    f9e8:	b827883a 	mov	r19,r23
    f9ec:	003f8206 	br	f7f8 <__divdf3+0x594>
    f9f0:	010007c4 	movi	r4,31
    f9f4:	20c02616 	blt	r4,r3,fa90 <__divdf3+0x82c>
    f9f8:	00800804 	movi	r2,32
    f9fc:	10c5c83a 	sub	r2,r2,r3
    fa00:	888a983a 	sll	r5,r17,r2
    fa04:	40c8d83a 	srl	r4,r8,r3
    fa08:	4084983a 	sll	r2,r8,r2
    fa0c:	88e2d83a 	srl	r17,r17,r3
    fa10:	2906b03a 	or	r3,r5,r4
    fa14:	1004c03a 	cmpne	r2,r2,zero
    fa18:	1886b03a 	or	r3,r3,r2
    fa1c:	188001cc 	andi	r2,r3,7
    fa20:	10000726 	beq	r2,zero,fa40 <__divdf3+0x7dc>
    fa24:	188003cc 	andi	r2,r3,15
    fa28:	01000104 	movi	r4,4
    fa2c:	11000426 	beq	r2,r4,fa40 <__divdf3+0x7dc>
    fa30:	1805883a 	mov	r2,r3
    fa34:	10c00104 	addi	r3,r2,4
    fa38:	1885803a 	cmpltu	r2,r3,r2
    fa3c:	88a3883a 	add	r17,r17,r2
    fa40:	8880202c 	andhi	r2,r17,128
    fa44:	10002726 	beq	r2,zero,fae4 <__divdf3+0x880>
    fa48:	98c0004c 	andi	r3,r19,1
    fa4c:	00800044 	movi	r2,1
    fa50:	000b883a 	mov	r5,zero
    fa54:	0025883a 	mov	r18,zero
    fa58:	003e6106 	br	f3e0 <__divdf3+0x17c>
    fa5c:	85a1883a 	add	r16,r16,r22
    fa60:	8585803a 	cmpltu	r2,r16,r22
    fa64:	1705883a 	add	r2,r2,fp
    fa68:	14a5883a 	add	r18,r2,r18
    fa6c:	8c7fff84 	addi	r17,r17,-2
    fa70:	003f1106 	br	f6b8 <__divdf3+0x454>
    fa74:	b589883a 	add	r4,r22,r22
    fa78:	25ad803a 	cmpltu	r22,r4,r22
    fa7c:	b739883a 	add	fp,r22,fp
    fa80:	40bfff84 	addi	r2,r8,-2
    fa84:	bf2f883a 	add	r23,r23,fp
    fa88:	202d883a 	mov	r22,r4
    fa8c:	003f9306 	br	f8dc <__divdf3+0x678>
    fa90:	013ff844 	movi	r4,-31
    fa94:	2085c83a 	sub	r2,r4,r2
    fa98:	8888d83a 	srl	r4,r17,r2
    fa9c:	00800804 	movi	r2,32
    faa0:	18802126 	beq	r3,r2,fb28 <__divdf3+0x8c4>
    faa4:	00801004 	movi	r2,64
    faa8:	10c5c83a 	sub	r2,r2,r3
    faac:	8884983a 	sll	r2,r17,r2
    fab0:	1204b03a 	or	r2,r2,r8
    fab4:	1004c03a 	cmpne	r2,r2,zero
    fab8:	2084b03a 	or	r2,r4,r2
    fabc:	144001cc 	andi	r17,r2,7
    fac0:	88000d1e 	bne	r17,zero,faf8 <__divdf3+0x894>
    fac4:	000b883a 	mov	r5,zero
    fac8:	1024d0fa 	srli	r18,r2,3
    facc:	98c0004c 	andi	r3,r19,1
    fad0:	0005883a 	mov	r2,zero
    fad4:	9464b03a 	or	r18,r18,r17
    fad8:	003e4106 	br	f3e0 <__divdf3+0x17c>
    fadc:	1007883a 	mov	r3,r2
    fae0:	0023883a 	mov	r17,zero
    fae4:	880a927a 	slli	r5,r17,9
    fae8:	1805883a 	mov	r2,r3
    faec:	8822977a 	slli	r17,r17,29
    faf0:	280ad33a 	srli	r5,r5,12
    faf4:	003ff406 	br	fac8 <__divdf3+0x864>
    faf8:	10c003cc 	andi	r3,r2,15
    fafc:	01000104 	movi	r4,4
    fb00:	193ff626 	beq	r3,r4,fadc <__divdf3+0x878>
    fb04:	0023883a 	mov	r17,zero
    fb08:	003fca06 	br	fa34 <__divdf3+0x7d0>
    fb0c:	813fd336 	bltu	r16,r4,fa5c <__divdf3+0x7f8>
    fb10:	1023883a 	mov	r17,r2
    fb14:	003fa806 	br	f9b8 <__divdf3+0x754>
    fb18:	b0ffd636 	bltu	r22,r3,fa74 <__divdf3+0x810>
    fb1c:	1011883a 	mov	r8,r2
    fb20:	b0ff341e 	bne	r22,r3,f7f4 <__divdf3+0x590>
    fb24:	003f3406 	br	f7f8 <__divdf3+0x594>
    fb28:	0005883a 	mov	r2,zero
    fb2c:	003fe006 	br	fab0 <__divdf3+0x84c>
    fb30:	00800434 	movhi	r2,16
    fb34:	89400234 	orhi	r5,r17,8
    fb38:	10bfffc4 	addi	r2,r2,-1
    fb3c:	b807883a 	mov	r3,r23
    fb40:	288a703a 	and	r5,r5,r2
    fb44:	4025883a 	mov	r18,r8
    fb48:	003e8206 	br	f554 <__divdf3+0x2f0>

0000fb4c <__eqdf2>:
    fb4c:	2804d53a 	srli	r2,r5,20
    fb50:	3806d53a 	srli	r3,r7,20
    fb54:	02000434 	movhi	r8,16
    fb58:	423fffc4 	addi	r8,r8,-1
    fb5c:	1081ffcc 	andi	r2,r2,2047
    fb60:	0281ffc4 	movi	r10,2047
    fb64:	2a12703a 	and	r9,r5,r8
    fb68:	18c1ffcc 	andi	r3,r3,2047
    fb6c:	3a10703a 	and	r8,r7,r8
    fb70:	280ad7fa 	srli	r5,r5,31
    fb74:	380ed7fa 	srli	r7,r7,31
    fb78:	12801026 	beq	r2,r10,fbbc <__eqdf2+0x70>
    fb7c:	0281ffc4 	movi	r10,2047
    fb80:	1a800a26 	beq	r3,r10,fbac <__eqdf2+0x60>
    fb84:	10c00226 	beq	r2,r3,fb90 <__eqdf2+0x44>
    fb88:	00800044 	movi	r2,1
    fb8c:	f800283a 	ret
    fb90:	4a3ffd1e 	bne	r9,r8,fb88 <__eqdf2+0x3c>
    fb94:	21bffc1e 	bne	r4,r6,fb88 <__eqdf2+0x3c>
    fb98:	29c00c26 	beq	r5,r7,fbcc <__eqdf2+0x80>
    fb9c:	103ffa1e 	bne	r2,zero,fb88 <__eqdf2+0x3c>
    fba0:	2244b03a 	or	r2,r4,r9
    fba4:	1004c03a 	cmpne	r2,r2,zero
    fba8:	f800283a 	ret
    fbac:	3214b03a 	or	r10,r6,r8
    fbb0:	503ff426 	beq	r10,zero,fb84 <__eqdf2+0x38>
    fbb4:	00800044 	movi	r2,1
    fbb8:	f800283a 	ret
    fbbc:	2254b03a 	or	r10,r4,r9
    fbc0:	503fee26 	beq	r10,zero,fb7c <__eqdf2+0x30>
    fbc4:	00800044 	movi	r2,1
    fbc8:	f800283a 	ret
    fbcc:	0005883a 	mov	r2,zero
    fbd0:	f800283a 	ret

0000fbd4 <__gedf2>:
    fbd4:	2804d53a 	srli	r2,r5,20
    fbd8:	3806d53a 	srli	r3,r7,20
    fbdc:	02000434 	movhi	r8,16
    fbe0:	423fffc4 	addi	r8,r8,-1
    fbe4:	1081ffcc 	andi	r2,r2,2047
    fbe8:	0241ffc4 	movi	r9,2047
    fbec:	2a14703a 	and	r10,r5,r8
    fbf0:	18c1ffcc 	andi	r3,r3,2047
    fbf4:	3a10703a 	and	r8,r7,r8
    fbf8:	280ad7fa 	srli	r5,r5,31
    fbfc:	380ed7fa 	srli	r7,r7,31
    fc00:	12401d26 	beq	r2,r9,fc78 <__gedf2+0xa4>
    fc04:	0241ffc4 	movi	r9,2047
    fc08:	1a401226 	beq	r3,r9,fc54 <__gedf2+0x80>
    fc0c:	1000081e 	bne	r2,zero,fc30 <__gedf2+0x5c>
    fc10:	2296b03a 	or	r11,r4,r10
    fc14:	5813003a 	cmpeq	r9,r11,zero
    fc18:	1800091e 	bne	r3,zero,fc40 <__gedf2+0x6c>
    fc1c:	3218b03a 	or	r12,r6,r8
    fc20:	6000071e 	bne	r12,zero,fc40 <__gedf2+0x6c>
    fc24:	0005883a 	mov	r2,zero
    fc28:	5800101e 	bne	r11,zero,fc6c <__gedf2+0x98>
    fc2c:	f800283a 	ret
    fc30:	18000c1e 	bne	r3,zero,fc64 <__gedf2+0x90>
    fc34:	3212b03a 	or	r9,r6,r8
    fc38:	48000c26 	beq	r9,zero,fc6c <__gedf2+0x98>
    fc3c:	0013883a 	mov	r9,zero
    fc40:	39c03fcc 	andi	r7,r7,255
    fc44:	48000826 	beq	r9,zero,fc68 <__gedf2+0x94>
    fc48:	38000926 	beq	r7,zero,fc70 <__gedf2+0x9c>
    fc4c:	00800044 	movi	r2,1
    fc50:	f800283a 	ret
    fc54:	3212b03a 	or	r9,r6,r8
    fc58:	483fec26 	beq	r9,zero,fc0c <__gedf2+0x38>
    fc5c:	00bfff84 	movi	r2,-2
    fc60:	f800283a 	ret
    fc64:	39c03fcc 	andi	r7,r7,255
    fc68:	29c00626 	beq	r5,r7,fc84 <__gedf2+0xb0>
    fc6c:	283ff726 	beq	r5,zero,fc4c <__gedf2+0x78>
    fc70:	00bfffc4 	movi	r2,-1
    fc74:	f800283a 	ret
    fc78:	2292b03a 	or	r9,r4,r10
    fc7c:	483fe126 	beq	r9,zero,fc04 <__gedf2+0x30>
    fc80:	003ff606 	br	fc5c <__gedf2+0x88>
    fc84:	18bff916 	blt	r3,r2,fc6c <__gedf2+0x98>
    fc88:	10c00316 	blt	r2,r3,fc98 <__gedf2+0xc4>
    fc8c:	42bff736 	bltu	r8,r10,fc6c <__gedf2+0x98>
    fc90:	52000326 	beq	r10,r8,fca0 <__gedf2+0xcc>
    fc94:	5200042e 	bgeu	r10,r8,fca8 <__gedf2+0xd4>
    fc98:	283fec1e 	bne	r5,zero,fc4c <__gedf2+0x78>
    fc9c:	003ff406 	br	fc70 <__gedf2+0x9c>
    fca0:	313ff236 	bltu	r6,r4,fc6c <__gedf2+0x98>
    fca4:	21bffc36 	bltu	r4,r6,fc98 <__gedf2+0xc4>
    fca8:	0005883a 	mov	r2,zero
    fcac:	f800283a 	ret

0000fcb0 <__ledf2>:
    fcb0:	2804d53a 	srli	r2,r5,20
    fcb4:	3810d53a 	srli	r8,r7,20
    fcb8:	00c00434 	movhi	r3,16
    fcbc:	18ffffc4 	addi	r3,r3,-1
    fcc0:	1081ffcc 	andi	r2,r2,2047
    fcc4:	0241ffc4 	movi	r9,2047
    fcc8:	28d4703a 	and	r10,r5,r3
    fccc:	4201ffcc 	andi	r8,r8,2047
    fcd0:	38c6703a 	and	r3,r7,r3
    fcd4:	280ad7fa 	srli	r5,r5,31
    fcd8:	380ed7fa 	srli	r7,r7,31
    fcdc:	12401f26 	beq	r2,r9,fd5c <__ledf2+0xac>
    fce0:	0241ffc4 	movi	r9,2047
    fce4:	42401426 	beq	r8,r9,fd38 <__ledf2+0x88>
    fce8:	1000091e 	bne	r2,zero,fd10 <__ledf2+0x60>
    fcec:	2296b03a 	or	r11,r4,r10
    fcf0:	5813003a 	cmpeq	r9,r11,zero
    fcf4:	29403fcc 	andi	r5,r5,255
    fcf8:	40000a1e 	bne	r8,zero,fd24 <__ledf2+0x74>
    fcfc:	30d8b03a 	or	r12,r6,r3
    fd00:	6000081e 	bne	r12,zero,fd24 <__ledf2+0x74>
    fd04:	0005883a 	mov	r2,zero
    fd08:	5800111e 	bne	r11,zero,fd50 <__ledf2+0xa0>
    fd0c:	f800283a 	ret
    fd10:	29403fcc 	andi	r5,r5,255
    fd14:	40000c1e 	bne	r8,zero,fd48 <__ledf2+0x98>
    fd18:	30d2b03a 	or	r9,r6,r3
    fd1c:	48000c26 	beq	r9,zero,fd50 <__ledf2+0xa0>
    fd20:	0013883a 	mov	r9,zero
    fd24:	39c03fcc 	andi	r7,r7,255
    fd28:	48000826 	beq	r9,zero,fd4c <__ledf2+0x9c>
    fd2c:	38001126 	beq	r7,zero,fd74 <__ledf2+0xc4>
    fd30:	00800044 	movi	r2,1
    fd34:	f800283a 	ret
    fd38:	30d2b03a 	or	r9,r6,r3
    fd3c:	483fea26 	beq	r9,zero,fce8 <__ledf2+0x38>
    fd40:	00800084 	movi	r2,2
    fd44:	f800283a 	ret
    fd48:	39c03fcc 	andi	r7,r7,255
    fd4c:	39400726 	beq	r7,r5,fd6c <__ledf2+0xbc>
    fd50:	2800081e 	bne	r5,zero,fd74 <__ledf2+0xc4>
    fd54:	00800044 	movi	r2,1
    fd58:	f800283a 	ret
    fd5c:	2292b03a 	or	r9,r4,r10
    fd60:	483fdf26 	beq	r9,zero,fce0 <__ledf2+0x30>
    fd64:	00800084 	movi	r2,2
    fd68:	f800283a 	ret
    fd6c:	4080030e 	bge	r8,r2,fd7c <__ledf2+0xcc>
    fd70:	383fef26 	beq	r7,zero,fd30 <__ledf2+0x80>
    fd74:	00bfffc4 	movi	r2,-1
    fd78:	f800283a 	ret
    fd7c:	123feb16 	blt	r2,r8,fd2c <__ledf2+0x7c>
    fd80:	1abff336 	bltu	r3,r10,fd50 <__ledf2+0xa0>
    fd84:	50c00326 	beq	r10,r3,fd94 <__ledf2+0xe4>
    fd88:	50c0042e 	bgeu	r10,r3,fd9c <__ledf2+0xec>
    fd8c:	283fe81e 	bne	r5,zero,fd30 <__ledf2+0x80>
    fd90:	003ff806 	br	fd74 <__ledf2+0xc4>
    fd94:	313fee36 	bltu	r6,r4,fd50 <__ledf2+0xa0>
    fd98:	21bffc36 	bltu	r4,r6,fd8c <__ledf2+0xdc>
    fd9c:	0005883a 	mov	r2,zero
    fda0:	f800283a 	ret

0000fda4 <__muldf3>:
    fda4:	defff304 	addi	sp,sp,-52
    fda8:	2804d53a 	srli	r2,r5,20
    fdac:	dd800915 	stw	r22,36(sp)
    fdb0:	282cd7fa 	srli	r22,r5,31
    fdb4:	dc000315 	stw	r16,12(sp)
    fdb8:	04000434 	movhi	r16,16
    fdbc:	dd400815 	stw	r21,32(sp)
    fdc0:	dc800515 	stw	r18,20(sp)
    fdc4:	843fffc4 	addi	r16,r16,-1
    fdc8:	dfc00c15 	stw	ra,48(sp)
    fdcc:	df000b15 	stw	fp,44(sp)
    fdd0:	ddc00a15 	stw	r23,40(sp)
    fdd4:	dd000715 	stw	r20,28(sp)
    fdd8:	dcc00615 	stw	r19,24(sp)
    fddc:	dc400415 	stw	r17,16(sp)
    fde0:	1481ffcc 	andi	r18,r2,2047
    fde4:	2c20703a 	and	r16,r5,r16
    fde8:	b02b883a 	mov	r21,r22
    fdec:	b2403fcc 	andi	r9,r22,255
    fdf0:	90006026 	beq	r18,zero,ff74 <__muldf3+0x1d0>
    fdf4:	0081ffc4 	movi	r2,2047
    fdf8:	2029883a 	mov	r20,r4
    fdfc:	90803626 	beq	r18,r2,fed8 <__muldf3+0x134>
    fe00:	80800434 	orhi	r2,r16,16
    fe04:	100490fa 	slli	r2,r2,3
    fe08:	2020d77a 	srli	r16,r4,29
    fe0c:	202890fa 	slli	r20,r4,3
    fe10:	94bf0044 	addi	r18,r18,-1023
    fe14:	80a0b03a 	or	r16,r16,r2
    fe18:	0027883a 	mov	r19,zero
    fe1c:	0039883a 	mov	fp,zero
    fe20:	3804d53a 	srli	r2,r7,20
    fe24:	382ed7fa 	srli	r23,r7,31
    fe28:	04400434 	movhi	r17,16
    fe2c:	8c7fffc4 	addi	r17,r17,-1
    fe30:	1081ffcc 	andi	r2,r2,2047
    fe34:	3011883a 	mov	r8,r6
    fe38:	3c62703a 	and	r17,r7,r17
    fe3c:	ba803fcc 	andi	r10,r23,255
    fe40:	10006d26 	beq	r2,zero,fff8 <__muldf3+0x254>
    fe44:	00c1ffc4 	movi	r3,2047
    fe48:	10c06526 	beq	r2,r3,ffe0 <__muldf3+0x23c>
    fe4c:	88c00434 	orhi	r3,r17,16
    fe50:	180690fa 	slli	r3,r3,3
    fe54:	3022d77a 	srli	r17,r6,29
    fe58:	301090fa 	slli	r8,r6,3
    fe5c:	10bf0044 	addi	r2,r2,-1023
    fe60:	88e2b03a 	or	r17,r17,r3
    fe64:	000b883a 	mov	r5,zero
    fe68:	9085883a 	add	r2,r18,r2
    fe6c:	2cc8b03a 	or	r4,r5,r19
    fe70:	00c003c4 	movi	r3,15
    fe74:	bdacf03a 	xor	r22,r23,r22
    fe78:	12c00044 	addi	r11,r2,1
    fe7c:	19009936 	bltu	r3,r4,100e4 <__muldf3+0x340>
    fe80:	200890ba 	slli	r4,r4,2
    fe84:	00c00074 	movhi	r3,1
    fe88:	18ffa604 	addi	r3,r3,-360
    fe8c:	20c9883a 	add	r4,r4,r3
    fe90:	20c00017 	ldw	r3,0(r4)
    fe94:	1800683a 	jmp	r3
    fe98:	000100e4 	muli	zero,zero,1027
    fe9c:	0000fef8 	rdprs	zero,zero,1019
    fea0:	0000fef8 	rdprs	zero,zero,1019
    fea4:	0000fef4 	movhi	zero,1019
    fea8:	000100c0 	call	100c <main+0xd1c>
    feac:	000100c0 	call	100c <main+0xd1c>
    feb0:	000100a8 	cmpgeui	zero,zero,1026
    feb4:	0000fef4 	movhi	zero,1019
    feb8:	000100c0 	call	100c <main+0xd1c>
    febc:	000100a8 	cmpgeui	zero,zero,1026
    fec0:	000100c0 	call	100c <main+0xd1c>
    fec4:	0000fef4 	movhi	zero,1019
    fec8:	000100d0 	cmplti	zero,zero,1027
    fecc:	000100d0 	cmplti	zero,zero,1027
    fed0:	000100d0 	cmplti	zero,zero,1027
    fed4:	000102ec 	andhi	zero,zero,1035
    fed8:	2404b03a 	or	r2,r4,r16
    fedc:	10006f1e 	bne	r2,zero,1009c <__muldf3+0x2f8>
    fee0:	04c00204 	movi	r19,8
    fee4:	0021883a 	mov	r16,zero
    fee8:	0029883a 	mov	r20,zero
    feec:	07000084 	movi	fp,2
    fef0:	003fcb06 	br	fe20 <__muldf3+0x7c>
    fef4:	502d883a 	mov	r22,r10
    fef8:	00800084 	movi	r2,2
    fefc:	28805726 	beq	r5,r2,1005c <__muldf3+0x2b8>
    ff00:	008000c4 	movi	r2,3
    ff04:	28816626 	beq	r5,r2,104a0 <__muldf3+0x6fc>
    ff08:	00800044 	movi	r2,1
    ff0c:	2881411e 	bne	r5,r2,10414 <__muldf3+0x670>
    ff10:	b02b883a 	mov	r21,r22
    ff14:	0005883a 	mov	r2,zero
    ff18:	000b883a 	mov	r5,zero
    ff1c:	0029883a 	mov	r20,zero
    ff20:	1004953a 	slli	r2,r2,20
    ff24:	a8c03fcc 	andi	r3,r21,255
    ff28:	04400434 	movhi	r17,16
    ff2c:	8c7fffc4 	addi	r17,r17,-1
    ff30:	180697fa 	slli	r3,r3,31
    ff34:	2c4a703a 	and	r5,r5,r17
    ff38:	288ab03a 	or	r5,r5,r2
    ff3c:	28c6b03a 	or	r3,r5,r3
    ff40:	a005883a 	mov	r2,r20
    ff44:	dfc00c17 	ldw	ra,48(sp)
    ff48:	df000b17 	ldw	fp,44(sp)
    ff4c:	ddc00a17 	ldw	r23,40(sp)
    ff50:	dd800917 	ldw	r22,36(sp)
    ff54:	dd400817 	ldw	r21,32(sp)
    ff58:	dd000717 	ldw	r20,28(sp)
    ff5c:	dcc00617 	ldw	r19,24(sp)
    ff60:	dc800517 	ldw	r18,20(sp)
    ff64:	dc400417 	ldw	r17,16(sp)
    ff68:	dc000317 	ldw	r16,12(sp)
    ff6c:	dec00d04 	addi	sp,sp,52
    ff70:	f800283a 	ret
    ff74:	2404b03a 	or	r2,r4,r16
    ff78:	2027883a 	mov	r19,r4
    ff7c:	10004226 	beq	r2,zero,10088 <__muldf3+0x2e4>
    ff80:	8000fc26 	beq	r16,zero,10374 <__muldf3+0x5d0>
    ff84:	8009883a 	mov	r4,r16
    ff88:	d9800215 	stw	r6,8(sp)
    ff8c:	d9c00015 	stw	r7,0(sp)
    ff90:	da400115 	stw	r9,4(sp)
    ff94:	0010fbc0 	call	10fbc <__clzsi2>
    ff98:	d9800217 	ldw	r6,8(sp)
    ff9c:	d9c00017 	ldw	r7,0(sp)
    ffa0:	da400117 	ldw	r9,4(sp)
    ffa4:	113ffd44 	addi	r4,r2,-11
    ffa8:	00c00704 	movi	r3,28
    ffac:	1900ed16 	blt	r3,r4,10364 <__muldf3+0x5c0>
    ffb0:	00c00744 	movi	r3,29
    ffb4:	147ffe04 	addi	r17,r2,-8
    ffb8:	1907c83a 	sub	r3,r3,r4
    ffbc:	8460983a 	sll	r16,r16,r17
    ffc0:	98c6d83a 	srl	r3,r19,r3
    ffc4:	9c68983a 	sll	r20,r19,r17
    ffc8:	1c20b03a 	or	r16,r3,r16
    ffcc:	1080fcc4 	addi	r2,r2,1011
    ffd0:	00a5c83a 	sub	r18,zero,r2
    ffd4:	0027883a 	mov	r19,zero
    ffd8:	0039883a 	mov	fp,zero
    ffdc:	003f9006 	br	fe20 <__muldf3+0x7c>
    ffe0:	3446b03a 	or	r3,r6,r17
    ffe4:	1800261e 	bne	r3,zero,10080 <__muldf3+0x2dc>
    ffe8:	0023883a 	mov	r17,zero
    ffec:	0011883a 	mov	r8,zero
    fff0:	01400084 	movi	r5,2
    fff4:	003f9c06 	br	fe68 <__muldf3+0xc4>
    fff8:	3446b03a 	or	r3,r6,r17
    fffc:	18001c26 	beq	r3,zero,10070 <__muldf3+0x2cc>
   10000:	8800ce26 	beq	r17,zero,1033c <__muldf3+0x598>
   10004:	8809883a 	mov	r4,r17
   10008:	d9800215 	stw	r6,8(sp)
   1000c:	da400115 	stw	r9,4(sp)
   10010:	da800015 	stw	r10,0(sp)
   10014:	0010fbc0 	call	10fbc <__clzsi2>
   10018:	d9800217 	ldw	r6,8(sp)
   1001c:	da400117 	ldw	r9,4(sp)
   10020:	da800017 	ldw	r10,0(sp)
   10024:	113ffd44 	addi	r4,r2,-11
   10028:	00c00704 	movi	r3,28
   1002c:	1900bf16 	blt	r3,r4,1032c <__muldf3+0x588>
   10030:	00c00744 	movi	r3,29
   10034:	123ffe04 	addi	r8,r2,-8
   10038:	1907c83a 	sub	r3,r3,r4
   1003c:	8a22983a 	sll	r17,r17,r8
   10040:	30c6d83a 	srl	r3,r6,r3
   10044:	3210983a 	sll	r8,r6,r8
   10048:	1c62b03a 	or	r17,r3,r17
   1004c:	1080fcc4 	addi	r2,r2,1011
   10050:	0085c83a 	sub	r2,zero,r2
   10054:	000b883a 	mov	r5,zero
   10058:	003f8306 	br	fe68 <__muldf3+0xc4>
   1005c:	b02b883a 	mov	r21,r22
   10060:	0081ffc4 	movi	r2,2047
   10064:	000b883a 	mov	r5,zero
   10068:	0029883a 	mov	r20,zero
   1006c:	003fac06 	br	ff20 <__muldf3+0x17c>
   10070:	0023883a 	mov	r17,zero
   10074:	0011883a 	mov	r8,zero
   10078:	01400044 	movi	r5,1
   1007c:	003f7a06 	br	fe68 <__muldf3+0xc4>
   10080:	014000c4 	movi	r5,3
   10084:	003f7806 	br	fe68 <__muldf3+0xc4>
   10088:	04c00104 	movi	r19,4
   1008c:	0021883a 	mov	r16,zero
   10090:	0029883a 	mov	r20,zero
   10094:	07000044 	movi	fp,1
   10098:	003f6106 	br	fe20 <__muldf3+0x7c>
   1009c:	04c00304 	movi	r19,12
   100a0:	070000c4 	movi	fp,3
   100a4:	003f5e06 	br	fe20 <__muldf3+0x7c>
   100a8:	01400434 	movhi	r5,16
   100ac:	002b883a 	mov	r21,zero
   100b0:	297fffc4 	addi	r5,r5,-1
   100b4:	053fffc4 	movi	r20,-1
   100b8:	0081ffc4 	movi	r2,2047
   100bc:	003f9806 	br	ff20 <__muldf3+0x17c>
   100c0:	8023883a 	mov	r17,r16
   100c4:	a011883a 	mov	r8,r20
   100c8:	e00b883a 	mov	r5,fp
   100cc:	003f8a06 	br	fef8 <__muldf3+0x154>
   100d0:	8023883a 	mov	r17,r16
   100d4:	a011883a 	mov	r8,r20
   100d8:	482d883a 	mov	r22,r9
   100dc:	e00b883a 	mov	r5,fp
   100e0:	003f8506 	br	fef8 <__muldf3+0x154>
   100e4:	a00ad43a 	srli	r5,r20,16
   100e8:	401ad43a 	srli	r13,r8,16
   100ec:	a53fffcc 	andi	r20,r20,65535
   100f0:	423fffcc 	andi	r8,r8,65535
   100f4:	4519383a 	mul	r12,r8,r20
   100f8:	4147383a 	mul	r3,r8,r5
   100fc:	6d09383a 	mul	r4,r13,r20
   10100:	600cd43a 	srli	r6,r12,16
   10104:	2b5d383a 	mul	r14,r5,r13
   10108:	20c9883a 	add	r4,r4,r3
   1010c:	310d883a 	add	r6,r6,r4
   10110:	30c0022e 	bgeu	r6,r3,1011c <__muldf3+0x378>
   10114:	00c00074 	movhi	r3,1
   10118:	70dd883a 	add	r14,r14,r3
   1011c:	8826d43a 	srli	r19,r17,16
   10120:	8bffffcc 	andi	r15,r17,65535
   10124:	7d23383a 	mul	r17,r15,r20
   10128:	7949383a 	mul	r4,r15,r5
   1012c:	9d29383a 	mul	r20,r19,r20
   10130:	8814d43a 	srli	r10,r17,16
   10134:	3012943a 	slli	r9,r6,16
   10138:	a129883a 	add	r20,r20,r4
   1013c:	633fffcc 	andi	r12,r12,65535
   10140:	5515883a 	add	r10,r10,r20
   10144:	3006d43a 	srli	r3,r6,16
   10148:	4b13883a 	add	r9,r9,r12
   1014c:	2ccb383a 	mul	r5,r5,r19
   10150:	5100022e 	bgeu	r10,r4,1015c <__muldf3+0x3b8>
   10154:	01000074 	movhi	r4,1
   10158:	290b883a 	add	r5,r5,r4
   1015c:	802ad43a 	srli	r21,r16,16
   10160:	843fffcc 	andi	r16,r16,65535
   10164:	440d383a 	mul	r6,r8,r16
   10168:	4565383a 	mul	r18,r8,r21
   1016c:	8349383a 	mul	r4,r16,r13
   10170:	500e943a 	slli	r7,r10,16
   10174:	3010d43a 	srli	r8,r6,16
   10178:	5028d43a 	srli	r20,r10,16
   1017c:	2489883a 	add	r4,r4,r18
   10180:	8abfffcc 	andi	r10,r17,65535
   10184:	3a95883a 	add	r10,r7,r10
   10188:	4119883a 	add	r12,r8,r4
   1018c:	a169883a 	add	r20,r20,r5
   10190:	1a87883a 	add	r3,r3,r10
   10194:	6d5b383a 	mul	r13,r13,r21
   10198:	6480022e 	bgeu	r12,r18,101a4 <__muldf3+0x400>
   1019c:	01000074 	movhi	r4,1
   101a0:	691b883a 	add	r13,r13,r4
   101a4:	7c25383a 	mul	r18,r15,r16
   101a8:	7d4b383a 	mul	r5,r15,r21
   101ac:	84cf383a 	mul	r7,r16,r19
   101b0:	901ed43a 	srli	r15,r18,16
   101b4:	6008d43a 	srli	r4,r12,16
   101b8:	6010943a 	slli	r8,r12,16
   101bc:	394f883a 	add	r7,r7,r5
   101c0:	333fffcc 	andi	r12,r6,65535
   101c4:	79df883a 	add	r15,r15,r7
   101c8:	235b883a 	add	r13,r4,r13
   101cc:	9d63383a 	mul	r17,r19,r21
   101d0:	4309883a 	add	r4,r8,r12
   101d4:	7940022e 	bgeu	r15,r5,101e0 <__muldf3+0x43c>
   101d8:	01400074 	movhi	r5,1
   101dc:	8963883a 	add	r17,r17,r5
   101e0:	780a943a 	slli	r5,r15,16
   101e4:	91bfffcc 	andi	r6,r18,65535
   101e8:	70c7883a 	add	r3,r14,r3
   101ec:	298d883a 	add	r6,r5,r6
   101f0:	1a8f803a 	cmpltu	r7,r3,r10
   101f4:	350b883a 	add	r5,r6,r20
   101f8:	20c7883a 	add	r3,r4,r3
   101fc:	3955883a 	add	r10,r7,r5
   10200:	1909803a 	cmpltu	r4,r3,r4
   10204:	6a91883a 	add	r8,r13,r10
   10208:	780cd43a 	srli	r6,r15,16
   1020c:	2219883a 	add	r12,r4,r8
   10210:	2d0b803a 	cmpltu	r5,r5,r20
   10214:	51cf803a 	cmpltu	r7,r10,r7
   10218:	29ceb03a 	or	r7,r5,r7
   1021c:	4351803a 	cmpltu	r8,r8,r13
   10220:	610b803a 	cmpltu	r5,r12,r4
   10224:	4148b03a 	or	r4,r8,r5
   10228:	398f883a 	add	r7,r7,r6
   1022c:	3909883a 	add	r4,r7,r4
   10230:	1810927a 	slli	r8,r3,9
   10234:	2449883a 	add	r4,r4,r17
   10238:	2008927a 	slli	r4,r4,9
   1023c:	6022d5fa 	srli	r17,r12,23
   10240:	1806d5fa 	srli	r3,r3,23
   10244:	4252b03a 	or	r9,r8,r9
   10248:	600a927a 	slli	r5,r12,9
   1024c:	4810c03a 	cmpne	r8,r9,zero
   10250:	2462b03a 	or	r17,r4,r17
   10254:	40c6b03a 	or	r3,r8,r3
   10258:	8900402c 	andhi	r4,r17,256
   1025c:	1950b03a 	or	r8,r3,r5
   10260:	20000726 	beq	r4,zero,10280 <__muldf3+0x4dc>
   10264:	4006d07a 	srli	r3,r8,1
   10268:	880497fa 	slli	r2,r17,31
   1026c:	4200004c 	andi	r8,r8,1
   10270:	8822d07a 	srli	r17,r17,1
   10274:	1a10b03a 	or	r8,r3,r8
   10278:	1210b03a 	or	r8,r2,r8
   1027c:	5805883a 	mov	r2,r11
   10280:	1140ffc4 	addi	r5,r2,1023
   10284:	0140440e 	bge	zero,r5,10398 <__muldf3+0x5f4>
   10288:	40c001cc 	andi	r3,r8,7
   1028c:	18000726 	beq	r3,zero,102ac <__muldf3+0x508>
   10290:	40c003cc 	andi	r3,r8,15
   10294:	01000104 	movi	r4,4
   10298:	19000426 	beq	r3,r4,102ac <__muldf3+0x508>
   1029c:	4107883a 	add	r3,r8,r4
   102a0:	1a11803a 	cmpltu	r8,r3,r8
   102a4:	8a23883a 	add	r17,r17,r8
   102a8:	1811883a 	mov	r8,r3
   102ac:	88c0402c 	andhi	r3,r17,256
   102b0:	18000426 	beq	r3,zero,102c4 <__muldf3+0x520>
   102b4:	11410004 	addi	r5,r2,1024
   102b8:	00bfc034 	movhi	r2,65280
   102bc:	10bfffc4 	addi	r2,r2,-1
   102c0:	88a2703a 	and	r17,r17,r2
   102c4:	0081ff84 	movi	r2,2046
   102c8:	117f6416 	blt	r2,r5,1005c <__muldf3+0x2b8>
   102cc:	8828977a 	slli	r20,r17,29
   102d0:	4010d0fa 	srli	r8,r8,3
   102d4:	8822927a 	slli	r17,r17,9
   102d8:	2881ffcc 	andi	r2,r5,2047
   102dc:	a228b03a 	or	r20,r20,r8
   102e0:	880ad33a 	srli	r5,r17,12
   102e4:	b02b883a 	mov	r21,r22
   102e8:	003f0d06 	br	ff20 <__muldf3+0x17c>
   102ec:	8080022c 	andhi	r2,r16,8
   102f0:	10000926 	beq	r2,zero,10318 <__muldf3+0x574>
   102f4:	8880022c 	andhi	r2,r17,8
   102f8:	1000071e 	bne	r2,zero,10318 <__muldf3+0x574>
   102fc:	00800434 	movhi	r2,16
   10300:	89400234 	orhi	r5,r17,8
   10304:	10bfffc4 	addi	r2,r2,-1
   10308:	b82b883a 	mov	r21,r23
   1030c:	288a703a 	and	r5,r5,r2
   10310:	4029883a 	mov	r20,r8
   10314:	003f6806 	br	100b8 <__muldf3+0x314>
   10318:	00800434 	movhi	r2,16
   1031c:	81400234 	orhi	r5,r16,8
   10320:	10bfffc4 	addi	r2,r2,-1
   10324:	288a703a 	and	r5,r5,r2
   10328:	003f6306 	br	100b8 <__muldf3+0x314>
   1032c:	147ff604 	addi	r17,r2,-40
   10330:	3462983a 	sll	r17,r6,r17
   10334:	0011883a 	mov	r8,zero
   10338:	003f4406 	br	1004c <__muldf3+0x2a8>
   1033c:	3009883a 	mov	r4,r6
   10340:	d9800215 	stw	r6,8(sp)
   10344:	da400115 	stw	r9,4(sp)
   10348:	da800015 	stw	r10,0(sp)
   1034c:	0010fbc0 	call	10fbc <__clzsi2>
   10350:	10800804 	addi	r2,r2,32
   10354:	da800017 	ldw	r10,0(sp)
   10358:	da400117 	ldw	r9,4(sp)
   1035c:	d9800217 	ldw	r6,8(sp)
   10360:	003f3006 	br	10024 <__muldf3+0x280>
   10364:	143ff604 	addi	r16,r2,-40
   10368:	9c20983a 	sll	r16,r19,r16
   1036c:	0029883a 	mov	r20,zero
   10370:	003f1606 	br	ffcc <__muldf3+0x228>
   10374:	d9800215 	stw	r6,8(sp)
   10378:	d9c00015 	stw	r7,0(sp)
   1037c:	da400115 	stw	r9,4(sp)
   10380:	0010fbc0 	call	10fbc <__clzsi2>
   10384:	10800804 	addi	r2,r2,32
   10388:	da400117 	ldw	r9,4(sp)
   1038c:	d9c00017 	ldw	r7,0(sp)
   10390:	d9800217 	ldw	r6,8(sp)
   10394:	003f0306 	br	ffa4 <__muldf3+0x200>
   10398:	00c00044 	movi	r3,1
   1039c:	1947c83a 	sub	r3,r3,r5
   103a0:	00800e04 	movi	r2,56
   103a4:	10feda16 	blt	r2,r3,ff10 <__muldf3+0x16c>
   103a8:	008007c4 	movi	r2,31
   103ac:	10c01b16 	blt	r2,r3,1041c <__muldf3+0x678>
   103b0:	00800804 	movi	r2,32
   103b4:	10c5c83a 	sub	r2,r2,r3
   103b8:	888a983a 	sll	r5,r17,r2
   103bc:	40c8d83a 	srl	r4,r8,r3
   103c0:	4084983a 	sll	r2,r8,r2
   103c4:	88e2d83a 	srl	r17,r17,r3
   103c8:	2906b03a 	or	r3,r5,r4
   103cc:	1004c03a 	cmpne	r2,r2,zero
   103d0:	1886b03a 	or	r3,r3,r2
   103d4:	188001cc 	andi	r2,r3,7
   103d8:	10000726 	beq	r2,zero,103f8 <__muldf3+0x654>
   103dc:	188003cc 	andi	r2,r3,15
   103e0:	01000104 	movi	r4,4
   103e4:	11000426 	beq	r2,r4,103f8 <__muldf3+0x654>
   103e8:	1805883a 	mov	r2,r3
   103ec:	10c00104 	addi	r3,r2,4
   103f0:	1885803a 	cmpltu	r2,r3,r2
   103f4:	88a3883a 	add	r17,r17,r2
   103f8:	8880202c 	andhi	r2,r17,128
   103fc:	10001c26 	beq	r2,zero,10470 <__muldf3+0x6cc>
   10400:	b02b883a 	mov	r21,r22
   10404:	00800044 	movi	r2,1
   10408:	000b883a 	mov	r5,zero
   1040c:	0029883a 	mov	r20,zero
   10410:	003ec306 	br	ff20 <__muldf3+0x17c>
   10414:	5805883a 	mov	r2,r11
   10418:	003f9906 	br	10280 <__muldf3+0x4dc>
   1041c:	00bff844 	movi	r2,-31
   10420:	1145c83a 	sub	r2,r2,r5
   10424:	8888d83a 	srl	r4,r17,r2
   10428:	00800804 	movi	r2,32
   1042c:	18801a26 	beq	r3,r2,10498 <__muldf3+0x6f4>
   10430:	00801004 	movi	r2,64
   10434:	10c5c83a 	sub	r2,r2,r3
   10438:	8884983a 	sll	r2,r17,r2
   1043c:	1204b03a 	or	r2,r2,r8
   10440:	1004c03a 	cmpne	r2,r2,zero
   10444:	2084b03a 	or	r2,r4,r2
   10448:	144001cc 	andi	r17,r2,7
   1044c:	88000d1e 	bne	r17,zero,10484 <__muldf3+0x6e0>
   10450:	000b883a 	mov	r5,zero
   10454:	1028d0fa 	srli	r20,r2,3
   10458:	b02b883a 	mov	r21,r22
   1045c:	0005883a 	mov	r2,zero
   10460:	a468b03a 	or	r20,r20,r17
   10464:	003eae06 	br	ff20 <__muldf3+0x17c>
   10468:	1007883a 	mov	r3,r2
   1046c:	0023883a 	mov	r17,zero
   10470:	880a927a 	slli	r5,r17,9
   10474:	1805883a 	mov	r2,r3
   10478:	8822977a 	slli	r17,r17,29
   1047c:	280ad33a 	srli	r5,r5,12
   10480:	003ff406 	br	10454 <__muldf3+0x6b0>
   10484:	10c003cc 	andi	r3,r2,15
   10488:	01000104 	movi	r4,4
   1048c:	193ff626 	beq	r3,r4,10468 <__muldf3+0x6c4>
   10490:	0023883a 	mov	r17,zero
   10494:	003fd506 	br	103ec <__muldf3+0x648>
   10498:	0005883a 	mov	r2,zero
   1049c:	003fe706 	br	1043c <__muldf3+0x698>
   104a0:	00800434 	movhi	r2,16
   104a4:	89400234 	orhi	r5,r17,8
   104a8:	10bfffc4 	addi	r2,r2,-1
   104ac:	b02b883a 	mov	r21,r22
   104b0:	288a703a 	and	r5,r5,r2
   104b4:	4029883a 	mov	r20,r8
   104b8:	003eff06 	br	100b8 <__muldf3+0x314>

000104bc <__subdf3>:
   104bc:	02000434 	movhi	r8,16
   104c0:	423fffc4 	addi	r8,r8,-1
   104c4:	defffb04 	addi	sp,sp,-20
   104c8:	2a14703a 	and	r10,r5,r8
   104cc:	3812d53a 	srli	r9,r7,20
   104d0:	3a10703a 	and	r8,r7,r8
   104d4:	2006d77a 	srli	r3,r4,29
   104d8:	3004d77a 	srli	r2,r6,29
   104dc:	dc000015 	stw	r16,0(sp)
   104e0:	501490fa 	slli	r10,r10,3
   104e4:	2820d53a 	srli	r16,r5,20
   104e8:	401090fa 	slli	r8,r8,3
   104ec:	dc800215 	stw	r18,8(sp)
   104f0:	dc400115 	stw	r17,4(sp)
   104f4:	dfc00415 	stw	ra,16(sp)
   104f8:	202290fa 	slli	r17,r4,3
   104fc:	dcc00315 	stw	r19,12(sp)
   10500:	4a41ffcc 	andi	r9,r9,2047
   10504:	0101ffc4 	movi	r4,2047
   10508:	2824d7fa 	srli	r18,r5,31
   1050c:	8401ffcc 	andi	r16,r16,2047
   10510:	50c6b03a 	or	r3,r10,r3
   10514:	380ed7fa 	srli	r7,r7,31
   10518:	408ab03a 	or	r5,r8,r2
   1051c:	300c90fa 	slli	r6,r6,3
   10520:	49009626 	beq	r9,r4,1077c <__subdf3+0x2c0>
   10524:	39c0005c 	xori	r7,r7,1
   10528:	8245c83a 	sub	r2,r16,r9
   1052c:	3c807426 	beq	r7,r18,10700 <__subdf3+0x244>
   10530:	0080af0e 	bge	zero,r2,107f0 <__subdf3+0x334>
   10534:	48002a1e 	bne	r9,zero,105e0 <__subdf3+0x124>
   10538:	2988b03a 	or	r4,r5,r6
   1053c:	20009a1e 	bne	r4,zero,107a8 <__subdf3+0x2ec>
   10540:	888001cc 	andi	r2,r17,7
   10544:	10000726 	beq	r2,zero,10564 <__subdf3+0xa8>
   10548:	888003cc 	andi	r2,r17,15
   1054c:	01000104 	movi	r4,4
   10550:	11000426 	beq	r2,r4,10564 <__subdf3+0xa8>
   10554:	890b883a 	add	r5,r17,r4
   10558:	2c63803a 	cmpltu	r17,r5,r17
   1055c:	1c47883a 	add	r3,r3,r17
   10560:	2823883a 	mov	r17,r5
   10564:	1880202c 	andhi	r2,r3,128
   10568:	10005926 	beq	r2,zero,106d0 <__subdf3+0x214>
   1056c:	84000044 	addi	r16,r16,1
   10570:	0081ffc4 	movi	r2,2047
   10574:	8080be26 	beq	r16,r2,10870 <__subdf3+0x3b4>
   10578:	017fe034 	movhi	r5,65408
   1057c:	297fffc4 	addi	r5,r5,-1
   10580:	1946703a 	and	r3,r3,r5
   10584:	1804977a 	slli	r2,r3,29
   10588:	1806927a 	slli	r3,r3,9
   1058c:	8822d0fa 	srli	r17,r17,3
   10590:	8401ffcc 	andi	r16,r16,2047
   10594:	180ad33a 	srli	r5,r3,12
   10598:	9100004c 	andi	r4,r18,1
   1059c:	1444b03a 	or	r2,r2,r17
   105a0:	80c1ffcc 	andi	r3,r16,2047
   105a4:	1820953a 	slli	r16,r3,20
   105a8:	20c03fcc 	andi	r3,r4,255
   105ac:	180897fa 	slli	r4,r3,31
   105b0:	00c00434 	movhi	r3,16
   105b4:	18ffffc4 	addi	r3,r3,-1
   105b8:	28c6703a 	and	r3,r5,r3
   105bc:	1c06b03a 	or	r3,r3,r16
   105c0:	1906b03a 	or	r3,r3,r4
   105c4:	dfc00417 	ldw	ra,16(sp)
   105c8:	dcc00317 	ldw	r19,12(sp)
   105cc:	dc800217 	ldw	r18,8(sp)
   105d0:	dc400117 	ldw	r17,4(sp)
   105d4:	dc000017 	ldw	r16,0(sp)
   105d8:	dec00504 	addi	sp,sp,20
   105dc:	f800283a 	ret
   105e0:	0101ffc4 	movi	r4,2047
   105e4:	813fd626 	beq	r16,r4,10540 <__subdf3+0x84>
   105e8:	29402034 	orhi	r5,r5,128
   105ec:	01000e04 	movi	r4,56
   105f0:	2080a316 	blt	r4,r2,10880 <__subdf3+0x3c4>
   105f4:	010007c4 	movi	r4,31
   105f8:	2080c616 	blt	r4,r2,10914 <__subdf3+0x458>
   105fc:	01000804 	movi	r4,32
   10600:	2089c83a 	sub	r4,r4,r2
   10604:	2910983a 	sll	r8,r5,r4
   10608:	308ed83a 	srl	r7,r6,r2
   1060c:	3108983a 	sll	r4,r6,r4
   10610:	2884d83a 	srl	r2,r5,r2
   10614:	41ccb03a 	or	r6,r8,r7
   10618:	2008c03a 	cmpne	r4,r4,zero
   1061c:	310cb03a 	or	r6,r6,r4
   10620:	898dc83a 	sub	r6,r17,r6
   10624:	89a3803a 	cmpltu	r17,r17,r6
   10628:	1887c83a 	sub	r3,r3,r2
   1062c:	1c47c83a 	sub	r3,r3,r17
   10630:	3023883a 	mov	r17,r6
   10634:	1880202c 	andhi	r2,r3,128
   10638:	10002326 	beq	r2,zero,106c8 <__subdf3+0x20c>
   1063c:	04c02034 	movhi	r19,128
   10640:	9cffffc4 	addi	r19,r19,-1
   10644:	1ce6703a 	and	r19,r3,r19
   10648:	98007a26 	beq	r19,zero,10834 <__subdf3+0x378>
   1064c:	9809883a 	mov	r4,r19
   10650:	0010fbc0 	call	10fbc <__clzsi2>
   10654:	113ffe04 	addi	r4,r2,-8
   10658:	00c007c4 	movi	r3,31
   1065c:	19007b16 	blt	r3,r4,1084c <__subdf3+0x390>
   10660:	00800804 	movi	r2,32
   10664:	1105c83a 	sub	r2,r2,r4
   10668:	8884d83a 	srl	r2,r17,r2
   1066c:	9906983a 	sll	r3,r19,r4
   10670:	8922983a 	sll	r17,r17,r4
   10674:	10c4b03a 	or	r2,r2,r3
   10678:	24007816 	blt	r4,r16,1085c <__subdf3+0x3a0>
   1067c:	2421c83a 	sub	r16,r4,r16
   10680:	80c00044 	addi	r3,r16,1
   10684:	010007c4 	movi	r4,31
   10688:	20c09516 	blt	r4,r3,108e0 <__subdf3+0x424>
   1068c:	01400804 	movi	r5,32
   10690:	28cbc83a 	sub	r5,r5,r3
   10694:	88c8d83a 	srl	r4,r17,r3
   10698:	8962983a 	sll	r17,r17,r5
   1069c:	114a983a 	sll	r5,r2,r5
   106a0:	10c6d83a 	srl	r3,r2,r3
   106a4:	8804c03a 	cmpne	r2,r17,zero
   106a8:	290ab03a 	or	r5,r5,r4
   106ac:	28a2b03a 	or	r17,r5,r2
   106b0:	0021883a 	mov	r16,zero
   106b4:	003fa206 	br	10540 <__subdf3+0x84>
   106b8:	2090b03a 	or	r8,r4,r2
   106bc:	40018e26 	beq	r8,zero,10cf8 <__subdf3+0x83c>
   106c0:	1007883a 	mov	r3,r2
   106c4:	2023883a 	mov	r17,r4
   106c8:	888001cc 	andi	r2,r17,7
   106cc:	103f9e1e 	bne	r2,zero,10548 <__subdf3+0x8c>
   106d0:	1804977a 	slli	r2,r3,29
   106d4:	8822d0fa 	srli	r17,r17,3
   106d8:	1810d0fa 	srli	r8,r3,3
   106dc:	9100004c 	andi	r4,r18,1
   106e0:	1444b03a 	or	r2,r2,r17
   106e4:	00c1ffc4 	movi	r3,2047
   106e8:	80c02826 	beq	r16,r3,1078c <__subdf3+0x2d0>
   106ec:	01400434 	movhi	r5,16
   106f0:	297fffc4 	addi	r5,r5,-1
   106f4:	80e0703a 	and	r16,r16,r3
   106f8:	414a703a 	and	r5,r8,r5
   106fc:	003fa806 	br	105a0 <__subdf3+0xe4>
   10700:	0080630e 	bge	zero,r2,10890 <__subdf3+0x3d4>
   10704:	48003026 	beq	r9,zero,107c8 <__subdf3+0x30c>
   10708:	0101ffc4 	movi	r4,2047
   1070c:	813f8c26 	beq	r16,r4,10540 <__subdf3+0x84>
   10710:	29402034 	orhi	r5,r5,128
   10714:	01000e04 	movi	r4,56
   10718:	2080a90e 	bge	r4,r2,109c0 <__subdf3+0x504>
   1071c:	298cb03a 	or	r6,r5,r6
   10720:	3012c03a 	cmpne	r9,r6,zero
   10724:	0005883a 	mov	r2,zero
   10728:	4c53883a 	add	r9,r9,r17
   1072c:	4c63803a 	cmpltu	r17,r9,r17
   10730:	10c7883a 	add	r3,r2,r3
   10734:	88c7883a 	add	r3,r17,r3
   10738:	4823883a 	mov	r17,r9
   1073c:	1880202c 	andhi	r2,r3,128
   10740:	1000d026 	beq	r2,zero,10a84 <__subdf3+0x5c8>
   10744:	84000044 	addi	r16,r16,1
   10748:	0081ffc4 	movi	r2,2047
   1074c:	8080fe26 	beq	r16,r2,10b48 <__subdf3+0x68c>
   10750:	00bfe034 	movhi	r2,65408
   10754:	10bfffc4 	addi	r2,r2,-1
   10758:	1886703a 	and	r3,r3,r2
   1075c:	880ad07a 	srli	r5,r17,1
   10760:	180497fa 	slli	r2,r3,31
   10764:	8900004c 	andi	r4,r17,1
   10768:	2922b03a 	or	r17,r5,r4
   1076c:	1806d07a 	srli	r3,r3,1
   10770:	1462b03a 	or	r17,r2,r17
   10774:	3825883a 	mov	r18,r7
   10778:	003f7106 	br	10540 <__subdf3+0x84>
   1077c:	2984b03a 	or	r2,r5,r6
   10780:	103f6826 	beq	r2,zero,10524 <__subdf3+0x68>
   10784:	39c03fcc 	andi	r7,r7,255
   10788:	003f6706 	br	10528 <__subdf3+0x6c>
   1078c:	4086b03a 	or	r3,r8,r2
   10790:	18015226 	beq	r3,zero,10cdc <__subdf3+0x820>
   10794:	00c00434 	movhi	r3,16
   10798:	41400234 	orhi	r5,r8,8
   1079c:	18ffffc4 	addi	r3,r3,-1
   107a0:	28ca703a 	and	r5,r5,r3
   107a4:	003f7e06 	br	105a0 <__subdf3+0xe4>
   107a8:	10bfffc4 	addi	r2,r2,-1
   107ac:	1000491e 	bne	r2,zero,108d4 <__subdf3+0x418>
   107b0:	898fc83a 	sub	r7,r17,r6
   107b4:	89e3803a 	cmpltu	r17,r17,r7
   107b8:	1947c83a 	sub	r3,r3,r5
   107bc:	1c47c83a 	sub	r3,r3,r17
   107c0:	3823883a 	mov	r17,r7
   107c4:	003f9b06 	br	10634 <__subdf3+0x178>
   107c8:	2988b03a 	or	r4,r5,r6
   107cc:	203f5c26 	beq	r4,zero,10540 <__subdf3+0x84>
   107d0:	10bfffc4 	addi	r2,r2,-1
   107d4:	1000931e 	bne	r2,zero,10a24 <__subdf3+0x568>
   107d8:	898d883a 	add	r6,r17,r6
   107dc:	3463803a 	cmpltu	r17,r6,r17
   107e0:	1947883a 	add	r3,r3,r5
   107e4:	88c7883a 	add	r3,r17,r3
   107e8:	3023883a 	mov	r17,r6
   107ec:	003fd306 	br	1073c <__subdf3+0x280>
   107f0:	1000541e 	bne	r2,zero,10944 <__subdf3+0x488>
   107f4:	80800044 	addi	r2,r16,1
   107f8:	1081ffcc 	andi	r2,r2,2047
   107fc:	01000044 	movi	r4,1
   10800:	2080a20e 	bge	r4,r2,10a8c <__subdf3+0x5d0>
   10804:	8989c83a 	sub	r4,r17,r6
   10808:	8905803a 	cmpltu	r2,r17,r4
   1080c:	1967c83a 	sub	r19,r3,r5
   10810:	98a7c83a 	sub	r19,r19,r2
   10814:	9880202c 	andhi	r2,r19,128
   10818:	10006326 	beq	r2,zero,109a8 <__subdf3+0x4ec>
   1081c:	3463c83a 	sub	r17,r6,r17
   10820:	28c7c83a 	sub	r3,r5,r3
   10824:	344d803a 	cmpltu	r6,r6,r17
   10828:	19a7c83a 	sub	r19,r3,r6
   1082c:	3825883a 	mov	r18,r7
   10830:	983f861e 	bne	r19,zero,1064c <__subdf3+0x190>
   10834:	8809883a 	mov	r4,r17
   10838:	0010fbc0 	call	10fbc <__clzsi2>
   1083c:	10800804 	addi	r2,r2,32
   10840:	113ffe04 	addi	r4,r2,-8
   10844:	00c007c4 	movi	r3,31
   10848:	193f850e 	bge	r3,r4,10660 <__subdf3+0x1a4>
   1084c:	10bff604 	addi	r2,r2,-40
   10850:	8884983a 	sll	r2,r17,r2
   10854:	0023883a 	mov	r17,zero
   10858:	243f880e 	bge	r4,r16,1067c <__subdf3+0x1c0>
   1085c:	00ffe034 	movhi	r3,65408
   10860:	18ffffc4 	addi	r3,r3,-1
   10864:	8121c83a 	sub	r16,r16,r4
   10868:	10c6703a 	and	r3,r2,r3
   1086c:	003f3406 	br	10540 <__subdf3+0x84>
   10870:	9100004c 	andi	r4,r18,1
   10874:	000b883a 	mov	r5,zero
   10878:	0005883a 	mov	r2,zero
   1087c:	003f4806 	br	105a0 <__subdf3+0xe4>
   10880:	298cb03a 	or	r6,r5,r6
   10884:	300cc03a 	cmpne	r6,r6,zero
   10888:	0005883a 	mov	r2,zero
   1088c:	003f6406 	br	10620 <__subdf3+0x164>
   10890:	10009a1e 	bne	r2,zero,10afc <__subdf3+0x640>
   10894:	82400044 	addi	r9,r16,1
   10898:	4881ffcc 	andi	r2,r9,2047
   1089c:	02800044 	movi	r10,1
   108a0:	5080670e 	bge	r10,r2,10a40 <__subdf3+0x584>
   108a4:	0081ffc4 	movi	r2,2047
   108a8:	4880af26 	beq	r9,r2,10b68 <__subdf3+0x6ac>
   108ac:	898d883a 	add	r6,r17,r6
   108b0:	1945883a 	add	r2,r3,r5
   108b4:	3447803a 	cmpltu	r3,r6,r17
   108b8:	1887883a 	add	r3,r3,r2
   108bc:	182297fa 	slli	r17,r3,31
   108c0:	300cd07a 	srli	r6,r6,1
   108c4:	1806d07a 	srli	r3,r3,1
   108c8:	4821883a 	mov	r16,r9
   108cc:	89a2b03a 	or	r17,r17,r6
   108d0:	003f1b06 	br	10540 <__subdf3+0x84>
   108d4:	0101ffc4 	movi	r4,2047
   108d8:	813f441e 	bne	r16,r4,105ec <__subdf3+0x130>
   108dc:	003f1806 	br	10540 <__subdf3+0x84>
   108e0:	843ff844 	addi	r16,r16,-31
   108e4:	01400804 	movi	r5,32
   108e8:	1408d83a 	srl	r4,r2,r16
   108ec:	19405026 	beq	r3,r5,10a30 <__subdf3+0x574>
   108f0:	01401004 	movi	r5,64
   108f4:	28c7c83a 	sub	r3,r5,r3
   108f8:	10c4983a 	sll	r2,r2,r3
   108fc:	88a2b03a 	or	r17,r17,r2
   10900:	8822c03a 	cmpne	r17,r17,zero
   10904:	2462b03a 	or	r17,r4,r17
   10908:	0007883a 	mov	r3,zero
   1090c:	0021883a 	mov	r16,zero
   10910:	003f6d06 	br	106c8 <__subdf3+0x20c>
   10914:	11fff804 	addi	r7,r2,-32
   10918:	01000804 	movi	r4,32
   1091c:	29ced83a 	srl	r7,r5,r7
   10920:	11004526 	beq	r2,r4,10a38 <__subdf3+0x57c>
   10924:	01001004 	movi	r4,64
   10928:	2089c83a 	sub	r4,r4,r2
   1092c:	2904983a 	sll	r2,r5,r4
   10930:	118cb03a 	or	r6,r2,r6
   10934:	300cc03a 	cmpne	r6,r6,zero
   10938:	398cb03a 	or	r6,r7,r6
   1093c:	0005883a 	mov	r2,zero
   10940:	003f3706 	br	10620 <__subdf3+0x164>
   10944:	80002a26 	beq	r16,zero,109f0 <__subdf3+0x534>
   10948:	0101ffc4 	movi	r4,2047
   1094c:	49006626 	beq	r9,r4,10ae8 <__subdf3+0x62c>
   10950:	0085c83a 	sub	r2,zero,r2
   10954:	18c02034 	orhi	r3,r3,128
   10958:	01000e04 	movi	r4,56
   1095c:	20807e16 	blt	r4,r2,10b58 <__subdf3+0x69c>
   10960:	010007c4 	movi	r4,31
   10964:	2080e716 	blt	r4,r2,10d04 <__subdf3+0x848>
   10968:	01000804 	movi	r4,32
   1096c:	2089c83a 	sub	r4,r4,r2
   10970:	1914983a 	sll	r10,r3,r4
   10974:	8890d83a 	srl	r8,r17,r2
   10978:	8908983a 	sll	r4,r17,r4
   1097c:	1884d83a 	srl	r2,r3,r2
   10980:	5222b03a 	or	r17,r10,r8
   10984:	2006c03a 	cmpne	r3,r4,zero
   10988:	88e2b03a 	or	r17,r17,r3
   1098c:	3463c83a 	sub	r17,r6,r17
   10990:	2885c83a 	sub	r2,r5,r2
   10994:	344d803a 	cmpltu	r6,r6,r17
   10998:	1187c83a 	sub	r3,r2,r6
   1099c:	4821883a 	mov	r16,r9
   109a0:	3825883a 	mov	r18,r7
   109a4:	003f2306 	br	10634 <__subdf3+0x178>
   109a8:	24d0b03a 	or	r8,r4,r19
   109ac:	40001b1e 	bne	r8,zero,10a1c <__subdf3+0x560>
   109b0:	0005883a 	mov	r2,zero
   109b4:	0009883a 	mov	r4,zero
   109b8:	0021883a 	mov	r16,zero
   109bc:	003f4906 	br	106e4 <__subdf3+0x228>
   109c0:	010007c4 	movi	r4,31
   109c4:	20803a16 	blt	r4,r2,10ab0 <__subdf3+0x5f4>
   109c8:	01000804 	movi	r4,32
   109cc:	2089c83a 	sub	r4,r4,r2
   109d0:	2912983a 	sll	r9,r5,r4
   109d4:	3090d83a 	srl	r8,r6,r2
   109d8:	3108983a 	sll	r4,r6,r4
   109dc:	2884d83a 	srl	r2,r5,r2
   109e0:	4a12b03a 	or	r9,r9,r8
   109e4:	2008c03a 	cmpne	r4,r4,zero
   109e8:	4912b03a 	or	r9,r9,r4
   109ec:	003f4e06 	br	10728 <__subdf3+0x26c>
   109f0:	1c48b03a 	or	r4,r3,r17
   109f4:	20003c26 	beq	r4,zero,10ae8 <__subdf3+0x62c>
   109f8:	0084303a 	nor	r2,zero,r2
   109fc:	1000381e 	bne	r2,zero,10ae0 <__subdf3+0x624>
   10a00:	3463c83a 	sub	r17,r6,r17
   10a04:	28c5c83a 	sub	r2,r5,r3
   10a08:	344d803a 	cmpltu	r6,r6,r17
   10a0c:	1187c83a 	sub	r3,r2,r6
   10a10:	4821883a 	mov	r16,r9
   10a14:	3825883a 	mov	r18,r7
   10a18:	003f0606 	br	10634 <__subdf3+0x178>
   10a1c:	2023883a 	mov	r17,r4
   10a20:	003f0906 	br	10648 <__subdf3+0x18c>
   10a24:	0101ffc4 	movi	r4,2047
   10a28:	813f3a1e 	bne	r16,r4,10714 <__subdf3+0x258>
   10a2c:	003ec406 	br	10540 <__subdf3+0x84>
   10a30:	0005883a 	mov	r2,zero
   10a34:	003fb106 	br	108fc <__subdf3+0x440>
   10a38:	0005883a 	mov	r2,zero
   10a3c:	003fbc06 	br	10930 <__subdf3+0x474>
   10a40:	1c44b03a 	or	r2,r3,r17
   10a44:	80008e1e 	bne	r16,zero,10c80 <__subdf3+0x7c4>
   10a48:	1000c826 	beq	r2,zero,10d6c <__subdf3+0x8b0>
   10a4c:	2984b03a 	or	r2,r5,r6
   10a50:	103ebb26 	beq	r2,zero,10540 <__subdf3+0x84>
   10a54:	8989883a 	add	r4,r17,r6
   10a58:	1945883a 	add	r2,r3,r5
   10a5c:	2447803a 	cmpltu	r3,r4,r17
   10a60:	1887883a 	add	r3,r3,r2
   10a64:	1880202c 	andhi	r2,r3,128
   10a68:	2023883a 	mov	r17,r4
   10a6c:	103f1626 	beq	r2,zero,106c8 <__subdf3+0x20c>
   10a70:	00bfe034 	movhi	r2,65408
   10a74:	10bfffc4 	addi	r2,r2,-1
   10a78:	5021883a 	mov	r16,r10
   10a7c:	1886703a 	and	r3,r3,r2
   10a80:	003eaf06 	br	10540 <__subdf3+0x84>
   10a84:	3825883a 	mov	r18,r7
   10a88:	003f0f06 	br	106c8 <__subdf3+0x20c>
   10a8c:	1c44b03a 	or	r2,r3,r17
   10a90:	8000251e 	bne	r16,zero,10b28 <__subdf3+0x66c>
   10a94:	1000661e 	bne	r2,zero,10c30 <__subdf3+0x774>
   10a98:	2990b03a 	or	r8,r5,r6
   10a9c:	40009626 	beq	r8,zero,10cf8 <__subdf3+0x83c>
   10aa0:	2807883a 	mov	r3,r5
   10aa4:	3023883a 	mov	r17,r6
   10aa8:	3825883a 	mov	r18,r7
   10aac:	003ea406 	br	10540 <__subdf3+0x84>
   10ab0:	127ff804 	addi	r9,r2,-32
   10ab4:	01000804 	movi	r4,32
   10ab8:	2a52d83a 	srl	r9,r5,r9
   10abc:	11008c26 	beq	r2,r4,10cf0 <__subdf3+0x834>
   10ac0:	01001004 	movi	r4,64
   10ac4:	2085c83a 	sub	r2,r4,r2
   10ac8:	2884983a 	sll	r2,r5,r2
   10acc:	118cb03a 	or	r6,r2,r6
   10ad0:	300cc03a 	cmpne	r6,r6,zero
   10ad4:	4992b03a 	or	r9,r9,r6
   10ad8:	0005883a 	mov	r2,zero
   10adc:	003f1206 	br	10728 <__subdf3+0x26c>
   10ae0:	0101ffc4 	movi	r4,2047
   10ae4:	493f9c1e 	bne	r9,r4,10958 <__subdf3+0x49c>
   10ae8:	2807883a 	mov	r3,r5
   10aec:	3023883a 	mov	r17,r6
   10af0:	4821883a 	mov	r16,r9
   10af4:	3825883a 	mov	r18,r7
   10af8:	003e9106 	br	10540 <__subdf3+0x84>
   10afc:	80001f1e 	bne	r16,zero,10b7c <__subdf3+0x6c0>
   10b00:	1c48b03a 	or	r4,r3,r17
   10b04:	20005a26 	beq	r4,zero,10c70 <__subdf3+0x7b4>
   10b08:	0084303a 	nor	r2,zero,r2
   10b0c:	1000561e 	bne	r2,zero,10c68 <__subdf3+0x7ac>
   10b10:	89a3883a 	add	r17,r17,r6
   10b14:	1945883a 	add	r2,r3,r5
   10b18:	898d803a 	cmpltu	r6,r17,r6
   10b1c:	3087883a 	add	r3,r6,r2
   10b20:	4821883a 	mov	r16,r9
   10b24:	003f0506 	br	1073c <__subdf3+0x280>
   10b28:	10002b1e 	bne	r2,zero,10bd8 <__subdf3+0x71c>
   10b2c:	2984b03a 	or	r2,r5,r6
   10b30:	10008026 	beq	r2,zero,10d34 <__subdf3+0x878>
   10b34:	2807883a 	mov	r3,r5
   10b38:	3023883a 	mov	r17,r6
   10b3c:	3825883a 	mov	r18,r7
   10b40:	0401ffc4 	movi	r16,2047
   10b44:	003e7e06 	br	10540 <__subdf3+0x84>
   10b48:	3809883a 	mov	r4,r7
   10b4c:	0011883a 	mov	r8,zero
   10b50:	0005883a 	mov	r2,zero
   10b54:	003ee306 	br	106e4 <__subdf3+0x228>
   10b58:	1c62b03a 	or	r17,r3,r17
   10b5c:	8822c03a 	cmpne	r17,r17,zero
   10b60:	0005883a 	mov	r2,zero
   10b64:	003f8906 	br	1098c <__subdf3+0x4d0>
   10b68:	3809883a 	mov	r4,r7
   10b6c:	4821883a 	mov	r16,r9
   10b70:	0011883a 	mov	r8,zero
   10b74:	0005883a 	mov	r2,zero
   10b78:	003eda06 	br	106e4 <__subdf3+0x228>
   10b7c:	0101ffc4 	movi	r4,2047
   10b80:	49003b26 	beq	r9,r4,10c70 <__subdf3+0x7b4>
   10b84:	0085c83a 	sub	r2,zero,r2
   10b88:	18c02034 	orhi	r3,r3,128
   10b8c:	01000e04 	movi	r4,56
   10b90:	20806e16 	blt	r4,r2,10d4c <__subdf3+0x890>
   10b94:	010007c4 	movi	r4,31
   10b98:	20807716 	blt	r4,r2,10d78 <__subdf3+0x8bc>
   10b9c:	01000804 	movi	r4,32
   10ba0:	2089c83a 	sub	r4,r4,r2
   10ba4:	1914983a 	sll	r10,r3,r4
   10ba8:	8890d83a 	srl	r8,r17,r2
   10bac:	8908983a 	sll	r4,r17,r4
   10bb0:	1884d83a 	srl	r2,r3,r2
   10bb4:	5222b03a 	or	r17,r10,r8
   10bb8:	2006c03a 	cmpne	r3,r4,zero
   10bbc:	88e2b03a 	or	r17,r17,r3
   10bc0:	89a3883a 	add	r17,r17,r6
   10bc4:	1145883a 	add	r2,r2,r5
   10bc8:	898d803a 	cmpltu	r6,r17,r6
   10bcc:	3087883a 	add	r3,r6,r2
   10bd0:	4821883a 	mov	r16,r9
   10bd4:	003ed906 	br	1073c <__subdf3+0x280>
   10bd8:	2984b03a 	or	r2,r5,r6
   10bdc:	10004226 	beq	r2,zero,10ce8 <__subdf3+0x82c>
   10be0:	1808d0fa 	srli	r4,r3,3
   10be4:	8822d0fa 	srli	r17,r17,3
   10be8:	1806977a 	slli	r3,r3,29
   10bec:	2080022c 	andhi	r2,r4,8
   10bf0:	1c62b03a 	or	r17,r3,r17
   10bf4:	10000826 	beq	r2,zero,10c18 <__subdf3+0x75c>
   10bf8:	2812d0fa 	srli	r9,r5,3
   10bfc:	4880022c 	andhi	r2,r9,8
   10c00:	1000051e 	bne	r2,zero,10c18 <__subdf3+0x75c>
   10c04:	300cd0fa 	srli	r6,r6,3
   10c08:	2804977a 	slli	r2,r5,29
   10c0c:	4809883a 	mov	r4,r9
   10c10:	3825883a 	mov	r18,r7
   10c14:	11a2b03a 	or	r17,r2,r6
   10c18:	8806d77a 	srli	r3,r17,29
   10c1c:	200890fa 	slli	r4,r4,3
   10c20:	882290fa 	slli	r17,r17,3
   10c24:	0401ffc4 	movi	r16,2047
   10c28:	1906b03a 	or	r3,r3,r4
   10c2c:	003e4406 	br	10540 <__subdf3+0x84>
   10c30:	2984b03a 	or	r2,r5,r6
   10c34:	103e4226 	beq	r2,zero,10540 <__subdf3+0x84>
   10c38:	8989c83a 	sub	r4,r17,r6
   10c3c:	8911803a 	cmpltu	r8,r17,r4
   10c40:	1945c83a 	sub	r2,r3,r5
   10c44:	1205c83a 	sub	r2,r2,r8
   10c48:	1200202c 	andhi	r8,r2,128
   10c4c:	403e9a26 	beq	r8,zero,106b8 <__subdf3+0x1fc>
   10c50:	3463c83a 	sub	r17,r6,r17
   10c54:	28c5c83a 	sub	r2,r5,r3
   10c58:	344d803a 	cmpltu	r6,r6,r17
   10c5c:	1187c83a 	sub	r3,r2,r6
   10c60:	3825883a 	mov	r18,r7
   10c64:	003e3606 	br	10540 <__subdf3+0x84>
   10c68:	0101ffc4 	movi	r4,2047
   10c6c:	493fc71e 	bne	r9,r4,10b8c <__subdf3+0x6d0>
   10c70:	2807883a 	mov	r3,r5
   10c74:	3023883a 	mov	r17,r6
   10c78:	4821883a 	mov	r16,r9
   10c7c:	003e3006 	br	10540 <__subdf3+0x84>
   10c80:	10003626 	beq	r2,zero,10d5c <__subdf3+0x8a0>
   10c84:	2984b03a 	or	r2,r5,r6
   10c88:	10001726 	beq	r2,zero,10ce8 <__subdf3+0x82c>
   10c8c:	1808d0fa 	srli	r4,r3,3
   10c90:	8822d0fa 	srli	r17,r17,3
   10c94:	1806977a 	slli	r3,r3,29
   10c98:	2080022c 	andhi	r2,r4,8
   10c9c:	1c62b03a 	or	r17,r3,r17
   10ca0:	10000726 	beq	r2,zero,10cc0 <__subdf3+0x804>
   10ca4:	2812d0fa 	srli	r9,r5,3
   10ca8:	4880022c 	andhi	r2,r9,8
   10cac:	1000041e 	bne	r2,zero,10cc0 <__subdf3+0x804>
   10cb0:	300cd0fa 	srli	r6,r6,3
   10cb4:	2804977a 	slli	r2,r5,29
   10cb8:	4809883a 	mov	r4,r9
   10cbc:	11a2b03a 	or	r17,r2,r6
   10cc0:	8806d77a 	srli	r3,r17,29
   10cc4:	200890fa 	slli	r4,r4,3
   10cc8:	882290fa 	slli	r17,r17,3
   10ccc:	3825883a 	mov	r18,r7
   10cd0:	1906b03a 	or	r3,r3,r4
   10cd4:	0401ffc4 	movi	r16,2047
   10cd8:	003e1906 	br	10540 <__subdf3+0x84>
   10cdc:	000b883a 	mov	r5,zero
   10ce0:	0005883a 	mov	r2,zero
   10ce4:	003e2e06 	br	105a0 <__subdf3+0xe4>
   10ce8:	0401ffc4 	movi	r16,2047
   10cec:	003e1406 	br	10540 <__subdf3+0x84>
   10cf0:	0005883a 	mov	r2,zero
   10cf4:	003f7506 	br	10acc <__subdf3+0x610>
   10cf8:	0005883a 	mov	r2,zero
   10cfc:	0009883a 	mov	r4,zero
   10d00:	003e7806 	br	106e4 <__subdf3+0x228>
   10d04:	123ff804 	addi	r8,r2,-32
   10d08:	01000804 	movi	r4,32
   10d0c:	1a10d83a 	srl	r8,r3,r8
   10d10:	11002526 	beq	r2,r4,10da8 <__subdf3+0x8ec>
   10d14:	01001004 	movi	r4,64
   10d18:	2085c83a 	sub	r2,r4,r2
   10d1c:	1884983a 	sll	r2,r3,r2
   10d20:	1444b03a 	or	r2,r2,r17
   10d24:	1004c03a 	cmpne	r2,r2,zero
   10d28:	40a2b03a 	or	r17,r8,r2
   10d2c:	0005883a 	mov	r2,zero
   10d30:	003f1606 	br	1098c <__subdf3+0x4d0>
   10d34:	02000434 	movhi	r8,16
   10d38:	0009883a 	mov	r4,zero
   10d3c:	423fffc4 	addi	r8,r8,-1
   10d40:	00bfffc4 	movi	r2,-1
   10d44:	0401ffc4 	movi	r16,2047
   10d48:	003e6606 	br	106e4 <__subdf3+0x228>
   10d4c:	1c62b03a 	or	r17,r3,r17
   10d50:	8822c03a 	cmpne	r17,r17,zero
   10d54:	0005883a 	mov	r2,zero
   10d58:	003f9906 	br	10bc0 <__subdf3+0x704>
   10d5c:	2807883a 	mov	r3,r5
   10d60:	3023883a 	mov	r17,r6
   10d64:	0401ffc4 	movi	r16,2047
   10d68:	003df506 	br	10540 <__subdf3+0x84>
   10d6c:	2807883a 	mov	r3,r5
   10d70:	3023883a 	mov	r17,r6
   10d74:	003df206 	br	10540 <__subdf3+0x84>
   10d78:	123ff804 	addi	r8,r2,-32
   10d7c:	01000804 	movi	r4,32
   10d80:	1a10d83a 	srl	r8,r3,r8
   10d84:	11000a26 	beq	r2,r4,10db0 <__subdf3+0x8f4>
   10d88:	01001004 	movi	r4,64
   10d8c:	2085c83a 	sub	r2,r4,r2
   10d90:	1884983a 	sll	r2,r3,r2
   10d94:	1444b03a 	or	r2,r2,r17
   10d98:	1004c03a 	cmpne	r2,r2,zero
   10d9c:	40a2b03a 	or	r17,r8,r2
   10da0:	0005883a 	mov	r2,zero
   10da4:	003f8606 	br	10bc0 <__subdf3+0x704>
   10da8:	0005883a 	mov	r2,zero
   10dac:	003fdc06 	br	10d20 <__subdf3+0x864>
   10db0:	0005883a 	mov	r2,zero
   10db4:	003ff706 	br	10d94 <__subdf3+0x8d8>

00010db8 <__fixdfsi>:
   10db8:	280cd53a 	srli	r6,r5,20
   10dbc:	00c00434 	movhi	r3,16
   10dc0:	18ffffc4 	addi	r3,r3,-1
   10dc4:	3181ffcc 	andi	r6,r6,2047
   10dc8:	01c0ff84 	movi	r7,1022
   10dcc:	28c6703a 	and	r3,r5,r3
   10dd0:	280ad7fa 	srli	r5,r5,31
   10dd4:	3980120e 	bge	r7,r6,10e20 <__fixdfsi+0x68>
   10dd8:	00810744 	movi	r2,1053
   10ddc:	11800c16 	blt	r2,r6,10e10 <__fixdfsi+0x58>
   10de0:	00810cc4 	movi	r2,1075
   10de4:	1185c83a 	sub	r2,r2,r6
   10de8:	01c007c4 	movi	r7,31
   10dec:	18c00434 	orhi	r3,r3,16
   10df0:	38800d16 	blt	r7,r2,10e28 <__fixdfsi+0x70>
   10df4:	31befb44 	addi	r6,r6,-1043
   10df8:	2084d83a 	srl	r2,r4,r2
   10dfc:	1986983a 	sll	r3,r3,r6
   10e00:	1884b03a 	or	r2,r3,r2
   10e04:	28000726 	beq	r5,zero,10e24 <__fixdfsi+0x6c>
   10e08:	0085c83a 	sub	r2,zero,r2
   10e0c:	f800283a 	ret
   10e10:	00a00034 	movhi	r2,32768
   10e14:	10bfffc4 	addi	r2,r2,-1
   10e18:	2885883a 	add	r2,r5,r2
   10e1c:	f800283a 	ret
   10e20:	0005883a 	mov	r2,zero
   10e24:	f800283a 	ret
   10e28:	008104c4 	movi	r2,1043
   10e2c:	1185c83a 	sub	r2,r2,r6
   10e30:	1884d83a 	srl	r2,r3,r2
   10e34:	003ff306 	br	10e04 <__fixdfsi+0x4c>

00010e38 <__floatsidf>:
   10e38:	defffd04 	addi	sp,sp,-12
   10e3c:	dfc00215 	stw	ra,8(sp)
   10e40:	dc400115 	stw	r17,4(sp)
   10e44:	dc000015 	stw	r16,0(sp)
   10e48:	20002b26 	beq	r4,zero,10ef8 <__floatsidf+0xc0>
   10e4c:	2023883a 	mov	r17,r4
   10e50:	2020d7fa 	srli	r16,r4,31
   10e54:	20002d16 	blt	r4,zero,10f0c <__floatsidf+0xd4>
   10e58:	8809883a 	mov	r4,r17
   10e5c:	0010fbc0 	call	10fbc <__clzsi2>
   10e60:	01410784 	movi	r5,1054
   10e64:	288bc83a 	sub	r5,r5,r2
   10e68:	01010cc4 	movi	r4,1075
   10e6c:	2149c83a 	sub	r4,r4,r5
   10e70:	00c007c4 	movi	r3,31
   10e74:	1900160e 	bge	r3,r4,10ed0 <__floatsidf+0x98>
   10e78:	00c104c4 	movi	r3,1043
   10e7c:	1947c83a 	sub	r3,r3,r5
   10e80:	88c6983a 	sll	r3,r17,r3
   10e84:	00800434 	movhi	r2,16
   10e88:	10bfffc4 	addi	r2,r2,-1
   10e8c:	1886703a 	and	r3,r3,r2
   10e90:	2941ffcc 	andi	r5,r5,2047
   10e94:	800d883a 	mov	r6,r16
   10e98:	0005883a 	mov	r2,zero
   10e9c:	280a953a 	slli	r5,r5,20
   10ea0:	31803fcc 	andi	r6,r6,255
   10ea4:	01000434 	movhi	r4,16
   10ea8:	300c97fa 	slli	r6,r6,31
   10eac:	213fffc4 	addi	r4,r4,-1
   10eb0:	1906703a 	and	r3,r3,r4
   10eb4:	1946b03a 	or	r3,r3,r5
   10eb8:	1986b03a 	or	r3,r3,r6
   10ebc:	dfc00217 	ldw	ra,8(sp)
   10ec0:	dc400117 	ldw	r17,4(sp)
   10ec4:	dc000017 	ldw	r16,0(sp)
   10ec8:	dec00304 	addi	sp,sp,12
   10ecc:	f800283a 	ret
   10ed0:	00c002c4 	movi	r3,11
   10ed4:	1887c83a 	sub	r3,r3,r2
   10ed8:	88c6d83a 	srl	r3,r17,r3
   10edc:	8904983a 	sll	r2,r17,r4
   10ee0:	01000434 	movhi	r4,16
   10ee4:	213fffc4 	addi	r4,r4,-1
   10ee8:	2941ffcc 	andi	r5,r5,2047
   10eec:	1906703a 	and	r3,r3,r4
   10ef0:	800d883a 	mov	r6,r16
   10ef4:	003fe906 	br	10e9c <__floatsidf+0x64>
   10ef8:	000d883a 	mov	r6,zero
   10efc:	000b883a 	mov	r5,zero
   10f00:	0007883a 	mov	r3,zero
   10f04:	0005883a 	mov	r2,zero
   10f08:	003fe406 	br	10e9c <__floatsidf+0x64>
   10f0c:	0123c83a 	sub	r17,zero,r4
   10f10:	003fd106 	br	10e58 <__floatsidf+0x20>

00010f14 <__floatunsidf>:
   10f14:	defffe04 	addi	sp,sp,-8
   10f18:	dc000015 	stw	r16,0(sp)
   10f1c:	dfc00115 	stw	ra,4(sp)
   10f20:	2021883a 	mov	r16,r4
   10f24:	20002226 	beq	r4,zero,10fb0 <__floatunsidf+0x9c>
   10f28:	0010fbc0 	call	10fbc <__clzsi2>
   10f2c:	01010784 	movi	r4,1054
   10f30:	2089c83a 	sub	r4,r4,r2
   10f34:	01810cc4 	movi	r6,1075
   10f38:	310dc83a 	sub	r6,r6,r4
   10f3c:	00c007c4 	movi	r3,31
   10f40:	1980120e 	bge	r3,r6,10f8c <__floatunsidf+0x78>
   10f44:	00c104c4 	movi	r3,1043
   10f48:	1907c83a 	sub	r3,r3,r4
   10f4c:	80ca983a 	sll	r5,r16,r3
   10f50:	00800434 	movhi	r2,16
   10f54:	10bfffc4 	addi	r2,r2,-1
   10f58:	2101ffcc 	andi	r4,r4,2047
   10f5c:	0021883a 	mov	r16,zero
   10f60:	288a703a 	and	r5,r5,r2
   10f64:	2008953a 	slli	r4,r4,20
   10f68:	00c00434 	movhi	r3,16
   10f6c:	18ffffc4 	addi	r3,r3,-1
   10f70:	28c6703a 	and	r3,r5,r3
   10f74:	8005883a 	mov	r2,r16
   10f78:	1906b03a 	or	r3,r3,r4
   10f7c:	dfc00117 	ldw	ra,4(sp)
   10f80:	dc000017 	ldw	r16,0(sp)
   10f84:	dec00204 	addi	sp,sp,8
   10f88:	f800283a 	ret
   10f8c:	00c002c4 	movi	r3,11
   10f90:	188bc83a 	sub	r5,r3,r2
   10f94:	814ad83a 	srl	r5,r16,r5
   10f98:	00c00434 	movhi	r3,16
   10f9c:	18ffffc4 	addi	r3,r3,-1
   10fa0:	81a0983a 	sll	r16,r16,r6
   10fa4:	2101ffcc 	andi	r4,r4,2047
   10fa8:	28ca703a 	and	r5,r5,r3
   10fac:	003fed06 	br	10f64 <__floatunsidf+0x50>
   10fb0:	0009883a 	mov	r4,zero
   10fb4:	000b883a 	mov	r5,zero
   10fb8:	003fea06 	br	10f64 <__floatunsidf+0x50>

00010fbc <__clzsi2>:
   10fbc:	00bfffd4 	movui	r2,65535
   10fc0:	11000536 	bltu	r2,r4,10fd8 <__clzsi2+0x1c>
   10fc4:	00803fc4 	movi	r2,255
   10fc8:	11000f36 	bltu	r2,r4,11008 <__clzsi2+0x4c>
   10fcc:	00800804 	movi	r2,32
   10fd0:	0007883a 	mov	r3,zero
   10fd4:	00000506 	br	10fec <__clzsi2+0x30>
   10fd8:	00804034 	movhi	r2,256
   10fdc:	10bfffc4 	addi	r2,r2,-1
   10fe0:	11000c2e 	bgeu	r2,r4,11014 <__clzsi2+0x58>
   10fe4:	00800204 	movi	r2,8
   10fe8:	00c00604 	movi	r3,24
   10fec:	20c8d83a 	srl	r4,r4,r3
   10ff0:	00c00074 	movhi	r3,1
   10ff4:	18d44a04 	addi	r3,r3,20776
   10ff8:	1909883a 	add	r4,r3,r4
   10ffc:	20c00003 	ldbu	r3,0(r4)
   11000:	10c5c83a 	sub	r2,r2,r3
   11004:	f800283a 	ret
   11008:	00800604 	movi	r2,24
   1100c:	00c00204 	movi	r3,8
   11010:	003ff606 	br	10fec <__clzsi2+0x30>
   11014:	00800404 	movi	r2,16
   11018:	1007883a 	mov	r3,r2
   1101c:	003ff306 	br	10fec <__clzsi2+0x30>

00011020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11020:	defffe04 	addi	sp,sp,-8
   11024:	dfc00115 	stw	ra,4(sp)
   11028:	df000015 	stw	fp,0(sp)
   1102c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11030:	d0a00b17 	ldw	r2,-32724(gp)
   11034:	10000326 	beq	r2,zero,11044 <alt_get_errno+0x24>
   11038:	d0a00b17 	ldw	r2,-32724(gp)
   1103c:	103ee83a 	callr	r2
   11040:	00000106 	br	11048 <alt_get_errno+0x28>
   11044:	d0a72204 	addi	r2,gp,-25464
}
   11048:	e037883a 	mov	sp,fp
   1104c:	dfc00117 	ldw	ra,4(sp)
   11050:	df000017 	ldw	fp,0(sp)
   11054:	dec00204 	addi	sp,sp,8
   11058:	f800283a 	ret

0001105c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1105c:	defffb04 	addi	sp,sp,-20
   11060:	dfc00415 	stw	ra,16(sp)
   11064:	df000315 	stw	fp,12(sp)
   11068:	df000304 	addi	fp,sp,12
   1106c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11070:	e0bfff17 	ldw	r2,-4(fp)
   11074:	10000616 	blt	r2,zero,11090 <close+0x34>
   11078:	e0bfff17 	ldw	r2,-4(fp)
   1107c:	10c00324 	muli	r3,r2,12
   11080:	00800074 	movhi	r2,1
   11084:	10976f04 	addi	r2,r2,23996
   11088:	1885883a 	add	r2,r3,r2
   1108c:	00000106 	br	11094 <close+0x38>
   11090:	0005883a 	mov	r2,zero
   11094:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11098:	e0bffd17 	ldw	r2,-12(fp)
   1109c:	10001926 	beq	r2,zero,11104 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   110a0:	e0bffd17 	ldw	r2,-12(fp)
   110a4:	10800017 	ldw	r2,0(r2)
   110a8:	10800417 	ldw	r2,16(r2)
   110ac:	10000626 	beq	r2,zero,110c8 <close+0x6c>
   110b0:	e0bffd17 	ldw	r2,-12(fp)
   110b4:	10800017 	ldw	r2,0(r2)
   110b8:	10800417 	ldw	r2,16(r2)
   110bc:	e13ffd17 	ldw	r4,-12(fp)
   110c0:	103ee83a 	callr	r2
   110c4:	00000106 	br	110cc <close+0x70>
   110c8:	0005883a 	mov	r2,zero
   110cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   110d0:	e13fff17 	ldw	r4,-4(fp)
   110d4:	001171c0 	call	1171c <alt_release_fd>
    if (rval < 0)
   110d8:	e0bffe17 	ldw	r2,-8(fp)
   110dc:	1000070e 	bge	r2,zero,110fc <close+0xa0>
    {
      ALT_ERRNO = -rval;
   110e0:	00110200 	call	11020 <alt_get_errno>
   110e4:	1007883a 	mov	r3,r2
   110e8:	e0bffe17 	ldw	r2,-8(fp)
   110ec:	0085c83a 	sub	r2,zero,r2
   110f0:	18800015 	stw	r2,0(r3)
      return -1;
   110f4:	00bfffc4 	movi	r2,-1
   110f8:	00000706 	br	11118 <close+0xbc>
    }
    return 0;
   110fc:	0005883a 	mov	r2,zero
   11100:	00000506 	br	11118 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11104:	00110200 	call	11020 <alt_get_errno>
   11108:	1007883a 	mov	r3,r2
   1110c:	00801444 	movi	r2,81
   11110:	18800015 	stw	r2,0(r3)
    return -1;
   11114:	00bfffc4 	movi	r2,-1
  }
}
   11118:	e037883a 	mov	sp,fp
   1111c:	dfc00117 	ldw	ra,4(sp)
   11120:	df000017 	ldw	fp,0(sp)
   11124:	dec00204 	addi	sp,sp,8
   11128:	f800283a 	ret

0001112c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1112c:	defffc04 	addi	sp,sp,-16
   11130:	df000315 	stw	fp,12(sp)
   11134:	df000304 	addi	fp,sp,12
   11138:	e13ffd15 	stw	r4,-12(fp)
   1113c:	e17ffe15 	stw	r5,-8(fp)
   11140:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11144:	e0bfff17 	ldw	r2,-4(fp)
}
   11148:	e037883a 	mov	sp,fp
   1114c:	df000017 	ldw	fp,0(sp)
   11150:	dec00104 	addi	sp,sp,4
   11154:	f800283a 	ret

00011158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11158:	defffe04 	addi	sp,sp,-8
   1115c:	dfc00115 	stw	ra,4(sp)
   11160:	df000015 	stw	fp,0(sp)
   11164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11168:	d0a00b17 	ldw	r2,-32724(gp)
   1116c:	10000326 	beq	r2,zero,1117c <alt_get_errno+0x24>
   11170:	d0a00b17 	ldw	r2,-32724(gp)
   11174:	103ee83a 	callr	r2
   11178:	00000106 	br	11180 <alt_get_errno+0x28>
   1117c:	d0a72204 	addi	r2,gp,-25464
}
   11180:	e037883a 	mov	sp,fp
   11184:	dfc00117 	ldw	ra,4(sp)
   11188:	df000017 	ldw	fp,0(sp)
   1118c:	dec00204 	addi	sp,sp,8
   11190:	f800283a 	ret

00011194 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11194:	defffb04 	addi	sp,sp,-20
   11198:	dfc00415 	stw	ra,16(sp)
   1119c:	df000315 	stw	fp,12(sp)
   111a0:	df000304 	addi	fp,sp,12
   111a4:	e13ffe15 	stw	r4,-8(fp)
   111a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   111ac:	e0bffe17 	ldw	r2,-8(fp)
   111b0:	10000616 	blt	r2,zero,111cc <fstat+0x38>
   111b4:	e0bffe17 	ldw	r2,-8(fp)
   111b8:	10c00324 	muli	r3,r2,12
   111bc:	00800074 	movhi	r2,1
   111c0:	10976f04 	addi	r2,r2,23996
   111c4:	1885883a 	add	r2,r3,r2
   111c8:	00000106 	br	111d0 <fstat+0x3c>
   111cc:	0005883a 	mov	r2,zero
   111d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   111d4:	e0bffd17 	ldw	r2,-12(fp)
   111d8:	10001026 	beq	r2,zero,1121c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   111dc:	e0bffd17 	ldw	r2,-12(fp)
   111e0:	10800017 	ldw	r2,0(r2)
   111e4:	10800817 	ldw	r2,32(r2)
   111e8:	10000726 	beq	r2,zero,11208 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   111ec:	e0bffd17 	ldw	r2,-12(fp)
   111f0:	10800017 	ldw	r2,0(r2)
   111f4:	10800817 	ldw	r2,32(r2)
   111f8:	e17fff17 	ldw	r5,-4(fp)
   111fc:	e13ffd17 	ldw	r4,-12(fp)
   11200:	103ee83a 	callr	r2
   11204:	00000a06 	br	11230 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11208:	e0bfff17 	ldw	r2,-4(fp)
   1120c:	00c80004 	movi	r3,8192
   11210:	10c00115 	stw	r3,4(r2)
      return 0;
   11214:	0005883a 	mov	r2,zero
   11218:	00000506 	br	11230 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1121c:	00111580 	call	11158 <alt_get_errno>
   11220:	1007883a 	mov	r3,r2
   11224:	00801444 	movi	r2,81
   11228:	18800015 	stw	r2,0(r3)
    return -1;
   1122c:	00bfffc4 	movi	r2,-1
  }
}
   11230:	e037883a 	mov	sp,fp
   11234:	dfc00117 	ldw	ra,4(sp)
   11238:	df000017 	ldw	fp,0(sp)
   1123c:	dec00204 	addi	sp,sp,8
   11240:	f800283a 	ret

00011244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11244:	defffe04 	addi	sp,sp,-8
   11248:	dfc00115 	stw	ra,4(sp)
   1124c:	df000015 	stw	fp,0(sp)
   11250:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11254:	d0a00b17 	ldw	r2,-32724(gp)
   11258:	10000326 	beq	r2,zero,11268 <alt_get_errno+0x24>
   1125c:	d0a00b17 	ldw	r2,-32724(gp)
   11260:	103ee83a 	callr	r2
   11264:	00000106 	br	1126c <alt_get_errno+0x28>
   11268:	d0a72204 	addi	r2,gp,-25464
}
   1126c:	e037883a 	mov	sp,fp
   11270:	dfc00117 	ldw	ra,4(sp)
   11274:	df000017 	ldw	fp,0(sp)
   11278:	dec00204 	addi	sp,sp,8
   1127c:	f800283a 	ret

00011280 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11280:	deffed04 	addi	sp,sp,-76
   11284:	dfc01215 	stw	ra,72(sp)
   11288:	df001115 	stw	fp,68(sp)
   1128c:	df001104 	addi	fp,sp,68
   11290:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11294:	e0bfff17 	ldw	r2,-4(fp)
   11298:	10000616 	blt	r2,zero,112b4 <isatty+0x34>
   1129c:	e0bfff17 	ldw	r2,-4(fp)
   112a0:	10c00324 	muli	r3,r2,12
   112a4:	00800074 	movhi	r2,1
   112a8:	10976f04 	addi	r2,r2,23996
   112ac:	1885883a 	add	r2,r3,r2
   112b0:	00000106 	br	112b8 <isatty+0x38>
   112b4:	0005883a 	mov	r2,zero
   112b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   112bc:	e0bfef17 	ldw	r2,-68(fp)
   112c0:	10000e26 	beq	r2,zero,112fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   112c4:	e0bfef17 	ldw	r2,-68(fp)
   112c8:	10800017 	ldw	r2,0(r2)
   112cc:	10800817 	ldw	r2,32(r2)
   112d0:	1000021e 	bne	r2,zero,112dc <isatty+0x5c>
    {
      return 1;
   112d4:	00800044 	movi	r2,1
   112d8:	00000d06 	br	11310 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   112dc:	e0bff004 	addi	r2,fp,-64
   112e0:	100b883a 	mov	r5,r2
   112e4:	e13fff17 	ldw	r4,-4(fp)
   112e8:	00111940 	call	11194 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   112ec:	e0bff117 	ldw	r2,-60(fp)
   112f0:	10880020 	cmpeqi	r2,r2,8192
   112f4:	10803fcc 	andi	r2,r2,255
   112f8:	00000506 	br	11310 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   112fc:	00112440 	call	11244 <alt_get_errno>
   11300:	1007883a 	mov	r3,r2
   11304:	00801444 	movi	r2,81
   11308:	18800015 	stw	r2,0(r3)
    return 0;
   1130c:	0005883a 	mov	r2,zero
  }
}
   11310:	e037883a 	mov	sp,fp
   11314:	dfc00117 	ldw	ra,4(sp)
   11318:	df000017 	ldw	fp,0(sp)
   1131c:	dec00204 	addi	sp,sp,8
   11320:	f800283a 	ret

00011324 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11324:	defffc04 	addi	sp,sp,-16
   11328:	df000315 	stw	fp,12(sp)
   1132c:	df000304 	addi	fp,sp,12
   11330:	e13ffd15 	stw	r4,-12(fp)
   11334:	e17ffe15 	stw	r5,-8(fp)
   11338:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1133c:	e0fffe17 	ldw	r3,-8(fp)
   11340:	e0bffd17 	ldw	r2,-12(fp)
   11344:	18800c26 	beq	r3,r2,11378 <alt_load_section+0x54>
  {
    while( to != end )
   11348:	00000806 	br	1136c <alt_load_section+0x48>
    {
      *to++ = *from++;
   1134c:	e0bffe17 	ldw	r2,-8(fp)
   11350:	10c00104 	addi	r3,r2,4
   11354:	e0fffe15 	stw	r3,-8(fp)
   11358:	e0fffd17 	ldw	r3,-12(fp)
   1135c:	19000104 	addi	r4,r3,4
   11360:	e13ffd15 	stw	r4,-12(fp)
   11364:	18c00017 	ldw	r3,0(r3)
   11368:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1136c:	e0fffe17 	ldw	r3,-8(fp)
   11370:	e0bfff17 	ldw	r2,-4(fp)
   11374:	18bff51e 	bne	r3,r2,1134c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   11378:	0001883a 	nop
   1137c:	e037883a 	mov	sp,fp
   11380:	df000017 	ldw	fp,0(sp)
   11384:	dec00104 	addi	sp,sp,4
   11388:	f800283a 	ret

0001138c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1138c:	defffe04 	addi	sp,sp,-8
   11390:	dfc00115 	stw	ra,4(sp)
   11394:	df000015 	stw	fp,0(sp)
   11398:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1139c:	01800074 	movhi	r6,1
   113a0:	319c4104 	addi	r6,r6,28932
   113a4:	01400074 	movhi	r5,1
   113a8:	29553804 	addi	r5,r5,21728
   113ac:	01000074 	movhi	r4,1
   113b0:	211c4104 	addi	r4,r4,28932
   113b4:	00113240 	call	11324 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   113b8:	01800034 	movhi	r6,0
   113bc:	31807004 	addi	r6,r6,448
   113c0:	01400034 	movhi	r5,0
   113c4:	29400804 	addi	r5,r5,32
   113c8:	01000034 	movhi	r4,0
   113cc:	21000804 	addi	r4,r4,32
   113d0:	00113240 	call	11324 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   113d4:	01800074 	movhi	r6,1
   113d8:	31953804 	addi	r6,r6,21728
   113dc:	01400074 	movhi	r5,1
   113e0:	2951ec04 	addi	r5,r5,18352
   113e4:	01000074 	movhi	r4,1
   113e8:	2111ec04 	addi	r4,r4,18352
   113ec:	00113240 	call	11324 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   113f0:	00137380 	call	13738 <alt_dcache_flush_all>
  alt_icache_flush_all();
   113f4:	00139200 	call	13920 <alt_icache_flush_all>
}
   113f8:	0001883a 	nop
   113fc:	e037883a 	mov	sp,fp
   11400:	dfc00117 	ldw	ra,4(sp)
   11404:	df000017 	ldw	fp,0(sp)
   11408:	dec00204 	addi	sp,sp,8
   1140c:	f800283a 	ret

00011410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11410:	defffe04 	addi	sp,sp,-8
   11414:	dfc00115 	stw	ra,4(sp)
   11418:	df000015 	stw	fp,0(sp)
   1141c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11420:	d0a00b17 	ldw	r2,-32724(gp)
   11424:	10000326 	beq	r2,zero,11434 <alt_get_errno+0x24>
   11428:	d0a00b17 	ldw	r2,-32724(gp)
   1142c:	103ee83a 	callr	r2
   11430:	00000106 	br	11438 <alt_get_errno+0x28>
   11434:	d0a72204 	addi	r2,gp,-25464
}
   11438:	e037883a 	mov	sp,fp
   1143c:	dfc00117 	ldw	ra,4(sp)
   11440:	df000017 	ldw	fp,0(sp)
   11444:	dec00204 	addi	sp,sp,8
   11448:	f800283a 	ret

0001144c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1144c:	defff904 	addi	sp,sp,-28
   11450:	dfc00615 	stw	ra,24(sp)
   11454:	df000515 	stw	fp,20(sp)
   11458:	df000504 	addi	fp,sp,20
   1145c:	e13ffd15 	stw	r4,-12(fp)
   11460:	e17ffe15 	stw	r5,-8(fp)
   11464:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   11468:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1146c:	e0bffd17 	ldw	r2,-12(fp)
   11470:	10000616 	blt	r2,zero,1148c <lseek+0x40>
   11474:	e0bffd17 	ldw	r2,-12(fp)
   11478:	10c00324 	muli	r3,r2,12
   1147c:	00800074 	movhi	r2,1
   11480:	10976f04 	addi	r2,r2,23996
   11484:	1885883a 	add	r2,r3,r2
   11488:	00000106 	br	11490 <lseek+0x44>
   1148c:	0005883a 	mov	r2,zero
   11490:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   11494:	e0bffc17 	ldw	r2,-16(fp)
   11498:	10001026 	beq	r2,zero,114dc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1149c:	e0bffc17 	ldw	r2,-16(fp)
   114a0:	10800017 	ldw	r2,0(r2)
   114a4:	10800717 	ldw	r2,28(r2)
   114a8:	10000926 	beq	r2,zero,114d0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   114ac:	e0bffc17 	ldw	r2,-16(fp)
   114b0:	10800017 	ldw	r2,0(r2)
   114b4:	10800717 	ldw	r2,28(r2)
   114b8:	e1bfff17 	ldw	r6,-4(fp)
   114bc:	e17ffe17 	ldw	r5,-8(fp)
   114c0:	e13ffc17 	ldw	r4,-16(fp)
   114c4:	103ee83a 	callr	r2
   114c8:	e0bffb15 	stw	r2,-20(fp)
   114cc:	00000506 	br	114e4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   114d0:	00bfde84 	movi	r2,-134
   114d4:	e0bffb15 	stw	r2,-20(fp)
   114d8:	00000206 	br	114e4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   114dc:	00bfebc4 	movi	r2,-81
   114e0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   114e4:	e0bffb17 	ldw	r2,-20(fp)
   114e8:	1000070e 	bge	r2,zero,11508 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   114ec:	00114100 	call	11410 <alt_get_errno>
   114f0:	1007883a 	mov	r3,r2
   114f4:	e0bffb17 	ldw	r2,-20(fp)
   114f8:	0085c83a 	sub	r2,zero,r2
   114fc:	18800015 	stw	r2,0(r3)
    rc = -1;
   11500:	00bfffc4 	movi	r2,-1
   11504:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   11508:	e0bffb17 	ldw	r2,-20(fp)
}
   1150c:	e037883a 	mov	sp,fp
   11510:	dfc00117 	ldw	ra,4(sp)
   11514:	df000017 	ldw	fp,0(sp)
   11518:	dec00204 	addi	sp,sp,8
   1151c:	f800283a 	ret

00011520 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11520:	defffd04 	addi	sp,sp,-12
   11524:	dfc00215 	stw	ra,8(sp)
   11528:	df000115 	stw	fp,4(sp)
   1152c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11530:	0009883a 	mov	r4,zero
   11534:	00119c80 	call	119c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   11538:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1153c:	0011a000 	call	11a00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11540:	01800074 	movhi	r6,1
   11544:	31948d04 	addi	r6,r6,21044
   11548:	01400074 	movhi	r5,1
   1154c:	29548d04 	addi	r5,r5,21044
   11550:	01000074 	movhi	r4,1
   11554:	21148d04 	addi	r4,r4,21044
   11558:	0013cb80 	call	13cb8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1155c:	00138600 	call	13860 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11560:	01000074 	movhi	r4,1
   11564:	210e3004 	addi	r4,r4,14528
   11568:	001441c0 	call	1441c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1156c:	d0a72317 	ldw	r2,-25460(gp)
   11570:	d0e72417 	ldw	r3,-25456(gp)
   11574:	d1272517 	ldw	r4,-25452(gp)
   11578:	200d883a 	mov	r6,r4
   1157c:	180b883a 	mov	r5,r3
   11580:	1009883a 	mov	r4,r2
   11584:	00002f00 	call	2f0 <main>
   11588:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1158c:	01000044 	movi	r4,1
   11590:	001105c0 	call	1105c <close>
  exit (result);
   11594:	e13fff17 	ldw	r4,-4(fp)
   11598:	00144300 	call	14430 <exit>

0001159c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1159c:	defffe04 	addi	sp,sp,-8
   115a0:	df000115 	stw	fp,4(sp)
   115a4:	df000104 	addi	fp,sp,4
   115a8:	e13fff15 	stw	r4,-4(fp)
}
   115ac:	0001883a 	nop
   115b0:	e037883a 	mov	sp,fp
   115b4:	df000017 	ldw	fp,0(sp)
   115b8:	dec00104 	addi	sp,sp,4
   115bc:	f800283a 	ret

000115c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   115c0:	defffe04 	addi	sp,sp,-8
   115c4:	df000115 	stw	fp,4(sp)
   115c8:	df000104 	addi	fp,sp,4
   115cc:	e13fff15 	stw	r4,-4(fp)
}
   115d0:	0001883a 	nop
   115d4:	e037883a 	mov	sp,fp
   115d8:	df000017 	ldw	fp,0(sp)
   115dc:	dec00104 	addi	sp,sp,4
   115e0:	f800283a 	ret

000115e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   115e4:	defffe04 	addi	sp,sp,-8
   115e8:	dfc00115 	stw	ra,4(sp)
   115ec:	df000015 	stw	fp,0(sp)
   115f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   115f4:	d0a00b17 	ldw	r2,-32724(gp)
   115f8:	10000326 	beq	r2,zero,11608 <alt_get_errno+0x24>
   115fc:	d0a00b17 	ldw	r2,-32724(gp)
   11600:	103ee83a 	callr	r2
   11604:	00000106 	br	1160c <alt_get_errno+0x28>
   11608:	d0a72204 	addi	r2,gp,-25464
}
   1160c:	e037883a 	mov	sp,fp
   11610:	dfc00117 	ldw	ra,4(sp)
   11614:	df000017 	ldw	fp,0(sp)
   11618:	dec00204 	addi	sp,sp,8
   1161c:	f800283a 	ret

00011620 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   11620:	defff904 	addi	sp,sp,-28
   11624:	dfc00615 	stw	ra,24(sp)
   11628:	df000515 	stw	fp,20(sp)
   1162c:	df000504 	addi	fp,sp,20
   11630:	e13ffd15 	stw	r4,-12(fp)
   11634:	e17ffe15 	stw	r5,-8(fp)
   11638:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	10000616 	blt	r2,zero,1165c <read+0x3c>
   11644:	e0bffd17 	ldw	r2,-12(fp)
   11648:	10c00324 	muli	r3,r2,12
   1164c:	00800074 	movhi	r2,1
   11650:	10976f04 	addi	r2,r2,23996
   11654:	1885883a 	add	r2,r3,r2
   11658:	00000106 	br	11660 <read+0x40>
   1165c:	0005883a 	mov	r2,zero
   11660:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11664:	e0bffb17 	ldw	r2,-20(fp)
   11668:	10002226 	beq	r2,zero,116f4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1166c:	e0bffb17 	ldw	r2,-20(fp)
   11670:	10800217 	ldw	r2,8(r2)
   11674:	108000cc 	andi	r2,r2,3
   11678:	10800060 	cmpeqi	r2,r2,1
   1167c:	1000181e 	bne	r2,zero,116e0 <read+0xc0>
        (fd->dev->read))
   11680:	e0bffb17 	ldw	r2,-20(fp)
   11684:	10800017 	ldw	r2,0(r2)
   11688:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1168c:	10001426 	beq	r2,zero,116e0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   11690:	e0bffb17 	ldw	r2,-20(fp)
   11694:	10800017 	ldw	r2,0(r2)
   11698:	10800517 	ldw	r2,20(r2)
   1169c:	e0ffff17 	ldw	r3,-4(fp)
   116a0:	180d883a 	mov	r6,r3
   116a4:	e17ffe17 	ldw	r5,-8(fp)
   116a8:	e13ffb17 	ldw	r4,-20(fp)
   116ac:	103ee83a 	callr	r2
   116b0:	e0bffc15 	stw	r2,-16(fp)
   116b4:	e0bffc17 	ldw	r2,-16(fp)
   116b8:	1000070e 	bge	r2,zero,116d8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   116bc:	00115e40 	call	115e4 <alt_get_errno>
   116c0:	1007883a 	mov	r3,r2
   116c4:	e0bffc17 	ldw	r2,-16(fp)
   116c8:	0085c83a 	sub	r2,zero,r2
   116cc:	18800015 	stw	r2,0(r3)
          return -1;
   116d0:	00bfffc4 	movi	r2,-1
   116d4:	00000c06 	br	11708 <read+0xe8>
        }
        return rval;
   116d8:	e0bffc17 	ldw	r2,-16(fp)
   116dc:	00000a06 	br	11708 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   116e0:	00115e40 	call	115e4 <alt_get_errno>
   116e4:	1007883a 	mov	r3,r2
   116e8:	00800344 	movi	r2,13
   116ec:	18800015 	stw	r2,0(r3)
   116f0:	00000406 	br	11704 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   116f4:	00115e40 	call	115e4 <alt_get_errno>
   116f8:	1007883a 	mov	r3,r2
   116fc:	00801444 	movi	r2,81
   11700:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11704:	00bfffc4 	movi	r2,-1
}
   11708:	e037883a 	mov	sp,fp
   1170c:	dfc00117 	ldw	ra,4(sp)
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00204 	addi	sp,sp,8
   11718:	f800283a 	ret

0001171c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1171c:	defffe04 	addi	sp,sp,-8
   11720:	df000115 	stw	fp,4(sp)
   11724:	df000104 	addi	fp,sp,4
   11728:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1172c:	e0bfff17 	ldw	r2,-4(fp)
   11730:	108000d0 	cmplti	r2,r2,3
   11734:	10000d1e 	bne	r2,zero,1176c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   11738:	00800074 	movhi	r2,1
   1173c:	10976f04 	addi	r2,r2,23996
   11740:	e0ffff17 	ldw	r3,-4(fp)
   11744:	18c00324 	muli	r3,r3,12
   11748:	10c5883a 	add	r2,r2,r3
   1174c:	10800204 	addi	r2,r2,8
   11750:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11754:	00800074 	movhi	r2,1
   11758:	10976f04 	addi	r2,r2,23996
   1175c:	e0ffff17 	ldw	r3,-4(fp)
   11760:	18c00324 	muli	r3,r3,12
   11764:	10c5883a 	add	r2,r2,r3
   11768:	10000015 	stw	zero,0(r2)
  }
}
   1176c:	0001883a 	nop
   11770:	e037883a 	mov	sp,fp
   11774:	df000017 	ldw	fp,0(sp)
   11778:	dec00104 	addi	sp,sp,4
   1177c:	f800283a 	ret

00011780 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   11780:	defff904 	addi	sp,sp,-28
   11784:	df000615 	stw	fp,24(sp)
   11788:	df000604 	addi	fp,sp,24
   1178c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11790:	0005303a 	rdctl	r2,status
   11794:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11798:	e0fffe17 	ldw	r3,-8(fp)
   1179c:	00bfff84 	movi	r2,-2
   117a0:	1884703a 	and	r2,r3,r2
   117a4:	1001703a 	wrctl	status,r2
  
  return context;
   117a8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   117ac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   117b0:	d0a00c17 	ldw	r2,-32720(gp)
   117b4:	10c000c4 	addi	r3,r2,3
   117b8:	00bfff04 	movi	r2,-4
   117bc:	1884703a 	and	r2,r3,r2
   117c0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   117c4:	d0e00c17 	ldw	r3,-32720(gp)
   117c8:	e0bfff17 	ldw	r2,-4(fp)
   117cc:	1887883a 	add	r3,r3,r2
   117d0:	00820034 	movhi	r2,2048
   117d4:	10800004 	addi	r2,r2,0
   117d8:	10c0062e 	bgeu	r2,r3,117f4 <sbrk+0x74>
   117dc:	e0bffb17 	ldw	r2,-20(fp)
   117e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117e4:	e0bffa17 	ldw	r2,-24(fp)
   117e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   117ec:	00bfffc4 	movi	r2,-1
   117f0:	00000b06 	br	11820 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   117f4:	d0a00c17 	ldw	r2,-32720(gp)
   117f8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   117fc:	d0e00c17 	ldw	r3,-32720(gp)
   11800:	e0bfff17 	ldw	r2,-4(fp)
   11804:	1885883a 	add	r2,r3,r2
   11808:	d0a00c15 	stw	r2,-32720(gp)
   1180c:	e0bffb17 	ldw	r2,-20(fp)
   11810:	e0bffc15 	stw	r2,-16(fp)
   11814:	e0bffc17 	ldw	r2,-16(fp)
   11818:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1181c:	e0bffd17 	ldw	r2,-12(fp)
} 
   11820:	e037883a 	mov	sp,fp
   11824:	df000017 	ldw	fp,0(sp)
   11828:	dec00104 	addi	sp,sp,4
   1182c:	f800283a 	ret

00011830 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   11830:	defffd04 	addi	sp,sp,-12
   11834:	dfc00215 	stw	ra,8(sp)
   11838:	df000115 	stw	fp,4(sp)
   1183c:	df000104 	addi	fp,sp,4
   11840:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   11844:	e13fff17 	ldw	r4,-4(fp)
   11848:	00135e00 	call	135e0 <alt_busy_sleep>
}
   1184c:	e037883a 	mov	sp,fp
   11850:	dfc00117 	ldw	ra,4(sp)
   11854:	df000017 	ldw	fp,0(sp)
   11858:	dec00204 	addi	sp,sp,8
   1185c:	f800283a 	ret

00011860 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11860:	defffe04 	addi	sp,sp,-8
   11864:	dfc00115 	stw	ra,4(sp)
   11868:	df000015 	stw	fp,0(sp)
   1186c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11870:	d0a00b17 	ldw	r2,-32724(gp)
   11874:	10000326 	beq	r2,zero,11884 <alt_get_errno+0x24>
   11878:	d0a00b17 	ldw	r2,-32724(gp)
   1187c:	103ee83a 	callr	r2
   11880:	00000106 	br	11888 <alt_get_errno+0x28>
   11884:	d0a72204 	addi	r2,gp,-25464
}
   11888:	e037883a 	mov	sp,fp
   1188c:	dfc00117 	ldw	ra,4(sp)
   11890:	df000017 	ldw	fp,0(sp)
   11894:	dec00204 	addi	sp,sp,8
   11898:	f800283a 	ret

0001189c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1189c:	defff904 	addi	sp,sp,-28
   118a0:	dfc00615 	stw	ra,24(sp)
   118a4:	df000515 	stw	fp,20(sp)
   118a8:	df000504 	addi	fp,sp,20
   118ac:	e13ffd15 	stw	r4,-12(fp)
   118b0:	e17ffe15 	stw	r5,-8(fp)
   118b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	10000616 	blt	r2,zero,118d8 <write+0x3c>
   118c0:	e0bffd17 	ldw	r2,-12(fp)
   118c4:	10c00324 	muli	r3,r2,12
   118c8:	00800074 	movhi	r2,1
   118cc:	10976f04 	addi	r2,r2,23996
   118d0:	1885883a 	add	r2,r3,r2
   118d4:	00000106 	br	118dc <write+0x40>
   118d8:	0005883a 	mov	r2,zero
   118dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   118e0:	e0bffb17 	ldw	r2,-20(fp)
   118e4:	10002126 	beq	r2,zero,1196c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   118e8:	e0bffb17 	ldw	r2,-20(fp)
   118ec:	10800217 	ldw	r2,8(r2)
   118f0:	108000cc 	andi	r2,r2,3
   118f4:	10001826 	beq	r2,zero,11958 <write+0xbc>
   118f8:	e0bffb17 	ldw	r2,-20(fp)
   118fc:	10800017 	ldw	r2,0(r2)
   11900:	10800617 	ldw	r2,24(r2)
   11904:	10001426 	beq	r2,zero,11958 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11908:	e0bffb17 	ldw	r2,-20(fp)
   1190c:	10800017 	ldw	r2,0(r2)
   11910:	10800617 	ldw	r2,24(r2)
   11914:	e0ffff17 	ldw	r3,-4(fp)
   11918:	180d883a 	mov	r6,r3
   1191c:	e17ffe17 	ldw	r5,-8(fp)
   11920:	e13ffb17 	ldw	r4,-20(fp)
   11924:	103ee83a 	callr	r2
   11928:	e0bffc15 	stw	r2,-16(fp)
   1192c:	e0bffc17 	ldw	r2,-16(fp)
   11930:	1000070e 	bge	r2,zero,11950 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   11934:	00118600 	call	11860 <alt_get_errno>
   11938:	1007883a 	mov	r3,r2
   1193c:	e0bffc17 	ldw	r2,-16(fp)
   11940:	0085c83a 	sub	r2,zero,r2
   11944:	18800015 	stw	r2,0(r3)
        return -1;
   11948:	00bfffc4 	movi	r2,-1
   1194c:	00000c06 	br	11980 <write+0xe4>
      }
      return rval;
   11950:	e0bffc17 	ldw	r2,-16(fp)
   11954:	00000a06 	br	11980 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11958:	00118600 	call	11860 <alt_get_errno>
   1195c:	1007883a 	mov	r3,r2
   11960:	00800344 	movi	r2,13
   11964:	18800015 	stw	r2,0(r3)
   11968:	00000406 	br	1197c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1196c:	00118600 	call	11860 <alt_get_errno>
   11970:	1007883a 	mov	r3,r2
   11974:	00801444 	movi	r2,81
   11978:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1197c:	00bfffc4 	movi	r2,-1
}
   11980:	e037883a 	mov	sp,fp
   11984:	dfc00117 	ldw	ra,4(sp)
   11988:	df000017 	ldw	fp,0(sp)
   1198c:	dec00204 	addi	sp,sp,8
   11990:	f800283a 	ret

00011994 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11994:	defffd04 	addi	sp,sp,-12
   11998:	dfc00215 	stw	ra,8(sp)
   1199c:	df000115 	stw	fp,4(sp)
   119a0:	df000104 	addi	fp,sp,4
   119a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   119a8:	d1600804 	addi	r5,gp,-32736
   119ac:	e13fff17 	ldw	r4,-4(fp)
   119b0:	00137bc0 	call	137bc <alt_dev_llist_insert>
}
   119b4:	e037883a 	mov	sp,fp
   119b8:	dfc00117 	ldw	ra,4(sp)
   119bc:	df000017 	ldw	fp,0(sp)
   119c0:	dec00204 	addi	sp,sp,8
   119c4:	f800283a 	ret

000119c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   119c8:	defffd04 	addi	sp,sp,-12
   119cc:	dfc00215 	stw	ra,8(sp)
   119d0:	df000115 	stw	fp,4(sp)
   119d4:	df000104 	addi	fp,sp,4
   119d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   119dc:	001412c0 	call	1412c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   119e0:	00800044 	movi	r2,1
   119e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   119e8:	0001883a 	nop
   119ec:	e037883a 	mov	sp,fp
   119f0:	dfc00117 	ldw	ra,4(sp)
   119f4:	df000017 	ldw	fp,0(sp)
   119f8:	dec00204 	addi	sp,sp,8
   119fc:	f800283a 	ret

00011a00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11a00:	defffe04 	addi	sp,sp,-8
   11a04:	dfc00115 	stw	ra,4(sp)
   11a08:	df000015 	stw	fp,0(sp)
   11a0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   11a10:	01c0fa04 	movi	r7,1000
   11a14:	000d883a 	mov	r6,zero
   11a18:	000b883a 	mov	r5,zero
   11a1c:	01020034 	movhi	r4,2048
   11a20:	21040804 	addi	r4,r4,4128
   11a24:	00134380 	call	13438 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_STAMP, timer_stamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   11a28:	018000c4 	movi	r6,3
   11a2c:	000b883a 	mov	r5,zero
   11a30:	01000074 	movhi	r4,1
   11a34:	2117d904 	addi	r4,r4,24420
   11a38:	0011be00 	call	11be0 <altera_avalon_jtag_uart_init>
   11a3c:	01000074 	movhi	r4,1
   11a40:	2117cf04 	addi	r4,r4,24380
   11a44:	00119940 	call	11994 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
   11a48:	01000074 	movhi	r4,1
   11a4c:	211bf104 	addi	r4,r4,28612
   11a50:	001322c0 	call	1322c <altera_avalon_lcd_16207_init>
   11a54:	01000074 	movhi	r4,1
   11a58:	211be704 	addi	r4,r4,28572
   11a5c:	00119940 	call	11994 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   11a60:	0001883a 	nop
}
   11a64:	0001883a 	nop
   11a68:	e037883a 	mov	sp,fp
   11a6c:	dfc00117 	ldw	ra,4(sp)
   11a70:	df000017 	ldw	fp,0(sp)
   11a74:	dec00204 	addi	sp,sp,8
   11a78:	f800283a 	ret

00011a7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11a7c:	defffa04 	addi	sp,sp,-24
   11a80:	dfc00515 	stw	ra,20(sp)
   11a84:	df000415 	stw	fp,16(sp)
   11a88:	df000404 	addi	fp,sp,16
   11a8c:	e13ffd15 	stw	r4,-12(fp)
   11a90:	e17ffe15 	stw	r5,-8(fp)
   11a94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11a98:	e0bffd17 	ldw	r2,-12(fp)
   11a9c:	10800017 	ldw	r2,0(r2)
   11aa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11aa4:	e0bffc17 	ldw	r2,-16(fp)
   11aa8:	10c00a04 	addi	r3,r2,40
   11aac:	e0bffd17 	ldw	r2,-12(fp)
   11ab0:	10800217 	ldw	r2,8(r2)
   11ab4:	100f883a 	mov	r7,r2
   11ab8:	e1bfff17 	ldw	r6,-4(fp)
   11abc:	e17ffe17 	ldw	r5,-8(fp)
   11ac0:	1809883a 	mov	r4,r3
   11ac4:	00120a40 	call	120a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11ac8:	e037883a 	mov	sp,fp
   11acc:	dfc00117 	ldw	ra,4(sp)
   11ad0:	df000017 	ldw	fp,0(sp)
   11ad4:	dec00204 	addi	sp,sp,8
   11ad8:	f800283a 	ret

00011adc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11adc:	defffa04 	addi	sp,sp,-24
   11ae0:	dfc00515 	stw	ra,20(sp)
   11ae4:	df000415 	stw	fp,16(sp)
   11ae8:	df000404 	addi	fp,sp,16
   11aec:	e13ffd15 	stw	r4,-12(fp)
   11af0:	e17ffe15 	stw	r5,-8(fp)
   11af4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11af8:	e0bffd17 	ldw	r2,-12(fp)
   11afc:	10800017 	ldw	r2,0(r2)
   11b00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11b04:	e0bffc17 	ldw	r2,-16(fp)
   11b08:	10c00a04 	addi	r3,r2,40
   11b0c:	e0bffd17 	ldw	r2,-12(fp)
   11b10:	10800217 	ldw	r2,8(r2)
   11b14:	100f883a 	mov	r7,r2
   11b18:	e1bfff17 	ldw	r6,-4(fp)
   11b1c:	e17ffe17 	ldw	r5,-8(fp)
   11b20:	1809883a 	mov	r4,r3
   11b24:	00122c00 	call	122c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11b28:	e037883a 	mov	sp,fp
   11b2c:	dfc00117 	ldw	ra,4(sp)
   11b30:	df000017 	ldw	fp,0(sp)
   11b34:	dec00204 	addi	sp,sp,8
   11b38:	f800283a 	ret

00011b3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11b3c:	defffc04 	addi	sp,sp,-16
   11b40:	dfc00315 	stw	ra,12(sp)
   11b44:	df000215 	stw	fp,8(sp)
   11b48:	df000204 	addi	fp,sp,8
   11b4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11b50:	e0bfff17 	ldw	r2,-4(fp)
   11b54:	10800017 	ldw	r2,0(r2)
   11b58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11b5c:	e0bffe17 	ldw	r2,-8(fp)
   11b60:	10c00a04 	addi	r3,r2,40
   11b64:	e0bfff17 	ldw	r2,-4(fp)
   11b68:	10800217 	ldw	r2,8(r2)
   11b6c:	100b883a 	mov	r5,r2
   11b70:	1809883a 	mov	r4,r3
   11b74:	0011f4c0 	call	11f4c <altera_avalon_jtag_uart_close>
}
   11b78:	e037883a 	mov	sp,fp
   11b7c:	dfc00117 	ldw	ra,4(sp)
   11b80:	df000017 	ldw	fp,0(sp)
   11b84:	dec00204 	addi	sp,sp,8
   11b88:	f800283a 	ret

00011b8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11b8c:	defffa04 	addi	sp,sp,-24
   11b90:	dfc00515 	stw	ra,20(sp)
   11b94:	df000415 	stw	fp,16(sp)
   11b98:	df000404 	addi	fp,sp,16
   11b9c:	e13ffd15 	stw	r4,-12(fp)
   11ba0:	e17ffe15 	stw	r5,-8(fp)
   11ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11ba8:	e0bffd17 	ldw	r2,-12(fp)
   11bac:	10800017 	ldw	r2,0(r2)
   11bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11bb4:	e0bffc17 	ldw	r2,-16(fp)
   11bb8:	10800a04 	addi	r2,r2,40
   11bbc:	e1bfff17 	ldw	r6,-4(fp)
   11bc0:	e17ffe17 	ldw	r5,-8(fp)
   11bc4:	1009883a 	mov	r4,r2
   11bc8:	0011fb40 	call	11fb4 <altera_avalon_jtag_uart_ioctl>
}
   11bcc:	e037883a 	mov	sp,fp
   11bd0:	dfc00117 	ldw	ra,4(sp)
   11bd4:	df000017 	ldw	fp,0(sp)
   11bd8:	dec00204 	addi	sp,sp,8
   11bdc:	f800283a 	ret

00011be0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   11be0:	defffa04 	addi	sp,sp,-24
   11be4:	dfc00515 	stw	ra,20(sp)
   11be8:	df000415 	stw	fp,16(sp)
   11bec:	df000404 	addi	fp,sp,16
   11bf0:	e13ffd15 	stw	r4,-12(fp)
   11bf4:	e17ffe15 	stw	r5,-8(fp)
   11bf8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11bfc:	e0bffd17 	ldw	r2,-12(fp)
   11c00:	00c00044 	movi	r3,1
   11c04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11c08:	e0bffd17 	ldw	r2,-12(fp)
   11c0c:	10800017 	ldw	r2,0(r2)
   11c10:	10800104 	addi	r2,r2,4
   11c14:	1007883a 	mov	r3,r2
   11c18:	e0bffd17 	ldw	r2,-12(fp)
   11c1c:	10800817 	ldw	r2,32(r2)
   11c20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   11c24:	e0bffe17 	ldw	r2,-8(fp)
   11c28:	e0ffff17 	ldw	r3,-4(fp)
   11c2c:	d8000015 	stw	zero,0(sp)
   11c30:	e1fffd17 	ldw	r7,-12(fp)
   11c34:	01800074 	movhi	r6,1
   11c38:	31872804 	addi	r6,r6,7328
   11c3c:	180b883a 	mov	r5,r3
   11c40:	1009883a 	mov	r4,r2
   11c44:	00139540 	call	13954 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11c48:	e0bffd17 	ldw	r2,-12(fp)
   11c4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11c50:	e0bffd17 	ldw	r2,-12(fp)
   11c54:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11c58:	d0e72717 	ldw	r3,-25444(gp)
   11c5c:	e1fffd17 	ldw	r7,-12(fp)
   11c60:	01800074 	movhi	r6,1
   11c64:	3187ab04 	addi	r6,r6,7852
   11c68:	180b883a 	mov	r5,r3
   11c6c:	1009883a 	mov	r4,r2
   11c70:	00134b40 	call	134b4 <alt_alarm_start>
   11c74:	1000040e 	bge	r2,zero,11c88 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11c78:	e0fffd17 	ldw	r3,-12(fp)
   11c7c:	00a00034 	movhi	r2,32768
   11c80:	10bfffc4 	addi	r2,r2,-1
   11c84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11c88:	0001883a 	nop
   11c8c:	e037883a 	mov	sp,fp
   11c90:	dfc00117 	ldw	ra,4(sp)
   11c94:	df000017 	ldw	fp,0(sp)
   11c98:	dec00204 	addi	sp,sp,8
   11c9c:	f800283a 	ret

00011ca0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11ca0:	defff804 	addi	sp,sp,-32
   11ca4:	df000715 	stw	fp,28(sp)
   11ca8:	df000704 	addi	fp,sp,28
   11cac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11cb0:	e0bfff17 	ldw	r2,-4(fp)
   11cb4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   11cb8:	e0bffb17 	ldw	r2,-20(fp)
   11cbc:	10800017 	ldw	r2,0(r2)
   11cc0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11cc4:	e0bffc17 	ldw	r2,-16(fp)
   11cc8:	10800104 	addi	r2,r2,4
   11ccc:	10800037 	ldwio	r2,0(r2)
   11cd0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   11cd4:	e0bffd17 	ldw	r2,-12(fp)
   11cd8:	1080c00c 	andi	r2,r2,768
   11cdc:	10006d26 	beq	r2,zero,11e94 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   11ce0:	e0bffd17 	ldw	r2,-12(fp)
   11ce4:	1080400c 	andi	r2,r2,256
   11ce8:	10003526 	beq	r2,zero,11dc0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11cec:	00800074 	movhi	r2,1
   11cf0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11cf4:	e0bffb17 	ldw	r2,-20(fp)
   11cf8:	10800a17 	ldw	r2,40(r2)
   11cfc:	10800044 	addi	r2,r2,1
   11d00:	1081ffcc 	andi	r2,r2,2047
   11d04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   11d08:	e0bffb17 	ldw	r2,-20(fp)
   11d0c:	10c00b17 	ldw	r3,44(r2)
   11d10:	e0bffe17 	ldw	r2,-8(fp)
   11d14:	18801526 	beq	r3,r2,11d6c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11d18:	e0bffc17 	ldw	r2,-16(fp)
   11d1c:	10800037 	ldwio	r2,0(r2)
   11d20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   11d24:	e0bff917 	ldw	r2,-28(fp)
   11d28:	10a0000c 	andi	r2,r2,32768
   11d2c:	10001126 	beq	r2,zero,11d74 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11d30:	e0bffb17 	ldw	r2,-20(fp)
   11d34:	10800a17 	ldw	r2,40(r2)
   11d38:	e0fff917 	ldw	r3,-28(fp)
   11d3c:	1809883a 	mov	r4,r3
   11d40:	e0fffb17 	ldw	r3,-20(fp)
   11d44:	1885883a 	add	r2,r3,r2
   11d48:	10800e04 	addi	r2,r2,56
   11d4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11d50:	e0bffb17 	ldw	r2,-20(fp)
   11d54:	10800a17 	ldw	r2,40(r2)
   11d58:	10800044 	addi	r2,r2,1
   11d5c:	10c1ffcc 	andi	r3,r2,2047
   11d60:	e0bffb17 	ldw	r2,-20(fp)
   11d64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11d68:	003fe206 	br	11cf4 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   11d6c:	0001883a 	nop
   11d70:	00000106 	br	11d78 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   11d74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11d78:	e0bff917 	ldw	r2,-28(fp)
   11d7c:	10bfffec 	andhi	r2,r2,65535
   11d80:	10000f26 	beq	r2,zero,11dc0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11d84:	e0bffb17 	ldw	r2,-20(fp)
   11d88:	10c00817 	ldw	r3,32(r2)
   11d8c:	00bfff84 	movi	r2,-2
   11d90:	1886703a 	and	r3,r3,r2
   11d94:	e0bffb17 	ldw	r2,-20(fp)
   11d98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11d9c:	e0bffc17 	ldw	r2,-16(fp)
   11da0:	10800104 	addi	r2,r2,4
   11da4:	1007883a 	mov	r3,r2
   11da8:	e0bffb17 	ldw	r2,-20(fp)
   11dac:	10800817 	ldw	r2,32(r2)
   11db0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11db4:	e0bffc17 	ldw	r2,-16(fp)
   11db8:	10800104 	addi	r2,r2,4
   11dbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   11dc0:	e0bffd17 	ldw	r2,-12(fp)
   11dc4:	1080800c 	andi	r2,r2,512
   11dc8:	103fbe26 	beq	r2,zero,11cc4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11dcc:	e0bffd17 	ldw	r2,-12(fp)
   11dd0:	1004d43a 	srli	r2,r2,16
   11dd4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   11dd8:	00001406 	br	11e2c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11ddc:	e0bffc17 	ldw	r2,-16(fp)
   11de0:	e0fffb17 	ldw	r3,-20(fp)
   11de4:	18c00d17 	ldw	r3,52(r3)
   11de8:	e13ffb17 	ldw	r4,-20(fp)
   11dec:	20c7883a 	add	r3,r4,r3
   11df0:	18c20e04 	addi	r3,r3,2104
   11df4:	18c00003 	ldbu	r3,0(r3)
   11df8:	18c03fcc 	andi	r3,r3,255
   11dfc:	18c0201c 	xori	r3,r3,128
   11e00:	18ffe004 	addi	r3,r3,-128
   11e04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11e08:	e0bffb17 	ldw	r2,-20(fp)
   11e0c:	10800d17 	ldw	r2,52(r2)
   11e10:	10800044 	addi	r2,r2,1
   11e14:	10c1ffcc 	andi	r3,r2,2047
   11e18:	e0bffb17 	ldw	r2,-20(fp)
   11e1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11e20:	e0bffa17 	ldw	r2,-24(fp)
   11e24:	10bfffc4 	addi	r2,r2,-1
   11e28:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11e2c:	e0bffa17 	ldw	r2,-24(fp)
   11e30:	10000526 	beq	r2,zero,11e48 <altera_avalon_jtag_uart_irq+0x1a8>
   11e34:	e0bffb17 	ldw	r2,-20(fp)
   11e38:	10c00d17 	ldw	r3,52(r2)
   11e3c:	e0bffb17 	ldw	r2,-20(fp)
   11e40:	10800c17 	ldw	r2,48(r2)
   11e44:	18bfe51e 	bne	r3,r2,11ddc <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11e48:	e0bffa17 	ldw	r2,-24(fp)
   11e4c:	103f9d26 	beq	r2,zero,11cc4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11e50:	e0bffb17 	ldw	r2,-20(fp)
   11e54:	10c00817 	ldw	r3,32(r2)
   11e58:	00bfff44 	movi	r2,-3
   11e5c:	1886703a 	and	r3,r3,r2
   11e60:	e0bffb17 	ldw	r2,-20(fp)
   11e64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11e68:	e0bffb17 	ldw	r2,-20(fp)
   11e6c:	10800017 	ldw	r2,0(r2)
   11e70:	10800104 	addi	r2,r2,4
   11e74:	1007883a 	mov	r3,r2
   11e78:	e0bffb17 	ldw	r2,-20(fp)
   11e7c:	10800817 	ldw	r2,32(r2)
   11e80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11e84:	e0bffc17 	ldw	r2,-16(fp)
   11e88:	10800104 	addi	r2,r2,4
   11e8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   11e90:	003f8c06 	br	11cc4 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   11e94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   11e98:	0001883a 	nop
   11e9c:	e037883a 	mov	sp,fp
   11ea0:	df000017 	ldw	fp,0(sp)
   11ea4:	dec00104 	addi	sp,sp,4
   11ea8:	f800283a 	ret

00011eac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11eac:	defff804 	addi	sp,sp,-32
   11eb0:	df000715 	stw	fp,28(sp)
   11eb4:	df000704 	addi	fp,sp,28
   11eb8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11ebc:	e0bffb17 	ldw	r2,-20(fp)
   11ec0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   11ec4:	e0bff917 	ldw	r2,-28(fp)
   11ec8:	10800017 	ldw	r2,0(r2)
   11ecc:	10800104 	addi	r2,r2,4
   11ed0:	10800037 	ldwio	r2,0(r2)
   11ed4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11ed8:	e0bffa17 	ldw	r2,-24(fp)
   11edc:	1081000c 	andi	r2,r2,1024
   11ee0:	10000b26 	beq	r2,zero,11f10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   11ee4:	e0bff917 	ldw	r2,-28(fp)
   11ee8:	10800017 	ldw	r2,0(r2)
   11eec:	10800104 	addi	r2,r2,4
   11ef0:	1007883a 	mov	r3,r2
   11ef4:	e0bff917 	ldw	r2,-28(fp)
   11ef8:	10800817 	ldw	r2,32(r2)
   11efc:	10810014 	ori	r2,r2,1024
   11f00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   11f04:	e0bff917 	ldw	r2,-28(fp)
   11f08:	10000915 	stw	zero,36(r2)
   11f0c:	00000a06 	br	11f38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   11f10:	e0bff917 	ldw	r2,-28(fp)
   11f14:	10c00917 	ldw	r3,36(r2)
   11f18:	00a00034 	movhi	r2,32768
   11f1c:	10bfff04 	addi	r2,r2,-4
   11f20:	10c00536 	bltu	r2,r3,11f38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11f24:	e0bff917 	ldw	r2,-28(fp)
   11f28:	10800917 	ldw	r2,36(r2)
   11f2c:	10c00044 	addi	r3,r2,1
   11f30:	e0bff917 	ldw	r2,-28(fp)
   11f34:	10c00915 	stw	r3,36(r2)
   11f38:	d0a72717 	ldw	r2,-25444(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11f3c:	e037883a 	mov	sp,fp
   11f40:	df000017 	ldw	fp,0(sp)
   11f44:	dec00104 	addi	sp,sp,4
   11f48:	f800283a 	ret

00011f4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11f4c:	defffd04 	addi	sp,sp,-12
   11f50:	df000215 	stw	fp,8(sp)
   11f54:	df000204 	addi	fp,sp,8
   11f58:	e13ffe15 	stw	r4,-8(fp)
   11f5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11f60:	00000506 	br	11f78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11f64:	e0bfff17 	ldw	r2,-4(fp)
   11f68:	1090000c 	andi	r2,r2,16384
   11f6c:	10000226 	beq	r2,zero,11f78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   11f70:	00bffd44 	movi	r2,-11
   11f74:	00000b06 	br	11fa4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11f78:	e0bffe17 	ldw	r2,-8(fp)
   11f7c:	10c00d17 	ldw	r3,52(r2)
   11f80:	e0bffe17 	ldw	r2,-8(fp)
   11f84:	10800c17 	ldw	r2,48(r2)
   11f88:	18800526 	beq	r3,r2,11fa0 <altera_avalon_jtag_uart_close+0x54>
   11f8c:	e0bffe17 	ldw	r2,-8(fp)
   11f90:	10c00917 	ldw	r3,36(r2)
   11f94:	e0bffe17 	ldw	r2,-8(fp)
   11f98:	10800117 	ldw	r2,4(r2)
   11f9c:	18bff136 	bltu	r3,r2,11f64 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11fa0:	0005883a 	mov	r2,zero
}
   11fa4:	e037883a 	mov	sp,fp
   11fa8:	df000017 	ldw	fp,0(sp)
   11fac:	dec00104 	addi	sp,sp,4
   11fb0:	f800283a 	ret

00011fb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11fb4:	defffa04 	addi	sp,sp,-24
   11fb8:	df000515 	stw	fp,20(sp)
   11fbc:	df000504 	addi	fp,sp,20
   11fc0:	e13ffd15 	stw	r4,-12(fp)
   11fc4:	e17ffe15 	stw	r5,-8(fp)
   11fc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11fcc:	00bff9c4 	movi	r2,-25
   11fd0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   11fd4:	e0bffe17 	ldw	r2,-8(fp)
   11fd8:	10da8060 	cmpeqi	r3,r2,27137
   11fdc:	1800031e 	bne	r3,zero,11fec <altera_avalon_jtag_uart_ioctl+0x38>
   11fe0:	109a80a0 	cmpeqi	r2,r2,27138
   11fe4:	1000181e 	bne	r2,zero,12048 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   11fe8:	00002906 	br	12090 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11fec:	e0bffd17 	ldw	r2,-12(fp)
   11ff0:	10c00117 	ldw	r3,4(r2)
   11ff4:	00a00034 	movhi	r2,32768
   11ff8:	10bfffc4 	addi	r2,r2,-1
   11ffc:	18802126 	beq	r3,r2,12084 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   12000:	e0bfff17 	ldw	r2,-4(fp)
   12004:	10800017 	ldw	r2,0(r2)
   12008:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1200c:	e0bffc17 	ldw	r2,-16(fp)
   12010:	10800090 	cmplti	r2,r2,2
   12014:	1000061e 	bne	r2,zero,12030 <altera_avalon_jtag_uart_ioctl+0x7c>
   12018:	e0fffc17 	ldw	r3,-16(fp)
   1201c:	00a00034 	movhi	r2,32768
   12020:	10bfffc4 	addi	r2,r2,-1
   12024:	18800226 	beq	r3,r2,12030 <altera_avalon_jtag_uart_ioctl+0x7c>
   12028:	e0bffc17 	ldw	r2,-16(fp)
   1202c:	00000206 	br	12038 <altera_avalon_jtag_uart_ioctl+0x84>
   12030:	00a00034 	movhi	r2,32768
   12034:	10bfff84 	addi	r2,r2,-2
   12038:	e0fffd17 	ldw	r3,-12(fp)
   1203c:	18800115 	stw	r2,4(r3)
      rc = 0;
   12040:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12044:	00000f06 	br	12084 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12048:	e0bffd17 	ldw	r2,-12(fp)
   1204c:	10c00117 	ldw	r3,4(r2)
   12050:	00a00034 	movhi	r2,32768
   12054:	10bfffc4 	addi	r2,r2,-1
   12058:	18800c26 	beq	r3,r2,1208c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1205c:	e0bffd17 	ldw	r2,-12(fp)
   12060:	10c00917 	ldw	r3,36(r2)
   12064:	e0bffd17 	ldw	r2,-12(fp)
   12068:	10800117 	ldw	r2,4(r2)
   1206c:	1885803a 	cmpltu	r2,r3,r2
   12070:	10c03fcc 	andi	r3,r2,255
   12074:	e0bfff17 	ldw	r2,-4(fp)
   12078:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1207c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12080:	00000206 	br	1208c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   12084:	0001883a 	nop
   12088:	00000106 	br	12090 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1208c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   12090:	e0bffb17 	ldw	r2,-20(fp)
}
   12094:	e037883a 	mov	sp,fp
   12098:	df000017 	ldw	fp,0(sp)
   1209c:	dec00104 	addi	sp,sp,4
   120a0:	f800283a 	ret

000120a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   120a4:	defff304 	addi	sp,sp,-52
   120a8:	dfc00c15 	stw	ra,48(sp)
   120ac:	df000b15 	stw	fp,44(sp)
   120b0:	df000b04 	addi	fp,sp,44
   120b4:	e13ffc15 	stw	r4,-16(fp)
   120b8:	e17ffd15 	stw	r5,-12(fp)
   120bc:	e1bffe15 	stw	r6,-8(fp)
   120c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   120c4:	e0bffd17 	ldw	r2,-12(fp)
   120c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   120cc:	00004706 	br	121ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   120d0:	e0bffc17 	ldw	r2,-16(fp)
   120d4:	10800a17 	ldw	r2,40(r2)
   120d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   120dc:	e0bffc17 	ldw	r2,-16(fp)
   120e0:	10800b17 	ldw	r2,44(r2)
   120e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   120e8:	e0fff717 	ldw	r3,-36(fp)
   120ec:	e0bff817 	ldw	r2,-32(fp)
   120f0:	18800536 	bltu	r3,r2,12108 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   120f4:	e0fff717 	ldw	r3,-36(fp)
   120f8:	e0bff817 	ldw	r2,-32(fp)
   120fc:	1885c83a 	sub	r2,r3,r2
   12100:	e0bff615 	stw	r2,-40(fp)
   12104:	00000406 	br	12118 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12108:	00c20004 	movi	r3,2048
   1210c:	e0bff817 	ldw	r2,-32(fp)
   12110:	1885c83a 	sub	r2,r3,r2
   12114:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12118:	e0bff617 	ldw	r2,-40(fp)
   1211c:	10001e26 	beq	r2,zero,12198 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   12120:	e0fffe17 	ldw	r3,-8(fp)
   12124:	e0bff617 	ldw	r2,-40(fp)
   12128:	1880022e 	bgeu	r3,r2,12134 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1212c:	e0bffe17 	ldw	r2,-8(fp)
   12130:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12134:	e0bffc17 	ldw	r2,-16(fp)
   12138:	10c00e04 	addi	r3,r2,56
   1213c:	e0bff817 	ldw	r2,-32(fp)
   12140:	1885883a 	add	r2,r3,r2
   12144:	e1bff617 	ldw	r6,-40(fp)
   12148:	100b883a 	mov	r5,r2
   1214c:	e13ff517 	ldw	r4,-44(fp)
   12150:	000a3800 	call	a380 <memcpy>
      ptr   += n;
   12154:	e0fff517 	ldw	r3,-44(fp)
   12158:	e0bff617 	ldw	r2,-40(fp)
   1215c:	1885883a 	add	r2,r3,r2
   12160:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   12164:	e0fffe17 	ldw	r3,-8(fp)
   12168:	e0bff617 	ldw	r2,-40(fp)
   1216c:	1885c83a 	sub	r2,r3,r2
   12170:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12174:	e0fff817 	ldw	r3,-32(fp)
   12178:	e0bff617 	ldw	r2,-40(fp)
   1217c:	1885883a 	add	r2,r3,r2
   12180:	10c1ffcc 	andi	r3,r2,2047
   12184:	e0bffc17 	ldw	r2,-16(fp)
   12188:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1218c:	e0bffe17 	ldw	r2,-8(fp)
   12190:	00bfcf16 	blt	zero,r2,120d0 <altera_avalon_jtag_uart_read+0x2c>
   12194:	00000106 	br	1219c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   12198:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1219c:	e0fff517 	ldw	r3,-44(fp)
   121a0:	e0bffd17 	ldw	r2,-12(fp)
   121a4:	1880141e 	bne	r3,r2,121f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   121a8:	e0bfff17 	ldw	r2,-4(fp)
   121ac:	1090000c 	andi	r2,r2,16384
   121b0:	1000131e 	bne	r2,zero,12200 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   121b4:	0001883a 	nop
   121b8:	e0bffc17 	ldw	r2,-16(fp)
   121bc:	10c00a17 	ldw	r3,40(r2)
   121c0:	e0bff717 	ldw	r2,-36(fp)
   121c4:	1880051e 	bne	r3,r2,121dc <altera_avalon_jtag_uart_read+0x138>
   121c8:	e0bffc17 	ldw	r2,-16(fp)
   121cc:	10c00917 	ldw	r3,36(r2)
   121d0:	e0bffc17 	ldw	r2,-16(fp)
   121d4:	10800117 	ldw	r2,4(r2)
   121d8:	18bff736 	bltu	r3,r2,121b8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   121dc:	e0bffc17 	ldw	r2,-16(fp)
   121e0:	10c00a17 	ldw	r3,40(r2)
   121e4:	e0bff717 	ldw	r2,-36(fp)
   121e8:	18800726 	beq	r3,r2,12208 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   121ec:	e0bffe17 	ldw	r2,-8(fp)
   121f0:	00bfb716 	blt	zero,r2,120d0 <altera_avalon_jtag_uart_read+0x2c>
   121f4:	00000506 	br	1220c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   121f8:	0001883a 	nop
   121fc:	00000306 	br	1220c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   12200:	0001883a 	nop
   12204:	00000106 	br	1220c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   12208:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1220c:	e0fff517 	ldw	r3,-44(fp)
   12210:	e0bffd17 	ldw	r2,-12(fp)
   12214:	18801826 	beq	r3,r2,12278 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12218:	0005303a 	rdctl	r2,status
   1221c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12220:	e0fffb17 	ldw	r3,-20(fp)
   12224:	00bfff84 	movi	r2,-2
   12228:	1884703a 	and	r2,r3,r2
   1222c:	1001703a 	wrctl	status,r2
  
  return context;
   12230:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12234:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12238:	e0bffc17 	ldw	r2,-16(fp)
   1223c:	10800817 	ldw	r2,32(r2)
   12240:	10c00054 	ori	r3,r2,1
   12244:	e0bffc17 	ldw	r2,-16(fp)
   12248:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1224c:	e0bffc17 	ldw	r2,-16(fp)
   12250:	10800017 	ldw	r2,0(r2)
   12254:	10800104 	addi	r2,r2,4
   12258:	1007883a 	mov	r3,r2
   1225c:	e0bffc17 	ldw	r2,-16(fp)
   12260:	10800817 	ldw	r2,32(r2)
   12264:	18800035 	stwio	r2,0(r3)
   12268:	e0bffa17 	ldw	r2,-24(fp)
   1226c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12270:	e0bff917 	ldw	r2,-28(fp)
   12274:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12278:	e0fff517 	ldw	r3,-44(fp)
   1227c:	e0bffd17 	ldw	r2,-12(fp)
   12280:	18800426 	beq	r3,r2,12294 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   12284:	e0fff517 	ldw	r3,-44(fp)
   12288:	e0bffd17 	ldw	r2,-12(fp)
   1228c:	1885c83a 	sub	r2,r3,r2
   12290:	00000606 	br	122ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   12294:	e0bfff17 	ldw	r2,-4(fp)
   12298:	1090000c 	andi	r2,r2,16384
   1229c:	10000226 	beq	r2,zero,122a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   122a0:	00bffd44 	movi	r2,-11
   122a4:	00000106 	br	122ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   122a8:	00bffec4 	movi	r2,-5
}
   122ac:	e037883a 	mov	sp,fp
   122b0:	dfc00117 	ldw	ra,4(sp)
   122b4:	df000017 	ldw	fp,0(sp)
   122b8:	dec00204 	addi	sp,sp,8
   122bc:	f800283a 	ret

000122c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   122c0:	defff304 	addi	sp,sp,-52
   122c4:	dfc00c15 	stw	ra,48(sp)
   122c8:	df000b15 	stw	fp,44(sp)
   122cc:	df000b04 	addi	fp,sp,44
   122d0:	e13ffc15 	stw	r4,-16(fp)
   122d4:	e17ffd15 	stw	r5,-12(fp)
   122d8:	e1bffe15 	stw	r6,-8(fp)
   122dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   122e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   122e4:	e0bffd17 	ldw	r2,-12(fp)
   122e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   122ec:	00003706 	br	123cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   122f0:	e0bffc17 	ldw	r2,-16(fp)
   122f4:	10800c17 	ldw	r2,48(r2)
   122f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   122fc:	e0bffc17 	ldw	r2,-16(fp)
   12300:	10800d17 	ldw	r2,52(r2)
   12304:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   12308:	e0fff917 	ldw	r3,-28(fp)
   1230c:	e0bff517 	ldw	r2,-44(fp)
   12310:	1880062e 	bgeu	r3,r2,1232c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12314:	e0fff517 	ldw	r3,-44(fp)
   12318:	e0bff917 	ldw	r2,-28(fp)
   1231c:	1885c83a 	sub	r2,r3,r2
   12320:	10bfffc4 	addi	r2,r2,-1
   12324:	e0bff615 	stw	r2,-40(fp)
   12328:	00000b06 	br	12358 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1232c:	e0bff517 	ldw	r2,-44(fp)
   12330:	10000526 	beq	r2,zero,12348 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12334:	00c20004 	movi	r3,2048
   12338:	e0bff917 	ldw	r2,-28(fp)
   1233c:	1885c83a 	sub	r2,r3,r2
   12340:	e0bff615 	stw	r2,-40(fp)
   12344:	00000406 	br	12358 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12348:	00c1ffc4 	movi	r3,2047
   1234c:	e0bff917 	ldw	r2,-28(fp)
   12350:	1885c83a 	sub	r2,r3,r2
   12354:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12358:	e0bff617 	ldw	r2,-40(fp)
   1235c:	10001e26 	beq	r2,zero,123d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   12360:	e0fffe17 	ldw	r3,-8(fp)
   12364:	e0bff617 	ldw	r2,-40(fp)
   12368:	1880022e 	bgeu	r3,r2,12374 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1236c:	e0bffe17 	ldw	r2,-8(fp)
   12370:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12374:	e0bffc17 	ldw	r2,-16(fp)
   12378:	10c20e04 	addi	r3,r2,2104
   1237c:	e0bff917 	ldw	r2,-28(fp)
   12380:	1885883a 	add	r2,r3,r2
   12384:	e1bff617 	ldw	r6,-40(fp)
   12388:	e17ffd17 	ldw	r5,-12(fp)
   1238c:	1009883a 	mov	r4,r2
   12390:	000a3800 	call	a380 <memcpy>
      ptr   += n;
   12394:	e0fffd17 	ldw	r3,-12(fp)
   12398:	e0bff617 	ldw	r2,-40(fp)
   1239c:	1885883a 	add	r2,r3,r2
   123a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   123a4:	e0fffe17 	ldw	r3,-8(fp)
   123a8:	e0bff617 	ldw	r2,-40(fp)
   123ac:	1885c83a 	sub	r2,r3,r2
   123b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   123b4:	e0fff917 	ldw	r3,-28(fp)
   123b8:	e0bff617 	ldw	r2,-40(fp)
   123bc:	1885883a 	add	r2,r3,r2
   123c0:	10c1ffcc 	andi	r3,r2,2047
   123c4:	e0bffc17 	ldw	r2,-16(fp)
   123c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   123cc:	e0bffe17 	ldw	r2,-8(fp)
   123d0:	00bfc716 	blt	zero,r2,122f0 <altera_avalon_jtag_uart_write+0x30>
   123d4:	00000106 	br	123dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   123d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123dc:	0005303a 	rdctl	r2,status
   123e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123e4:	e0fffb17 	ldw	r3,-20(fp)
   123e8:	00bfff84 	movi	r2,-2
   123ec:	1884703a 	and	r2,r3,r2
   123f0:	1001703a 	wrctl	status,r2
  
  return context;
   123f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   123f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   123fc:	e0bffc17 	ldw	r2,-16(fp)
   12400:	10800817 	ldw	r2,32(r2)
   12404:	10c00094 	ori	r3,r2,2
   12408:	e0bffc17 	ldw	r2,-16(fp)
   1240c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12410:	e0bffc17 	ldw	r2,-16(fp)
   12414:	10800017 	ldw	r2,0(r2)
   12418:	10800104 	addi	r2,r2,4
   1241c:	1007883a 	mov	r3,r2
   12420:	e0bffc17 	ldw	r2,-16(fp)
   12424:	10800817 	ldw	r2,32(r2)
   12428:	18800035 	stwio	r2,0(r3)
   1242c:	e0bffa17 	ldw	r2,-24(fp)
   12430:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12434:	e0bff817 	ldw	r2,-32(fp)
   12438:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1243c:	e0bffe17 	ldw	r2,-8(fp)
   12440:	0080100e 	bge	zero,r2,12484 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12444:	e0bfff17 	ldw	r2,-4(fp)
   12448:	1090000c 	andi	r2,r2,16384
   1244c:	1000101e 	bne	r2,zero,12490 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   12450:	0001883a 	nop
   12454:	e0bffc17 	ldw	r2,-16(fp)
   12458:	10c00d17 	ldw	r3,52(r2)
   1245c:	e0bff517 	ldw	r2,-44(fp)
   12460:	1880051e 	bne	r3,r2,12478 <altera_avalon_jtag_uart_write+0x1b8>
   12464:	e0bffc17 	ldw	r2,-16(fp)
   12468:	10c00917 	ldw	r3,36(r2)
   1246c:	e0bffc17 	ldw	r2,-16(fp)
   12470:	10800117 	ldw	r2,4(r2)
   12474:	18bff736 	bltu	r3,r2,12454 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   12478:	e0bffc17 	ldw	r2,-16(fp)
   1247c:	10800917 	ldw	r2,36(r2)
   12480:	1000051e 	bne	r2,zero,12498 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   12484:	e0bffe17 	ldw	r2,-8(fp)
   12488:	00bfd016 	blt	zero,r2,123cc <altera_avalon_jtag_uart_write+0x10c>
   1248c:	00000306 	br	1249c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   12490:	0001883a 	nop
   12494:	00000106 	br	1249c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   12498:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1249c:	e0fffd17 	ldw	r3,-12(fp)
   124a0:	e0bff717 	ldw	r2,-36(fp)
   124a4:	18800426 	beq	r3,r2,124b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   124a8:	e0fffd17 	ldw	r3,-12(fp)
   124ac:	e0bff717 	ldw	r2,-36(fp)
   124b0:	1885c83a 	sub	r2,r3,r2
   124b4:	00000606 	br	124d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   124b8:	e0bfff17 	ldw	r2,-4(fp)
   124bc:	1090000c 	andi	r2,r2,16384
   124c0:	10000226 	beq	r2,zero,124cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   124c4:	00bffd44 	movi	r2,-11
   124c8:	00000106 	br	124d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   124cc:	00bffec4 	movi	r2,-5
}
   124d0:	e037883a 	mov	sp,fp
   124d4:	dfc00117 	ldw	ra,4(sp)
   124d8:	df000017 	ldw	fp,0(sp)
   124dc:	dec00204 	addi	sp,sp,8
   124e0:	f800283a 	ret

000124e4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   124e4:	defffa04 	addi	sp,sp,-24
   124e8:	dfc00515 	stw	ra,20(sp)
   124ec:	df000415 	stw	fp,16(sp)
   124f0:	df000404 	addi	fp,sp,16
   124f4:	e13ffe15 	stw	r4,-8(fp)
   124f8:	2805883a 	mov	r2,r5
   124fc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   12500:	e0bffe17 	ldw	r2,-8(fp)
   12504:	10800017 	ldw	r2,0(r2)
   12508:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   1250c:	008003f4 	movhi	r2,15
   12510:	10909004 	addi	r2,r2,16960
   12514:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   12518:	e0bffe17 	ldw	r2,-8(fp)
   1251c:	10800803 	ldbu	r2,32(r2)
   12520:	10803fcc 	andi	r2,r2,255
   12524:	1080201c 	xori	r2,r2,128
   12528:	10bfe004 	addi	r2,r2,-128
   1252c:	1000151e 	bne	r2,zero,12584 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   12530:	00000906 	br	12558 <lcd_write_command+0x74>
    if (--i == 0)
   12534:	e0bffc17 	ldw	r2,-16(fp)
   12538:	10bfffc4 	addi	r2,r2,-1
   1253c:	e0bffc15 	stw	r2,-16(fp)
   12540:	e0bffc17 	ldw	r2,-16(fp)
   12544:	1000041e 	bne	r2,zero,12558 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   12548:	e0bffe17 	ldw	r2,-8(fp)
   1254c:	00c00044 	movi	r3,1
   12550:	10c00805 	stb	r3,32(r2)
      return;
   12554:	00000c06 	br	12588 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   12558:	e0bffd17 	ldw	r2,-12(fp)
   1255c:	10800104 	addi	r2,r2,4
   12560:	10800037 	ldwio	r2,0(r2)
   12564:	1080200c 	andi	r2,r2,128
   12568:	103ff21e 	bne	r2,zero,12534 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   1256c:	01001904 	movi	r4,100
   12570:	00118300 	call	11830 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   12574:	e0bffd17 	ldw	r2,-12(fp)
   12578:	e0ffff03 	ldbu	r3,-4(fp)
   1257c:	10c00035 	stwio	r3,0(r2)
   12580:	00000106 	br	12588 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   12584:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   12588:	e037883a 	mov	sp,fp
   1258c:	dfc00117 	ldw	ra,4(sp)
   12590:	df000017 	ldw	fp,0(sp)
   12594:	dec00204 	addi	sp,sp,8
   12598:	f800283a 	ret

0001259c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   1259c:	defffa04 	addi	sp,sp,-24
   125a0:	dfc00515 	stw	ra,20(sp)
   125a4:	df000415 	stw	fp,16(sp)
   125a8:	df000404 	addi	fp,sp,16
   125ac:	e13ffe15 	stw	r4,-8(fp)
   125b0:	2805883a 	mov	r2,r5
   125b4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   125b8:	e0bffe17 	ldw	r2,-8(fp)
   125bc:	10800017 	ldw	r2,0(r2)
   125c0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   125c4:	008003f4 	movhi	r2,15
   125c8:	10909004 	addi	r2,r2,16960
   125cc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   125d0:	e0bffe17 	ldw	r2,-8(fp)
   125d4:	10800803 	ldbu	r2,32(r2)
   125d8:	10803fcc 	andi	r2,r2,255
   125dc:	1080201c 	xori	r2,r2,128
   125e0:	10bfe004 	addi	r2,r2,-128
   125e4:	10001d1e 	bne	r2,zero,1265c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   125e8:	00000906 	br	12610 <lcd_write_data+0x74>
    if (--i == 0)
   125ec:	e0bffc17 	ldw	r2,-16(fp)
   125f0:	10bfffc4 	addi	r2,r2,-1
   125f4:	e0bffc15 	stw	r2,-16(fp)
   125f8:	e0bffc17 	ldw	r2,-16(fp)
   125fc:	1000041e 	bne	r2,zero,12610 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   12600:	e0bffe17 	ldw	r2,-8(fp)
   12604:	00c00044 	movi	r3,1
   12608:	10c00805 	stb	r3,32(r2)
      return;
   1260c:	00001406 	br	12660 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   12610:	e0bffd17 	ldw	r2,-12(fp)
   12614:	10800104 	addi	r2,r2,4
   12618:	10800037 	ldwio	r2,0(r2)
   1261c:	1080200c 	andi	r2,r2,128
   12620:	103ff21e 	bne	r2,zero,125ec <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   12624:	01001904 	movi	r4,100
   12628:	00118300 	call	11830 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   1262c:	e0bffd17 	ldw	r2,-12(fp)
   12630:	10800204 	addi	r2,r2,8
   12634:	1007883a 	mov	r3,r2
   12638:	e0bfff03 	ldbu	r2,-4(fp)
   1263c:	18800035 	stwio	r2,0(r3)

  sp->address++;
   12640:	e0bffe17 	ldw	r2,-8(fp)
   12644:	108008c3 	ldbu	r2,35(r2)
   12648:	10800044 	addi	r2,r2,1
   1264c:	1007883a 	mov	r3,r2
   12650:	e0bffe17 	ldw	r2,-8(fp)
   12654:	10c008c5 	stb	r3,35(r2)
   12658:	00000106 	br	12660 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   1265c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   12660:	e037883a 	mov	sp,fp
   12664:	dfc00117 	ldw	ra,4(sp)
   12668:	df000017 	ldw	fp,0(sp)
   1266c:	dec00204 	addi	sp,sp,8
   12670:	f800283a 	ret

00012674 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   12674:	defffc04 	addi	sp,sp,-16
   12678:	dfc00315 	stw	ra,12(sp)
   1267c:	df000215 	stw	fp,8(sp)
   12680:	df000204 	addi	fp,sp,8
   12684:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   12688:	01400044 	movi	r5,1
   1268c:	e13fff17 	ldw	r4,-4(fp)
   12690:	00124e40 	call	124e4 <lcd_write_command>

  sp->x = 0;
   12694:	e0bfff17 	ldw	r2,-4(fp)
   12698:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   1269c:	e0bfff17 	ldw	r2,-4(fp)
   126a0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   126a4:	e0bfff17 	ldw	r2,-4(fp)
   126a8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   126ac:	e03ffe15 	stw	zero,-8(fp)
   126b0:	00001b06 	br	12720 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   126b4:	e0bffe17 	ldw	r2,-8(fp)
   126b8:	108018e4 	muli	r2,r2,99
   126bc:	10801004 	addi	r2,r2,64
   126c0:	e0ffff17 	ldw	r3,-4(fp)
   126c4:	1885883a 	add	r2,r3,r2
   126c8:	01801444 	movi	r6,81
   126cc:	01400804 	movi	r5,32
   126d0:	1009883a 	mov	r4,r2
   126d4:	000a6240 	call	a624 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   126d8:	e0bffe17 	ldw	r2,-8(fp)
   126dc:	108018e4 	muli	r2,r2,99
   126e0:	10800c04 	addi	r2,r2,48
   126e4:	e0ffff17 	ldw	r3,-4(fp)
   126e8:	1885883a 	add	r2,r3,r2
   126ec:	01800404 	movi	r6,16
   126f0:	01400804 	movi	r5,32
   126f4:	1009883a 	mov	r4,r2
   126f8:	000a6240 	call	a624 <memset>
    sp->line[y].width = 0;
   126fc:	e0ffff17 	ldw	r3,-4(fp)
   12700:	e0bffe17 	ldw	r2,-8(fp)
   12704:	108018e4 	muli	r2,r2,99
   12708:	1885883a 	add	r2,r3,r2
   1270c:	10802444 	addi	r2,r2,145
   12710:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   12714:	e0bffe17 	ldw	r2,-8(fp)
   12718:	10800044 	addi	r2,r2,1
   1271c:	e0bffe15 	stw	r2,-8(fp)
   12720:	e0bffe17 	ldw	r2,-8(fp)
   12724:	10800090 	cmplti	r2,r2,2
   12728:	103fe21e 	bne	r2,zero,126b4 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   1272c:	0001883a 	nop
   12730:	e037883a 	mov	sp,fp
   12734:	dfc00117 	ldw	ra,4(sp)
   12738:	df000017 	ldw	fp,0(sp)
   1273c:	dec00204 	addi	sp,sp,8
   12740:	f800283a 	ret

00012744 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   12744:	defff704 	addi	sp,sp,-36
   12748:	dfc00815 	stw	ra,32(sp)
   1274c:	df000715 	stw	fp,28(sp)
   12750:	df000704 	addi	fp,sp,28
   12754:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   12758:	e0bfff17 	ldw	r2,-4(fp)
   1275c:	10800943 	ldbu	r2,37(r2)
   12760:	10803fcc 	andi	r2,r2,255
   12764:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   12768:	e03ff915 	stw	zero,-28(fp)
   1276c:	00006706 	br	1290c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
   12770:	e0ffff17 	ldw	r3,-4(fp)
   12774:	e0bff917 	ldw	r2,-28(fp)
   12778:	108018e4 	muli	r2,r2,99
   1277c:	1885883a 	add	r2,r3,r2
   12780:	10802444 	addi	r2,r2,145
   12784:	10800003 	ldbu	r2,0(r2)
   12788:	10803fcc 	andi	r2,r2,255
   1278c:	1080201c 	xori	r2,r2,128
   12790:	10bfe004 	addi	r2,r2,-128
   12794:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   12798:	e0ffff17 	ldw	r3,-4(fp)
   1279c:	e0bff917 	ldw	r2,-28(fp)
   127a0:	108018e4 	muli	r2,r2,99
   127a4:	1885883a 	add	r2,r3,r2
   127a8:	10802484 	addi	r2,r2,146
   127ac:	10800003 	ldbu	r2,0(r2)
   127b0:	10c03fcc 	andi	r3,r2,255
   127b4:	e0bffc17 	ldw	r2,-16(fp)
   127b8:	1885383a 	mul	r2,r3,r2
   127bc:	1005d23a 	srai	r2,r2,8
   127c0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
   127c4:	e0fffb17 	ldw	r3,-20(fp)
   127c8:	e0bffd17 	ldw	r2,-12(fp)
   127cc:	18800116 	blt	r3,r2,127d4 <lcd_repaint_screen+0x90>
      offset = 0;
   127d0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   127d4:	e03ffa15 	stw	zero,-24(fp)
   127d8:	00004606 	br	128f4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
   127dc:	e0fffa17 	ldw	r3,-24(fp)
   127e0:	e0bffb17 	ldw	r2,-20(fp)
   127e4:	1885883a 	add	r2,r3,r2
   127e8:	e17ffd17 	ldw	r5,-12(fp)
   127ec:	1009883a 	mov	r4,r2
   127f0:	00045bc0 	call	45bc <__modsi3>
   127f4:	1009883a 	mov	r4,r2
   127f8:	e0ffff17 	ldw	r3,-4(fp)
   127fc:	e0bff917 	ldw	r2,-28(fp)
   12800:	108018e4 	muli	r2,r2,99
   12804:	1885883a 	add	r2,r3,r2
   12808:	1105883a 	add	r2,r2,r4
   1280c:	10801004 	addi	r2,r2,64
   12810:	10800003 	ldbu	r2,0(r2)
   12814:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   12818:	e0ffff17 	ldw	r3,-4(fp)
   1281c:	e0bff917 	ldw	r2,-28(fp)
   12820:	108018e4 	muli	r2,r2,99
   12824:	1887883a 	add	r3,r3,r2
   12828:	e0bffa17 	ldw	r2,-24(fp)
   1282c:	1885883a 	add	r2,r3,r2
   12830:	10800c04 	addi	r2,r2,48
   12834:	10800003 	ldbu	r2,0(r2)
   12838:	10c03fcc 	andi	r3,r2,255
   1283c:	18c0201c 	xori	r3,r3,128
   12840:	18ffe004 	addi	r3,r3,-128
   12844:	e0bffe07 	ldb	r2,-8(fp)
   12848:	18802726 	beq	r3,r2,128e8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
   1284c:	e0fff917 	ldw	r3,-28(fp)
   12850:	d0a00d04 	addi	r2,gp,-32716
   12854:	1885883a 	add	r2,r3,r2
   12858:	10800003 	ldbu	r2,0(r2)
   1285c:	1007883a 	mov	r3,r2
   12860:	e0bffa17 	ldw	r2,-24(fp)
   12864:	1885883a 	add	r2,r3,r2
   12868:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
   1286c:	e0fffe43 	ldbu	r3,-7(fp)
   12870:	e0bfff17 	ldw	r2,-4(fp)
   12874:	108008c3 	ldbu	r2,35(r2)
   12878:	10803fcc 	andi	r2,r2,255
   1287c:	1080201c 	xori	r2,r2,128
   12880:	10bfe004 	addi	r2,r2,-128
   12884:	18800a26 	beq	r3,r2,128b0 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   12888:	e0fffe43 	ldbu	r3,-7(fp)
   1288c:	00bfe004 	movi	r2,-128
   12890:	1884b03a 	or	r2,r3,r2
   12894:	10803fcc 	andi	r2,r2,255
   12898:	100b883a 	mov	r5,r2
   1289c:	e13fff17 	ldw	r4,-4(fp)
   128a0:	00124e40 	call	124e4 <lcd_write_command>
          sp->address = address;
   128a4:	e0fffe43 	ldbu	r3,-7(fp)
   128a8:	e0bfff17 	ldw	r2,-4(fp)
   128ac:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   128b0:	e0bffe03 	ldbu	r2,-8(fp)
   128b4:	10803fcc 	andi	r2,r2,255
   128b8:	100b883a 	mov	r5,r2
   128bc:	e13fff17 	ldw	r4,-4(fp)
   128c0:	001259c0 	call	1259c <lcd_write_data>
        sp->line[y].visible[x] = c;
   128c4:	e0ffff17 	ldw	r3,-4(fp)
   128c8:	e0bff917 	ldw	r2,-28(fp)
   128cc:	108018e4 	muli	r2,r2,99
   128d0:	1887883a 	add	r3,r3,r2
   128d4:	e0bffa17 	ldw	r2,-24(fp)
   128d8:	1885883a 	add	r2,r3,r2
   128dc:	10800c04 	addi	r2,r2,48
   128e0:	e0fffe03 	ldbu	r3,-8(fp)
   128e4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   128e8:	e0bffa17 	ldw	r2,-24(fp)
   128ec:	10800044 	addi	r2,r2,1
   128f0:	e0bffa15 	stw	r2,-24(fp)
   128f4:	e0bffa17 	ldw	r2,-24(fp)
   128f8:	10800410 	cmplti	r2,r2,16
   128fc:	103fb71e 	bne	r2,zero,127dc <lcd_repaint_screen+0x98>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   12900:	e0bff917 	ldw	r2,-28(fp)
   12904:	10800044 	addi	r2,r2,1
   12908:	e0bff915 	stw	r2,-28(fp)
   1290c:	e0bff917 	ldw	r2,-28(fp)
   12910:	10800090 	cmplti	r2,r2,2
   12914:	103f961e 	bne	r2,zero,12770 <lcd_repaint_screen+0x2c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   12918:	0001883a 	nop
   1291c:	e037883a 	mov	sp,fp
   12920:	dfc00117 	ldw	ra,4(sp)
   12924:	df000017 	ldw	fp,0(sp)
   12928:	dec00204 	addi	sp,sp,8
   1292c:	f800283a 	ret

00012930 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   12930:	defffc04 	addi	sp,sp,-16
   12934:	dfc00315 	stw	ra,12(sp)
   12938:	df000215 	stw	fp,8(sp)
   1293c:	df000204 	addi	fp,sp,8
   12940:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   12944:	e03ffe15 	stw	zero,-8(fp)
   12948:	00001d06 	br	129c0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
   1294c:	e0bffe17 	ldw	r2,-8(fp)
   12950:	00800f16 	blt	zero,r2,12990 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   12954:	e0bffe17 	ldw	r2,-8(fp)
   12958:	108018e4 	muli	r2,r2,99
   1295c:	10801004 	addi	r2,r2,64
   12960:	e0ffff17 	ldw	r3,-4(fp)
   12964:	1889883a 	add	r4,r3,r2
   12968:	e0bffe17 	ldw	r2,-8(fp)
   1296c:	10800044 	addi	r2,r2,1
   12970:	108018e4 	muli	r2,r2,99
   12974:	10801004 	addi	r2,r2,64
   12978:	e0ffff17 	ldw	r3,-4(fp)
   1297c:	1885883a 	add	r2,r3,r2
   12980:	01801404 	movi	r6,80
   12984:	100b883a 	mov	r5,r2
   12988:	000a3800 	call	a380 <memcpy>
   1298c:	00000906 	br	129b4 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   12990:	e0bffe17 	ldw	r2,-8(fp)
   12994:	108018e4 	muli	r2,r2,99
   12998:	10801004 	addi	r2,r2,64
   1299c:	e0ffff17 	ldw	r3,-4(fp)
   129a0:	1885883a 	add	r2,r3,r2
   129a4:	01801404 	movi	r6,80
   129a8:	01400804 	movi	r5,32
   129ac:	1009883a 	mov	r4,r2
   129b0:	000a6240 	call	a624 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   129b4:	e0bffe17 	ldw	r2,-8(fp)
   129b8:	10800044 	addi	r2,r2,1
   129bc:	e0bffe15 	stw	r2,-8(fp)
   129c0:	e0bffe17 	ldw	r2,-8(fp)
   129c4:	10800090 	cmplti	r2,r2,2
   129c8:	103fe01e 	bne	r2,zero,1294c <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   129cc:	e0bfff17 	ldw	r2,-4(fp)
   129d0:	10800883 	ldbu	r2,34(r2)
   129d4:	10bfffc4 	addi	r2,r2,-1
   129d8:	1007883a 	mov	r3,r2
   129dc:	e0bfff17 	ldw	r2,-4(fp)
   129e0:	10c00885 	stb	r3,34(r2)
}
   129e4:	0001883a 	nop
   129e8:	e037883a 	mov	sp,fp
   129ec:	dfc00117 	ldw	ra,4(sp)
   129f0:	df000017 	ldw	fp,0(sp)
   129f4:	dec00204 	addi	sp,sp,8
   129f8:	f800283a 	ret

000129fc <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   129fc:	defff904 	addi	sp,sp,-28
   12a00:	dfc00615 	stw	ra,24(sp)
   12a04:	df000515 	stw	fp,20(sp)
   12a08:	df000504 	addi	fp,sp,20
   12a0c:	e13ffe15 	stw	r4,-8(fp)
   12a10:	2805883a 	mov	r2,r5
   12a14:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   12a18:	e03ffb15 	stw	zero,-20(fp)
   12a1c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   12a20:	e0bffe17 	ldw	r2,-8(fp)
   12a24:	10800a03 	ldbu	r2,40(r2)
   12a28:	10803fcc 	andi	r2,r2,255
   12a2c:	1080201c 	xori	r2,r2,128
   12a30:	10bfe004 	addi	r2,r2,-128
   12a34:	108016d8 	cmpnei	r2,r2,91
   12a38:	1000411e 	bne	r2,zero,12b40 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
   12a3c:	e0bffe17 	ldw	r2,-8(fp)
   12a40:	10800a04 	addi	r2,r2,40
   12a44:	10800044 	addi	r2,r2,1
   12a48:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   12a4c:	00000c06 	br	12a80 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   12a50:	e0bffb17 	ldw	r2,-20(fp)
   12a54:	10c002a4 	muli	r3,r2,10
   12a58:	e0bffd17 	ldw	r2,-12(fp)
   12a5c:	11000044 	addi	r4,r2,1
   12a60:	e13ffd15 	stw	r4,-12(fp)
   12a64:	10800003 	ldbu	r2,0(r2)
   12a68:	10803fcc 	andi	r2,r2,255
   12a6c:	1080201c 	xori	r2,r2,128
   12a70:	10bfe004 	addi	r2,r2,-128
   12a74:	10bff404 	addi	r2,r2,-48
   12a78:	1885883a 	add	r2,r3,r2
   12a7c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   12a80:	d0e01117 	ldw	r3,-32700(gp)
   12a84:	e0bffd17 	ldw	r2,-12(fp)
   12a88:	10800003 	ldbu	r2,0(r2)
   12a8c:	10803fcc 	andi	r2,r2,255
   12a90:	1080201c 	xori	r2,r2,128
   12a94:	10bfe004 	addi	r2,r2,-128
   12a98:	10800044 	addi	r2,r2,1
   12a9c:	1885883a 	add	r2,r3,r2
   12aa0:	10800003 	ldbu	r2,0(r2)
   12aa4:	10803fcc 	andi	r2,r2,255
   12aa8:	1080010c 	andi	r2,r2,4
   12aac:	103fe81e 	bne	r2,zero,12a50 <lcd_handle_escape+0x54>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   12ab0:	e0bffd17 	ldw	r2,-12(fp)
   12ab4:	10800003 	ldbu	r2,0(r2)
   12ab8:	10803fcc 	andi	r2,r2,255
   12abc:	1080201c 	xori	r2,r2,128
   12ac0:	10bfe004 	addi	r2,r2,-128
   12ac4:	10800ed8 	cmpnei	r2,r2,59
   12ac8:	10001f1e 	bne	r2,zero,12b48 <lcd_handle_escape+0x14c>
    {
      ptr++;
   12acc:	e0bffd17 	ldw	r2,-12(fp)
   12ad0:	10800044 	addi	r2,r2,1
   12ad4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   12ad8:	00000c06 	br	12b0c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   12adc:	e0bffc17 	ldw	r2,-16(fp)
   12ae0:	10c002a4 	muli	r3,r2,10
   12ae4:	e0bffd17 	ldw	r2,-12(fp)
   12ae8:	11000044 	addi	r4,r2,1
   12aec:	e13ffd15 	stw	r4,-12(fp)
   12af0:	10800003 	ldbu	r2,0(r2)
   12af4:	10803fcc 	andi	r2,r2,255
   12af8:	1080201c 	xori	r2,r2,128
   12afc:	10bfe004 	addi	r2,r2,-128
   12b00:	10bff404 	addi	r2,r2,-48
   12b04:	1885883a 	add	r2,r3,r2
   12b08:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   12b0c:	d0e01117 	ldw	r3,-32700(gp)
   12b10:	e0bffd17 	ldw	r2,-12(fp)
   12b14:	10800003 	ldbu	r2,0(r2)
   12b18:	10803fcc 	andi	r2,r2,255
   12b1c:	1080201c 	xori	r2,r2,128
   12b20:	10bfe004 	addi	r2,r2,-128
   12b24:	10800044 	addi	r2,r2,1
   12b28:	1885883a 	add	r2,r3,r2
   12b2c:	10800003 	ldbu	r2,0(r2)
   12b30:	10803fcc 	andi	r2,r2,255
   12b34:	1080010c 	andi	r2,r2,4
   12b38:	103fe81e 	bne	r2,zero,12adc <lcd_handle_escape+0xe0>
   12b3c:	00000206 	br	12b48 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   12b40:	00bfffc4 	movi	r2,-1
   12b44:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   12b48:	e0bfff07 	ldb	r2,-4(fp)
   12b4c:	10c012a0 	cmpeqi	r3,r2,74
   12b50:	1800291e 	bne	r3,zero,12bf8 <lcd_handle_escape+0x1fc>
   12b54:	10c012c8 	cmpgei	r3,r2,75
   12b58:	1800031e 	bne	r3,zero,12b68 <lcd_handle_escape+0x16c>
   12b5c:	10801220 	cmpeqi	r2,r2,72
   12b60:	1000061e 	bne	r2,zero,12b7c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   12b64:	00004a06 	br	12c90 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
   12b68:	10c012e0 	cmpeqi	r3,r2,75
   12b6c:	1800281e 	bne	r3,zero,12c10 <lcd_handle_escape+0x214>
   12b70:	108019a0 	cmpeqi	r2,r2,102
   12b74:	1000011e 	bne	r2,zero,12b7c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   12b78:	00004506 	br	12c90 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   12b7c:	e0bffc17 	ldw	r2,-16(fp)
   12b80:	0080050e 	bge	zero,r2,12b98 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
   12b84:	e0bffc17 	ldw	r2,-16(fp)
   12b88:	10bfffc4 	addi	r2,r2,-1
   12b8c:	1007883a 	mov	r3,r2
   12b90:	e0bffe17 	ldw	r2,-8(fp)
   12b94:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   12b98:	e0bffb17 	ldw	r2,-20(fp)
   12b9c:	0080370e 	bge	zero,r2,12c7c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
   12ba0:	e0bffb17 	ldw	r2,-20(fp)
   12ba4:	10bfffc4 	addi	r2,r2,-1
   12ba8:	1007883a 	mov	r3,r2
   12bac:	e0bffe17 	ldw	r2,-8(fp)
   12bb0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   12bb4:	e0bffe17 	ldw	r2,-8(fp)
   12bb8:	10800883 	ldbu	r2,34(r2)
   12bbc:	10803fcc 	andi	r2,r2,255
   12bc0:	10800170 	cmpltui	r2,r2,5
   12bc4:	1000061e 	bne	r2,zero,12be0 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
   12bc8:	e0bffe17 	ldw	r2,-8(fp)
   12bcc:	00c00104 	movi	r3,4
   12bd0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   12bd4:	00000206 	br	12be0 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
   12bd8:	e13ffe17 	ldw	r4,-8(fp)
   12bdc:	00129300 	call	12930 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   12be0:	e0bffe17 	ldw	r2,-8(fp)
   12be4:	10800883 	ldbu	r2,34(r2)
   12be8:	10803fcc 	andi	r2,r2,255
   12bec:	108000e8 	cmpgeui	r2,r2,3
   12bf0:	103ff91e 	bne	r2,zero,12bd8 <lcd_handle_escape+0x1dc>
        lcd_scroll_up(sp);
    }
    break;
   12bf4:	00002106 	br	12c7c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   12bf8:	e0bffb17 	ldw	r2,-20(fp)
   12bfc:	10800098 	cmpnei	r2,r2,2
   12c00:	1000201e 	bne	r2,zero,12c84 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
   12c04:	e13ffe17 	ldw	r4,-8(fp)
   12c08:	00126740 	call	12674 <lcd_clear_screen>
    break;
   12c0c:	00001d06 	br	12c84 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   12c10:	e0bffb17 	ldw	r2,-20(fp)
   12c14:	00801d16 	blt	zero,r2,12c8c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   12c18:	e0bffe17 	ldw	r2,-8(fp)
   12c1c:	10800843 	ldbu	r2,33(r2)
   12c20:	10803fcc 	andi	r2,r2,255
   12c24:	10801428 	cmpgeui	r2,r2,80
   12c28:	1000181e 	bne	r2,zero,12c8c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   12c2c:	e0bffe17 	ldw	r2,-8(fp)
   12c30:	10800883 	ldbu	r2,34(r2)
   12c34:	10803fcc 	andi	r2,r2,255
   12c38:	108018e4 	muli	r2,r2,99
   12c3c:	10801004 	addi	r2,r2,64
   12c40:	e0fffe17 	ldw	r3,-8(fp)
   12c44:	1887883a 	add	r3,r3,r2
   12c48:	e0bffe17 	ldw	r2,-8(fp)
   12c4c:	10800843 	ldbu	r2,33(r2)
   12c50:	10803fcc 	andi	r2,r2,255
   12c54:	1889883a 	add	r4,r3,r2
   12c58:	e0bffe17 	ldw	r2,-8(fp)
   12c5c:	10800843 	ldbu	r2,33(r2)
   12c60:	10803fcc 	andi	r2,r2,255
   12c64:	00c01404 	movi	r3,80
   12c68:	1885c83a 	sub	r2,r3,r2
   12c6c:	100d883a 	mov	r6,r2
   12c70:	01400804 	movi	r5,32
   12c74:	000a6240 	call	a624 <memset>
    }
    break;
   12c78:	00000406 	br	12c8c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   12c7c:	0001883a 	nop
   12c80:	00000306 	br	12c90 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   12c84:	0001883a 	nop
   12c88:	00000106 	br	12c90 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   12c8c:	0001883a 	nop
  }
}
   12c90:	0001883a 	nop
   12c94:	e037883a 	mov	sp,fp
   12c98:	dfc00117 	ldw	ra,4(sp)
   12c9c:	df000017 	ldw	fp,0(sp)
   12ca0:	dec00204 	addi	sp,sp,8
   12ca4:	f800283a 	ret

00012ca8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   12ca8:	defff304 	addi	sp,sp,-52
   12cac:	dfc00c15 	stw	ra,48(sp)
   12cb0:	df000b15 	stw	fp,44(sp)
   12cb4:	df000b04 	addi	fp,sp,44
   12cb8:	e13ffc15 	stw	r4,-16(fp)
   12cbc:	e17ffd15 	stw	r5,-12(fp)
   12cc0:	e1bffe15 	stw	r6,-8(fp)
   12cc4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   12cc8:	e0bffe17 	ldw	r2,-8(fp)
   12ccc:	e0fffd17 	ldw	r3,-12(fp)
   12cd0:	1885883a 	add	r2,r3,r2
   12cd4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   12cd8:	e0bffc17 	ldw	r2,-16(fp)
   12cdc:	00c00044 	movi	r3,1
   12ce0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   12ce4:	00009906 	br	12f4c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
   12ce8:	e0bffd17 	ldw	r2,-12(fp)
   12cec:	10800003 	ldbu	r2,0(r2)
   12cf0:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
   12cf4:	e0bffc17 	ldw	r2,-16(fp)
   12cf8:	10800903 	ldbu	r2,36(r2)
   12cfc:	10803fcc 	andi	r2,r2,255
   12d00:	1080201c 	xori	r2,r2,128
   12d04:	10bfe004 	addi	r2,r2,-128
   12d08:	10003716 	blt	r2,zero,12de8 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
   12d0c:	e0bffc17 	ldw	r2,-16(fp)
   12d10:	10800903 	ldbu	r2,36(r2)
   12d14:	10803fcc 	andi	r2,r2,255
   12d18:	1080201c 	xori	r2,r2,128
   12d1c:	10bfe004 	addi	r2,r2,-128
   12d20:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   12d24:	e0bffa17 	ldw	r2,-24(fp)
   12d28:	1000031e 	bne	r2,zero,12d38 <altera_avalon_lcd_16207_write+0x90>
   12d2c:	e0bff907 	ldb	r2,-28(fp)
   12d30:	108016d8 	cmpnei	r2,r2,91
   12d34:	10000d1e 	bne	r2,zero,12d6c <altera_avalon_lcd_16207_write+0xc4>
   12d38:	e0bffa17 	ldw	r2,-24(fp)
   12d3c:	10001826 	beq	r2,zero,12da0 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
   12d40:	d0e01117 	ldw	r3,-32700(gp)
   12d44:	e0bff907 	ldb	r2,-28(fp)
   12d48:	10800044 	addi	r2,r2,1
   12d4c:	1885883a 	add	r2,r3,r2
   12d50:	10800003 	ldbu	r2,0(r2)
   12d54:	10803fcc 	andi	r2,r2,255
   12d58:	1080010c 	andi	r2,r2,4
   12d5c:	1000101e 	bne	r2,zero,12da0 <altera_avalon_lcd_16207_write+0xf8>
   12d60:	e0bff907 	ldb	r2,-28(fp)
   12d64:	10800ee0 	cmpeqi	r2,r2,59
   12d68:	10000d1e 	bne	r2,zero,12da0 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
   12d6c:	e0fffc17 	ldw	r3,-16(fp)
   12d70:	e0bffa17 	ldw	r2,-24(fp)
   12d74:	1885883a 	add	r2,r3,r2
   12d78:	10800a04 	addi	r2,r2,40
   12d7c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   12d80:	e0bff907 	ldb	r2,-28(fp)
   12d84:	100b883a 	mov	r5,r2
   12d88:	e13ffc17 	ldw	r4,-16(fp)
   12d8c:	00129fc0 	call	129fc <lcd_handle_escape>

        sp->esccount = -1;
   12d90:	e0bffc17 	ldw	r2,-16(fp)
   12d94:	00ffffc4 	movi	r3,-1
   12d98:	10c00905 	stb	r3,36(r2)
   12d9c:	00006806 	br	12f40 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   12da0:	e0bffc17 	ldw	r2,-16(fp)
   12da4:	10800903 	ldbu	r2,36(r2)
   12da8:	10803fcc 	andi	r2,r2,255
   12dac:	108001e8 	cmpgeui	r2,r2,7
   12db0:	1000631e 	bne	r2,zero,12f40 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
   12db4:	e0fffc17 	ldw	r3,-16(fp)
   12db8:	e0bffa17 	ldw	r2,-24(fp)
   12dbc:	1885883a 	add	r2,r3,r2
   12dc0:	10800a04 	addi	r2,r2,40
   12dc4:	e0fff903 	ldbu	r3,-28(fp)
   12dc8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   12dcc:	e0bffc17 	ldw	r2,-16(fp)
   12dd0:	10800903 	ldbu	r2,36(r2)
   12dd4:	10800044 	addi	r2,r2,1
   12dd8:	1007883a 	mov	r3,r2
   12ddc:	e0bffc17 	ldw	r2,-16(fp)
   12de0:	10c00905 	stb	r3,36(r2)
   12de4:	00005606 	br	12f40 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
   12de8:	e0bff907 	ldb	r2,-28(fp)
   12dec:	108006d8 	cmpnei	r2,r2,27
   12df0:	1000031e 	bne	r2,zero,12e00 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
   12df4:	e0bffc17 	ldw	r2,-16(fp)
   12df8:	10000905 	stb	zero,36(r2)
   12dfc:	00005006 	br	12f40 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
   12e00:	e0bff907 	ldb	r2,-28(fp)
   12e04:	10800358 	cmpnei	r2,r2,13
   12e08:	1000031e 	bne	r2,zero,12e18 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
   12e0c:	e0bffc17 	ldw	r2,-16(fp)
   12e10:	10000845 	stb	zero,33(r2)
   12e14:	00004a06 	br	12f40 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
   12e18:	e0bff907 	ldb	r2,-28(fp)
   12e1c:	10800298 	cmpnei	r2,r2,10
   12e20:	1000101e 	bne	r2,zero,12e64 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
   12e24:	e0bffc17 	ldw	r2,-16(fp)
   12e28:	10000845 	stb	zero,33(r2)
      sp->y++;
   12e2c:	e0bffc17 	ldw	r2,-16(fp)
   12e30:	10800883 	ldbu	r2,34(r2)
   12e34:	10800044 	addi	r2,r2,1
   12e38:	1007883a 	mov	r3,r2
   12e3c:	e0bffc17 	ldw	r2,-16(fp)
   12e40:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   12e44:	e0bffc17 	ldw	r2,-16(fp)
   12e48:	10800883 	ldbu	r2,34(r2)
   12e4c:	10803fcc 	andi	r2,r2,255
   12e50:	108000f0 	cmpltui	r2,r2,3
   12e54:	10003a1e 	bne	r2,zero,12f40 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
   12e58:	e13ffc17 	ldw	r4,-16(fp)
   12e5c:	00129300 	call	12930 <lcd_scroll_up>
   12e60:	00003706 	br	12f40 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
   12e64:	e0bff907 	ldb	r2,-28(fp)
   12e68:	10800218 	cmpnei	r2,r2,8
   12e6c:	10000b1e 	bne	r2,zero,12e9c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
   12e70:	e0bffc17 	ldw	r2,-16(fp)
   12e74:	10800843 	ldbu	r2,33(r2)
   12e78:	10803fcc 	andi	r2,r2,255
   12e7c:	10003026 	beq	r2,zero,12f40 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
   12e80:	e0bffc17 	ldw	r2,-16(fp)
   12e84:	10800843 	ldbu	r2,33(r2)
   12e88:	10bfffc4 	addi	r2,r2,-1
   12e8c:	1007883a 	mov	r3,r2
   12e90:	e0bffc17 	ldw	r2,-16(fp)
   12e94:	10c00845 	stb	r3,33(r2)
   12e98:	00002906 	br	12f40 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
   12e9c:	d0e01117 	ldw	r3,-32700(gp)
   12ea0:	e0bff907 	ldb	r2,-28(fp)
   12ea4:	10800044 	addi	r2,r2,1
   12ea8:	1885883a 	add	r2,r3,r2
   12eac:	10800003 	ldbu	r2,0(r2)
   12eb0:	10803fcc 	andi	r2,r2,255
   12eb4:	1080201c 	xori	r2,r2,128
   12eb8:	10bfe004 	addi	r2,r2,-128
   12ebc:	108025cc 	andi	r2,r2,151
   12ec0:	10001f26 	beq	r2,zero,12f40 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   12ec4:	e0bffc17 	ldw	r2,-16(fp)
   12ec8:	10800883 	ldbu	r2,34(r2)
   12ecc:	10803fcc 	andi	r2,r2,255
   12ed0:	108000b0 	cmpltui	r2,r2,2
   12ed4:	1000021e 	bne	r2,zero,12ee0 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
   12ed8:	e13ffc17 	ldw	r4,-16(fp)
   12edc:	00129300 	call	12930 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   12ee0:	e0bffc17 	ldw	r2,-16(fp)
   12ee4:	10800843 	ldbu	r2,33(r2)
   12ee8:	10803fcc 	andi	r2,r2,255
   12eec:	10801428 	cmpgeui	r2,r2,80
   12ef0:	10000d1e 	bne	r2,zero,12f28 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
   12ef4:	e0bffc17 	ldw	r2,-16(fp)
   12ef8:	10800883 	ldbu	r2,34(r2)
   12efc:	10c03fcc 	andi	r3,r2,255
   12f00:	e0bffc17 	ldw	r2,-16(fp)
   12f04:	10800843 	ldbu	r2,33(r2)
   12f08:	10803fcc 	andi	r2,r2,255
   12f0c:	e13ffc17 	ldw	r4,-16(fp)
   12f10:	18c018e4 	muli	r3,r3,99
   12f14:	20c7883a 	add	r3,r4,r3
   12f18:	1885883a 	add	r2,r3,r2
   12f1c:	10801004 	addi	r2,r2,64
   12f20:	e0fff903 	ldbu	r3,-28(fp)
   12f24:	10c00005 	stb	r3,0(r2)

      sp->x++;
   12f28:	e0bffc17 	ldw	r2,-16(fp)
   12f2c:	10800843 	ldbu	r2,33(r2)
   12f30:	10800044 	addi	r2,r2,1
   12f34:	1007883a 	mov	r3,r2
   12f38:	e0bffc17 	ldw	r2,-16(fp)
   12f3c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   12f40:	e0bffd17 	ldw	r2,-12(fp)
   12f44:	10800044 	addi	r2,r2,1
   12f48:	e0bffd15 	stw	r2,-12(fp)
   12f4c:	e0fffd17 	ldw	r3,-12(fp)
   12f50:	e0bff817 	ldw	r2,-32(fp)
   12f54:	18bf6436 	bltu	r3,r2,12ce8 <altera_avalon_lcd_16207_write+0x40>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   12f58:	00800404 	movi	r2,16
   12f5c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   12f60:	e03ff515 	stw	zero,-44(fp)
   12f64:	00003706 	br	13044 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   12f68:	00801404 	movi	r2,80
   12f6c:	e0bff715 	stw	r2,-36(fp)
   12f70:	00001106 	br	12fb8 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
   12f74:	e0bff717 	ldw	r2,-36(fp)
   12f78:	10bfffc4 	addi	r2,r2,-1
   12f7c:	e13ffc17 	ldw	r4,-16(fp)
   12f80:	e0fff517 	ldw	r3,-44(fp)
   12f84:	18c018e4 	muli	r3,r3,99
   12f88:	20c7883a 	add	r3,r4,r3
   12f8c:	1885883a 	add	r2,r3,r2
   12f90:	10801004 	addi	r2,r2,64
   12f94:	10800003 	ldbu	r2,0(r2)
   12f98:	10803fcc 	andi	r2,r2,255
   12f9c:	1080201c 	xori	r2,r2,128
   12fa0:	10bfe004 	addi	r2,r2,-128
   12fa4:	10800820 	cmpeqi	r2,r2,32
   12fa8:	10000626 	beq	r2,zero,12fc4 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   12fac:	e0bff717 	ldw	r2,-36(fp)
   12fb0:	10bfffc4 	addi	r2,r2,-1
   12fb4:	e0bff715 	stw	r2,-36(fp)
   12fb8:	e0bff717 	ldw	r2,-36(fp)
   12fbc:	00bfed16 	blt	zero,r2,12f74 <altera_avalon_lcd_16207_write+0x2cc>
   12fc0:	00000106 	br	12fc8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
   12fc4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   12fc8:	e0bff717 	ldw	r2,-36(fp)
   12fcc:	10800448 	cmpgei	r2,r2,17
   12fd0:	1000031e 	bne	r2,zero,12fe0 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
   12fd4:	00800404 	movi	r2,16
   12fd8:	e0bff715 	stw	r2,-36(fp)
   12fdc:	00000306 	br	12fec <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
   12fe0:	e0bff717 	ldw	r2,-36(fp)
   12fe4:	10800044 	addi	r2,r2,1
   12fe8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
   12fec:	e0bff717 	ldw	r2,-36(fp)
   12ff0:	1009883a 	mov	r4,r2
   12ff4:	e0fffc17 	ldw	r3,-16(fp)
   12ff8:	e0bff517 	ldw	r2,-44(fp)
   12ffc:	108018e4 	muli	r2,r2,99
   13000:	1885883a 	add	r2,r3,r2
   13004:	10802444 	addi	r2,r2,145
   13008:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
   1300c:	e0fff617 	ldw	r3,-40(fp)
   13010:	e0bff717 	ldw	r2,-36(fp)
   13014:	1880020e 	bge	r3,r2,13020 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
   13018:	e0bff717 	ldw	r2,-36(fp)
   1301c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   13020:	e0fffc17 	ldw	r3,-16(fp)
   13024:	e0bff517 	ldw	r2,-44(fp)
   13028:	108018e4 	muli	r2,r2,99
   1302c:	1885883a 	add	r2,r3,r2
   13030:	10802484 	addi	r2,r2,146
   13034:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   13038:	e0bff517 	ldw	r2,-44(fp)
   1303c:	10800044 	addi	r2,r2,1
   13040:	e0bff515 	stw	r2,-44(fp)
   13044:	e0bff517 	ldw	r2,-44(fp)
   13048:	10800090 	cmplti	r2,r2,2
   1304c:	103fc61e 	bne	r2,zero,12f68 <altera_avalon_lcd_16207_write+0x2c0>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   13050:	e0bff617 	ldw	r2,-40(fp)
   13054:	10800448 	cmpgei	r2,r2,17
   13058:	1000031e 	bne	r2,zero,13068 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
   1305c:	e0bffc17 	ldw	r2,-16(fp)
   13060:	10000985 	stb	zero,38(r2)
   13064:	00002e06 	br	13120 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
   13068:	e0bff617 	ldw	r2,-40(fp)
   1306c:	1085883a 	add	r2,r2,r2
   13070:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
   13074:	e0bff617 	ldw	r2,-40(fp)
   13078:	1007883a 	mov	r3,r2
   1307c:	e0bffc17 	ldw	r2,-16(fp)
   13080:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   13084:	e03ff515 	stw	zero,-44(fp)
   13088:	00002206 	br	13114 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   1308c:	e0fffc17 	ldw	r3,-16(fp)
   13090:	e0bff517 	ldw	r2,-44(fp)
   13094:	108018e4 	muli	r2,r2,99
   13098:	1885883a 	add	r2,r3,r2
   1309c:	10802444 	addi	r2,r2,145
   130a0:	10800003 	ldbu	r2,0(r2)
   130a4:	10803fcc 	andi	r2,r2,255
   130a8:	1080201c 	xori	r2,r2,128
   130ac:	10bfe004 	addi	r2,r2,-128
   130b0:	10800450 	cmplti	r2,r2,17
   130b4:	1000141e 	bne	r2,zero,13108 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   130b8:	e0fffc17 	ldw	r3,-16(fp)
   130bc:	e0bff517 	ldw	r2,-44(fp)
   130c0:	108018e4 	muli	r2,r2,99
   130c4:	1885883a 	add	r2,r3,r2
   130c8:	10802444 	addi	r2,r2,145
   130cc:	10800003 	ldbu	r2,0(r2)
   130d0:	10803fcc 	andi	r2,r2,255
   130d4:	1080201c 	xori	r2,r2,128
   130d8:	10bfe004 	addi	r2,r2,-128
   130dc:	1004923a 	slli	r2,r2,8
   130e0:	e17ff617 	ldw	r5,-40(fp)
   130e4:	1009883a 	mov	r4,r2
   130e8:	00045380 	call	4538 <__divsi3>
   130ec:	1009883a 	mov	r4,r2
   130f0:	e0fffc17 	ldw	r3,-16(fp)
   130f4:	e0bff517 	ldw	r2,-44(fp)
   130f8:	108018e4 	muli	r2,r2,99
   130fc:	1885883a 	add	r2,r3,r2
   13100:	10802484 	addi	r2,r2,146
   13104:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   13108:	e0bff517 	ldw	r2,-44(fp)
   1310c:	10800044 	addi	r2,r2,1
   13110:	e0bff515 	stw	r2,-44(fp)
   13114:	e0bff517 	ldw	r2,-44(fp)
   13118:	10800090 	cmplti	r2,r2,2
   1311c:	103fdb1e 	bne	r2,zero,1308c <altera_avalon_lcd_16207_write+0x3e4>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   13120:	e0bffc17 	ldw	r2,-16(fp)
   13124:	10800943 	ldbu	r2,37(r2)
   13128:	10803fcc 	andi	r2,r2,255
   1312c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
   13130:	e13ffc17 	ldw	r4,-16(fp)
   13134:	00127440 	call	12744 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   13138:	e0bffc17 	ldw	r2,-16(fp)
   1313c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   13140:	e0bffc17 	ldw	r2,-16(fp)
   13144:	10800943 	ldbu	r2,37(r2)
   13148:	10c03fcc 	andi	r3,r2,255
   1314c:	e0bffb17 	ldw	r2,-20(fp)
   13150:	18800426 	beq	r3,r2,13164 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   13154:	e0bffc17 	ldw	r2,-16(fp)
   13158:	00c00044 	movi	r3,1
   1315c:	10c009c5 	stb	r3,39(r2)
  }
   13160:	003fef06 	br	13120 <altera_avalon_lcd_16207_write+0x478>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   13164:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   13168:	e0bffe17 	ldw	r2,-8(fp)
}
   1316c:	e037883a 	mov	sp,fp
   13170:	dfc00117 	ldw	ra,4(sp)
   13174:	df000017 	ldw	fp,0(sp)
   13178:	dec00204 	addi	sp,sp,8
   1317c:	f800283a 	ret

00013180 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   13180:	defffc04 	addi	sp,sp,-16
   13184:	dfc00315 	stw	ra,12(sp)
   13188:	df000215 	stw	fp,8(sp)
   1318c:	df000204 	addi	fp,sp,8
   13190:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   13194:	e0bfff17 	ldw	r2,-4(fp)
   13198:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   1319c:	e0bffe17 	ldw	r2,-8(fp)
   131a0:	10800943 	ldbu	r2,37(r2)
   131a4:	10803fcc 	andi	r2,r2,255
   131a8:	10c00044 	addi	r3,r2,1
   131ac:	e0bffe17 	ldw	r2,-8(fp)
   131b0:	10800983 	ldbu	r2,38(r2)
   131b4:	10803fcc 	andi	r2,r2,255
   131b8:	18800316 	blt	r3,r2,131c8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   131bc:	e0bffe17 	ldw	r2,-8(fp)
   131c0:	10000945 	stb	zero,37(r2)
   131c4:	00000606 	br	131e0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   131c8:	e0bffe17 	ldw	r2,-8(fp)
   131cc:	10800943 	ldbu	r2,37(r2)
   131d0:	10800044 	addi	r2,r2,1
   131d4:	1007883a 	mov	r3,r2
   131d8:	e0bffe17 	ldw	r2,-8(fp)
   131dc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   131e0:	e0bffe17 	ldw	r2,-8(fp)
   131e4:	10800983 	ldbu	r2,38(r2)
   131e8:	10803fcc 	andi	r2,r2,255
   131ec:	10000826 	beq	r2,zero,13210 <alt_lcd_16207_timeout+0x90>
   131f0:	e0bffe17 	ldw	r2,-8(fp)
   131f4:	108009c3 	ldbu	r2,39(r2)
   131f8:	10803fcc 	andi	r2,r2,255
   131fc:	1080201c 	xori	r2,r2,128
   13200:	10bfe004 	addi	r2,r2,-128
   13204:	1000021e 	bne	r2,zero,13210 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   13208:	e13ffe17 	ldw	r4,-8(fp)
   1320c:	00127440 	call	12744 <lcd_repaint_screen>

  return sp->period;
   13210:	e0bffe17 	ldw	r2,-8(fp)
   13214:	10800717 	ldw	r2,28(r2)
}
   13218:	e037883a 	mov	sp,fp
   1321c:	dfc00117 	ldw	ra,4(sp)
   13220:	df000017 	ldw	fp,0(sp)
   13224:	dec00204 	addi	sp,sp,8
   13228:	f800283a 	ret

0001322c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   1322c:	defffc04 	addi	sp,sp,-16
   13230:	dfc00315 	stw	ra,12(sp)
   13234:	df000215 	stw	fp,8(sp)
   13238:	df000204 	addi	fp,sp,8
   1323c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   13240:	e0bfff17 	ldw	r2,-4(fp)
   13244:	10800017 	ldw	r2,0(r2)
   13248:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   1324c:	e0bfff17 	ldw	r2,-4(fp)
   13250:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   13254:	010ea604 	movi	r4,15000
   13258:	00118300 	call	11830 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1325c:	e0bffe17 	ldw	r2,-8(fp)
   13260:	00c00c04 	movi	r3,48
   13264:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   13268:	01040104 	movi	r4,4100
   1326c:	00118300 	call	11830 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   13270:	e0bffe17 	ldw	r2,-8(fp)
   13274:	00c00c04 	movi	r3,48
   13278:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   1327c:	0100fa04 	movi	r4,1000
   13280:	00118300 	call	11830 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   13284:	e0bffe17 	ldw	r2,-8(fp)
   13288:	00c00c04 	movi	r3,48
   1328c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   13290:	01400e04 	movi	r5,56
   13294:	e13fff17 	ldw	r4,-4(fp)
   13298:	00124e40 	call	124e4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   1329c:	01400204 	movi	r5,8
   132a0:	e13fff17 	ldw	r4,-4(fp)
   132a4:	00124e40 	call	124e4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   132a8:	e13fff17 	ldw	r4,-4(fp)
   132ac:	00126740 	call	12674 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   132b0:	01400184 	movi	r5,6
   132b4:	e13fff17 	ldw	r4,-4(fp)
   132b8:	00124e40 	call	124e4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   132bc:	01400304 	movi	r5,12
   132c0:	e13fff17 	ldw	r4,-4(fp)
   132c4:	00124e40 	call	124e4 <lcd_write_command>

  sp->esccount = -1;
   132c8:	e0bfff17 	ldw	r2,-4(fp)
   132cc:	00ffffc4 	movi	r3,-1
   132d0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   132d4:	e0bfff17 	ldw	r2,-4(fp)
   132d8:	10800a04 	addi	r2,r2,40
   132dc:	01800204 	movi	r6,8
   132e0:	000b883a 	mov	r5,zero
   132e4:	1009883a 	mov	r4,r2
   132e8:	000a6240 	call	a624 <memset>

  sp->scrollpos = 0;
   132ec:	e0bfff17 	ldw	r2,-4(fp)
   132f0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   132f4:	e0bfff17 	ldw	r2,-4(fp)
   132f8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   132fc:	e0bfff17 	ldw	r2,-4(fp)
   13300:	100009c5 	stb	zero,39(r2)
   13304:	d0a72717 	ldw	r2,-25444(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   13308:	01400284 	movi	r5,10
   1330c:	1009883a 	mov	r4,r2
   13310:	00046300 	call	4630 <__udivsi3>
   13314:	1007883a 	mov	r3,r2
   13318:	e0bfff17 	ldw	r2,-4(fp)
   1331c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   13320:	e0bfff17 	ldw	r2,-4(fp)
   13324:	10c00104 	addi	r3,r2,4
   13328:	e0bfff17 	ldw	r2,-4(fp)
   1332c:	10800717 	ldw	r2,28(r2)
   13330:	e1ffff17 	ldw	r7,-4(fp)
   13334:	01800074 	movhi	r6,1
   13338:	318c6004 	addi	r6,r6,12672
   1333c:	100b883a 	mov	r5,r2
   13340:	1809883a 	mov	r4,r3
   13344:	00134b40 	call	134b4 <alt_alarm_start>
}
   13348:	0001883a 	nop
   1334c:	e037883a 	mov	sp,fp
   13350:	dfc00117 	ldw	ra,4(sp)
   13354:	df000017 	ldw	fp,0(sp)
   13358:	dec00204 	addi	sp,sp,8
   1335c:	f800283a 	ret

00013360 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13360:	defffa04 	addi	sp,sp,-24
   13364:	dfc00515 	stw	ra,20(sp)
   13368:	df000415 	stw	fp,16(sp)
   1336c:	df000404 	addi	fp,sp,16
   13370:	e13ffd15 	stw	r4,-12(fp)
   13374:	e17ffe15 	stw	r5,-8(fp)
   13378:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   1337c:	e0bffd17 	ldw	r2,-12(fp)
   13380:	10800017 	ldw	r2,0(r2)
   13384:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   13388:	e0bffc17 	ldw	r2,-16(fp)
   1338c:	10c00a04 	addi	r3,r2,40
   13390:	e0bffd17 	ldw	r2,-12(fp)
   13394:	10800217 	ldw	r2,8(r2)
   13398:	100f883a 	mov	r7,r2
   1339c:	e1bfff17 	ldw	r6,-4(fp)
   133a0:	e17ffe17 	ldw	r5,-8(fp)
   133a4:	1809883a 	mov	r4,r3
   133a8:	0012ca80 	call	12ca8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   133ac:	e037883a 	mov	sp,fp
   133b0:	dfc00117 	ldw	ra,4(sp)
   133b4:	df000017 	ldw	fp,0(sp)
   133b8:	dec00204 	addi	sp,sp,8
   133bc:	f800283a 	ret

000133c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   133c0:	defffa04 	addi	sp,sp,-24
   133c4:	dfc00515 	stw	ra,20(sp)
   133c8:	df000415 	stw	fp,16(sp)
   133cc:	df000404 	addi	fp,sp,16
   133d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   133d4:	0007883a 	mov	r3,zero
   133d8:	e0bfff17 	ldw	r2,-4(fp)
   133dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   133e0:	e0bfff17 	ldw	r2,-4(fp)
   133e4:	10800104 	addi	r2,r2,4
   133e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133ec:	0005303a 	rdctl	r2,status
   133f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133f4:	e0fffd17 	ldw	r3,-12(fp)
   133f8:	00bfff84 	movi	r2,-2
   133fc:	1884703a 	and	r2,r3,r2
   13400:	1001703a 	wrctl	status,r2
  
  return context;
   13404:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13408:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1340c:	00140240 	call	14024 <alt_tick>
   13410:	e0bffc17 	ldw	r2,-16(fp)
   13414:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13418:	e0bffe17 	ldw	r2,-8(fp)
   1341c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13420:	0001883a 	nop
   13424:	e037883a 	mov	sp,fp
   13428:	dfc00117 	ldw	ra,4(sp)
   1342c:	df000017 	ldw	fp,0(sp)
   13430:	dec00204 	addi	sp,sp,8
   13434:	f800283a 	ret

00013438 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13438:	defff804 	addi	sp,sp,-32
   1343c:	dfc00715 	stw	ra,28(sp)
   13440:	df000615 	stw	fp,24(sp)
   13444:	df000604 	addi	fp,sp,24
   13448:	e13ffc15 	stw	r4,-16(fp)
   1344c:	e17ffd15 	stw	r5,-12(fp)
   13450:	e1bffe15 	stw	r6,-8(fp)
   13454:	e1ffff15 	stw	r7,-4(fp)
   13458:	e0bfff17 	ldw	r2,-4(fp)
   1345c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13460:	d0a72717 	ldw	r2,-25444(gp)
   13464:	1000021e 	bne	r2,zero,13470 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   13468:	e0bffb17 	ldw	r2,-20(fp)
   1346c:	d0a72715 	stw	r2,-25444(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13470:	e0bffc17 	ldw	r2,-16(fp)
   13474:	10800104 	addi	r2,r2,4
   13478:	00c001c4 	movi	r3,7
   1347c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   13480:	d8000015 	stw	zero,0(sp)
   13484:	e1fffc17 	ldw	r7,-16(fp)
   13488:	01800074 	movhi	r6,1
   1348c:	318cf004 	addi	r6,r6,13248
   13490:	e17ffe17 	ldw	r5,-8(fp)
   13494:	e13ffd17 	ldw	r4,-12(fp)
   13498:	00139540 	call	13954 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1349c:	0001883a 	nop
   134a0:	e037883a 	mov	sp,fp
   134a4:	dfc00117 	ldw	ra,4(sp)
   134a8:	df000017 	ldw	fp,0(sp)
   134ac:	dec00204 	addi	sp,sp,8
   134b0:	f800283a 	ret

000134b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   134b4:	defff504 	addi	sp,sp,-44
   134b8:	df000a15 	stw	fp,40(sp)
   134bc:	df000a04 	addi	fp,sp,40
   134c0:	e13ffc15 	stw	r4,-16(fp)
   134c4:	e17ffd15 	stw	r5,-12(fp)
   134c8:	e1bffe15 	stw	r6,-8(fp)
   134cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   134d0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   134d4:	d0a72717 	ldw	r2,-25444(gp)
  
  if (alt_ticks_per_second ())
   134d8:	10003c26 	beq	r2,zero,135cc <alt_alarm_start+0x118>
  {
    if (alarm)
   134dc:	e0bffc17 	ldw	r2,-16(fp)
   134e0:	10003826 	beq	r2,zero,135c4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   134e4:	e0bffc17 	ldw	r2,-16(fp)
   134e8:	e0fffe17 	ldw	r3,-8(fp)
   134ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   134f0:	e0bffc17 	ldw	r2,-16(fp)
   134f4:	e0ffff17 	ldw	r3,-4(fp)
   134f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134fc:	0005303a 	rdctl	r2,status
   13500:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13504:	e0fff917 	ldw	r3,-28(fp)
   13508:	00bfff84 	movi	r2,-2
   1350c:	1884703a 	and	r2,r3,r2
   13510:	1001703a 	wrctl	status,r2
  
  return context;
   13514:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   13518:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1351c:	d0a72817 	ldw	r2,-25440(gp)
      
      current_nticks = alt_nticks();
   13520:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   13524:	e0fffd17 	ldw	r3,-12(fp)
   13528:	e0bff617 	ldw	r2,-40(fp)
   1352c:	1885883a 	add	r2,r3,r2
   13530:	10c00044 	addi	r3,r2,1
   13534:	e0bffc17 	ldw	r2,-16(fp)
   13538:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1353c:	e0bffc17 	ldw	r2,-16(fp)
   13540:	10c00217 	ldw	r3,8(r2)
   13544:	e0bff617 	ldw	r2,-40(fp)
   13548:	1880042e 	bgeu	r3,r2,1355c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1354c:	e0bffc17 	ldw	r2,-16(fp)
   13550:	00c00044 	movi	r3,1
   13554:	10c00405 	stb	r3,16(r2)
   13558:	00000206 	br	13564 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1355c:	e0bffc17 	ldw	r2,-16(fp)
   13560:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   13564:	e0bffc17 	ldw	r2,-16(fp)
   13568:	d0e00f04 	addi	r3,gp,-32708
   1356c:	e0fffa15 	stw	r3,-24(fp)
   13570:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13574:	e0bffb17 	ldw	r2,-20(fp)
   13578:	e0fffa17 	ldw	r3,-24(fp)
   1357c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13580:	e0bffa17 	ldw	r2,-24(fp)
   13584:	10c00017 	ldw	r3,0(r2)
   13588:	e0bffb17 	ldw	r2,-20(fp)
   1358c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13590:	e0bffa17 	ldw	r2,-24(fp)
   13594:	10800017 	ldw	r2,0(r2)
   13598:	e0fffb17 	ldw	r3,-20(fp)
   1359c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   135a0:	e0bffa17 	ldw	r2,-24(fp)
   135a4:	e0fffb17 	ldw	r3,-20(fp)
   135a8:	10c00015 	stw	r3,0(r2)
   135ac:	e0bff817 	ldw	r2,-32(fp)
   135b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135b4:	e0bff717 	ldw	r2,-36(fp)
   135b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   135bc:	0005883a 	mov	r2,zero
   135c0:	00000306 	br	135d0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   135c4:	00bffa84 	movi	r2,-22
   135c8:	00000106 	br	135d0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   135cc:	00bfde84 	movi	r2,-134
  }
}
   135d0:	e037883a 	mov	sp,fp
   135d4:	df000017 	ldw	fp,0(sp)
   135d8:	dec00104 	addi	sp,sp,4
   135dc:	f800283a 	ret

000135e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   135e0:	defffa04 	addi	sp,sp,-24
   135e4:	dfc00515 	stw	ra,20(sp)
   135e8:	df000415 	stw	fp,16(sp)
   135ec:	df000404 	addi	fp,sp,16
   135f0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   135f4:	008000c4 	movi	r2,3
   135f8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   135fc:	e0fffd17 	ldw	r3,-12(fp)
   13600:	008003f4 	movhi	r2,15
   13604:	10909004 	addi	r2,r2,16960
   13608:	1885383a 	mul	r2,r3,r2
   1360c:	100b883a 	mov	r5,r2
   13610:	01017db4 	movhi	r4,1526
   13614:	21384004 	addi	r4,r4,-7936
   13618:	00046300 	call	4630 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1361c:	100b883a 	mov	r5,r2
   13620:	01200034 	movhi	r4,32768
   13624:	213fffc4 	addi	r4,r4,-1
   13628:	00046300 	call	4630 <__udivsi3>
   1362c:	100b883a 	mov	r5,r2
   13630:	e13fff17 	ldw	r4,-4(fp)
   13634:	00046300 	call	4630 <__udivsi3>
   13638:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1363c:	e0bffe17 	ldw	r2,-8(fp)
   13640:	10002a26 	beq	r2,zero,136ec <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   13644:	e03ffc15 	stw	zero,-16(fp)
   13648:	00001706 	br	136a8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1364c:	00a00034 	movhi	r2,32768
   13650:	10bfffc4 	addi	r2,r2,-1
   13654:	10bfffc4 	addi	r2,r2,-1
   13658:	103ffe1e 	bne	r2,zero,13654 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1365c:	e0fffd17 	ldw	r3,-12(fp)
   13660:	008003f4 	movhi	r2,15
   13664:	10909004 	addi	r2,r2,16960
   13668:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1366c:	100b883a 	mov	r5,r2
   13670:	01017db4 	movhi	r4,1526
   13674:	21384004 	addi	r4,r4,-7936
   13678:	00046300 	call	4630 <__udivsi3>
   1367c:	100b883a 	mov	r5,r2
   13680:	01200034 	movhi	r4,32768
   13684:	213fffc4 	addi	r4,r4,-1
   13688:	00046300 	call	4630 <__udivsi3>
   1368c:	1007883a 	mov	r3,r2
   13690:	e0bfff17 	ldw	r2,-4(fp)
   13694:	10c5c83a 	sub	r2,r2,r3
   13698:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1369c:	e0bffc17 	ldw	r2,-16(fp)
   136a0:	10800044 	addi	r2,r2,1
   136a4:	e0bffc15 	stw	r2,-16(fp)
   136a8:	e0fffc17 	ldw	r3,-16(fp)
   136ac:	e0bffe17 	ldw	r2,-8(fp)
   136b0:	18bfe616 	blt	r3,r2,1364c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   136b4:	e0fffd17 	ldw	r3,-12(fp)
   136b8:	008003f4 	movhi	r2,15
   136bc:	10909004 	addi	r2,r2,16960
   136c0:	1885383a 	mul	r2,r3,r2
   136c4:	100b883a 	mov	r5,r2
   136c8:	01017db4 	movhi	r4,1526
   136cc:	21384004 	addi	r4,r4,-7936
   136d0:	00046300 	call	4630 <__udivsi3>
   136d4:	1007883a 	mov	r3,r2
   136d8:	e0bfff17 	ldw	r2,-4(fp)
   136dc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   136e0:	10bfffc4 	addi	r2,r2,-1
   136e4:	103ffe1e 	bne	r2,zero,136e0 <alt_busy_sleep+0x100>
   136e8:	00000d06 	br	13720 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   136ec:	e0fffd17 	ldw	r3,-12(fp)
   136f0:	008003f4 	movhi	r2,15
   136f4:	10909004 	addi	r2,r2,16960
   136f8:	1885383a 	mul	r2,r3,r2
   136fc:	100b883a 	mov	r5,r2
   13700:	01017db4 	movhi	r4,1526
   13704:	21384004 	addi	r4,r4,-7936
   13708:	00046300 	call	4630 <__udivsi3>
   1370c:	1007883a 	mov	r3,r2
   13710:	e0bfff17 	ldw	r2,-4(fp)
   13714:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13718:	10bfffc4 	addi	r2,r2,-1
   1371c:	00bffe16 	blt	zero,r2,13718 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   13720:	0005883a 	mov	r2,zero
}
   13724:	e037883a 	mov	sp,fp
   13728:	dfc00117 	ldw	ra,4(sp)
   1372c:	df000017 	ldw	fp,0(sp)
   13730:	dec00204 	addi	sp,sp,8
   13734:	f800283a 	ret

00013738 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13738:	defffe04 	addi	sp,sp,-8
   1373c:	df000115 	stw	fp,4(sp)
   13740:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13744:	e03fff15 	stw	zero,-4(fp)
   13748:	00000506 	br	13760 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1374c:	e0bfff17 	ldw	r2,-4(fp)
   13750:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13754:	e0bfff17 	ldw	r2,-4(fp)
   13758:	10800804 	addi	r2,r2,32
   1375c:	e0bfff15 	stw	r2,-4(fp)
   13760:	e0bfff17 	ldw	r2,-4(fp)
   13764:	10820030 	cmpltui	r2,r2,2048
   13768:	103ff81e 	bne	r2,zero,1374c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1376c:	0001883a 	nop
   13770:	e037883a 	mov	sp,fp
   13774:	df000017 	ldw	fp,0(sp)
   13778:	dec00104 	addi	sp,sp,4
   1377c:	f800283a 	ret

00013780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13780:	defffe04 	addi	sp,sp,-8
   13784:	dfc00115 	stw	ra,4(sp)
   13788:	df000015 	stw	fp,0(sp)
   1378c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13790:	d0a00b17 	ldw	r2,-32724(gp)
   13794:	10000326 	beq	r2,zero,137a4 <alt_get_errno+0x24>
   13798:	d0a00b17 	ldw	r2,-32724(gp)
   1379c:	103ee83a 	callr	r2
   137a0:	00000106 	br	137a8 <alt_get_errno+0x28>
   137a4:	d0a72204 	addi	r2,gp,-25464
}
   137a8:	e037883a 	mov	sp,fp
   137ac:	dfc00117 	ldw	ra,4(sp)
   137b0:	df000017 	ldw	fp,0(sp)
   137b4:	dec00204 	addi	sp,sp,8
   137b8:	f800283a 	ret

000137bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   137bc:	defffa04 	addi	sp,sp,-24
   137c0:	dfc00515 	stw	ra,20(sp)
   137c4:	df000415 	stw	fp,16(sp)
   137c8:	df000404 	addi	fp,sp,16
   137cc:	e13ffe15 	stw	r4,-8(fp)
   137d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   137d4:	e0bffe17 	ldw	r2,-8(fp)
   137d8:	10000326 	beq	r2,zero,137e8 <alt_dev_llist_insert+0x2c>
   137dc:	e0bffe17 	ldw	r2,-8(fp)
   137e0:	10800217 	ldw	r2,8(r2)
   137e4:	1000061e 	bne	r2,zero,13800 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   137e8:	00137800 	call	13780 <alt_get_errno>
   137ec:	1007883a 	mov	r3,r2
   137f0:	00800584 	movi	r2,22
   137f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   137f8:	00bffa84 	movi	r2,-22
   137fc:	00001306 	br	1384c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13800:	e0bffe17 	ldw	r2,-8(fp)
   13804:	e0ffff17 	ldw	r3,-4(fp)
   13808:	e0fffc15 	stw	r3,-16(fp)
   1380c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13810:	e0bffd17 	ldw	r2,-12(fp)
   13814:	e0fffc17 	ldw	r3,-16(fp)
   13818:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1381c:	e0bffc17 	ldw	r2,-16(fp)
   13820:	10c00017 	ldw	r3,0(r2)
   13824:	e0bffd17 	ldw	r2,-12(fp)
   13828:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1382c:	e0bffc17 	ldw	r2,-16(fp)
   13830:	10800017 	ldw	r2,0(r2)
   13834:	e0fffd17 	ldw	r3,-12(fp)
   13838:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1383c:	e0bffc17 	ldw	r2,-16(fp)
   13840:	e0fffd17 	ldw	r3,-12(fp)
   13844:	10c00015 	stw	r3,0(r2)

  return 0;  
   13848:	0005883a 	mov	r2,zero
}
   1384c:	e037883a 	mov	sp,fp
   13850:	dfc00117 	ldw	ra,4(sp)
   13854:	df000017 	ldw	fp,0(sp)
   13858:	dec00204 	addi	sp,sp,8
   1385c:	f800283a 	ret

00013860 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13860:	defffd04 	addi	sp,sp,-12
   13864:	dfc00215 	stw	ra,8(sp)
   13868:	df000115 	stw	fp,4(sp)
   1386c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13870:	00800074 	movhi	r2,1
   13874:	1091eb04 	addi	r2,r2,18348
   13878:	e0bfff15 	stw	r2,-4(fp)
   1387c:	00000606 	br	13898 <_do_ctors+0x38>
        (*ctor) (); 
   13880:	e0bfff17 	ldw	r2,-4(fp)
   13884:	10800017 	ldw	r2,0(r2)
   13888:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1388c:	e0bfff17 	ldw	r2,-4(fp)
   13890:	10bfff04 	addi	r2,r2,-4
   13894:	e0bfff15 	stw	r2,-4(fp)
   13898:	e0ffff17 	ldw	r3,-4(fp)
   1389c:	00800074 	movhi	r2,1
   138a0:	1091ec04 	addi	r2,r2,18352
   138a4:	18bff62e 	bgeu	r3,r2,13880 <_do_ctors+0x20>
        (*ctor) (); 
}
   138a8:	0001883a 	nop
   138ac:	e037883a 	mov	sp,fp
   138b0:	dfc00117 	ldw	ra,4(sp)
   138b4:	df000017 	ldw	fp,0(sp)
   138b8:	dec00204 	addi	sp,sp,8
   138bc:	f800283a 	ret

000138c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   138c0:	defffd04 	addi	sp,sp,-12
   138c4:	dfc00215 	stw	ra,8(sp)
   138c8:	df000115 	stw	fp,4(sp)
   138cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   138d0:	00800074 	movhi	r2,1
   138d4:	1091eb04 	addi	r2,r2,18348
   138d8:	e0bfff15 	stw	r2,-4(fp)
   138dc:	00000606 	br	138f8 <_do_dtors+0x38>
        (*dtor) (); 
   138e0:	e0bfff17 	ldw	r2,-4(fp)
   138e4:	10800017 	ldw	r2,0(r2)
   138e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   138ec:	e0bfff17 	ldw	r2,-4(fp)
   138f0:	10bfff04 	addi	r2,r2,-4
   138f4:	e0bfff15 	stw	r2,-4(fp)
   138f8:	e0ffff17 	ldw	r3,-4(fp)
   138fc:	00800074 	movhi	r2,1
   13900:	1091ec04 	addi	r2,r2,18352
   13904:	18bff62e 	bgeu	r3,r2,138e0 <_do_dtors+0x20>
        (*dtor) (); 
}
   13908:	0001883a 	nop
   1390c:	e037883a 	mov	sp,fp
   13910:	dfc00117 	ldw	ra,4(sp)
   13914:	df000017 	ldw	fp,0(sp)
   13918:	dec00204 	addi	sp,sp,8
   1391c:	f800283a 	ret

00013920 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13920:	defffe04 	addi	sp,sp,-8
   13924:	dfc00115 	stw	ra,4(sp)
   13928:	df000015 	stw	fp,0(sp)
   1392c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13930:	01440004 	movi	r5,4096
   13934:	0009883a 	mov	r4,zero
   13938:	001438c0 	call	1438c <alt_icache_flush>
#endif
}
   1393c:	0001883a 	nop
   13940:	e037883a 	mov	sp,fp
   13944:	dfc00117 	ldw	ra,4(sp)
   13948:	df000017 	ldw	fp,0(sp)
   1394c:	dec00204 	addi	sp,sp,8
   13950:	f800283a 	ret

00013954 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13954:	defff904 	addi	sp,sp,-28
   13958:	dfc00615 	stw	ra,24(sp)
   1395c:	df000515 	stw	fp,20(sp)
   13960:	df000504 	addi	fp,sp,20
   13964:	e13ffc15 	stw	r4,-16(fp)
   13968:	e17ffd15 	stw	r5,-12(fp)
   1396c:	e1bffe15 	stw	r6,-8(fp)
   13970:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13974:	e0800217 	ldw	r2,8(fp)
   13978:	d8800015 	stw	r2,0(sp)
   1397c:	e1ffff17 	ldw	r7,-4(fp)
   13980:	e1bffe17 	ldw	r6,-8(fp)
   13984:	e17ffd17 	ldw	r5,-12(fp)
   13988:	e13ffc17 	ldw	r4,-16(fp)
   1398c:	0013b040 	call	13b04 <alt_iic_isr_register>
}  
   13990:	e037883a 	mov	sp,fp
   13994:	dfc00117 	ldw	ra,4(sp)
   13998:	df000017 	ldw	fp,0(sp)
   1399c:	dec00204 	addi	sp,sp,8
   139a0:	f800283a 	ret

000139a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   139a4:	defff904 	addi	sp,sp,-28
   139a8:	df000615 	stw	fp,24(sp)
   139ac:	df000604 	addi	fp,sp,24
   139b0:	e13ffe15 	stw	r4,-8(fp)
   139b4:	e17fff15 	stw	r5,-4(fp)
   139b8:	e0bfff17 	ldw	r2,-4(fp)
   139bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139c0:	0005303a 	rdctl	r2,status
   139c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139c8:	e0fffb17 	ldw	r3,-20(fp)
   139cc:	00bfff84 	movi	r2,-2
   139d0:	1884703a 	and	r2,r3,r2
   139d4:	1001703a 	wrctl	status,r2
  
  return context;
   139d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   139dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   139e0:	00c00044 	movi	r3,1
   139e4:	e0bffa17 	ldw	r2,-24(fp)
   139e8:	1884983a 	sll	r2,r3,r2
   139ec:	1007883a 	mov	r3,r2
   139f0:	d0a72617 	ldw	r2,-25448(gp)
   139f4:	1884b03a 	or	r2,r3,r2
   139f8:	d0a72615 	stw	r2,-25448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   139fc:	d0a72617 	ldw	r2,-25448(gp)
   13a00:	100170fa 	wrctl	ienable,r2
   13a04:	e0bffc17 	ldw	r2,-16(fp)
   13a08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a0c:	e0bffd17 	ldw	r2,-12(fp)
   13a10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13a14:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   13a18:	0001883a 	nop
}
   13a1c:	e037883a 	mov	sp,fp
   13a20:	df000017 	ldw	fp,0(sp)
   13a24:	dec00104 	addi	sp,sp,4
   13a28:	f800283a 	ret

00013a2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13a2c:	defff904 	addi	sp,sp,-28
   13a30:	df000615 	stw	fp,24(sp)
   13a34:	df000604 	addi	fp,sp,24
   13a38:	e13ffe15 	stw	r4,-8(fp)
   13a3c:	e17fff15 	stw	r5,-4(fp)
   13a40:	e0bfff17 	ldw	r2,-4(fp)
   13a44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a48:	0005303a 	rdctl	r2,status
   13a4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a50:	e0fffb17 	ldw	r3,-20(fp)
   13a54:	00bfff84 	movi	r2,-2
   13a58:	1884703a 	and	r2,r3,r2
   13a5c:	1001703a 	wrctl	status,r2
  
  return context;
   13a60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13a64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13a68:	00c00044 	movi	r3,1
   13a6c:	e0bffa17 	ldw	r2,-24(fp)
   13a70:	1884983a 	sll	r2,r3,r2
   13a74:	0084303a 	nor	r2,zero,r2
   13a78:	1007883a 	mov	r3,r2
   13a7c:	d0a72617 	ldw	r2,-25448(gp)
   13a80:	1884703a 	and	r2,r3,r2
   13a84:	d0a72615 	stw	r2,-25448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13a88:	d0a72617 	ldw	r2,-25448(gp)
   13a8c:	100170fa 	wrctl	ienable,r2
   13a90:	e0bffc17 	ldw	r2,-16(fp)
   13a94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a98:	e0bffd17 	ldw	r2,-12(fp)
   13a9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13aa0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   13aa4:	0001883a 	nop
}
   13aa8:	e037883a 	mov	sp,fp
   13aac:	df000017 	ldw	fp,0(sp)
   13ab0:	dec00104 	addi	sp,sp,4
   13ab4:	f800283a 	ret

00013ab8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13ab8:	defffc04 	addi	sp,sp,-16
   13abc:	df000315 	stw	fp,12(sp)
   13ac0:	df000304 	addi	fp,sp,12
   13ac4:	e13ffe15 	stw	r4,-8(fp)
   13ac8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13acc:	000530fa 	rdctl	r2,ienable
   13ad0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13ad4:	00c00044 	movi	r3,1
   13ad8:	e0bfff17 	ldw	r2,-4(fp)
   13adc:	1884983a 	sll	r2,r3,r2
   13ae0:	1007883a 	mov	r3,r2
   13ae4:	e0bffd17 	ldw	r2,-12(fp)
   13ae8:	1884703a 	and	r2,r3,r2
   13aec:	1004c03a 	cmpne	r2,r2,zero
   13af0:	10803fcc 	andi	r2,r2,255
}
   13af4:	e037883a 	mov	sp,fp
   13af8:	df000017 	ldw	fp,0(sp)
   13afc:	dec00104 	addi	sp,sp,4
   13b00:	f800283a 	ret

00013b04 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13b04:	defff504 	addi	sp,sp,-44
   13b08:	dfc00a15 	stw	ra,40(sp)
   13b0c:	df000915 	stw	fp,36(sp)
   13b10:	df000904 	addi	fp,sp,36
   13b14:	e13ffc15 	stw	r4,-16(fp)
   13b18:	e17ffd15 	stw	r5,-12(fp)
   13b1c:	e1bffe15 	stw	r6,-8(fp)
   13b20:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13b24:	00bffa84 	movi	r2,-22
   13b28:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13b2c:	e0bffd17 	ldw	r2,-12(fp)
   13b30:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13b34:	e0bff817 	ldw	r2,-32(fp)
   13b38:	10800808 	cmpgei	r2,r2,32
   13b3c:	1000271e 	bne	r2,zero,13bdc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b40:	0005303a 	rdctl	r2,status
   13b44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b48:	e0fffb17 	ldw	r3,-20(fp)
   13b4c:	00bfff84 	movi	r2,-2
   13b50:	1884703a 	and	r2,r3,r2
   13b54:	1001703a 	wrctl	status,r2
  
  return context;
   13b58:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13b5c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   13b60:	008000b4 	movhi	r2,2
   13b64:	10a36204 	addi	r2,r2,-29304
   13b68:	e0fff817 	ldw	r3,-32(fp)
   13b6c:	180690fa 	slli	r3,r3,3
   13b70:	10c5883a 	add	r2,r2,r3
   13b74:	e0fffe17 	ldw	r3,-8(fp)
   13b78:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   13b7c:	008000b4 	movhi	r2,2
   13b80:	10a36204 	addi	r2,r2,-29304
   13b84:	e0fff817 	ldw	r3,-32(fp)
   13b88:	180690fa 	slli	r3,r3,3
   13b8c:	10c5883a 	add	r2,r2,r3
   13b90:	10800104 	addi	r2,r2,4
   13b94:	e0ffff17 	ldw	r3,-4(fp)
   13b98:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13b9c:	e0bffe17 	ldw	r2,-8(fp)
   13ba0:	10000526 	beq	r2,zero,13bb8 <alt_iic_isr_register+0xb4>
   13ba4:	e0bff817 	ldw	r2,-32(fp)
   13ba8:	100b883a 	mov	r5,r2
   13bac:	e13ffc17 	ldw	r4,-16(fp)
   13bb0:	00139a40 	call	139a4 <alt_ic_irq_enable>
   13bb4:	00000406 	br	13bc8 <alt_iic_isr_register+0xc4>
   13bb8:	e0bff817 	ldw	r2,-32(fp)
   13bbc:	100b883a 	mov	r5,r2
   13bc0:	e13ffc17 	ldw	r4,-16(fp)
   13bc4:	0013a2c0 	call	13a2c <alt_ic_irq_disable>
   13bc8:	e0bff715 	stw	r2,-36(fp)
   13bcc:	e0bffa17 	ldw	r2,-24(fp)
   13bd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bd4:	e0bff917 	ldw	r2,-28(fp)
   13bd8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13bdc:	e0bff717 	ldw	r2,-36(fp)
}
   13be0:	e037883a 	mov	sp,fp
   13be4:	dfc00117 	ldw	ra,4(sp)
   13be8:	df000017 	ldw	fp,0(sp)
   13bec:	dec00204 	addi	sp,sp,8
   13bf0:	f800283a 	ret

00013bf4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13bf4:	defff904 	addi	sp,sp,-28
   13bf8:	dfc00615 	stw	ra,24(sp)
   13bfc:	df000515 	stw	fp,20(sp)
   13c00:	df000504 	addi	fp,sp,20
   13c04:	e13ffc15 	stw	r4,-16(fp)
   13c08:	e17ffd15 	stw	r5,-12(fp)
   13c0c:	e1bffe15 	stw	r6,-8(fp)
   13c10:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   13c14:	e1bfff17 	ldw	r6,-4(fp)
   13c18:	e17ffe17 	ldw	r5,-8(fp)
   13c1c:	e13ffd17 	ldw	r4,-12(fp)
   13c20:	0013e340 	call	13e34 <open>
   13c24:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   13c28:	e0bffb17 	ldw	r2,-20(fp)
   13c2c:	10001c16 	blt	r2,zero,13ca0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   13c30:	00800074 	movhi	r2,1
   13c34:	10976f04 	addi	r2,r2,23996
   13c38:	e0fffb17 	ldw	r3,-20(fp)
   13c3c:	18c00324 	muli	r3,r3,12
   13c40:	10c5883a 	add	r2,r2,r3
   13c44:	10c00017 	ldw	r3,0(r2)
   13c48:	e0bffc17 	ldw	r2,-16(fp)
   13c4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13c50:	00800074 	movhi	r2,1
   13c54:	10976f04 	addi	r2,r2,23996
   13c58:	e0fffb17 	ldw	r3,-20(fp)
   13c5c:	18c00324 	muli	r3,r3,12
   13c60:	10c5883a 	add	r2,r2,r3
   13c64:	10800104 	addi	r2,r2,4
   13c68:	10c00017 	ldw	r3,0(r2)
   13c6c:	e0bffc17 	ldw	r2,-16(fp)
   13c70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13c74:	00800074 	movhi	r2,1
   13c78:	10976f04 	addi	r2,r2,23996
   13c7c:	e0fffb17 	ldw	r3,-20(fp)
   13c80:	18c00324 	muli	r3,r3,12
   13c84:	10c5883a 	add	r2,r2,r3
   13c88:	10800204 	addi	r2,r2,8
   13c8c:	10c00017 	ldw	r3,0(r2)
   13c90:	e0bffc17 	ldw	r2,-16(fp)
   13c94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13c98:	e13ffb17 	ldw	r4,-20(fp)
   13c9c:	001171c0 	call	1171c <alt_release_fd>
  }
} 
   13ca0:	0001883a 	nop
   13ca4:	e037883a 	mov	sp,fp
   13ca8:	dfc00117 	ldw	ra,4(sp)
   13cac:	df000017 	ldw	fp,0(sp)
   13cb0:	dec00204 	addi	sp,sp,8
   13cb4:	f800283a 	ret

00013cb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13cb8:	defffb04 	addi	sp,sp,-20
   13cbc:	dfc00415 	stw	ra,16(sp)
   13cc0:	df000315 	stw	fp,12(sp)
   13cc4:	df000304 	addi	fp,sp,12
   13cc8:	e13ffd15 	stw	r4,-12(fp)
   13ccc:	e17ffe15 	stw	r5,-8(fp)
   13cd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13cd4:	01c07fc4 	movi	r7,511
   13cd8:	01800044 	movi	r6,1
   13cdc:	e17ffd17 	ldw	r5,-12(fp)
   13ce0:	01000074 	movhi	r4,1
   13ce4:	21177204 	addi	r4,r4,24008
   13ce8:	0013bf40 	call	13bf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13cec:	01c07fc4 	movi	r7,511
   13cf0:	000d883a 	mov	r6,zero
   13cf4:	e17ffe17 	ldw	r5,-8(fp)
   13cf8:	01000074 	movhi	r4,1
   13cfc:	21176f04 	addi	r4,r4,23996
   13d00:	0013bf40 	call	13bf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13d04:	01c07fc4 	movi	r7,511
   13d08:	01800044 	movi	r6,1
   13d0c:	e17fff17 	ldw	r5,-4(fp)
   13d10:	01000074 	movhi	r4,1
   13d14:	21177504 	addi	r4,r4,24020
   13d18:	0013bf40 	call	13bf4 <alt_open_fd>
}  
   13d1c:	0001883a 	nop
   13d20:	e037883a 	mov	sp,fp
   13d24:	dfc00117 	ldw	ra,4(sp)
   13d28:	df000017 	ldw	fp,0(sp)
   13d2c:	dec00204 	addi	sp,sp,8
   13d30:	f800283a 	ret

00013d34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d34:	defffe04 	addi	sp,sp,-8
   13d38:	dfc00115 	stw	ra,4(sp)
   13d3c:	df000015 	stw	fp,0(sp)
   13d40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13d44:	d0a00b17 	ldw	r2,-32724(gp)
   13d48:	10000326 	beq	r2,zero,13d58 <alt_get_errno+0x24>
   13d4c:	d0a00b17 	ldw	r2,-32724(gp)
   13d50:	103ee83a 	callr	r2
   13d54:	00000106 	br	13d5c <alt_get_errno+0x28>
   13d58:	d0a72204 	addi	r2,gp,-25464
}
   13d5c:	e037883a 	mov	sp,fp
   13d60:	dfc00117 	ldw	ra,4(sp)
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00204 	addi	sp,sp,8
   13d6c:	f800283a 	ret

00013d70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13d70:	defffd04 	addi	sp,sp,-12
   13d74:	df000215 	stw	fp,8(sp)
   13d78:	df000204 	addi	fp,sp,8
   13d7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13d80:	e0bfff17 	ldw	r2,-4(fp)
   13d84:	10800217 	ldw	r2,8(r2)
   13d88:	10d00034 	orhi	r3,r2,16384
   13d8c:	e0bfff17 	ldw	r2,-4(fp)
   13d90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13d94:	e03ffe15 	stw	zero,-8(fp)
   13d98:	00001d06 	br	13e10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13d9c:	00800074 	movhi	r2,1
   13da0:	10976f04 	addi	r2,r2,23996
   13da4:	e0fffe17 	ldw	r3,-8(fp)
   13da8:	18c00324 	muli	r3,r3,12
   13dac:	10c5883a 	add	r2,r2,r3
   13db0:	10c00017 	ldw	r3,0(r2)
   13db4:	e0bfff17 	ldw	r2,-4(fp)
   13db8:	10800017 	ldw	r2,0(r2)
   13dbc:	1880111e 	bne	r3,r2,13e04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13dc0:	00800074 	movhi	r2,1
   13dc4:	10976f04 	addi	r2,r2,23996
   13dc8:	e0fffe17 	ldw	r3,-8(fp)
   13dcc:	18c00324 	muli	r3,r3,12
   13dd0:	10c5883a 	add	r2,r2,r3
   13dd4:	10800204 	addi	r2,r2,8
   13dd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13ddc:	1000090e 	bge	r2,zero,13e04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13de0:	e0bffe17 	ldw	r2,-8(fp)
   13de4:	10c00324 	muli	r3,r2,12
   13de8:	00800074 	movhi	r2,1
   13dec:	10976f04 	addi	r2,r2,23996
   13df0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13df4:	e0bfff17 	ldw	r2,-4(fp)
   13df8:	18800226 	beq	r3,r2,13e04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13dfc:	00bffcc4 	movi	r2,-13
   13e00:	00000806 	br	13e24 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13e04:	e0bffe17 	ldw	r2,-8(fp)
   13e08:	10800044 	addi	r2,r2,1
   13e0c:	e0bffe15 	stw	r2,-8(fp)
   13e10:	d0a00a17 	ldw	r2,-32728(gp)
   13e14:	1007883a 	mov	r3,r2
   13e18:	e0bffe17 	ldw	r2,-8(fp)
   13e1c:	18bfdf2e 	bgeu	r3,r2,13d9c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13e20:	0005883a 	mov	r2,zero
}
   13e24:	e037883a 	mov	sp,fp
   13e28:	df000017 	ldw	fp,0(sp)
   13e2c:	dec00104 	addi	sp,sp,4
   13e30:	f800283a 	ret

00013e34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13e34:	defff604 	addi	sp,sp,-40
   13e38:	dfc00915 	stw	ra,36(sp)
   13e3c:	df000815 	stw	fp,32(sp)
   13e40:	df000804 	addi	fp,sp,32
   13e44:	e13ffd15 	stw	r4,-12(fp)
   13e48:	e17ffe15 	stw	r5,-8(fp)
   13e4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13e50:	00bfffc4 	movi	r2,-1
   13e54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13e58:	00bffb44 	movi	r2,-19
   13e5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13e60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13e64:	d1600804 	addi	r5,gp,-32736
   13e68:	e13ffd17 	ldw	r4,-12(fp)
   13e6c:	00141500 	call	14150 <alt_find_dev>
   13e70:	e0bff815 	stw	r2,-32(fp)
   13e74:	e0bff817 	ldw	r2,-32(fp)
   13e78:	1000051e 	bne	r2,zero,13e90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13e7c:	e13ffd17 	ldw	r4,-12(fp)
   13e80:	00141e00 	call	141e0 <alt_find_file>
   13e84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13e88:	00800044 	movi	r2,1
   13e8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13e90:	e0bff817 	ldw	r2,-32(fp)
   13e94:	10002926 	beq	r2,zero,13f3c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13e98:	e13ff817 	ldw	r4,-32(fp)
   13e9c:	00142e80 	call	142e8 <alt_get_fd>
   13ea0:	e0bff915 	stw	r2,-28(fp)
   13ea4:	e0bff917 	ldw	r2,-28(fp)
   13ea8:	1000030e 	bge	r2,zero,13eb8 <open+0x84>
    {
      status = index;
   13eac:	e0bff917 	ldw	r2,-28(fp)
   13eb0:	e0bffa15 	stw	r2,-24(fp)
   13eb4:	00002306 	br	13f44 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   13eb8:	e0bff917 	ldw	r2,-28(fp)
   13ebc:	10c00324 	muli	r3,r2,12
   13ec0:	00800074 	movhi	r2,1
   13ec4:	10976f04 	addi	r2,r2,23996
   13ec8:	1885883a 	add	r2,r3,r2
   13ecc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13ed0:	e0fffe17 	ldw	r3,-8(fp)
   13ed4:	00900034 	movhi	r2,16384
   13ed8:	10bfffc4 	addi	r2,r2,-1
   13edc:	1886703a 	and	r3,r3,r2
   13ee0:	e0bffc17 	ldw	r2,-16(fp)
   13ee4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13ee8:	e0bffb17 	ldw	r2,-20(fp)
   13eec:	1000051e 	bne	r2,zero,13f04 <open+0xd0>
   13ef0:	e13ffc17 	ldw	r4,-16(fp)
   13ef4:	0013d700 	call	13d70 <alt_file_locked>
   13ef8:	e0bffa15 	stw	r2,-24(fp)
   13efc:	e0bffa17 	ldw	r2,-24(fp)
   13f00:	10001016 	blt	r2,zero,13f44 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13f04:	e0bff817 	ldw	r2,-32(fp)
   13f08:	10800317 	ldw	r2,12(r2)
   13f0c:	10000826 	beq	r2,zero,13f30 <open+0xfc>
   13f10:	e0bff817 	ldw	r2,-32(fp)
   13f14:	10800317 	ldw	r2,12(r2)
   13f18:	e1ffff17 	ldw	r7,-4(fp)
   13f1c:	e1bffe17 	ldw	r6,-8(fp)
   13f20:	e17ffd17 	ldw	r5,-12(fp)
   13f24:	e13ffc17 	ldw	r4,-16(fp)
   13f28:	103ee83a 	callr	r2
   13f2c:	00000106 	br	13f34 <open+0x100>
   13f30:	0005883a 	mov	r2,zero
   13f34:	e0bffa15 	stw	r2,-24(fp)
   13f38:	00000206 	br	13f44 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13f3c:	00bffb44 	movi	r2,-19
   13f40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13f44:	e0bffa17 	ldw	r2,-24(fp)
   13f48:	1000090e 	bge	r2,zero,13f70 <open+0x13c>
  {
    alt_release_fd (index);  
   13f4c:	e13ff917 	ldw	r4,-28(fp)
   13f50:	001171c0 	call	1171c <alt_release_fd>
    ALT_ERRNO = -status;
   13f54:	0013d340 	call	13d34 <alt_get_errno>
   13f58:	1007883a 	mov	r3,r2
   13f5c:	e0bffa17 	ldw	r2,-24(fp)
   13f60:	0085c83a 	sub	r2,zero,r2
   13f64:	18800015 	stw	r2,0(r3)
    return -1;
   13f68:	00bfffc4 	movi	r2,-1
   13f6c:	00000106 	br	13f74 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   13f70:	e0bff917 	ldw	r2,-28(fp)
}
   13f74:	e037883a 	mov	sp,fp
   13f78:	dfc00117 	ldw	ra,4(sp)
   13f7c:	df000017 	ldw	fp,0(sp)
   13f80:	dec00204 	addi	sp,sp,8
   13f84:	f800283a 	ret

00013f88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13f88:	defffa04 	addi	sp,sp,-24
   13f8c:	df000515 	stw	fp,20(sp)
   13f90:	df000504 	addi	fp,sp,20
   13f94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f98:	0005303a 	rdctl	r2,status
   13f9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fa0:	e0fffc17 	ldw	r3,-16(fp)
   13fa4:	00bfff84 	movi	r2,-2
   13fa8:	1884703a 	and	r2,r3,r2
   13fac:	1001703a 	wrctl	status,r2
  
  return context;
   13fb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13fb4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   13fb8:	e0bfff17 	ldw	r2,-4(fp)
   13fbc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13fc0:	e0bffd17 	ldw	r2,-12(fp)
   13fc4:	10800017 	ldw	r2,0(r2)
   13fc8:	e0fffd17 	ldw	r3,-12(fp)
   13fcc:	18c00117 	ldw	r3,4(r3)
   13fd0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   13fd4:	e0bffd17 	ldw	r2,-12(fp)
   13fd8:	10800117 	ldw	r2,4(r2)
   13fdc:	e0fffd17 	ldw	r3,-12(fp)
   13fe0:	18c00017 	ldw	r3,0(r3)
   13fe4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13fe8:	e0bffd17 	ldw	r2,-12(fp)
   13fec:	e0fffd17 	ldw	r3,-12(fp)
   13ff0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   13ff4:	e0bffd17 	ldw	r2,-12(fp)
   13ff8:	e0fffd17 	ldw	r3,-12(fp)
   13ffc:	10c00015 	stw	r3,0(r2)
   14000:	e0bffb17 	ldw	r2,-20(fp)
   14004:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14008:	e0bffe17 	ldw	r2,-8(fp)
   1400c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14010:	0001883a 	nop
   14014:	e037883a 	mov	sp,fp
   14018:	df000017 	ldw	fp,0(sp)
   1401c:	dec00104 	addi	sp,sp,4
   14020:	f800283a 	ret

00014024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14024:	defffb04 	addi	sp,sp,-20
   14028:	dfc00415 	stw	ra,16(sp)
   1402c:	df000315 	stw	fp,12(sp)
   14030:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14034:	d0a00f17 	ldw	r2,-32708(gp)
   14038:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1403c:	d0a72817 	ldw	r2,-25440(gp)
   14040:	10800044 	addi	r2,r2,1
   14044:	d0a72815 	stw	r2,-25440(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14048:	00002e06 	br	14104 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1404c:	e0bffd17 	ldw	r2,-12(fp)
   14050:	10800017 	ldw	r2,0(r2)
   14054:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14058:	e0bffd17 	ldw	r2,-12(fp)
   1405c:	10800403 	ldbu	r2,16(r2)
   14060:	10803fcc 	andi	r2,r2,255
   14064:	10000426 	beq	r2,zero,14078 <alt_tick+0x54>
   14068:	d0a72817 	ldw	r2,-25440(gp)
   1406c:	1000021e 	bne	r2,zero,14078 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14070:	e0bffd17 	ldw	r2,-12(fp)
   14074:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14078:	e0bffd17 	ldw	r2,-12(fp)
   1407c:	10800217 	ldw	r2,8(r2)
   14080:	d0e72817 	ldw	r3,-25440(gp)
   14084:	18801d36 	bltu	r3,r2,140fc <alt_tick+0xd8>
   14088:	e0bffd17 	ldw	r2,-12(fp)
   1408c:	10800403 	ldbu	r2,16(r2)
   14090:	10803fcc 	andi	r2,r2,255
   14094:	1000191e 	bne	r2,zero,140fc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14098:	e0bffd17 	ldw	r2,-12(fp)
   1409c:	10800317 	ldw	r2,12(r2)
   140a0:	e0fffd17 	ldw	r3,-12(fp)
   140a4:	18c00517 	ldw	r3,20(r3)
   140a8:	1809883a 	mov	r4,r3
   140ac:	103ee83a 	callr	r2
   140b0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   140b4:	e0bfff17 	ldw	r2,-4(fp)
   140b8:	1000031e 	bne	r2,zero,140c8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   140bc:	e13ffd17 	ldw	r4,-12(fp)
   140c0:	0013f880 	call	13f88 <alt_alarm_stop>
   140c4:	00000d06 	br	140fc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   140c8:	e0bffd17 	ldw	r2,-12(fp)
   140cc:	10c00217 	ldw	r3,8(r2)
   140d0:	e0bfff17 	ldw	r2,-4(fp)
   140d4:	1887883a 	add	r3,r3,r2
   140d8:	e0bffd17 	ldw	r2,-12(fp)
   140dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   140e0:	e0bffd17 	ldw	r2,-12(fp)
   140e4:	10c00217 	ldw	r3,8(r2)
   140e8:	d0a72817 	ldw	r2,-25440(gp)
   140ec:	1880032e 	bgeu	r3,r2,140fc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   140f0:	e0bffd17 	ldw	r2,-12(fp)
   140f4:	00c00044 	movi	r3,1
   140f8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   140fc:	e0bffe17 	ldw	r2,-8(fp)
   14100:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14104:	e0fffd17 	ldw	r3,-12(fp)
   14108:	d0a00f04 	addi	r2,gp,-32708
   1410c:	18bfcf1e 	bne	r3,r2,1404c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14110:	0001883a 	nop
}
   14114:	0001883a 	nop
   14118:	e037883a 	mov	sp,fp
   1411c:	dfc00117 	ldw	ra,4(sp)
   14120:	df000017 	ldw	fp,0(sp)
   14124:	dec00204 	addi	sp,sp,8
   14128:	f800283a 	ret

0001412c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1412c:	deffff04 	addi	sp,sp,-4
   14130:	df000015 	stw	fp,0(sp)
   14134:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14138:	000170fa 	wrctl	ienable,zero
}
   1413c:	0001883a 	nop
   14140:	e037883a 	mov	sp,fp
   14144:	df000017 	ldw	fp,0(sp)
   14148:	dec00104 	addi	sp,sp,4
   1414c:	f800283a 	ret

00014150 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14150:	defffa04 	addi	sp,sp,-24
   14154:	dfc00515 	stw	ra,20(sp)
   14158:	df000415 	stw	fp,16(sp)
   1415c:	df000404 	addi	fp,sp,16
   14160:	e13ffe15 	stw	r4,-8(fp)
   14164:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14168:	e0bfff17 	ldw	r2,-4(fp)
   1416c:	10800017 	ldw	r2,0(r2)
   14170:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14174:	e13ffe17 	ldw	r4,-8(fp)
   14178:	00048980 	call	4898 <strlen>
   1417c:	10800044 	addi	r2,r2,1
   14180:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14184:	00000d06 	br	141bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14188:	e0bffc17 	ldw	r2,-16(fp)
   1418c:	10800217 	ldw	r2,8(r2)
   14190:	e0fffd17 	ldw	r3,-12(fp)
   14194:	180d883a 	mov	r6,r3
   14198:	e17ffe17 	ldw	r5,-8(fp)
   1419c:	1009883a 	mov	r4,r2
   141a0:	00144680 	call	14468 <memcmp>
   141a4:	1000021e 	bne	r2,zero,141b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   141a8:	e0bffc17 	ldw	r2,-16(fp)
   141ac:	00000706 	br	141cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   141b0:	e0bffc17 	ldw	r2,-16(fp)
   141b4:	10800017 	ldw	r2,0(r2)
   141b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   141bc:	e0fffc17 	ldw	r3,-16(fp)
   141c0:	e0bfff17 	ldw	r2,-4(fp)
   141c4:	18bff01e 	bne	r3,r2,14188 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   141c8:	0005883a 	mov	r2,zero
}
   141cc:	e037883a 	mov	sp,fp
   141d0:	dfc00117 	ldw	ra,4(sp)
   141d4:	df000017 	ldw	fp,0(sp)
   141d8:	dec00204 	addi	sp,sp,8
   141dc:	f800283a 	ret

000141e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   141e0:	defffb04 	addi	sp,sp,-20
   141e4:	dfc00415 	stw	ra,16(sp)
   141e8:	df000315 	stw	fp,12(sp)
   141ec:	df000304 	addi	fp,sp,12
   141f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   141f4:	d0a00617 	ldw	r2,-32744(gp)
   141f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   141fc:	00003106 	br	142c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   14200:	e0bffd17 	ldw	r2,-12(fp)
   14204:	10800217 	ldw	r2,8(r2)
   14208:	1009883a 	mov	r4,r2
   1420c:	00048980 	call	4898 <strlen>
   14210:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14214:	e0bffd17 	ldw	r2,-12(fp)
   14218:	10c00217 	ldw	r3,8(r2)
   1421c:	e0bffe17 	ldw	r2,-8(fp)
   14220:	10bfffc4 	addi	r2,r2,-1
   14224:	1885883a 	add	r2,r3,r2
   14228:	10800003 	ldbu	r2,0(r2)
   1422c:	10803fcc 	andi	r2,r2,255
   14230:	1080201c 	xori	r2,r2,128
   14234:	10bfe004 	addi	r2,r2,-128
   14238:	10800bd8 	cmpnei	r2,r2,47
   1423c:	1000031e 	bne	r2,zero,1424c <alt_find_file+0x6c>
    {
      len -= 1;
   14240:	e0bffe17 	ldw	r2,-8(fp)
   14244:	10bfffc4 	addi	r2,r2,-1
   14248:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1424c:	e0bffe17 	ldw	r2,-8(fp)
   14250:	e0ffff17 	ldw	r3,-4(fp)
   14254:	1885883a 	add	r2,r3,r2
   14258:	10800003 	ldbu	r2,0(r2)
   1425c:	10803fcc 	andi	r2,r2,255
   14260:	1080201c 	xori	r2,r2,128
   14264:	10bfe004 	addi	r2,r2,-128
   14268:	10800be0 	cmpeqi	r2,r2,47
   1426c:	1000081e 	bne	r2,zero,14290 <alt_find_file+0xb0>
   14270:	e0bffe17 	ldw	r2,-8(fp)
   14274:	e0ffff17 	ldw	r3,-4(fp)
   14278:	1885883a 	add	r2,r3,r2
   1427c:	10800003 	ldbu	r2,0(r2)
   14280:	10803fcc 	andi	r2,r2,255
   14284:	1080201c 	xori	r2,r2,128
   14288:	10bfe004 	addi	r2,r2,-128
   1428c:	10000a1e 	bne	r2,zero,142b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   14290:	e0bffd17 	ldw	r2,-12(fp)
   14294:	10800217 	ldw	r2,8(r2)
   14298:	e0fffe17 	ldw	r3,-8(fp)
   1429c:	180d883a 	mov	r6,r3
   142a0:	e17fff17 	ldw	r5,-4(fp)
   142a4:	1009883a 	mov	r4,r2
   142a8:	00144680 	call	14468 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   142ac:	1000021e 	bne	r2,zero,142b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   142b0:	e0bffd17 	ldw	r2,-12(fp)
   142b4:	00000706 	br	142d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   142b8:	e0bffd17 	ldw	r2,-12(fp)
   142bc:	10800017 	ldw	r2,0(r2)
   142c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   142c4:	e0fffd17 	ldw	r3,-12(fp)
   142c8:	d0a00604 	addi	r2,gp,-32744
   142cc:	18bfcc1e 	bne	r3,r2,14200 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   142d0:	0005883a 	mov	r2,zero
}
   142d4:	e037883a 	mov	sp,fp
   142d8:	dfc00117 	ldw	ra,4(sp)
   142dc:	df000017 	ldw	fp,0(sp)
   142e0:	dec00204 	addi	sp,sp,8
   142e4:	f800283a 	ret

000142e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   142e8:	defffc04 	addi	sp,sp,-16
   142ec:	df000315 	stw	fp,12(sp)
   142f0:	df000304 	addi	fp,sp,12
   142f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   142f8:	00bffa04 	movi	r2,-24
   142fc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14300:	e03ffd15 	stw	zero,-12(fp)
   14304:	00001906 	br	1436c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   14308:	00800074 	movhi	r2,1
   1430c:	10976f04 	addi	r2,r2,23996
   14310:	e0fffd17 	ldw	r3,-12(fp)
   14314:	18c00324 	muli	r3,r3,12
   14318:	10c5883a 	add	r2,r2,r3
   1431c:	10800017 	ldw	r2,0(r2)
   14320:	10000f1e 	bne	r2,zero,14360 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   14324:	00800074 	movhi	r2,1
   14328:	10976f04 	addi	r2,r2,23996
   1432c:	e0fffd17 	ldw	r3,-12(fp)
   14330:	18c00324 	muli	r3,r3,12
   14334:	10c5883a 	add	r2,r2,r3
   14338:	e0ffff17 	ldw	r3,-4(fp)
   1433c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   14340:	d0e00a17 	ldw	r3,-32728(gp)
   14344:	e0bffd17 	ldw	r2,-12(fp)
   14348:	1880020e 	bge	r3,r2,14354 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1434c:	e0bffd17 	ldw	r2,-12(fp)
   14350:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   14354:	e0bffd17 	ldw	r2,-12(fp)
   14358:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1435c:	00000606 	br	14378 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14360:	e0bffd17 	ldw	r2,-12(fp)
   14364:	10800044 	addi	r2,r2,1
   14368:	e0bffd15 	stw	r2,-12(fp)
   1436c:	e0bffd17 	ldw	r2,-12(fp)
   14370:	10800810 	cmplti	r2,r2,32
   14374:	103fe41e 	bne	r2,zero,14308 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14378:	e0bffe17 	ldw	r2,-8(fp)
}
   1437c:	e037883a 	mov	sp,fp
   14380:	df000017 	ldw	fp,0(sp)
   14384:	dec00104 	addi	sp,sp,4
   14388:	f800283a 	ret

0001438c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1438c:	defffb04 	addi	sp,sp,-20
   14390:	df000415 	stw	fp,16(sp)
   14394:	df000404 	addi	fp,sp,16
   14398:	e13ffe15 	stw	r4,-8(fp)
   1439c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   143a0:	e0bfff17 	ldw	r2,-4(fp)
   143a4:	10840070 	cmpltui	r2,r2,4097
   143a8:	1000021e 	bne	r2,zero,143b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   143ac:	00840004 	movi	r2,4096
   143b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   143b4:	e0fffe17 	ldw	r3,-8(fp)
   143b8:	e0bfff17 	ldw	r2,-4(fp)
   143bc:	1885883a 	add	r2,r3,r2
   143c0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   143c4:	e0bffe17 	ldw	r2,-8(fp)
   143c8:	e0bffc15 	stw	r2,-16(fp)
   143cc:	00000506 	br	143e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   143d0:	e0bffc17 	ldw	r2,-16(fp)
   143d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   143d8:	e0bffc17 	ldw	r2,-16(fp)
   143dc:	10800804 	addi	r2,r2,32
   143e0:	e0bffc15 	stw	r2,-16(fp)
   143e4:	e0fffc17 	ldw	r3,-16(fp)
   143e8:	e0bffd17 	ldw	r2,-12(fp)
   143ec:	18bff836 	bltu	r3,r2,143d0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   143f0:	e0bffe17 	ldw	r2,-8(fp)
   143f4:	108007cc 	andi	r2,r2,31
   143f8:	10000226 	beq	r2,zero,14404 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   143fc:	e0bffc17 	ldw	r2,-16(fp)
   14400:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   14404:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   14408:	0001883a 	nop
   1440c:	e037883a 	mov	sp,fp
   14410:	df000017 	ldw	fp,0(sp)
   14414:	dec00104 	addi	sp,sp,4
   14418:	f800283a 	ret

0001441c <atexit>:
   1441c:	200b883a 	mov	r5,r4
   14420:	000f883a 	mov	r7,zero
   14424:	000d883a 	mov	r6,zero
   14428:	0009883a 	mov	r4,zero
   1442c:	00144e41 	jmpi	144e4 <__register_exitproc>

00014430 <exit>:
   14430:	defffe04 	addi	sp,sp,-8
   14434:	000b883a 	mov	r5,zero
   14438:	dc000015 	stw	r16,0(sp)
   1443c:	dfc00115 	stw	ra,4(sp)
   14440:	2021883a 	mov	r16,r4
   14444:	00145fc0 	call	145fc <__call_exitprocs>
   14448:	00800074 	movhi	r2,1
   1444c:	109c2f04 	addi	r2,r2,28860
   14450:	11000017 	ldw	r4,0(r2)
   14454:	20800f17 	ldw	r2,60(r4)
   14458:	10000126 	beq	r2,zero,14460 <exit+0x30>
   1445c:	103ee83a 	callr	r2
   14460:	8009883a 	mov	r4,r16
   14464:	001477c0 	call	1477c <_exit>

00014468 <memcmp>:
   14468:	01c000c4 	movi	r7,3
   1446c:	3980192e 	bgeu	r7,r6,144d4 <memcmp+0x6c>
   14470:	2144b03a 	or	r2,r4,r5
   14474:	11c4703a 	and	r2,r2,r7
   14478:	10000f26 	beq	r2,zero,144b8 <memcmp+0x50>
   1447c:	20800003 	ldbu	r2,0(r4)
   14480:	28c00003 	ldbu	r3,0(r5)
   14484:	10c0151e 	bne	r2,r3,144dc <memcmp+0x74>
   14488:	31bfff84 	addi	r6,r6,-2
   1448c:	01ffffc4 	movi	r7,-1
   14490:	00000406 	br	144a4 <memcmp+0x3c>
   14494:	20800003 	ldbu	r2,0(r4)
   14498:	28c00003 	ldbu	r3,0(r5)
   1449c:	31bfffc4 	addi	r6,r6,-1
   144a0:	10c00e1e 	bne	r2,r3,144dc <memcmp+0x74>
   144a4:	21000044 	addi	r4,r4,1
   144a8:	29400044 	addi	r5,r5,1
   144ac:	31fff91e 	bne	r6,r7,14494 <memcmp+0x2c>
   144b0:	0005883a 	mov	r2,zero
   144b4:	f800283a 	ret
   144b8:	20c00017 	ldw	r3,0(r4)
   144bc:	28800017 	ldw	r2,0(r5)
   144c0:	18bfee1e 	bne	r3,r2,1447c <memcmp+0x14>
   144c4:	31bfff04 	addi	r6,r6,-4
   144c8:	21000104 	addi	r4,r4,4
   144cc:	29400104 	addi	r5,r5,4
   144d0:	39bff936 	bltu	r7,r6,144b8 <memcmp+0x50>
   144d4:	303fe91e 	bne	r6,zero,1447c <memcmp+0x14>
   144d8:	003ff506 	br	144b0 <memcmp+0x48>
   144dc:	10c5c83a 	sub	r2,r2,r3
   144e0:	f800283a 	ret

000144e4 <__register_exitproc>:
   144e4:	defffa04 	addi	sp,sp,-24
   144e8:	dc000315 	stw	r16,12(sp)
   144ec:	04000074 	movhi	r16,1
   144f0:	841c2f04 	addi	r16,r16,28860
   144f4:	80c00017 	ldw	r3,0(r16)
   144f8:	dc400415 	stw	r17,16(sp)
   144fc:	dfc00515 	stw	ra,20(sp)
   14500:	18805217 	ldw	r2,328(r3)
   14504:	2023883a 	mov	r17,r4
   14508:	10003726 	beq	r2,zero,145e8 <__register_exitproc+0x104>
   1450c:	10c00117 	ldw	r3,4(r2)
   14510:	010007c4 	movi	r4,31
   14514:	20c00e16 	blt	r4,r3,14550 <__register_exitproc+0x6c>
   14518:	1a000044 	addi	r8,r3,1
   1451c:	8800221e 	bne	r17,zero,145a8 <__register_exitproc+0xc4>
   14520:	18c00084 	addi	r3,r3,2
   14524:	18c7883a 	add	r3,r3,r3
   14528:	18c7883a 	add	r3,r3,r3
   1452c:	12000115 	stw	r8,4(r2)
   14530:	10c7883a 	add	r3,r2,r3
   14534:	19400015 	stw	r5,0(r3)
   14538:	0005883a 	mov	r2,zero
   1453c:	dfc00517 	ldw	ra,20(sp)
   14540:	dc400417 	ldw	r17,16(sp)
   14544:	dc000317 	ldw	r16,12(sp)
   14548:	dec00604 	addi	sp,sp,24
   1454c:	f800283a 	ret
   14550:	00800034 	movhi	r2,0
   14554:	10800004 	addi	r2,r2,0
   14558:	10002626 	beq	r2,zero,145f4 <__register_exitproc+0x110>
   1455c:	01006404 	movi	r4,400
   14560:	d9400015 	stw	r5,0(sp)
   14564:	d9800115 	stw	r6,4(sp)
   14568:	d9c00215 	stw	r7,8(sp)
   1456c:	00000000 	call	0 <__alt_mem_sdram>
   14570:	d9400017 	ldw	r5,0(sp)
   14574:	d9800117 	ldw	r6,4(sp)
   14578:	d9c00217 	ldw	r7,8(sp)
   1457c:	10001d26 	beq	r2,zero,145f4 <__register_exitproc+0x110>
   14580:	81000017 	ldw	r4,0(r16)
   14584:	10000115 	stw	zero,4(r2)
   14588:	02000044 	movi	r8,1
   1458c:	22405217 	ldw	r9,328(r4)
   14590:	0007883a 	mov	r3,zero
   14594:	12400015 	stw	r9,0(r2)
   14598:	20805215 	stw	r2,328(r4)
   1459c:	10006215 	stw	zero,392(r2)
   145a0:	10006315 	stw	zero,396(r2)
   145a4:	883fde26 	beq	r17,zero,14520 <__register_exitproc+0x3c>
   145a8:	18c9883a 	add	r4,r3,r3
   145ac:	2109883a 	add	r4,r4,r4
   145b0:	1109883a 	add	r4,r2,r4
   145b4:	21802215 	stw	r6,136(r4)
   145b8:	01800044 	movi	r6,1
   145bc:	12406217 	ldw	r9,392(r2)
   145c0:	30cc983a 	sll	r6,r6,r3
   145c4:	4992b03a 	or	r9,r9,r6
   145c8:	12406215 	stw	r9,392(r2)
   145cc:	21c04215 	stw	r7,264(r4)
   145d0:	01000084 	movi	r4,2
   145d4:	893fd21e 	bne	r17,r4,14520 <__register_exitproc+0x3c>
   145d8:	11006317 	ldw	r4,396(r2)
   145dc:	218cb03a 	or	r6,r4,r6
   145e0:	11806315 	stw	r6,396(r2)
   145e4:	003fce06 	br	14520 <__register_exitproc+0x3c>
   145e8:	18805304 	addi	r2,r3,332
   145ec:	18805215 	stw	r2,328(r3)
   145f0:	003fc606 	br	1450c <__register_exitproc+0x28>
   145f4:	00bfffc4 	movi	r2,-1
   145f8:	003fd006 	br	1453c <__register_exitproc+0x58>

000145fc <__call_exitprocs>:
   145fc:	defff504 	addi	sp,sp,-44
   14600:	df000915 	stw	fp,36(sp)
   14604:	dd400615 	stw	r21,24(sp)
   14608:	dc800315 	stw	r18,12(sp)
   1460c:	dfc00a15 	stw	ra,40(sp)
   14610:	ddc00815 	stw	r23,32(sp)
   14614:	dd800715 	stw	r22,28(sp)
   14618:	dd000515 	stw	r20,20(sp)
   1461c:	dcc00415 	stw	r19,16(sp)
   14620:	dc400215 	stw	r17,8(sp)
   14624:	dc000115 	stw	r16,4(sp)
   14628:	d9000015 	stw	r4,0(sp)
   1462c:	2839883a 	mov	fp,r5
   14630:	04800044 	movi	r18,1
   14634:	057fffc4 	movi	r21,-1
   14638:	00800074 	movhi	r2,1
   1463c:	109c2f04 	addi	r2,r2,28860
   14640:	12000017 	ldw	r8,0(r2)
   14644:	45005217 	ldw	r20,328(r8)
   14648:	44c05204 	addi	r19,r8,328
   1464c:	a0001c26 	beq	r20,zero,146c0 <__call_exitprocs+0xc4>
   14650:	a0800117 	ldw	r2,4(r20)
   14654:	15ffffc4 	addi	r23,r2,-1
   14658:	b8000d16 	blt	r23,zero,14690 <__call_exitprocs+0x94>
   1465c:	14000044 	addi	r16,r2,1
   14660:	8421883a 	add	r16,r16,r16
   14664:	8421883a 	add	r16,r16,r16
   14668:	84402004 	addi	r17,r16,128
   1466c:	a463883a 	add	r17,r20,r17
   14670:	a421883a 	add	r16,r20,r16
   14674:	e0001e26 	beq	fp,zero,146f0 <__call_exitprocs+0xf4>
   14678:	80804017 	ldw	r2,256(r16)
   1467c:	e0801c26 	beq	fp,r2,146f0 <__call_exitprocs+0xf4>
   14680:	bdffffc4 	addi	r23,r23,-1
   14684:	843fff04 	addi	r16,r16,-4
   14688:	8c7fff04 	addi	r17,r17,-4
   1468c:	bd7ff91e 	bne	r23,r21,14674 <__call_exitprocs+0x78>
   14690:	00800034 	movhi	r2,0
   14694:	10800004 	addi	r2,r2,0
   14698:	10000926 	beq	r2,zero,146c0 <__call_exitprocs+0xc4>
   1469c:	a0800117 	ldw	r2,4(r20)
   146a0:	1000301e 	bne	r2,zero,14764 <__call_exitprocs+0x168>
   146a4:	a0800017 	ldw	r2,0(r20)
   146a8:	10003226 	beq	r2,zero,14774 <__call_exitprocs+0x178>
   146ac:	a009883a 	mov	r4,r20
   146b0:	98800015 	stw	r2,0(r19)
   146b4:	00000000 	call	0 <__alt_mem_sdram>
   146b8:	9d000017 	ldw	r20,0(r19)
   146bc:	a03fe41e 	bne	r20,zero,14650 <__call_exitprocs+0x54>
   146c0:	dfc00a17 	ldw	ra,40(sp)
   146c4:	df000917 	ldw	fp,36(sp)
   146c8:	ddc00817 	ldw	r23,32(sp)
   146cc:	dd800717 	ldw	r22,28(sp)
   146d0:	dd400617 	ldw	r21,24(sp)
   146d4:	dd000517 	ldw	r20,20(sp)
   146d8:	dcc00417 	ldw	r19,16(sp)
   146dc:	dc800317 	ldw	r18,12(sp)
   146e0:	dc400217 	ldw	r17,8(sp)
   146e4:	dc000117 	ldw	r16,4(sp)
   146e8:	dec00b04 	addi	sp,sp,44
   146ec:	f800283a 	ret
   146f0:	a0800117 	ldw	r2,4(r20)
   146f4:	80c00017 	ldw	r3,0(r16)
   146f8:	10bfffc4 	addi	r2,r2,-1
   146fc:	15c01426 	beq	r2,r23,14750 <__call_exitprocs+0x154>
   14700:	80000015 	stw	zero,0(r16)
   14704:	183fde26 	beq	r3,zero,14680 <__call_exitprocs+0x84>
   14708:	95c8983a 	sll	r4,r18,r23
   1470c:	a0806217 	ldw	r2,392(r20)
   14710:	a5800117 	ldw	r22,4(r20)
   14714:	2084703a 	and	r2,r4,r2
   14718:	10000b26 	beq	r2,zero,14748 <__call_exitprocs+0x14c>
   1471c:	a0806317 	ldw	r2,396(r20)
   14720:	2088703a 	and	r4,r4,r2
   14724:	20000c1e 	bne	r4,zero,14758 <__call_exitprocs+0x15c>
   14728:	89400017 	ldw	r5,0(r17)
   1472c:	d9000017 	ldw	r4,0(sp)
   14730:	183ee83a 	callr	r3
   14734:	a0800117 	ldw	r2,4(r20)
   14738:	15bfbf1e 	bne	r2,r22,14638 <__call_exitprocs+0x3c>
   1473c:	98800017 	ldw	r2,0(r19)
   14740:	153fcf26 	beq	r2,r20,14680 <__call_exitprocs+0x84>
   14744:	003fbc06 	br	14638 <__call_exitprocs+0x3c>
   14748:	183ee83a 	callr	r3
   1474c:	003ff906 	br	14734 <__call_exitprocs+0x138>
   14750:	a5c00115 	stw	r23,4(r20)
   14754:	003feb06 	br	14704 <__call_exitprocs+0x108>
   14758:	89000017 	ldw	r4,0(r17)
   1475c:	183ee83a 	callr	r3
   14760:	003ff406 	br	14734 <__call_exitprocs+0x138>
   14764:	a0800017 	ldw	r2,0(r20)
   14768:	a027883a 	mov	r19,r20
   1476c:	1029883a 	mov	r20,r2
   14770:	003fb606 	br	1464c <__call_exitprocs+0x50>
   14774:	0005883a 	mov	r2,zero
   14778:	003ffb06 	br	14768 <__call_exitprocs+0x16c>

0001477c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1477c:	defffd04 	addi	sp,sp,-12
   14780:	df000215 	stw	fp,8(sp)
   14784:	df000204 	addi	fp,sp,8
   14788:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1478c:	0001883a 	nop
   14790:	e0bfff17 	ldw	r2,-4(fp)
   14794:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14798:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1479c:	10000226 	beq	r2,zero,147a8 <_exit+0x2c>
    ALT_SIM_FAIL();
   147a0:	002af070 	cmpltui	zero,zero,43969
   147a4:	00000106 	br	147ac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   147a8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   147ac:	003fff06 	br	147ac <_exit+0x30>
